
application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  0800c000  0800c000  0000c000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e88  0800c1e4  0800c1e4  0000c1e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0801506c  0801506c  0001506c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801510c  0801510c  00020160  2**0
                  CONTENTS
  4 .ARM          00000000  0801510c  0801510c  00020160  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801510c  0801510c  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801510c  0801510c  0001510c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015110  08015110  00015110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  08015114  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a8c  20000160  08015274  00020160  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bec  08015274  00020bec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020189  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010290  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003291  00000000  00000000  0003045c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f68  00000000  00000000  000336f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b48  00000000  00000000  00034658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d41b  00000000  00000000  000351a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012a76  00000000  00000000  000525bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009e811  00000000  00000000  00065031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003e40  00000000  00000000  00103844  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00107684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800c1e4 <__do_global_dtors_aux>:
 800c1e4:	b510      	push	{r4, lr}
 800c1e6:	4c05      	ldr	r4, [pc, #20]	; (800c1fc <__do_global_dtors_aux+0x18>)
 800c1e8:	7823      	ldrb	r3, [r4, #0]
 800c1ea:	b933      	cbnz	r3, 800c1fa <__do_global_dtors_aux+0x16>
 800c1ec:	4b04      	ldr	r3, [pc, #16]	; (800c200 <__do_global_dtors_aux+0x1c>)
 800c1ee:	b113      	cbz	r3, 800c1f6 <__do_global_dtors_aux+0x12>
 800c1f0:	4804      	ldr	r0, [pc, #16]	; (800c204 <__do_global_dtors_aux+0x20>)
 800c1f2:	f3af 8000 	nop.w
 800c1f6:	2301      	movs	r3, #1
 800c1f8:	7023      	strb	r3, [r4, #0]
 800c1fa:	bd10      	pop	{r4, pc}
 800c1fc:	20000160 	.word	0x20000160
 800c200:	00000000 	.word	0x00000000
 800c204:	08015054 	.word	0x08015054

0800c208 <frame_dummy>:
 800c208:	b508      	push	{r3, lr}
 800c20a:	4b03      	ldr	r3, [pc, #12]	; (800c218 <frame_dummy+0x10>)
 800c20c:	b11b      	cbz	r3, 800c216 <frame_dummy+0xe>
 800c20e:	4903      	ldr	r1, [pc, #12]	; (800c21c <frame_dummy+0x14>)
 800c210:	4803      	ldr	r0, [pc, #12]	; (800c220 <frame_dummy+0x18>)
 800c212:	f3af 8000 	nop.w
 800c216:	bd08      	pop	{r3, pc}
 800c218:	00000000 	.word	0x00000000
 800c21c:	20000164 	.word	0x20000164
 800c220:	08015054 	.word	0x08015054

0800c224 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800c224:	b480      	push	{r7}
 800c226:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c228:	4b04      	ldr	r3, [pc, #16]	; (800c23c <__NVIC_GetPriorityGrouping+0x18>)
 800c22a:	68db      	ldr	r3, [r3, #12]
 800c22c:	0a1b      	lsrs	r3, r3, #8
 800c22e:	f003 0307 	and.w	r3, r3, #7
}
 800c232:	4618      	mov	r0, r3
 800c234:	46bd      	mov	sp, r7
 800c236:	bc80      	pop	{r7}
 800c238:	4770      	bx	lr
 800c23a:	bf00      	nop
 800c23c:	e000ed00 	.word	0xe000ed00

0800c240 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c240:	b480      	push	{r7}
 800c242:	b083      	sub	sp, #12
 800c244:	af00      	add	r7, sp, #0
 800c246:	4603      	mov	r3, r0
 800c248:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c24a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	db0b      	blt.n	800c26a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c252:	79fb      	ldrb	r3, [r7, #7]
 800c254:	f003 021f 	and.w	r2, r3, #31
 800c258:	4906      	ldr	r1, [pc, #24]	; (800c274 <__NVIC_EnableIRQ+0x34>)
 800c25a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c25e:	095b      	lsrs	r3, r3, #5
 800c260:	2001      	movs	r0, #1
 800c262:	fa00 f202 	lsl.w	r2, r0, r2
 800c266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800c26a:	bf00      	nop
 800c26c:	370c      	adds	r7, #12
 800c26e:	46bd      	mov	sp, r7
 800c270:	bc80      	pop	{r7}
 800c272:	4770      	bx	lr
 800c274:	e000e100 	.word	0xe000e100

0800c278 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c278:	b480      	push	{r7}
 800c27a:	b083      	sub	sp, #12
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	4603      	mov	r3, r0
 800c280:	6039      	str	r1, [r7, #0]
 800c282:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	db0a      	blt.n	800c2a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	b2da      	uxtb	r2, r3
 800c290:	490c      	ldr	r1, [pc, #48]	; (800c2c4 <__NVIC_SetPriority+0x4c>)
 800c292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c296:	0112      	lsls	r2, r2, #4
 800c298:	b2d2      	uxtb	r2, r2
 800c29a:	440b      	add	r3, r1
 800c29c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800c2a0:	e00a      	b.n	800c2b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	b2da      	uxtb	r2, r3
 800c2a6:	4908      	ldr	r1, [pc, #32]	; (800c2c8 <__NVIC_SetPriority+0x50>)
 800c2a8:	79fb      	ldrb	r3, [r7, #7]
 800c2aa:	f003 030f 	and.w	r3, r3, #15
 800c2ae:	3b04      	subs	r3, #4
 800c2b0:	0112      	lsls	r2, r2, #4
 800c2b2:	b2d2      	uxtb	r2, r2
 800c2b4:	440b      	add	r3, r1
 800c2b6:	761a      	strb	r2, [r3, #24]
}
 800c2b8:	bf00      	nop
 800c2ba:	370c      	adds	r7, #12
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bc80      	pop	{r7}
 800c2c0:	4770      	bx	lr
 800c2c2:	bf00      	nop
 800c2c4:	e000e100 	.word	0xe000e100
 800c2c8:	e000ed00 	.word	0xe000ed00

0800c2cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c2cc:	b480      	push	{r7}
 800c2ce:	b089      	sub	sp, #36	; 0x24
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	60f8      	str	r0, [r7, #12]
 800c2d4:	60b9      	str	r1, [r7, #8]
 800c2d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	f003 0307 	and.w	r3, r3, #7
 800c2de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c2e0:	69fb      	ldr	r3, [r7, #28]
 800c2e2:	f1c3 0307 	rsb	r3, r3, #7
 800c2e6:	2b04      	cmp	r3, #4
 800c2e8:	bf28      	it	cs
 800c2ea:	2304      	movcs	r3, #4
 800c2ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c2ee:	69fb      	ldr	r3, [r7, #28]
 800c2f0:	3304      	adds	r3, #4
 800c2f2:	2b06      	cmp	r3, #6
 800c2f4:	d902      	bls.n	800c2fc <NVIC_EncodePriority+0x30>
 800c2f6:	69fb      	ldr	r3, [r7, #28]
 800c2f8:	3b03      	subs	r3, #3
 800c2fa:	e000      	b.n	800c2fe <NVIC_EncodePriority+0x32>
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c300:	f04f 32ff 	mov.w	r2, #4294967295
 800c304:	69bb      	ldr	r3, [r7, #24]
 800c306:	fa02 f303 	lsl.w	r3, r2, r3
 800c30a:	43da      	mvns	r2, r3
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	401a      	ands	r2, r3
 800c310:	697b      	ldr	r3, [r7, #20]
 800c312:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c314:	f04f 31ff 	mov.w	r1, #4294967295
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	fa01 f303 	lsl.w	r3, r1, r3
 800c31e:	43d9      	mvns	r1, r3
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c324:	4313      	orrs	r3, r2
         );
}
 800c326:	4618      	mov	r0, r3
 800c328:	3724      	adds	r7, #36	; 0x24
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bc80      	pop	{r7}
 800c32e:	4770      	bx	lr

0800c330 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 800c330:	b480      	push	{r7}
 800c332:	b085      	sub	sp, #20
 800c334:	af00      	add	r7, sp, #0
 800c336:	60f8      	str	r0, [r7, #12]
 800c338:	60b9      	str	r1, [r7, #8]
 800c33a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	3b01      	subs	r3, #1
 800c340:	4a0c      	ldr	r2, [pc, #48]	; (800c374 <LL_DMA_SetDataTransferDirection+0x44>)
 800c342:	5cd3      	ldrb	r3, [r2, r3]
 800c344:	461a      	mov	r2, r3
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	4413      	add	r3, r2
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c350:	f023 0310 	bic.w	r3, r3, #16
 800c354:	68ba      	ldr	r2, [r7, #8]
 800c356:	3a01      	subs	r2, #1
 800c358:	4906      	ldr	r1, [pc, #24]	; (800c374 <LL_DMA_SetDataTransferDirection+0x44>)
 800c35a:	5c8a      	ldrb	r2, [r1, r2]
 800c35c:	4611      	mov	r1, r2
 800c35e:	68fa      	ldr	r2, [r7, #12]
 800c360:	440a      	add	r2, r1
 800c362:	4611      	mov	r1, r2
 800c364:	687a      	ldr	r2, [r7, #4]
 800c366:	4313      	orrs	r3, r2
 800c368:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 800c36a:	bf00      	nop
 800c36c:	3714      	adds	r7, #20
 800c36e:	46bd      	mov	sp, r7
 800c370:	bc80      	pop	{r7}
 800c372:	4770      	bx	lr
 800c374:	080150b0 	.word	0x080150b0

0800c378 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 800c378:	b480      	push	{r7}
 800c37a:	b085      	sub	sp, #20
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	60f8      	str	r0, [r7, #12]
 800c380:	60b9      	str	r1, [r7, #8]
 800c382:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	3b01      	subs	r3, #1
 800c388:	4a0b      	ldr	r2, [pc, #44]	; (800c3b8 <LL_DMA_SetMode+0x40>)
 800c38a:	5cd3      	ldrb	r3, [r2, r3]
 800c38c:	461a      	mov	r2, r3
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	4413      	add	r3, r2
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	f023 0220 	bic.w	r2, r3, #32
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	3b01      	subs	r3, #1
 800c39c:	4906      	ldr	r1, [pc, #24]	; (800c3b8 <LL_DMA_SetMode+0x40>)
 800c39e:	5ccb      	ldrb	r3, [r1, r3]
 800c3a0:	4619      	mov	r1, r3
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	440b      	add	r3, r1
 800c3a6:	4619      	mov	r1, r3
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	4313      	orrs	r3, r2
 800c3ac:	600b      	str	r3, [r1, #0]
             Mode);
}
 800c3ae:	bf00      	nop
 800c3b0:	3714      	adds	r7, #20
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bc80      	pop	{r7}
 800c3b6:	4770      	bx	lr
 800c3b8:	080150b0 	.word	0x080150b0

0800c3bc <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 800c3bc:	b480      	push	{r7}
 800c3be:	b085      	sub	sp, #20
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	60f8      	str	r0, [r7, #12]
 800c3c4:	60b9      	str	r1, [r7, #8]
 800c3c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	3b01      	subs	r3, #1
 800c3cc:	4a0b      	ldr	r2, [pc, #44]	; (800c3fc <LL_DMA_SetPeriphIncMode+0x40>)
 800c3ce:	5cd3      	ldrb	r3, [r2, r3]
 800c3d0:	461a      	mov	r2, r3
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	4413      	add	r3, r2
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	3b01      	subs	r3, #1
 800c3e0:	4906      	ldr	r1, [pc, #24]	; (800c3fc <LL_DMA_SetPeriphIncMode+0x40>)
 800c3e2:	5ccb      	ldrb	r3, [r1, r3]
 800c3e4:	4619      	mov	r1, r3
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	440b      	add	r3, r1
 800c3ea:	4619      	mov	r1, r3
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	4313      	orrs	r3, r2
 800c3f0:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 800c3f2:	bf00      	nop
 800c3f4:	3714      	adds	r7, #20
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bc80      	pop	{r7}
 800c3fa:	4770      	bx	lr
 800c3fc:	080150b0 	.word	0x080150b0

0800c400 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 800c400:	b480      	push	{r7}
 800c402:	b085      	sub	sp, #20
 800c404:	af00      	add	r7, sp, #0
 800c406:	60f8      	str	r0, [r7, #12]
 800c408:	60b9      	str	r1, [r7, #8]
 800c40a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 800c40c:	68bb      	ldr	r3, [r7, #8]
 800c40e:	3b01      	subs	r3, #1
 800c410:	4a0b      	ldr	r2, [pc, #44]	; (800c440 <LL_DMA_SetMemoryIncMode+0x40>)
 800c412:	5cd3      	ldrb	r3, [r2, r3]
 800c414:	461a      	mov	r2, r3
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	4413      	add	r3, r2
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c420:	68bb      	ldr	r3, [r7, #8]
 800c422:	3b01      	subs	r3, #1
 800c424:	4906      	ldr	r1, [pc, #24]	; (800c440 <LL_DMA_SetMemoryIncMode+0x40>)
 800c426:	5ccb      	ldrb	r3, [r1, r3]
 800c428:	4619      	mov	r1, r3
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	440b      	add	r3, r1
 800c42e:	4619      	mov	r1, r3
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	4313      	orrs	r3, r2
 800c434:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 800c436:	bf00      	nop
 800c438:	3714      	adds	r7, #20
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bc80      	pop	{r7}
 800c43e:	4770      	bx	lr
 800c440:	080150b0 	.word	0x080150b0

0800c444 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 800c444:	b480      	push	{r7}
 800c446:	b085      	sub	sp, #20
 800c448:	af00      	add	r7, sp, #0
 800c44a:	60f8      	str	r0, [r7, #12]
 800c44c:	60b9      	str	r1, [r7, #8]
 800c44e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 800c450:	68bb      	ldr	r3, [r7, #8]
 800c452:	3b01      	subs	r3, #1
 800c454:	4a0b      	ldr	r2, [pc, #44]	; (800c484 <LL_DMA_SetPeriphSize+0x40>)
 800c456:	5cd3      	ldrb	r3, [r2, r3]
 800c458:	461a      	mov	r2, r3
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	4413      	add	r3, r2
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	3b01      	subs	r3, #1
 800c468:	4906      	ldr	r1, [pc, #24]	; (800c484 <LL_DMA_SetPeriphSize+0x40>)
 800c46a:	5ccb      	ldrb	r3, [r1, r3]
 800c46c:	4619      	mov	r1, r3
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	440b      	add	r3, r1
 800c472:	4619      	mov	r1, r3
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	4313      	orrs	r3, r2
 800c478:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 800c47a:	bf00      	nop
 800c47c:	3714      	adds	r7, #20
 800c47e:	46bd      	mov	sp, r7
 800c480:	bc80      	pop	{r7}
 800c482:	4770      	bx	lr
 800c484:	080150b0 	.word	0x080150b0

0800c488 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 800c488:	b480      	push	{r7}
 800c48a:	b085      	sub	sp, #20
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	60f8      	str	r0, [r7, #12]
 800c490:	60b9      	str	r1, [r7, #8]
 800c492:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	3b01      	subs	r3, #1
 800c498:	4a0b      	ldr	r2, [pc, #44]	; (800c4c8 <LL_DMA_SetMemorySize+0x40>)
 800c49a:	5cd3      	ldrb	r3, [r2, r3]
 800c49c:	461a      	mov	r2, r3
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	4413      	add	r3, r2
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	3b01      	subs	r3, #1
 800c4ac:	4906      	ldr	r1, [pc, #24]	; (800c4c8 <LL_DMA_SetMemorySize+0x40>)
 800c4ae:	5ccb      	ldrb	r3, [r1, r3]
 800c4b0:	4619      	mov	r1, r3
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	440b      	add	r3, r1
 800c4b6:	4619      	mov	r1, r3
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	4313      	orrs	r3, r2
 800c4bc:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 800c4be:	bf00      	nop
 800c4c0:	3714      	adds	r7, #20
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bc80      	pop	{r7}
 800c4c6:	4770      	bx	lr
 800c4c8:	080150b0 	.word	0x080150b0

0800c4cc <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 800c4cc:	b480      	push	{r7}
 800c4ce:	b085      	sub	sp, #20
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	60f8      	str	r0, [r7, #12]
 800c4d4:	60b9      	str	r1, [r7, #8]
 800c4d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 800c4d8:	68bb      	ldr	r3, [r7, #8]
 800c4da:	3b01      	subs	r3, #1
 800c4dc:	4a0b      	ldr	r2, [pc, #44]	; (800c50c <LL_DMA_SetChannelPriorityLevel+0x40>)
 800c4de:	5cd3      	ldrb	r3, [r2, r3]
 800c4e0:	461a      	mov	r2, r3
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	4413      	add	r3, r2
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	3b01      	subs	r3, #1
 800c4f0:	4906      	ldr	r1, [pc, #24]	; (800c50c <LL_DMA_SetChannelPriorityLevel+0x40>)
 800c4f2:	5ccb      	ldrb	r3, [r1, r3]
 800c4f4:	4619      	mov	r1, r3
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	440b      	add	r3, r1
 800c4fa:	4619      	mov	r1, r3
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	4313      	orrs	r3, r2
 800c500:	600b      	str	r3, [r1, #0]
             Priority);
}
 800c502:	bf00      	nop
 800c504:	3714      	adds	r7, #20
 800c506:	46bd      	mov	sp, r7
 800c508:	bc80      	pop	{r7}
 800c50a:	4770      	bx	lr
 800c50c:	080150b0 	.word	0x080150b0

0800c510 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 800c510:	b480      	push	{r7}
 800c512:	b085      	sub	sp, #20
 800c514:	af00      	add	r7, sp, #0
 800c516:	60f8      	str	r0, [r7, #12]
 800c518:	60b9      	str	r1, [r7, #8]
 800c51a:	607a      	str	r2, [r7, #4]
 800c51c:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 800c51e:	69bb      	ldr	r3, [r7, #24]
 800c520:	2b10      	cmp	r3, #16
 800c522:	d114      	bne.n	800c54e <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 800c524:	68bb      	ldr	r3, [r7, #8]
 800c526:	3b01      	subs	r3, #1
 800c528:	4a15      	ldr	r2, [pc, #84]	; (800c580 <LL_DMA_ConfigAddresses+0x70>)
 800c52a:	5cd3      	ldrb	r3, [r2, r3]
 800c52c:	461a      	mov	r2, r3
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	4413      	add	r3, r2
 800c532:	461a      	mov	r2, r3
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 800c538:	68bb      	ldr	r3, [r7, #8]
 800c53a:	3b01      	subs	r3, #1
 800c53c:	4a10      	ldr	r2, [pc, #64]	; (800c580 <LL_DMA_ConfigAddresses+0x70>)
 800c53e:	5cd3      	ldrb	r3, [r2, r3]
 800c540:	461a      	mov	r2, r3
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	4413      	add	r3, r2
 800c546:	461a      	mov	r2, r3
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
  }
}
 800c54c:	e013      	b.n	800c576 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	3b01      	subs	r3, #1
 800c552:	4a0b      	ldr	r2, [pc, #44]	; (800c580 <LL_DMA_ConfigAddresses+0x70>)
 800c554:	5cd3      	ldrb	r3, [r2, r3]
 800c556:	461a      	mov	r2, r3
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	4413      	add	r3, r2
 800c55c:	461a      	mov	r2, r3
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 800c562:	68bb      	ldr	r3, [r7, #8]
 800c564:	3b01      	subs	r3, #1
 800c566:	4a06      	ldr	r2, [pc, #24]	; (800c580 <LL_DMA_ConfigAddresses+0x70>)
 800c568:	5cd3      	ldrb	r3, [r2, r3]
 800c56a:	461a      	mov	r2, r3
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	4413      	add	r3, r2
 800c570:	461a      	mov	r2, r3
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	60d3      	str	r3, [r2, #12]
}
 800c576:	bf00      	nop
 800c578:	3714      	adds	r7, #20
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bc80      	pop	{r7}
 800c57e:	4770      	bx	lr
 800c580:	080150b0 	.word	0x080150b0

0800c584 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800c584:	b480      	push	{r7}
 800c586:	b083      	sub	sp, #12
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
 800c58c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	3b01      	subs	r3, #1
 800c592:	4a0a      	ldr	r2, [pc, #40]	; (800c5bc <LL_DMA_EnableIT_TC+0x38>)
 800c594:	5cd3      	ldrb	r3, [r2, r3]
 800c596:	461a      	mov	r2, r3
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	4413      	add	r3, r2
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	683a      	ldr	r2, [r7, #0]
 800c5a0:	3a01      	subs	r2, #1
 800c5a2:	4906      	ldr	r1, [pc, #24]	; (800c5bc <LL_DMA_EnableIT_TC+0x38>)
 800c5a4:	5c8a      	ldrb	r2, [r1, r2]
 800c5a6:	4611      	mov	r1, r2
 800c5a8:	687a      	ldr	r2, [r7, #4]
 800c5aa:	440a      	add	r2, r1
 800c5ac:	f043 0302 	orr.w	r3, r3, #2
 800c5b0:	6013      	str	r3, [r2, #0]
}
 800c5b2:	bf00      	nop
 800c5b4:	370c      	adds	r7, #12
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	bc80      	pop	{r7}
 800c5ba:	4770      	bx	lr
 800c5bc:	080150b0 	.word	0x080150b0

0800c5c0 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800c5c0:	b480      	push	{r7}
 800c5c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800c5c4:	4b04      	ldr	r3, [pc, #16]	; (800c5d8 <LL_RCC_HSE_Enable+0x18>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	4a03      	ldr	r2, [pc, #12]	; (800c5d8 <LL_RCC_HSE_Enable+0x18>)
 800c5ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c5ce:	6013      	str	r3, [r2, #0]
}
 800c5d0:	bf00      	nop
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bc80      	pop	{r7}
 800c5d6:	4770      	bx	lr
 800c5d8:	40021000 	.word	0x40021000

0800c5dc <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800c5dc:	b480      	push	{r7}
 800c5de:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 800c5e0:	4b06      	ldr	r3, [pc, #24]	; (800c5fc <LL_RCC_HSE_IsReady+0x20>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c5ec:	bf0c      	ite	eq
 800c5ee:	2301      	moveq	r3, #1
 800c5f0:	2300      	movne	r3, #0
 800c5f2:	b2db      	uxtb	r3, r3
}
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bc80      	pop	{r7}
 800c5fa:	4770      	bx	lr
 800c5fc:	40021000 	.word	0x40021000

0800c600 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800c600:	b480      	push	{r7}
 800c602:	b083      	sub	sp, #12
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800c608:	4b06      	ldr	r3, [pc, #24]	; (800c624 <LL_RCC_SetSysClkSource+0x24>)
 800c60a:	685b      	ldr	r3, [r3, #4]
 800c60c:	f023 0203 	bic.w	r2, r3, #3
 800c610:	4904      	ldr	r1, [pc, #16]	; (800c624 <LL_RCC_SetSysClkSource+0x24>)
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	4313      	orrs	r3, r2
 800c616:	604b      	str	r3, [r1, #4]
}
 800c618:	bf00      	nop
 800c61a:	370c      	adds	r7, #12
 800c61c:	46bd      	mov	sp, r7
 800c61e:	bc80      	pop	{r7}
 800c620:	4770      	bx	lr
 800c622:	bf00      	nop
 800c624:	40021000 	.word	0x40021000

0800c628 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800c628:	b480      	push	{r7}
 800c62a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800c62c:	4b03      	ldr	r3, [pc, #12]	; (800c63c <LL_RCC_GetSysClkSource+0x14>)
 800c62e:	685b      	ldr	r3, [r3, #4]
 800c630:	f003 030c 	and.w	r3, r3, #12
}
 800c634:	4618      	mov	r0, r3
 800c636:	46bd      	mov	sp, r7
 800c638:	bc80      	pop	{r7}
 800c63a:	4770      	bx	lr
 800c63c:	40021000 	.word	0x40021000

0800c640 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800c640:	b480      	push	{r7}
 800c642:	b083      	sub	sp, #12
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800c648:	4b06      	ldr	r3, [pc, #24]	; (800c664 <LL_RCC_SetAHBPrescaler+0x24>)
 800c64a:	685b      	ldr	r3, [r3, #4]
 800c64c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c650:	4904      	ldr	r1, [pc, #16]	; (800c664 <LL_RCC_SetAHBPrescaler+0x24>)
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	4313      	orrs	r3, r2
 800c656:	604b      	str	r3, [r1, #4]
}
 800c658:	bf00      	nop
 800c65a:	370c      	adds	r7, #12
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bc80      	pop	{r7}
 800c660:	4770      	bx	lr
 800c662:	bf00      	nop
 800c664:	40021000 	.word	0x40021000

0800c668 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800c668:	b480      	push	{r7}
 800c66a:	b083      	sub	sp, #12
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800c670:	4b06      	ldr	r3, [pc, #24]	; (800c68c <LL_RCC_SetAPB1Prescaler+0x24>)
 800c672:	685b      	ldr	r3, [r3, #4]
 800c674:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c678:	4904      	ldr	r1, [pc, #16]	; (800c68c <LL_RCC_SetAPB1Prescaler+0x24>)
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	4313      	orrs	r3, r2
 800c67e:	604b      	str	r3, [r1, #4]
}
 800c680:	bf00      	nop
 800c682:	370c      	adds	r7, #12
 800c684:	46bd      	mov	sp, r7
 800c686:	bc80      	pop	{r7}
 800c688:	4770      	bx	lr
 800c68a:	bf00      	nop
 800c68c:	40021000 	.word	0x40021000

0800c690 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800c690:	b480      	push	{r7}
 800c692:	b083      	sub	sp, #12
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800c698:	4b06      	ldr	r3, [pc, #24]	; (800c6b4 <LL_RCC_SetAPB2Prescaler+0x24>)
 800c69a:	685b      	ldr	r3, [r3, #4]
 800c69c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800c6a0:	4904      	ldr	r1, [pc, #16]	; (800c6b4 <LL_RCC_SetAPB2Prescaler+0x24>)
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	4313      	orrs	r3, r2
 800c6a6:	604b      	str	r3, [r1, #4]
}
 800c6a8:	bf00      	nop
 800c6aa:	370c      	adds	r7, #12
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bc80      	pop	{r7}
 800c6b0:	4770      	bx	lr
 800c6b2:	bf00      	nop
 800c6b4:	40021000 	.word	0x40021000

0800c6b8 <LL_RCC_SetUSBClockSource>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSBClockSource(uint32_t USBxSource)
{
 800c6b8:	b480      	push	{r7}
 800c6ba:	b083      	sub	sp, #12
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
#if defined(RCC_CFGR_USBPRE)
  MODIFY_REG(RCC->CFGR, RCC_CFGR_USBPRE, USBxSource);
 800c6c0:	4b06      	ldr	r3, [pc, #24]	; (800c6dc <LL_RCC_SetUSBClockSource+0x24>)
 800c6c2:	685b      	ldr	r3, [r3, #4]
 800c6c4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800c6c8:	4904      	ldr	r1, [pc, #16]	; (800c6dc <LL_RCC_SetUSBClockSource+0x24>)
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	4313      	orrs	r3, r2
 800c6ce:	604b      	str	r3, [r1, #4]
#else /*RCC_CFGR_OTGFSPRE*/
  MODIFY_REG(RCC->CFGR, RCC_CFGR_OTGFSPRE, USBxSource);
#endif /*RCC_CFGR_USBPRE*/
}
 800c6d0:	bf00      	nop
 800c6d2:	370c      	adds	r7, #12
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bc80      	pop	{r7}
 800c6d8:	4770      	bx	lr
 800c6da:	bf00      	nop
 800c6dc:	40021000 	.word	0x40021000

0800c6e0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800c6e4:	4b04      	ldr	r3, [pc, #16]	; (800c6f8 <LL_RCC_PLL_Enable+0x18>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	4a03      	ldr	r2, [pc, #12]	; (800c6f8 <LL_RCC_PLL_Enable+0x18>)
 800c6ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c6ee:	6013      	str	r3, [r2, #0]
}
 800c6f0:	bf00      	nop
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bc80      	pop	{r7}
 800c6f6:	4770      	bx	lr
 800c6f8:	40021000 	.word	0x40021000

0800c6fc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800c6fc:	b480      	push	{r7}
 800c6fe:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800c700:	4b06      	ldr	r3, [pc, #24]	; (800c71c <LL_RCC_PLL_IsReady+0x20>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c708:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c70c:	bf0c      	ite	eq
 800c70e:	2301      	moveq	r3, #1
 800c710:	2300      	movne	r3, #0
 800c712:	b2db      	uxtb	r3, r3
}
 800c714:	4618      	mov	r0, r3
 800c716:	46bd      	mov	sp, r7
 800c718:	bc80      	pop	{r7}
 800c71a:	4770      	bx	lr
 800c71c:	40021000 	.word	0x40021000

0800c720 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 800c720:	b480      	push	{r7}
 800c722:	b083      	sub	sp, #12
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
 800c728:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 800c72a:	4b08      	ldr	r3, [pc, #32]	; (800c74c <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 800c72c:	685b      	ldr	r3, [r3, #4]
 800c72e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	430b      	orrs	r3, r1
 800c73c:	4903      	ldr	r1, [pc, #12]	; (800c74c <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 800c73e:	4313      	orrs	r3, r2
 800c740:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 800c742:	bf00      	nop
 800c744:	370c      	adds	r7, #12
 800c746:	46bd      	mov	sp, r7
 800c748:	bc80      	pop	{r7}
 800c74a:	4770      	bx	lr
 800c74c:	40021000 	.word	0x40021000

0800c750 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800c750:	b480      	push	{r7}
 800c752:	b085      	sub	sp, #20
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 800c758:	4b08      	ldr	r3, [pc, #32]	; (800c77c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800c75a:	695a      	ldr	r2, [r3, #20]
 800c75c:	4907      	ldr	r1, [pc, #28]	; (800c77c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	4313      	orrs	r3, r2
 800c762:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800c764:	4b05      	ldr	r3, [pc, #20]	; (800c77c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800c766:	695a      	ldr	r2, [r3, #20]
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	4013      	ands	r3, r2
 800c76c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c76e:	68fb      	ldr	r3, [r7, #12]
}
 800c770:	bf00      	nop
 800c772:	3714      	adds	r7, #20
 800c774:	46bd      	mov	sp, r7
 800c776:	bc80      	pop	{r7}
 800c778:	4770      	bx	lr
 800c77a:	bf00      	nop
 800c77c:	40021000 	.word	0x40021000

0800c780 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800c780:	b480      	push	{r7}
 800c782:	b085      	sub	sp, #20
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800c788:	4b08      	ldr	r3, [pc, #32]	; (800c7ac <LL_APB1_GRP1_EnableClock+0x2c>)
 800c78a:	69da      	ldr	r2, [r3, #28]
 800c78c:	4907      	ldr	r1, [pc, #28]	; (800c7ac <LL_APB1_GRP1_EnableClock+0x2c>)
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	4313      	orrs	r3, r2
 800c792:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800c794:	4b05      	ldr	r3, [pc, #20]	; (800c7ac <LL_APB1_GRP1_EnableClock+0x2c>)
 800c796:	69da      	ldr	r2, [r3, #28]
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	4013      	ands	r3, r2
 800c79c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c79e:	68fb      	ldr	r3, [r7, #12]
}
 800c7a0:	bf00      	nop
 800c7a2:	3714      	adds	r7, #20
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bc80      	pop	{r7}
 800c7a8:	4770      	bx	lr
 800c7aa:	bf00      	nop
 800c7ac:	40021000 	.word	0x40021000

0800c7b0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800c7b0:	b480      	push	{r7}
 800c7b2:	b085      	sub	sp, #20
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800c7b8:	4b08      	ldr	r3, [pc, #32]	; (800c7dc <LL_APB2_GRP1_EnableClock+0x2c>)
 800c7ba:	699a      	ldr	r2, [r3, #24]
 800c7bc:	4907      	ldr	r1, [pc, #28]	; (800c7dc <LL_APB2_GRP1_EnableClock+0x2c>)
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	4313      	orrs	r3, r2
 800c7c2:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800c7c4:	4b05      	ldr	r3, [pc, #20]	; (800c7dc <LL_APB2_GRP1_EnableClock+0x2c>)
 800c7c6:	699a      	ldr	r2, [r3, #24]
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	4013      	ands	r3, r2
 800c7cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
}
 800c7d0:	bf00      	nop
 800c7d2:	3714      	adds	r7, #20
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bc80      	pop	{r7}
 800c7d8:	4770      	bx	lr
 800c7da:	bf00      	nop
 800c7dc:	40021000 	.word	0x40021000

0800c7e0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800c7e0:	b480      	push	{r7}
 800c7e2:	b083      	sub	sp, #12
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800c7e8:	4b06      	ldr	r3, [pc, #24]	; (800c804 <LL_FLASH_SetLatency+0x24>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	f023 0207 	bic.w	r2, r3, #7
 800c7f0:	4904      	ldr	r1, [pc, #16]	; (800c804 <LL_FLASH_SetLatency+0x24>)
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	4313      	orrs	r3, r2
 800c7f6:	600b      	str	r3, [r1, #0]
}
 800c7f8:	bf00      	nop
 800c7fa:	370c      	adds	r7, #12
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bc80      	pop	{r7}
 800c800:	4770      	bx	lr
 800c802:	bf00      	nop
 800c804:	40022000 	.word	0x40022000

0800c808 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800c808:	b480      	push	{r7}
 800c80a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800c80c:	4b03      	ldr	r3, [pc, #12]	; (800c81c <LL_FLASH_GetLatency+0x14>)
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	f003 0307 	and.w	r3, r3, #7
}
 800c814:	4618      	mov	r0, r3
 800c816:	46bd      	mov	sp, r7
 800c818:	bc80      	pop	{r7}
 800c81a:	4770      	bx	lr
 800c81c:	40022000 	.word	0x40022000

0800c820 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 800c820:	b480      	push	{r7}
 800c822:	b083      	sub	sp, #12
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	601a      	str	r2, [r3, #0]
}
 800c834:	bf00      	nop
 800c836:	370c      	adds	r7, #12
 800c838:	46bd      	mov	sp, r7
 800c83a:	bc80      	pop	{r7}
 800c83c:	4770      	bx	lr

0800c83e <LL_SPI_EnableDMAReq_TX>:
  * @rmtoll CR2          TXDMAEN       LL_SPI_EnableDMAReq_TX
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableDMAReq_TX(SPI_TypeDef *SPIx)
{
 800c83e:	b480      	push	{r7}
 800c840:	b083      	sub	sp, #12
 800c842:	af00      	add	r7, sp, #0
 800c844:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	685b      	ldr	r3, [r3, #4]
 800c84a:	f043 0202 	orr.w	r2, r3, #2
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	605a      	str	r2, [r3, #4]
}
 800c852:	bf00      	nop
 800c854:	370c      	adds	r7, #12
 800c856:	46bd      	mov	sp, r7
 800c858:	bc80      	pop	{r7}
 800c85a:	4770      	bx	lr

0800c85c <LL_SPI_DMA_GetRegAddr>:
  * @rmtoll DR           DR            LL_SPI_DMA_GetRegAddr
  * @param  SPIx SPI Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_SPI_DMA_GetRegAddr(SPI_TypeDef *SPIx)
{
 800c85c:	b480      	push	{r7}
 800c85e:	b083      	sub	sp, #12
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
  return (uint32_t) &(SPIx->DR);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	330c      	adds	r3, #12
}
 800c868:	4618      	mov	r0, r3
 800c86a:	370c      	adds	r7, #12
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bc80      	pop	{r7}
 800c870:	4770      	bx	lr

0800c872 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 800c872:	b480      	push	{r7}
 800c874:	b083      	sub	sp, #12
 800c876:	af00      	add	r7, sp, #0
 800c878:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	f043 0201 	orr.w	r2, r3, #1
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	601a      	str	r2, [r3, #0]
}
 800c886:	bf00      	nop
 800c888:	370c      	adds	r7, #12
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bc80      	pop	{r7}
 800c88e:	4770      	bx	lr

0800c890 <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 800c890:	b480      	push	{r7}
 800c892:	b083      	sub	sp, #12
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	601a      	str	r2, [r3, #0]
}
 800c8a4:	bf00      	nop
 800c8a6:	370c      	adds	r7, #12
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bc80      	pop	{r7}
 800c8ac:	4770      	bx	lr

0800c8ae <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 800c8ae:	b480      	push	{r7}
 800c8b0:	b083      	sub	sp, #12
 800c8b2:	af00      	add	r7, sp, #0
 800c8b4:	6078      	str	r0, [r7, #4]
 800c8b6:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	6a1a      	ldr	r2, [r3, #32]
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	431a      	orrs	r2, r3
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	621a      	str	r2, [r3, #32]
}
 800c8c4:	bf00      	nop
 800c8c6:	370c      	adds	r7, #12
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bc80      	pop	{r7}
 800c8cc:	4770      	bx	lr
	...

0800c8d0 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 800c8d0:	b480      	push	{r7}
 800c8d2:	b085      	sub	sp, #20
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
 800c8d8:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	2b01      	cmp	r3, #1
 800c8de:	d01c      	beq.n	800c91a <LL_TIM_OC_DisableFast+0x4a>
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	2b04      	cmp	r3, #4
 800c8e4:	d017      	beq.n	800c916 <LL_TIM_OC_DisableFast+0x46>
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	2b10      	cmp	r3, #16
 800c8ea:	d012      	beq.n	800c912 <LL_TIM_OC_DisableFast+0x42>
 800c8ec:	683b      	ldr	r3, [r7, #0]
 800c8ee:	2b40      	cmp	r3, #64	; 0x40
 800c8f0:	d00d      	beq.n	800c90e <LL_TIM_OC_DisableFast+0x3e>
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8f8:	d007      	beq.n	800c90a <LL_TIM_OC_DisableFast+0x3a>
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c900:	d101      	bne.n	800c906 <LL_TIM_OC_DisableFast+0x36>
 800c902:	2305      	movs	r3, #5
 800c904:	e00a      	b.n	800c91c <LL_TIM_OC_DisableFast+0x4c>
 800c906:	2306      	movs	r3, #6
 800c908:	e008      	b.n	800c91c <LL_TIM_OC_DisableFast+0x4c>
 800c90a:	2304      	movs	r3, #4
 800c90c:	e006      	b.n	800c91c <LL_TIM_OC_DisableFast+0x4c>
 800c90e:	2303      	movs	r3, #3
 800c910:	e004      	b.n	800c91c <LL_TIM_OC_DisableFast+0x4c>
 800c912:	2302      	movs	r3, #2
 800c914:	e002      	b.n	800c91c <LL_TIM_OC_DisableFast+0x4c>
 800c916:	2301      	movs	r3, #1
 800c918:	e000      	b.n	800c91c <LL_TIM_OC_DisableFast+0x4c>
 800c91a:	2300      	movs	r3, #0
 800c91c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	3318      	adds	r3, #24
 800c922:	4619      	mov	r1, r3
 800c924:	7bfb      	ldrb	r3, [r7, #15]
 800c926:	4a0a      	ldr	r2, [pc, #40]	; (800c950 <LL_TIM_OC_DisableFast+0x80>)
 800c928:	5cd3      	ldrb	r3, [r2, r3]
 800c92a:	440b      	add	r3, r1
 800c92c:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800c92e:	68bb      	ldr	r3, [r7, #8]
 800c930:	681a      	ldr	r2, [r3, #0]
 800c932:	7bfb      	ldrb	r3, [r7, #15]
 800c934:	4907      	ldr	r1, [pc, #28]	; (800c954 <LL_TIM_OC_DisableFast+0x84>)
 800c936:	5ccb      	ldrb	r3, [r1, r3]
 800c938:	4619      	mov	r1, r3
 800c93a:	2304      	movs	r3, #4
 800c93c:	408b      	lsls	r3, r1
 800c93e:	43db      	mvns	r3, r3
 800c940:	401a      	ands	r2, r3
 800c942:	68bb      	ldr	r3, [r7, #8]
 800c944:	601a      	str	r2, [r3, #0]

}
 800c946:	bf00      	nop
 800c948:	3714      	adds	r7, #20
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bc80      	pop	{r7}
 800c94e:	4770      	bx	lr
 800c950:	080150b8 	.word	0x080150b8
 800c954:	080150c0 	.word	0x080150c0

0800c958 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 800c958:	b480      	push	{r7}
 800c95a:	b085      	sub	sp, #20
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
 800c960:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	2b01      	cmp	r3, #1
 800c966:	d01c      	beq.n	800c9a2 <LL_TIM_OC_EnablePreload+0x4a>
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	2b04      	cmp	r3, #4
 800c96c:	d017      	beq.n	800c99e <LL_TIM_OC_EnablePreload+0x46>
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	2b10      	cmp	r3, #16
 800c972:	d012      	beq.n	800c99a <LL_TIM_OC_EnablePreload+0x42>
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	2b40      	cmp	r3, #64	; 0x40
 800c978:	d00d      	beq.n	800c996 <LL_TIM_OC_EnablePreload+0x3e>
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c980:	d007      	beq.n	800c992 <LL_TIM_OC_EnablePreload+0x3a>
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c988:	d101      	bne.n	800c98e <LL_TIM_OC_EnablePreload+0x36>
 800c98a:	2305      	movs	r3, #5
 800c98c:	e00a      	b.n	800c9a4 <LL_TIM_OC_EnablePreload+0x4c>
 800c98e:	2306      	movs	r3, #6
 800c990:	e008      	b.n	800c9a4 <LL_TIM_OC_EnablePreload+0x4c>
 800c992:	2304      	movs	r3, #4
 800c994:	e006      	b.n	800c9a4 <LL_TIM_OC_EnablePreload+0x4c>
 800c996:	2303      	movs	r3, #3
 800c998:	e004      	b.n	800c9a4 <LL_TIM_OC_EnablePreload+0x4c>
 800c99a:	2302      	movs	r3, #2
 800c99c:	e002      	b.n	800c9a4 <LL_TIM_OC_EnablePreload+0x4c>
 800c99e:	2301      	movs	r3, #1
 800c9a0:	e000      	b.n	800c9a4 <LL_TIM_OC_EnablePreload+0x4c>
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	3318      	adds	r3, #24
 800c9aa:	4619      	mov	r1, r3
 800c9ac:	7bfb      	ldrb	r3, [r7, #15]
 800c9ae:	4a0a      	ldr	r2, [pc, #40]	; (800c9d8 <LL_TIM_OC_EnablePreload+0x80>)
 800c9b0:	5cd3      	ldrb	r3, [r2, r3]
 800c9b2:	440b      	add	r3, r1
 800c9b4:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800c9b6:	68bb      	ldr	r3, [r7, #8]
 800c9b8:	681a      	ldr	r2, [r3, #0]
 800c9ba:	7bfb      	ldrb	r3, [r7, #15]
 800c9bc:	4907      	ldr	r1, [pc, #28]	; (800c9dc <LL_TIM_OC_EnablePreload+0x84>)
 800c9be:	5ccb      	ldrb	r3, [r1, r3]
 800c9c0:	4619      	mov	r1, r3
 800c9c2:	2308      	movs	r3, #8
 800c9c4:	408b      	lsls	r3, r1
 800c9c6:	431a      	orrs	r2, r3
 800c9c8:	68bb      	ldr	r3, [r7, #8]
 800c9ca:	601a      	str	r2, [r3, #0]
}
 800c9cc:	bf00      	nop
 800c9ce:	3714      	adds	r7, #20
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	bc80      	pop	{r7}
 800c9d4:	4770      	bx	lr
 800c9d6:	bf00      	nop
 800c9d8:	080150b8 	.word	0x080150b8
 800c9dc:	080150c0 	.word	0x080150c0

0800c9e0 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800c9e0:	b480      	push	{r7}
 800c9e2:	b083      	sub	sp, #12
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
 800c9e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	683a      	ldr	r2, [r7, #0]
 800c9ee:	641a      	str	r2, [r3, #64]	; 0x40
}
 800c9f0:	bf00      	nop
 800c9f2:	370c      	adds	r7, #12
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bc80      	pop	{r7}
 800c9f8:	4770      	bx	lr

0800c9fa <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 800c9fa:	b480      	push	{r7}
 800c9fc:	b083      	sub	sp, #12
 800c9fe:	af00      	add	r7, sp, #0
 800ca00:	6078      	str	r0, [r7, #4]
 800ca02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	689b      	ldr	r3, [r3, #8]
 800ca08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ca0c:	f023 0307 	bic.w	r3, r3, #7
 800ca10:	683a      	ldr	r2, [r7, #0]
 800ca12:	431a      	orrs	r2, r3
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	609a      	str	r2, [r3, #8]
}
 800ca18:	bf00      	nop
 800ca1a:	370c      	adds	r7, #12
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bc80      	pop	{r7}
 800ca20:	4770      	bx	lr

0800ca22 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 800ca22:	b480      	push	{r7}
 800ca24:	b083      	sub	sp, #12
 800ca26:	af00      	add	r7, sp, #0
 800ca28:	6078      	str	r0, [r7, #4]
 800ca2a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	685b      	ldr	r3, [r3, #4]
 800ca30:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	431a      	orrs	r2, r3
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	605a      	str	r2, [r3, #4]
}
 800ca3c:	bf00      	nop
 800ca3e:	370c      	adds	r7, #12
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bc80      	pop	{r7}
 800ca44:	4770      	bx	lr

0800ca46 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 800ca46:	b480      	push	{r7}
 800ca48:	b083      	sub	sp, #12
 800ca4a:	af00      	add	r7, sp, #0
 800ca4c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	689b      	ldr	r3, [r3, #8]
 800ca52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	609a      	str	r2, [r3, #8]
}
 800ca5a:	bf00      	nop
 800ca5c:	370c      	adds	r7, #12
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bc80      	pop	{r7}
 800ca62:	4770      	bx	lr

0800ca64 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 800ca64:	b480      	push	{r7}
 800ca66:	b083      	sub	sp, #12
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	f06f 0201 	mvn.w	r2, #1
 800ca72:	611a      	str	r2, [r3, #16]
}
 800ca74:	bf00      	nop
 800ca76:	370c      	adds	r7, #12
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bc80      	pop	{r7}
 800ca7c:	4770      	bx	lr

0800ca7e <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 800ca7e:	b480      	push	{r7}
 800ca80:	b083      	sub	sp, #12
 800ca82:	af00      	add	r7, sp, #0
 800ca84:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	68db      	ldr	r3, [r3, #12]
 800ca8a:	f043 0201 	orr.w	r2, r3, #1
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	60da      	str	r2, [r3, #12]
}
 800ca92:	bf00      	nop
 800ca94:	370c      	adds	r7, #12
 800ca96:	46bd      	mov	sp, r7
 800ca98:	bc80      	pop	{r7}
 800ca9a:	4770      	bx	lr

0800ca9c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800ca9c:	b480      	push	{r7}
 800ca9e:	b083      	sub	sp, #12
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
 800caa4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	0a1b      	lsrs	r3, r3, #8
 800caaa:	b29a      	uxth	r2, r3
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	615a      	str	r2, [r3, #20]
}
 800cab0:	bf00      	nop
 800cab2:	370c      	adds	r7, #12
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bc80      	pop	{r7}
 800cab8:	4770      	bx	lr

0800caba <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800caba:	b480      	push	{r7}
 800cabc:	b085      	sub	sp, #20
 800cabe:	af00      	add	r7, sp, #0
 800cac0:	6078      	str	r0, [r7, #4]
 800cac2:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	68db      	ldr	r3, [r3, #12]
 800cac8:	60fb      	str	r3, [r7, #12]
  uint32_t pinmask = ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	0a1b      	lsrs	r3, r3, #8
 800cace:	b29b      	uxth	r3, r3
 800cad0:	60bb      	str	r3, [r7, #8]
  WRITE_REG(GPIOx->BSRR, ((odr & pinmask) << 16u) | (~odr & pinmask));
 800cad2:	68fa      	ldr	r2, [r7, #12]
 800cad4:	68bb      	ldr	r3, [r7, #8]
 800cad6:	4013      	ands	r3, r2
 800cad8:	041a      	lsls	r2, r3, #16
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	43d9      	mvns	r1, r3
 800cade:	68bb      	ldr	r3, [r7, #8]
 800cae0:	400b      	ands	r3, r1
 800cae2:	431a      	orrs	r2, r3
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	611a      	str	r2, [r3, #16]
}
 800cae8:	bf00      	nop
 800caea:	3714      	adds	r7, #20
 800caec:	46bd      	mov	sp, r7
 800caee:	bc80      	pop	{r7}
 800caf0:	4770      	bx	lr
	...

0800caf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800caf4:	b590      	push	{r4, r7, lr}
 800caf6:	b083      	sub	sp, #12
 800caf8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800cafa:	f000 fc63 	bl	800d3c4 <HAL_Init>
  //LL_DBGMCU_EnableDBGSleepMode();
  //LL_DBGMCU_APB1_GRP1_FreezePeriph(LL_DBGMCU_APB1_GRP1_TIM3_STOP | LL_DBGMCU_APB1_GRP1_TIM4_STOP);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800cafe:	f000 f849 	bl	800cb94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800cb02:	f000 f997 	bl	800ce34 <MX_GPIO_Init>
  MX_DMA_Init();
 800cb06:	f000 f97d 	bl	800ce04 <MX_DMA_Init>
  MX_SPI1_Init();
 800cb0a:	f000 f889 	bl	800cc20 <MX_SPI1_Init>
  MX_TIM3_Init();
 800cb0e:	f000 f8f9 	bl	800cd04 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 800cb12:	f007 fe17 	bl	8014744 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  LL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800cb16:	4919      	ldr	r1, [pc, #100]	; (800cb7c <main+0x88>)
 800cb18:	4819      	ldr	r0, [pc, #100]	; (800cb80 <main+0x8c>)
 800cb1a:	f7ff ffce 	bl	800caba <LL_GPIO_TogglePin>


  LL_TIM_EnableCounter(TIM3);
 800cb1e:	4819      	ldr	r0, [pc, #100]	; (800cb84 <main+0x90>)
 800cb20:	f7ff fea7 	bl	800c872 <LL_TIM_EnableCounter>
  LL_TIM_ClearFlag_UPDATE(TIM3);
 800cb24:	4817      	ldr	r0, [pc, #92]	; (800cb84 <main+0x90>)
 800cb26:	f7ff ff9d 	bl	800ca64 <LL_TIM_ClearFlag_UPDATE>
  LL_TIM_EnableIT_UPDATE(TIM3);
 800cb2a:	4816      	ldr	r0, [pc, #88]	; (800cb84 <main+0x90>)
 800cb2c:	f7ff ffa7 	bl	800ca7e <LL_TIM_EnableIT_UPDATE>
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800cb30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800cb34:	4813      	ldr	r0, [pc, #76]	; (800cb84 <main+0x90>)
 800cb36:	f7ff feba 	bl	800c8ae <LL_TIM_CC_EnableChannel>
  LL_TIM_OC_SetCompareCH4(TIM3, 170);//14000);
 800cb3a:	21aa      	movs	r1, #170	; 0xaa
 800cb3c:	4811      	ldr	r0, [pc, #68]	; (800cb84 <main+0x90>)
 800cb3e:	f7ff ff4f 	bl	800c9e0 <LL_TIM_OC_SetCompareCH4>

	cpToLPBuffer();
 800cb42:	f000 f9a3 	bl	800ce8c <cpToLPBuffer>
	  LP_buffer [4*i+3] = display_buffer[i][1];
  };
*/

  //LL_DMA_ConfigTransfer(DMAx, Channel, Configuration)
  LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_3, (uint32_t)&LP_buffer[4],LL_SPI_DMA_GetRegAddr(SPI1) ,LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800cb46:	4c10      	ldr	r4, [pc, #64]	; (800cb88 <main+0x94>)
 800cb48:	4810      	ldr	r0, [pc, #64]	; (800cb8c <main+0x98>)
 800cb4a:	f7ff fe87 	bl	800c85c <LL_SPI_DMA_GetRegAddr>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	2210      	movs	r2, #16
 800cb52:	9200      	str	r2, [sp, #0]
 800cb54:	4622      	mov	r2, r4
 800cb56:	2103      	movs	r1, #3
 800cb58:	480d      	ldr	r0, [pc, #52]	; (800cb90 <main+0x9c>)
 800cb5a:	f7ff fcd9 	bl	800c510 <LL_DMA_ConfigAddresses>

  //LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_3, (uint32_t *)LP_buffer);
  //LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_3, 4);

  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_3);
 800cb5e:	2103      	movs	r1, #3
 800cb60:	480b      	ldr	r0, [pc, #44]	; (800cb90 <main+0x9c>)
 800cb62:	f7ff fd0f 	bl	800c584 <LL_DMA_EnableIT_TC>
  LL_SPI_EnableDMAReq_TX(SPI1);
 800cb66:	4809      	ldr	r0, [pc, #36]	; (800cb8c <main+0x98>)
 800cb68:	f7ff fe69 	bl	800c83e <LL_SPI_EnableDMAReq_TX>
  //LL_SPI_EnableIT_TXE(SPI1);

  LL_SPI_Enable(SPI1);
 800cb6c:	4807      	ldr	r0, [pc, #28]	; (800cb8c <main+0x98>)
 800cb6e:	f7ff fe57 	bl	800c820 <LL_SPI_Enable>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  __WFI();
 800cb72:	bf30      	wfi
	  __NOP();
 800cb74:	bf00      	nop
	  __NOP();
 800cb76:	bf00      	nop
	  __WFI();
 800cb78:	e7fb      	b.n	800cb72 <main+0x7e>
 800cb7a:	bf00      	nop
 800cb7c:	04020002 	.word	0x04020002
 800cb80:	40010c00 	.word	0x40010c00
 800cb84:	40000400 	.word	0x40000400
 800cb88:	20000188 	.word	0x20000188
 800cb8c:	40013000 	.word	0x40013000
 800cb90:	40020000 	.word	0x40020000

0800cb94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 800cb98:	2002      	movs	r0, #2
 800cb9a:	f7ff fe21 	bl	800c7e0 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 800cb9e:	bf00      	nop
 800cba0:	f7ff fe32 	bl	800c808 <LL_FLASH_GetLatency>
 800cba4:	4603      	mov	r3, r0
 800cba6:	2b02      	cmp	r3, #2
 800cba8:	d1fa      	bne.n	800cba0 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 800cbaa:	f7ff fd09 	bl	800c5c0 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 800cbae:	bf00      	nop
 800cbb0:	f7ff fd14 	bl	800c5dc <LL_RCC_HSE_IsReady>
 800cbb4:	4603      	mov	r3, r0
 800cbb6:	2b01      	cmp	r3, #1
 800cbb8:	d1fa      	bne.n	800cbb0 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 800cbba:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 800cbbe:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800cbc2:	f7ff fdad 	bl	800c720 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 800cbc6:	f7ff fd8b 	bl	800c6e0 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800cbca:	bf00      	nop
 800cbcc:	f7ff fd96 	bl	800c6fc <LL_RCC_PLL_IsReady>
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	2b01      	cmp	r3, #1
 800cbd4:	d1fa      	bne.n	800cbcc <SystemClock_Config+0x38>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800cbd6:	2000      	movs	r0, #0
 800cbd8:	f7ff fd32 	bl	800c640 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 800cbdc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800cbe0:	f7ff fd42 	bl	800c668 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800cbe4:	2000      	movs	r0, #0
 800cbe6:	f7ff fd53 	bl	800c690 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800cbea:	2002      	movs	r0, #2
 800cbec:	f7ff fd08 	bl	800c600 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800cbf0:	bf00      	nop
 800cbf2:	f7ff fd19 	bl	800c628 <LL_RCC_GetSysClkSource>
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	2b08      	cmp	r3, #8
 800cbfa:	d1fa      	bne.n	800cbf2 <SystemClock_Config+0x5e>
  {

  }
  LL_SetSystemCoreClock(72000000);
 800cbfc:	4807      	ldr	r0, [pc, #28]	; (800cc1c <SystemClock_Config+0x88>)
 800cbfe:	f005 faeb 	bl	80121d8 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 800cc02:	200f      	movs	r0, #15
 800cc04:	f000 fbf4 	bl	800d3f0 <HAL_InitTick>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d001      	beq.n	800cc12 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800cc0e:	f000 f97f 	bl	800cf10 <Error_Handler>
  }
  LL_RCC_SetUSBClockSource(LL_RCC_USB_CLKSOURCE_PLL_DIV_1_5);
 800cc12:	2000      	movs	r0, #0
 800cc14:	f7ff fd50 	bl	800c6b8 <LL_RCC_SetUSBClockSource>
}
 800cc18:	bf00      	nop
 800cc1a:	bd80      	pop	{r7, pc}
 800cc1c:	044aa200 	.word	0x044aa200

0800cc20 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b090      	sub	sp, #64	; 0x40
 800cc24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800cc26:	f107 0318 	add.w	r3, r7, #24
 800cc2a:	2228      	movs	r2, #40	; 0x28
 800cc2c:	2100      	movs	r1, #0
 800cc2e:	4618      	mov	r0, r3
 800cc30:	f008 f9e4 	bl	8014ffc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cc34:	1d3b      	adds	r3, r7, #4
 800cc36:	2200      	movs	r2, #0
 800cc38:	601a      	str	r2, [r3, #0]
 800cc3a:	605a      	str	r2, [r3, #4]
 800cc3c:	609a      	str	r2, [r3, #8]
 800cc3e:	60da      	str	r2, [r3, #12]
 800cc40:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 800cc42:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800cc46:	f7ff fdb3 	bl	800c7b0 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800cc4a:	2004      	movs	r0, #4
 800cc4c:	f7ff fdb0 	bl	800c7b0 <LL_APB2_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_7;
 800cc50:	f24a 03a0 	movw	r3, #41120	; 0xa0a0
 800cc54:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800cc56:	2309      	movs	r3, #9
 800cc58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800cc5a:	2303      	movs	r3, #3
 800cc5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800cc5e:	2300      	movs	r3, #0
 800cc60:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cc62:	1d3b      	adds	r3, r7, #4
 800cc64:	4619      	mov	r1, r3
 800cc66:	4824      	ldr	r0, [pc, #144]	; (800ccf8 <MX_SPI1_Init+0xd8>)
 800cc68:	f002 fb64 	bl	800f334 <LL_GPIO_Init>

  /* SPI1 DMA Init */

  /* SPI1_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800cc6c:	2210      	movs	r2, #16
 800cc6e:	2103      	movs	r1, #3
 800cc70:	4822      	ldr	r0, [pc, #136]	; (800ccfc <MX_SPI1_Init+0xdc>)
 800cc72:	f7ff fb5d 	bl	800c330 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PRIORITY_LOW);
 800cc76:	2200      	movs	r2, #0
 800cc78:	2103      	movs	r1, #3
 800cc7a:	4820      	ldr	r0, [pc, #128]	; (800ccfc <MX_SPI1_Init+0xdc>)
 800cc7c:	f7ff fc26 	bl	800c4cc <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MODE_NORMAL);
 800cc80:	2200      	movs	r2, #0
 800cc82:	2103      	movs	r1, #3
 800cc84:	481d      	ldr	r0, [pc, #116]	; (800ccfc <MX_SPI1_Init+0xdc>)
 800cc86:	f7ff fb77 	bl	800c378 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PERIPH_NOINCREMENT);
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	2103      	movs	r1, #3
 800cc8e:	481b      	ldr	r0, [pc, #108]	; (800ccfc <MX_SPI1_Init+0xdc>)
 800cc90:	f7ff fb94 	bl	800c3bc <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MEMORY_INCREMENT);
 800cc94:	2280      	movs	r2, #128	; 0x80
 800cc96:	2103      	movs	r1, #3
 800cc98:	4818      	ldr	r0, [pc, #96]	; (800ccfc <MX_SPI1_Init+0xdc>)
 800cc9a:	f7ff fbb1 	bl	800c400 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_HALFWORD);
 800cc9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cca2:	2103      	movs	r1, #3
 800cca4:	4815      	ldr	r0, [pc, #84]	; (800ccfc <MX_SPI1_Init+0xdc>)
 800cca6:	f7ff fbcd 	bl	800c444 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_HALFWORD);
 800ccaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ccae:	2103      	movs	r1, #3
 800ccb0:	4812      	ldr	r0, [pc, #72]	; (800ccfc <MX_SPI1_Init+0xdc>)
 800ccb2:	f7ff fbe9 	bl	800c488 <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800ccba:	f44f 7382 	mov.w	r3, #260	; 0x104
 800ccbe:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_16BIT;
 800ccc0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ccc4:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 800ccca:	2300      	movs	r3, #0
 800cccc:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800ccce:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ccd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 800ccd4:	2310      	movs	r3, #16
 800ccd6:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800ccd8:	2300      	movs	r3, #0
 800ccda:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800ccdc:	2300      	movs	r3, #0
 800ccde:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 800cce0:	230a      	movs	r3, #10
 800cce2:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 800cce4:	f107 0318 	add.w	r3, r7, #24
 800cce8:	4619      	mov	r1, r3
 800ccea:	4805      	ldr	r0, [pc, #20]	; (800cd00 <MX_SPI1_Init+0xe0>)
 800ccec:	f002 fba9 	bl	800f442 <LL_SPI_Init>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800ccf0:	bf00      	nop
 800ccf2:	3740      	adds	r7, #64	; 0x40
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}
 800ccf8:	40010800 	.word	0x40010800
 800ccfc:	40020000 	.word	0x40020000
 800cd00:	40013000 	.word	0x40013000

0800cd04 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b092      	sub	sp, #72	; 0x48
 800cd08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800cd0a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800cd0e:	2200      	movs	r2, #0
 800cd10:	601a      	str	r2, [r3, #0]
 800cd12:	605a      	str	r2, [r3, #4]
 800cd14:	609a      	str	r2, [r3, #8]
 800cd16:	60da      	str	r2, [r3, #12]
 800cd18:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800cd1a:	f107 0314 	add.w	r3, r7, #20
 800cd1e:	2220      	movs	r2, #32
 800cd20:	2100      	movs	r1, #0
 800cd22:	4618      	mov	r0, r3
 800cd24:	f008 f96a 	bl	8014ffc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cd28:	463b      	mov	r3, r7
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	601a      	str	r2, [r3, #0]
 800cd2e:	605a      	str	r2, [r3, #4]
 800cd30:	609a      	str	r2, [r3, #8]
 800cd32:	60da      	str	r2, [r3, #12]
 800cd34:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 800cd36:	2002      	movs	r0, #2
 800cd38:	f7ff fd22 	bl	800c780 <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800cd3c:	f7ff fa72 	bl	800c224 <__NVIC_GetPriorityGrouping>
 800cd40:	4603      	mov	r3, r0
 800cd42:	2200      	movs	r2, #0
 800cd44:	2100      	movs	r1, #0
 800cd46:	4618      	mov	r0, r3
 800cd48:	f7ff fac0 	bl	800c2cc <NVIC_EncodePriority>
 800cd4c:	4603      	mov	r3, r0
 800cd4e:	4619      	mov	r1, r3
 800cd50:	201d      	movs	r0, #29
 800cd52:	f7ff fa91 	bl	800c278 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 800cd56:	201d      	movs	r0, #29
 800cd58:	f7ff fa72 	bl	800c240 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	86bb      	strh	r3, [r7, #52]	; 0x34
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800cd60:	2300      	movs	r3, #0
 800cd62:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_InitStruct.Autoreload = 30000-LL_TIM_IC_FILTER_FDIV1_N2;
 800cd64:	4b24      	ldr	r3, [pc, #144]	; (800cdf8 <MX_TIM3_Init+0xf4>)
 800cd66:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800cd68:	2300      	movs	r3, #0
 800cd6a:	643b      	str	r3, [r7, #64]	; 0x40
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 800cd6c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800cd70:	4619      	mov	r1, r3
 800cd72:	4822      	ldr	r0, [pc, #136]	; (800cdfc <MX_TIM3_Init+0xf8>)
 800cd74:	f002 fc22 	bl	800f5bc <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 800cd78:	4820      	ldr	r0, [pc, #128]	; (800cdfc <MX_TIM3_Init+0xf8>)
 800cd7a:	f7ff fd89 	bl	800c890 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 800cd7e:	2100      	movs	r1, #0
 800cd80:	481e      	ldr	r0, [pc, #120]	; (800cdfc <MX_TIM3_Init+0xf8>)
 800cd82:	f7ff fe3a 	bl	800c9fa <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 800cd86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800cd8a:	481c      	ldr	r0, [pc, #112]	; (800cdfc <MX_TIM3_Init+0xf8>)
 800cd8c:	f7ff fde4 	bl	800c958 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800cd90:	2360      	movs	r3, #96	; 0x60
 800cd92:	617b      	str	r3, [r7, #20]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800cd94:	2300      	movs	r3, #0
 800cd96:	61bb      	str	r3, [r7, #24]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800cd98:	2300      	movs	r3, #0
 800cd9a:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.CompareValue = 10000;
 800cd9c:	f242 7310 	movw	r3, #10000	; 0x2710
 800cda0:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800cda2:	2300      	movs	r3, #0
 800cda4:	627b      	str	r3, [r7, #36]	; 0x24
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 800cda6:	f107 0314 	add.w	r3, r7, #20
 800cdaa:	461a      	mov	r2, r3
 800cdac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800cdb0:	4812      	ldr	r0, [pc, #72]	; (800cdfc <MX_TIM3_Init+0xf8>)
 800cdb2:	f002 fc79 	bl	800f6a8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH4);
 800cdb6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800cdba:	4810      	ldr	r0, [pc, #64]	; (800cdfc <MX_TIM3_Init+0xf8>)
 800cdbc:	f7ff fd88 	bl	800c8d0 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 800cdc0:	2100      	movs	r1, #0
 800cdc2:	480e      	ldr	r0, [pc, #56]	; (800cdfc <MX_TIM3_Init+0xf8>)
 800cdc4:	f7ff fe2d 	bl	800ca22 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 800cdc8:	480c      	ldr	r0, [pc, #48]	; (800cdfc <MX_TIM3_Init+0xf8>)
 800cdca:	f7ff fe3c 	bl	800ca46 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 800cdce:	2008      	movs	r0, #8
 800cdd0:	f7ff fcee 	bl	800c7b0 <LL_APB2_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PB1   ------> TIM3_CH4
  */
  GPIO_InitStruct.Pin = LP_nOE_T3C4_Pin;
 800cdd4:	f240 2302 	movw	r3, #514	; 0x202
 800cdd8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800cdda:	2309      	movs	r3, #9
 800cddc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800cdde:	2302      	movs	r3, #2
 800cde0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800cde2:	2300      	movs	r3, #0
 800cde4:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(LP_nOE_T3C4_GPIO_Port, &GPIO_InitStruct);
 800cde6:	463b      	mov	r3, r7
 800cde8:	4619      	mov	r1, r3
 800cdea:	4805      	ldr	r0, [pc, #20]	; (800ce00 <MX_TIM3_Init+0xfc>)
 800cdec:	f002 faa2 	bl	800f334 <LL_GPIO_Init>

}
 800cdf0:	bf00      	nop
 800cdf2:	3748      	adds	r7, #72	; 0x48
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	bd80      	pop	{r7, pc}
 800cdf8:	fff07530 	.word	0xfff07530
 800cdfc:	40000400 	.word	0x40000400
 800ce00:	40010c00 	.word	0x40010c00

0800ce04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 800ce08:	2001      	movs	r0, #1
 800ce0a:	f7ff fca1 	bl	800c750 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800ce0e:	f7ff fa09 	bl	800c224 <__NVIC_GetPriorityGrouping>
 800ce12:	4603      	mov	r3, r0
 800ce14:	2200      	movs	r2, #0
 800ce16:	2100      	movs	r1, #0
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f7ff fa57 	bl	800c2cc <NVIC_EncodePriority>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	4619      	mov	r1, r3
 800ce22:	200d      	movs	r0, #13
 800ce24:	f7ff fa28 	bl	800c278 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800ce28:	200d      	movs	r0, #13
 800ce2a:	f7ff fa09 	bl	800c240 <__NVIC_EnableIRQ>

}
 800ce2e:	bf00      	nop
 800ce30:	bd80      	pop	{r7, pc}
	...

0800ce34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b086      	sub	sp, #24
 800ce38:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ce3a:	1d3b      	adds	r3, r7, #4
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	601a      	str	r2, [r3, #0]
 800ce40:	605a      	str	r2, [r3, #4]
 800ce42:	609a      	str	r2, [r3, #8]
 800ce44:	60da      	str	r2, [r3, #12]
 800ce46:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 800ce48:	2020      	movs	r0, #32
 800ce4a:	f7ff fcb1 	bl	800c7b0 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800ce4e:	2004      	movs	r0, #4
 800ce50:	f7ff fcae 	bl	800c7b0 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 800ce54:	2008      	movs	r0, #8
 800ce56:	f7ff fcab 	bl	800c7b0 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LP_LE_Pin|LP_MUX_A_Pin|LP_MUX_B_Pin|LP_MUX_BB14_Pin
 800ce5a:	490a      	ldr	r1, [pc, #40]	; (800ce84 <MX_GPIO_Init+0x50>)
 800ce5c:	480a      	ldr	r0, [pc, #40]	; (800ce88 <MX_GPIO_Init+0x54>)
 800ce5e:	f7ff fe1d 	bl	800ca9c <LL_GPIO_ResetOutputPin>
                          |LED_Pin);

  /**/
  GPIO_InitStruct.Pin = LP_LE_Pin|LP_MUX_A_Pin|LP_MUX_B_Pin|LP_MUX_BB14_Pin
 800ce62:	4b08      	ldr	r3, [pc, #32]	; (800ce84 <MX_GPIO_Init+0x50>)
 800ce64:	607b      	str	r3, [r7, #4]
                          |LED_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800ce66:	2301      	movs	r3, #1
 800ce68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800ce6a:	2302      	movs	r3, #2
 800ce6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800ce6e:	2300      	movs	r3, #0
 800ce70:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ce72:	1d3b      	adds	r3, r7, #4
 800ce74:	4619      	mov	r1, r3
 800ce76:	4804      	ldr	r0, [pc, #16]	; (800ce88 <MX_GPIO_Init+0x54>)
 800ce78:	f002 fa5c 	bl	800f334 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800ce7c:	bf00      	nop
 800ce7e:	3718      	adds	r7, #24
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bd80      	pop	{r7, pc}
 800ce84:	04720173 	.word	0x04720173
 800ce88:	40010c00 	.word	0x40010c00

0800ce8c <cpToLPBuffer>:

/* USER CODE BEGIN 4 */
void cpToLPBuffer(void){
 800ce8c:	b480      	push	{r7}
 800ce8e:	b083      	sub	sp, #12
 800ce90:	af00      	add	r7, sp, #0
  //update LP buffer
  //nthStr - 2*16 + (nth+8)Str - 2*16
  	for (uint8_t i=0;i<8;i++){
 800ce92:	2300      	movs	r3, #0
 800ce94:	71fb      	strb	r3, [r7, #7]
 800ce96:	e02e      	b.n	800cef6 <cpToLPBuffer+0x6a>
	LP_buffer [4*i] = display_buffer[i+8][0];
 800ce98:	79fb      	ldrb	r3, [r7, #7]
 800ce9a:	f103 0208 	add.w	r2, r3, #8
 800ce9e:	79fb      	ldrb	r3, [r7, #7]
 800cea0:	009b      	lsls	r3, r3, #2
 800cea2:	4919      	ldr	r1, [pc, #100]	; (800cf08 <cpToLPBuffer+0x7c>)
 800cea4:	f831 1022 	ldrh.w	r1, [r1, r2, lsl #2]
 800cea8:	4a18      	ldr	r2, [pc, #96]	; (800cf0c <cpToLPBuffer+0x80>)
 800ceaa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	LP_buffer [4*i+1] = display_buffer[i+8][1];
 800ceae:	79fb      	ldrb	r3, [r7, #7]
 800ceb0:	3308      	adds	r3, #8
 800ceb2:	79fa      	ldrb	r2, [r7, #7]
 800ceb4:	0092      	lsls	r2, r2, #2
 800ceb6:	3201      	adds	r2, #1
 800ceb8:	4913      	ldr	r1, [pc, #76]	; (800cf08 <cpToLPBuffer+0x7c>)
 800ceba:	009b      	lsls	r3, r3, #2
 800cebc:	440b      	add	r3, r1
 800cebe:	8859      	ldrh	r1, [r3, #2]
 800cec0:	4b12      	ldr	r3, [pc, #72]	; (800cf0c <cpToLPBuffer+0x80>)
 800cec2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	LP_buffer [4*i+2] = display_buffer[i][0];
 800cec6:	79fa      	ldrb	r2, [r7, #7]
 800cec8:	79fb      	ldrb	r3, [r7, #7]
 800ceca:	009b      	lsls	r3, r3, #2
 800cecc:	3302      	adds	r3, #2
 800cece:	490e      	ldr	r1, [pc, #56]	; (800cf08 <cpToLPBuffer+0x7c>)
 800ced0:	f831 1022 	ldrh.w	r1, [r1, r2, lsl #2]
 800ced4:	4a0d      	ldr	r2, [pc, #52]	; (800cf0c <cpToLPBuffer+0x80>)
 800ced6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	LP_buffer [4*i+3] = display_buffer[i][1];
 800ceda:	79fb      	ldrb	r3, [r7, #7]
 800cedc:	79fa      	ldrb	r2, [r7, #7]
 800cede:	0092      	lsls	r2, r2, #2
 800cee0:	3203      	adds	r2, #3
 800cee2:	4909      	ldr	r1, [pc, #36]	; (800cf08 <cpToLPBuffer+0x7c>)
 800cee4:	009b      	lsls	r3, r3, #2
 800cee6:	440b      	add	r3, r1
 800cee8:	8859      	ldrh	r1, [r3, #2]
 800ceea:	4b08      	ldr	r3, [pc, #32]	; (800cf0c <cpToLPBuffer+0x80>)
 800ceec:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  	for (uint8_t i=0;i<8;i++){
 800cef0:	79fb      	ldrb	r3, [r7, #7]
 800cef2:	3301      	adds	r3, #1
 800cef4:	71fb      	strb	r3, [r7, #7]
 800cef6:	79fb      	ldrb	r3, [r7, #7]
 800cef8:	2b07      	cmp	r3, #7
 800cefa:	d9cd      	bls.n	800ce98 <cpToLPBuffer+0xc>
  };
};
 800cefc:	bf00      	nop
 800cefe:	bf00      	nop
 800cf00:	370c      	adds	r7, #12
 800cf02:	46bd      	mov	sp, r7
 800cf04:	bc80      	pop	{r7}
 800cf06:	4770      	bx	lr
 800cf08:	20000000 	.word	0x20000000
 800cf0c:	20000180 	.word	0x20000180

0800cf10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800cf10:	b480      	push	{r7}
 800cf12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800cf14:	b672      	cpsid	i
}
 800cf16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800cf18:	e7fe      	b.n	800cf18 <Error_Handler+0x8>
	...

0800cf1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800cf1c:	b480      	push	{r7}
 800cf1e:	b085      	sub	sp, #20
 800cf20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800cf22:	4b15      	ldr	r3, [pc, #84]	; (800cf78 <HAL_MspInit+0x5c>)
 800cf24:	699b      	ldr	r3, [r3, #24]
 800cf26:	4a14      	ldr	r2, [pc, #80]	; (800cf78 <HAL_MspInit+0x5c>)
 800cf28:	f043 0301 	orr.w	r3, r3, #1
 800cf2c:	6193      	str	r3, [r2, #24]
 800cf2e:	4b12      	ldr	r3, [pc, #72]	; (800cf78 <HAL_MspInit+0x5c>)
 800cf30:	699b      	ldr	r3, [r3, #24]
 800cf32:	f003 0301 	and.w	r3, r3, #1
 800cf36:	60bb      	str	r3, [r7, #8]
 800cf38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800cf3a:	4b0f      	ldr	r3, [pc, #60]	; (800cf78 <HAL_MspInit+0x5c>)
 800cf3c:	69db      	ldr	r3, [r3, #28]
 800cf3e:	4a0e      	ldr	r2, [pc, #56]	; (800cf78 <HAL_MspInit+0x5c>)
 800cf40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cf44:	61d3      	str	r3, [r2, #28]
 800cf46:	4b0c      	ldr	r3, [pc, #48]	; (800cf78 <HAL_MspInit+0x5c>)
 800cf48:	69db      	ldr	r3, [r3, #28]
 800cf4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cf4e:	607b      	str	r3, [r7, #4]
 800cf50:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800cf52:	4b0a      	ldr	r3, [pc, #40]	; (800cf7c <HAL_MspInit+0x60>)
 800cf54:	685b      	ldr	r3, [r3, #4]
 800cf56:	60fb      	str	r3, [r7, #12]
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800cf5e:	60fb      	str	r3, [r7, #12]
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800cf66:	60fb      	str	r3, [r7, #12]
 800cf68:	4a04      	ldr	r2, [pc, #16]	; (800cf7c <HAL_MspInit+0x60>)
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800cf6e:	bf00      	nop
 800cf70:	3714      	adds	r7, #20
 800cf72:	46bd      	mov	sp, r7
 800cf74:	bc80      	pop	{r7}
 800cf76:	4770      	bx	lr
 800cf78:	40021000 	.word	0x40021000
 800cf7c:	40010000 	.word	0x40010000

0800cf80 <LL_DMA_EnableChannel>:
{
 800cf80:	b480      	push	{r7}
 800cf82:	b083      	sub	sp, #12
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
 800cf88:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800cf8a:	683b      	ldr	r3, [r7, #0]
 800cf8c:	3b01      	subs	r3, #1
 800cf8e:	4a0a      	ldr	r2, [pc, #40]	; (800cfb8 <LL_DMA_EnableChannel+0x38>)
 800cf90:	5cd3      	ldrb	r3, [r2, r3]
 800cf92:	461a      	mov	r2, r3
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	4413      	add	r3, r2
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	683a      	ldr	r2, [r7, #0]
 800cf9c:	3a01      	subs	r2, #1
 800cf9e:	4906      	ldr	r1, [pc, #24]	; (800cfb8 <LL_DMA_EnableChannel+0x38>)
 800cfa0:	5c8a      	ldrb	r2, [r1, r2]
 800cfa2:	4611      	mov	r1, r2
 800cfa4:	687a      	ldr	r2, [r7, #4]
 800cfa6:	440a      	add	r2, r1
 800cfa8:	f043 0301 	orr.w	r3, r3, #1
 800cfac:	6013      	str	r3, [r2, #0]
}
 800cfae:	bf00      	nop
 800cfb0:	370c      	adds	r7, #12
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bc80      	pop	{r7}
 800cfb6:	4770      	bx	lr
 800cfb8:	080150c8 	.word	0x080150c8

0800cfbc <LL_DMA_DisableChannel>:
{
 800cfbc:	b480      	push	{r7}
 800cfbe:	b083      	sub	sp, #12
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
 800cfc4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800cfc6:	683b      	ldr	r3, [r7, #0]
 800cfc8:	3b01      	subs	r3, #1
 800cfca:	4a0a      	ldr	r2, [pc, #40]	; (800cff4 <LL_DMA_DisableChannel+0x38>)
 800cfcc:	5cd3      	ldrb	r3, [r2, r3]
 800cfce:	461a      	mov	r2, r3
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	4413      	add	r3, r2
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	683a      	ldr	r2, [r7, #0]
 800cfd8:	3a01      	subs	r2, #1
 800cfda:	4906      	ldr	r1, [pc, #24]	; (800cff4 <LL_DMA_DisableChannel+0x38>)
 800cfdc:	5c8a      	ldrb	r2, [r1, r2]
 800cfde:	4611      	mov	r1, r2
 800cfe0:	687a      	ldr	r2, [r7, #4]
 800cfe2:	440a      	add	r2, r1
 800cfe4:	f023 0301 	bic.w	r3, r3, #1
 800cfe8:	6013      	str	r3, [r2, #0]
}
 800cfea:	bf00      	nop
 800cfec:	370c      	adds	r7, #12
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bc80      	pop	{r7}
 800cff2:	4770      	bx	lr
 800cff4:	080150c8 	.word	0x080150c8

0800cff8 <LL_DMA_SetDataLength>:
{
 800cff8:	b480      	push	{r7}
 800cffa:	b085      	sub	sp, #20
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	60f8      	str	r0, [r7, #12]
 800d000:	60b9      	str	r1, [r7, #8]
 800d002:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 800d004:	68bb      	ldr	r3, [r7, #8]
 800d006:	3b01      	subs	r3, #1
 800d008:	4a0b      	ldr	r2, [pc, #44]	; (800d038 <LL_DMA_SetDataLength+0x40>)
 800d00a:	5cd3      	ldrb	r3, [r2, r3]
 800d00c:	461a      	mov	r2, r3
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	4413      	add	r3, r2
 800d012:	685b      	ldr	r3, [r3, #4]
 800d014:	0c1b      	lsrs	r3, r3, #16
 800d016:	041b      	lsls	r3, r3, #16
 800d018:	68ba      	ldr	r2, [r7, #8]
 800d01a:	3a01      	subs	r2, #1
 800d01c:	4906      	ldr	r1, [pc, #24]	; (800d038 <LL_DMA_SetDataLength+0x40>)
 800d01e:	5c8a      	ldrb	r2, [r1, r2]
 800d020:	4611      	mov	r1, r2
 800d022:	68fa      	ldr	r2, [r7, #12]
 800d024:	440a      	add	r2, r1
 800d026:	4611      	mov	r1, r2
 800d028:	687a      	ldr	r2, [r7, #4]
 800d02a:	4313      	orrs	r3, r2
 800d02c:	604b      	str	r3, [r1, #4]
}
 800d02e:	bf00      	nop
 800d030:	3714      	adds	r7, #20
 800d032:	46bd      	mov	sp, r7
 800d034:	bc80      	pop	{r7}
 800d036:	4770      	bx	lr
 800d038:	080150c8 	.word	0x080150c8

0800d03c <LL_DMA_ConfigAddresses>:
{
 800d03c:	b480      	push	{r7}
 800d03e:	b085      	sub	sp, #20
 800d040:	af00      	add	r7, sp, #0
 800d042:	60f8      	str	r0, [r7, #12]
 800d044:	60b9      	str	r1, [r7, #8]
 800d046:	607a      	str	r2, [r7, #4]
 800d048:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 800d04a:	69bb      	ldr	r3, [r7, #24]
 800d04c:	2b10      	cmp	r3, #16
 800d04e:	d114      	bne.n	800d07a <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 800d050:	68bb      	ldr	r3, [r7, #8]
 800d052:	3b01      	subs	r3, #1
 800d054:	4a15      	ldr	r2, [pc, #84]	; (800d0ac <LL_DMA_ConfigAddresses+0x70>)
 800d056:	5cd3      	ldrb	r3, [r2, r3]
 800d058:	461a      	mov	r2, r3
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	4413      	add	r3, r2
 800d05e:	461a      	mov	r2, r3
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 800d064:	68bb      	ldr	r3, [r7, #8]
 800d066:	3b01      	subs	r3, #1
 800d068:	4a10      	ldr	r2, [pc, #64]	; (800d0ac <LL_DMA_ConfigAddresses+0x70>)
 800d06a:	5cd3      	ldrb	r3, [r2, r3]
 800d06c:	461a      	mov	r2, r3
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	4413      	add	r3, r2
 800d072:	461a      	mov	r2, r3
 800d074:	683b      	ldr	r3, [r7, #0]
 800d076:	6093      	str	r3, [r2, #8]
}
 800d078:	e013      	b.n	800d0a2 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 800d07a:	68bb      	ldr	r3, [r7, #8]
 800d07c:	3b01      	subs	r3, #1
 800d07e:	4a0b      	ldr	r2, [pc, #44]	; (800d0ac <LL_DMA_ConfigAddresses+0x70>)
 800d080:	5cd3      	ldrb	r3, [r2, r3]
 800d082:	461a      	mov	r2, r3
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	4413      	add	r3, r2
 800d088:	461a      	mov	r2, r3
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 800d08e:	68bb      	ldr	r3, [r7, #8]
 800d090:	3b01      	subs	r3, #1
 800d092:	4a06      	ldr	r2, [pc, #24]	; (800d0ac <LL_DMA_ConfigAddresses+0x70>)
 800d094:	5cd3      	ldrb	r3, [r2, r3]
 800d096:	461a      	mov	r2, r3
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	4413      	add	r3, r2
 800d09c:	461a      	mov	r2, r3
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	60d3      	str	r3, [r2, #12]
}
 800d0a2:	bf00      	nop
 800d0a4:	3714      	adds	r7, #20
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bc80      	pop	{r7}
 800d0aa:	4770      	bx	lr
 800d0ac:	080150c8 	.word	0x080150c8

0800d0b0 <LL_DMA_IsActiveFlag_TC3>:
{
 800d0b0:	b480      	push	{r7}
 800d0b2:	b083      	sub	sp, #12
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF3) == (DMA_ISR_TCIF3));
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d0c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d0c4:	bf0c      	ite	eq
 800d0c6:	2301      	moveq	r3, #1
 800d0c8:	2300      	movne	r3, #0
 800d0ca:	b2db      	uxtb	r3, r3
}
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	370c      	adds	r7, #12
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bc80      	pop	{r7}
 800d0d4:	4770      	bx	lr

0800d0d6 <LL_DMA_ClearFlag_TC3>:
{
 800d0d6:	b480      	push	{r7}
 800d0d8:	b083      	sub	sp, #12
 800d0da:	af00      	add	r7, sp, #0
 800d0dc:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF3);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d0e4:	605a      	str	r2, [r3, #4]
}
 800d0e6:	bf00      	nop
 800d0e8:	370c      	adds	r7, #12
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	bc80      	pop	{r7}
 800d0ee:	4770      	bx	lr

0800d0f0 <LL_SPI_IsActiveFlag_BSY>:
{
 800d0f0:	b480      	push	{r7}
 800d0f2:	b083      	sub	sp, #12
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	689b      	ldr	r3, [r3, #8]
 800d0fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d100:	2b80      	cmp	r3, #128	; 0x80
 800d102:	d101      	bne.n	800d108 <LL_SPI_IsActiveFlag_BSY+0x18>
 800d104:	2301      	movs	r3, #1
 800d106:	e000      	b.n	800d10a <LL_SPI_IsActiveFlag_BSY+0x1a>
 800d108:	2300      	movs	r3, #0
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	370c      	adds	r7, #12
 800d10e:	46bd      	mov	sp, r7
 800d110:	bc80      	pop	{r7}
 800d112:	4770      	bx	lr

0800d114 <LL_SPI_DMA_GetRegAddr>:
{
 800d114:	b480      	push	{r7}
 800d116:	b083      	sub	sp, #12
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
  return (uint32_t) &(SPIx->DR);
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	330c      	adds	r3, #12
}
 800d120:	4618      	mov	r0, r3
 800d122:	370c      	adds	r7, #12
 800d124:	46bd      	mov	sp, r7
 800d126:	bc80      	pop	{r7}
 800d128:	4770      	bx	lr

0800d12a <LL_TIM_ClearFlag_UPDATE>:
{
 800d12a:	b480      	push	{r7}
 800d12c:	b083      	sub	sp, #12
 800d12e:	af00      	add	r7, sp, #0
 800d130:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	f06f 0201 	mvn.w	r2, #1
 800d138:	611a      	str	r2, [r3, #16]
}
 800d13a:	bf00      	nop
 800d13c:	370c      	adds	r7, #12
 800d13e:	46bd      	mov	sp, r7
 800d140:	bc80      	pop	{r7}
 800d142:	4770      	bx	lr

0800d144 <LL_TIM_IsActiveFlag_UPDATE>:
{
 800d144:	b480      	push	{r7}
 800d146:	b083      	sub	sp, #12
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	691b      	ldr	r3, [r3, #16]
 800d150:	f003 0301 	and.w	r3, r3, #1
 800d154:	2b01      	cmp	r3, #1
 800d156:	d101      	bne.n	800d15c <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800d158:	2301      	movs	r3, #1
 800d15a:	e000      	b.n	800d15e <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 800d15c:	2300      	movs	r3, #0
}
 800d15e:	4618      	mov	r0, r3
 800d160:	370c      	adds	r7, #12
 800d162:	46bd      	mov	sp, r7
 800d164:	bc80      	pop	{r7}
 800d166:	4770      	bx	lr

0800d168 <LL_TIM_ClearFlag_CC4>:
{
 800d168:	b480      	push	{r7}
 800d16a:	b083      	sub	sp, #12
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC4IF));
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	f06f 0210 	mvn.w	r2, #16
 800d176:	611a      	str	r2, [r3, #16]
}
 800d178:	bf00      	nop
 800d17a:	370c      	adds	r7, #12
 800d17c:	46bd      	mov	sp, r7
 800d17e:	bc80      	pop	{r7}
 800d180:	4770      	bx	lr

0800d182 <LL_TIM_IsActiveFlag_CC4>:
{
 800d182:	b480      	push	{r7}
 800d184:	b083      	sub	sp, #12
 800d186:	af00      	add	r7, sp, #0
 800d188:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC4IF) == (TIM_SR_CC4IF)) ? 1UL : 0UL);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	691b      	ldr	r3, [r3, #16]
 800d18e:	f003 0310 	and.w	r3, r3, #16
 800d192:	2b10      	cmp	r3, #16
 800d194:	d101      	bne.n	800d19a <LL_TIM_IsActiveFlag_CC4+0x18>
 800d196:	2301      	movs	r3, #1
 800d198:	e000      	b.n	800d19c <LL_TIM_IsActiveFlag_CC4+0x1a>
 800d19a:	2300      	movs	r3, #0
}
 800d19c:	4618      	mov	r0, r3
 800d19e:	370c      	adds	r7, #12
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	bc80      	pop	{r7}
 800d1a4:	4770      	bx	lr

0800d1a6 <LL_GPIO_SetOutputPin>:
{
 800d1a6:	b480      	push	{r7}
 800d1a8:	b083      	sub	sp, #12
 800d1aa:	af00      	add	r7, sp, #0
 800d1ac:	6078      	str	r0, [r7, #4]
 800d1ae:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	0a1b      	lsrs	r3, r3, #8
 800d1b4:	b29a      	uxth	r2, r3
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	611a      	str	r2, [r3, #16]
}
 800d1ba:	bf00      	nop
 800d1bc:	370c      	adds	r7, #12
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bc80      	pop	{r7}
 800d1c2:	4770      	bx	lr

0800d1c4 <LL_GPIO_ResetOutputPin>:
{
 800d1c4:	b480      	push	{r7}
 800d1c6:	b083      	sub	sp, #12
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
 800d1cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	0a1b      	lsrs	r3, r3, #8
 800d1d2:	b29a      	uxth	r2, r3
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	615a      	str	r2, [r3, #20]
}
 800d1d8:	bf00      	nop
 800d1da:	370c      	adds	r7, #12
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	bc80      	pop	{r7}
 800d1e0:	4770      	bx	lr

0800d1e2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800d1e2:	b480      	push	{r7}
 800d1e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800d1e6:	e7fe      	b.n	800d1e6 <NMI_Handler+0x4>

0800d1e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d1e8:	b480      	push	{r7}
 800d1ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800d1ec:	e7fe      	b.n	800d1ec <HardFault_Handler+0x4>

0800d1ee <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800d1ee:	b480      	push	{r7}
 800d1f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800d1f2:	e7fe      	b.n	800d1f2 <MemManage_Handler+0x4>

0800d1f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800d1f4:	b480      	push	{r7}
 800d1f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800d1f8:	e7fe      	b.n	800d1f8 <BusFault_Handler+0x4>

0800d1fa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800d1fa:	b480      	push	{r7}
 800d1fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800d1fe:	e7fe      	b.n	800d1fe <UsageFault_Handler+0x4>

0800d200 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800d200:	b480      	push	{r7}
 800d202:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800d204:	bf00      	nop
 800d206:	46bd      	mov	sp, r7
 800d208:	bc80      	pop	{r7}
 800d20a:	4770      	bx	lr

0800d20c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800d20c:	b480      	push	{r7}
 800d20e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800d210:	bf00      	nop
 800d212:	46bd      	mov	sp, r7
 800d214:	bc80      	pop	{r7}
 800d216:	4770      	bx	lr

0800d218 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800d218:	b480      	push	{r7}
 800d21a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800d21c:	bf00      	nop
 800d21e:	46bd      	mov	sp, r7
 800d220:	bc80      	pop	{r7}
 800d222:	4770      	bx	lr

0800d224 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800d224:	b580      	push	{r7, lr}
 800d226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800d228:	f000 f912 	bl	800d450 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800d22c:	bf00      	nop
 800d22e:	bd80      	pop	{r7, pc}

0800d230 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC3(DMA1)){
 800d234:	480a      	ldr	r0, [pc, #40]	; (800d260 <DMA1_Channel3_IRQHandler+0x30>)
 800d236:	f7ff ff3b 	bl	800d0b0 <LL_DMA_IsActiveFlag_TC3>
 800d23a:	4603      	mov	r3, r0
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d00c      	beq.n	800d25a <DMA1_Channel3_IRQHandler+0x2a>
		LL_DMA_ClearFlag_TC3(DMA1);
 800d240:	4807      	ldr	r0, [pc, #28]	; (800d260 <DMA1_Channel3_IRQHandler+0x30>)
 800d242:	f7ff ff48 	bl	800d0d6 <LL_DMA_ClearFlag_TC3>
		  while(LL_SPI_IsActiveFlag_BSY(SPI1));
 800d246:	bf00      	nop
 800d248:	4806      	ldr	r0, [pc, #24]	; (800d264 <DMA1_Channel3_IRQHandler+0x34>)
 800d24a:	f7ff ff51 	bl	800d0f0 <LL_SPI_IsActiveFlag_BSY>
 800d24e:	4603      	mov	r3, r0
 800d250:	2b00      	cmp	r3, #0
 800d252:	d1f9      	bne.n	800d248 <DMA1_Channel3_IRQHandler+0x18>
		  LP_lock = 0;
 800d254:	4b04      	ldr	r3, [pc, #16]	; (800d268 <DMA1_Channel3_IRQHandler+0x38>)
 800d256:	2200      	movs	r2, #0
 800d258:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA1_Channel3_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800d25a:	bf00      	nop
 800d25c:	bd80      	pop	{r7, pc}
 800d25e:	bf00      	nop
 800d260:	40020000 	.word	0x40020000
 800d264:	40013000 	.word	0x40013000
 800d268:	2000017d 	.word	0x2000017d

0800d26c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800d270:	4802      	ldr	r0, [pc, #8]	; (800d27c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800d272:	f000 fb31 	bl	800d8d8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800d276:	bf00      	nop
 800d278:	bd80      	pop	{r7, pc}
 800d27a:	bf00      	nop
 800d27c:	2000068c 	.word	0x2000068c

0800d280 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800d280:	b590      	push	{r4, r7, lr}
 800d282:	b083      	sub	sp, #12
 800d284:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM3)){
 800d286:	482d      	ldr	r0, [pc, #180]	; (800d33c <TIM3_IRQHandler+0xbc>)
 800d288:	f7ff ff5c 	bl	800d144 <LL_TIM_IsActiveFlag_UPDATE>
 800d28c:	4603      	mov	r3, r0
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d046      	beq.n	800d320 <TIM3_IRQHandler+0xa0>

		LL_GPIO_SetOutputPin(LP_LE_GPIO_Port, LP_LE_Pin);
 800d292:	f240 1101 	movw	r1, #257	; 0x101
 800d296:	482a      	ldr	r0, [pc, #168]	; (800d340 <TIM3_IRQHandler+0xc0>)
 800d298:	f7ff ff85 	bl	800d1a6 <LL_GPIO_SetOutputPin>

		//LL_TIM_OC_SetMode(TIM3, LL_TIM_CHANNEL_CH4, LL_TIM_OCMODE_INACTIVE);
		GPIOB->BSRR = (str_cnt << 12u) | ((0x7-str_cnt) << (12u+16u));
 800d29c:	4b29      	ldr	r3, [pc, #164]	; (800d344 <TIM3_IRQHandler+0xc4>)
 800d29e:	781b      	ldrb	r3, [r3, #0]
 800d2a0:	031a      	lsls	r2, r3, #12
 800d2a2:	4b28      	ldr	r3, [pc, #160]	; (800d344 <TIM3_IRQHandler+0xc4>)
 800d2a4:	781b      	ldrb	r3, [r3, #0]
 800d2a6:	f1c3 0307 	rsb	r3, r3, #7
 800d2aa:	071b      	lsls	r3, r3, #28
 800d2ac:	431a      	orrs	r2, r3
 800d2ae:	4b24      	ldr	r3, [pc, #144]	; (800d340 <TIM3_IRQHandler+0xc0>)
 800d2b0:	611a      	str	r2, [r3, #16]

		LL_TIM_ClearFlag_UPDATE(TIM3);
 800d2b2:	4822      	ldr	r0, [pc, #136]	; (800d33c <TIM3_IRQHandler+0xbc>)
 800d2b4:	f7ff ff39 	bl	800d12a <LL_TIM_ClearFlag_UPDATE>

		LL_GPIO_ResetOutputPin(LP_LE_GPIO_Port, LP_LE_Pin);
 800d2b8:	f240 1101 	movw	r1, #257	; 0x101
 800d2bc:	4820      	ldr	r0, [pc, #128]	; (800d340 <TIM3_IRQHandler+0xc0>)
 800d2be:	f7ff ff81 	bl	800d1c4 <LL_GPIO_ResetOutputPin>

		str_cnt++;
 800d2c2:	4b20      	ldr	r3, [pc, #128]	; (800d344 <TIM3_IRQHandler+0xc4>)
 800d2c4:	781b      	ldrb	r3, [r3, #0]
 800d2c6:	3301      	adds	r3, #1
 800d2c8:	b2da      	uxtb	r2, r3
 800d2ca:	4b1e      	ldr	r3, [pc, #120]	; (800d344 <TIM3_IRQHandler+0xc4>)
 800d2cc:	701a      	strb	r2, [r3, #0]
		if (str_cnt >7) str_cnt = 0;
 800d2ce:	4b1d      	ldr	r3, [pc, #116]	; (800d344 <TIM3_IRQHandler+0xc4>)
 800d2d0:	781b      	ldrb	r3, [r3, #0]
 800d2d2:	2b07      	cmp	r3, #7
 800d2d4:	d902      	bls.n	800d2dc <TIM3_IRQHandler+0x5c>
 800d2d6:	4b1b      	ldr	r3, [pc, #108]	; (800d344 <TIM3_IRQHandler+0xc4>)
 800d2d8:	2200      	movs	r2, #0
 800d2da:	701a      	strb	r2, [r3, #0]
		LP_lock = 1;
 800d2dc:	4b1a      	ldr	r3, [pc, #104]	; (800d348 <TIM3_IRQHandler+0xc8>)
 800d2de:	2201      	movs	r2, #1
 800d2e0:	701a      	strb	r2, [r3, #0]
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_3);
 800d2e2:	2103      	movs	r1, #3
 800d2e4:	4819      	ldr	r0, [pc, #100]	; (800d34c <TIM3_IRQHandler+0xcc>)
 800d2e6:	f7ff fe69 	bl	800cfbc <LL_DMA_DisableChannel>
		LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_3, (uint32_t)&LP_buffer[4*str_cnt],LL_SPI_DMA_GetRegAddr(SPI1) ,LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800d2ea:	4b16      	ldr	r3, [pc, #88]	; (800d344 <TIM3_IRQHandler+0xc4>)
 800d2ec:	781b      	ldrb	r3, [r3, #0]
 800d2ee:	009b      	lsls	r3, r3, #2
 800d2f0:	005b      	lsls	r3, r3, #1
 800d2f2:	4a17      	ldr	r2, [pc, #92]	; (800d350 <TIM3_IRQHandler+0xd0>)
 800d2f4:	4413      	add	r3, r2
 800d2f6:	461c      	mov	r4, r3
 800d2f8:	4816      	ldr	r0, [pc, #88]	; (800d354 <TIM3_IRQHandler+0xd4>)
 800d2fa:	f7ff ff0b 	bl	800d114 <LL_SPI_DMA_GetRegAddr>
 800d2fe:	4603      	mov	r3, r0
 800d300:	2210      	movs	r2, #16
 800d302:	9200      	str	r2, [sp, #0]
 800d304:	4622      	mov	r2, r4
 800d306:	2103      	movs	r1, #3
 800d308:	4810      	ldr	r0, [pc, #64]	; (800d34c <TIM3_IRQHandler+0xcc>)
 800d30a:	f7ff fe97 	bl	800d03c <LL_DMA_ConfigAddresses>
		LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_3, 4);
 800d30e:	2204      	movs	r2, #4
 800d310:	2103      	movs	r1, #3
 800d312:	480e      	ldr	r0, [pc, #56]	; (800d34c <TIM3_IRQHandler+0xcc>)
 800d314:	f7ff fe70 	bl	800cff8 <LL_DMA_SetDataLength>
		LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_3);
 800d318:	2103      	movs	r1, #3
 800d31a:	480c      	ldr	r0, [pc, #48]	; (800d34c <TIM3_IRQHandler+0xcc>)
 800d31c:	f7ff fe30 	bl	800cf80 <LL_DMA_EnableChannel>




	};
	if(LL_TIM_IsActiveFlag_CC4(TIM4)){
 800d320:	480d      	ldr	r0, [pc, #52]	; (800d358 <TIM3_IRQHandler+0xd8>)
 800d322:	f7ff ff2e 	bl	800d182 <LL_TIM_IsActiveFlag_CC4>
 800d326:	4603      	mov	r3, r0
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d002      	beq.n	800d332 <TIM3_IRQHandler+0xb2>
		LL_TIM_ClearFlag_CC4(TIM3);
 800d32c:	4803      	ldr	r0, [pc, #12]	; (800d33c <TIM3_IRQHandler+0xbc>)
 800d32e:	f7ff ff1b 	bl	800d168 <LL_TIM_ClearFlag_CC4>

  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800d332:	bf00      	nop
 800d334:	3704      	adds	r7, #4
 800d336:	46bd      	mov	sp, r7
 800d338:	bd90      	pop	{r4, r7, pc}
 800d33a:	bf00      	nop
 800d33c:	40000400 	.word	0x40000400
 800d340:	40010c00 	.word	0x40010c00
 800d344:	2000017c 	.word	0x2000017c
 800d348:	2000017d 	.word	0x2000017d
 800d34c:	40020000 	.word	0x40020000
 800d350:	20000180 	.word	0x20000180
 800d354:	40013000 	.word	0x40013000
 800d358:	40000800 	.word	0x40000800

0800d35c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800d35c:	b480      	push	{r7}
 800d35e:	af00      	add	r7, sp, #0
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 800d360:	4b03      	ldr	r3, [pc, #12]	; (800d370 <SystemInit+0x14>)
 800d362:	4a04      	ldr	r2, [pc, #16]	; (800d374 <SystemInit+0x18>)
 800d364:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 800d366:	bf00      	nop
 800d368:	46bd      	mov	sp, r7
 800d36a:	bc80      	pop	{r7}
 800d36c:	4770      	bx	lr
 800d36e:	bf00      	nop
 800d370:	e000ed00 	.word	0xe000ed00
 800d374:	0800c000 	.word	0x0800c000

0800d378 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800d378:	f7ff fff0 	bl	800d35c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800d37c:	480b      	ldr	r0, [pc, #44]	; (800d3ac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800d37e:	490c      	ldr	r1, [pc, #48]	; (800d3b0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800d380:	4a0c      	ldr	r2, [pc, #48]	; (800d3b4 <LoopFillZerobss+0x16>)
  movs r3, #0
 800d382:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800d384:	e002      	b.n	800d38c <LoopCopyDataInit>

0800d386 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800d386:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800d388:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800d38a:	3304      	adds	r3, #4

0800d38c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800d38c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800d38e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800d390:	d3f9      	bcc.n	800d386 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800d392:	4a09      	ldr	r2, [pc, #36]	; (800d3b8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800d394:	4c09      	ldr	r4, [pc, #36]	; (800d3bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 800d396:	2300      	movs	r3, #0
  b LoopFillZerobss
 800d398:	e001      	b.n	800d39e <LoopFillZerobss>

0800d39a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800d39a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800d39c:	3204      	adds	r2, #4

0800d39e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800d39e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800d3a0:	d3fb      	bcc.n	800d39a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800d3a2:	f007 fe33 	bl	801500c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800d3a6:	f7ff fba5 	bl	800caf4 <main>
  bx lr
 800d3aa:	4770      	bx	lr
  ldr r0, =_sdata
 800d3ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800d3b0:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 800d3b4:	08015114 	.word	0x08015114
  ldr r2, =_sbss
 800d3b8:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 800d3bc:	20000bec 	.word	0x20000bec

0800d3c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800d3c0:	e7fe      	b.n	800d3c0 <ADC1_2_IRQHandler>
	...

0800d3c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800d3c8:	4b08      	ldr	r3, [pc, #32]	; (800d3ec <HAL_Init+0x28>)
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	4a07      	ldr	r2, [pc, #28]	; (800d3ec <HAL_Init+0x28>)
 800d3ce:	f043 0310 	orr.w	r3, r3, #16
 800d3d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800d3d4:	2003      	movs	r0, #3
 800d3d6:	f000 f919 	bl	800d60c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800d3da:	200f      	movs	r0, #15
 800d3dc:	f000 f808 	bl	800d3f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800d3e0:	f7ff fd9c 	bl	800cf1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800d3e4:	2300      	movs	r3, #0
}
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	bd80      	pop	{r7, pc}
 800d3ea:	bf00      	nop
 800d3ec:	40022000 	.word	0x40022000

0800d3f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b082      	sub	sp, #8
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800d3f8:	4b12      	ldr	r3, [pc, #72]	; (800d444 <HAL_InitTick+0x54>)
 800d3fa:	681a      	ldr	r2, [r3, #0]
 800d3fc:	4b12      	ldr	r3, [pc, #72]	; (800d448 <HAL_InitTick+0x58>)
 800d3fe:	781b      	ldrb	r3, [r3, #0]
 800d400:	4619      	mov	r1, r3
 800d402:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d406:	fbb3 f3f1 	udiv	r3, r3, r1
 800d40a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d40e:	4618      	mov	r0, r3
 800d410:	f000 f931 	bl	800d676 <HAL_SYSTICK_Config>
 800d414:	4603      	mov	r3, r0
 800d416:	2b00      	cmp	r3, #0
 800d418:	d001      	beq.n	800d41e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800d41a:	2301      	movs	r3, #1
 800d41c:	e00e      	b.n	800d43c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	2b0f      	cmp	r3, #15
 800d422:	d80a      	bhi.n	800d43a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800d424:	2200      	movs	r2, #0
 800d426:	6879      	ldr	r1, [r7, #4]
 800d428:	f04f 30ff 	mov.w	r0, #4294967295
 800d42c:	f000 f8f9 	bl	800d622 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800d430:	4a06      	ldr	r2, [pc, #24]	; (800d44c <HAL_InitTick+0x5c>)
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800d436:	2300      	movs	r3, #0
 800d438:	e000      	b.n	800d43c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800d43a:	2301      	movs	r3, #1
}
 800d43c:	4618      	mov	r0, r3
 800d43e:	3708      	adds	r7, #8
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}
 800d444:	20000040 	.word	0x20000040
 800d448:	20000048 	.word	0x20000048
 800d44c:	20000044 	.word	0x20000044

0800d450 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800d450:	b480      	push	{r7}
 800d452:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800d454:	4b05      	ldr	r3, [pc, #20]	; (800d46c <HAL_IncTick+0x1c>)
 800d456:	781b      	ldrb	r3, [r3, #0]
 800d458:	461a      	mov	r2, r3
 800d45a:	4b05      	ldr	r3, [pc, #20]	; (800d470 <HAL_IncTick+0x20>)
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	4413      	add	r3, r2
 800d460:	4a03      	ldr	r2, [pc, #12]	; (800d470 <HAL_IncTick+0x20>)
 800d462:	6013      	str	r3, [r2, #0]
}
 800d464:	bf00      	nop
 800d466:	46bd      	mov	sp, r7
 800d468:	bc80      	pop	{r7}
 800d46a:	4770      	bx	lr
 800d46c:	20000048 	.word	0x20000048
 800d470:	200001c0 	.word	0x200001c0

0800d474 <__NVIC_SetPriorityGrouping>:
{
 800d474:	b480      	push	{r7}
 800d476:	b085      	sub	sp, #20
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	f003 0307 	and.w	r3, r3, #7
 800d482:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800d484:	4b0c      	ldr	r3, [pc, #48]	; (800d4b8 <__NVIC_SetPriorityGrouping+0x44>)
 800d486:	68db      	ldr	r3, [r3, #12]
 800d488:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800d48a:	68ba      	ldr	r2, [r7, #8]
 800d48c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800d490:	4013      	ands	r3, r2
 800d492:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800d498:	68bb      	ldr	r3, [r7, #8]
 800d49a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800d49c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800d4a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d4a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800d4a6:	4a04      	ldr	r2, [pc, #16]	; (800d4b8 <__NVIC_SetPriorityGrouping+0x44>)
 800d4a8:	68bb      	ldr	r3, [r7, #8]
 800d4aa:	60d3      	str	r3, [r2, #12]
}
 800d4ac:	bf00      	nop
 800d4ae:	3714      	adds	r7, #20
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	bc80      	pop	{r7}
 800d4b4:	4770      	bx	lr
 800d4b6:	bf00      	nop
 800d4b8:	e000ed00 	.word	0xe000ed00

0800d4bc <__NVIC_GetPriorityGrouping>:
{
 800d4bc:	b480      	push	{r7}
 800d4be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800d4c0:	4b04      	ldr	r3, [pc, #16]	; (800d4d4 <__NVIC_GetPriorityGrouping+0x18>)
 800d4c2:	68db      	ldr	r3, [r3, #12]
 800d4c4:	0a1b      	lsrs	r3, r3, #8
 800d4c6:	f003 0307 	and.w	r3, r3, #7
}
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	bc80      	pop	{r7}
 800d4d0:	4770      	bx	lr
 800d4d2:	bf00      	nop
 800d4d4:	e000ed00 	.word	0xe000ed00

0800d4d8 <__NVIC_EnableIRQ>:
{
 800d4d8:	b480      	push	{r7}
 800d4da:	b083      	sub	sp, #12
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	4603      	mov	r3, r0
 800d4e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d4e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	db0b      	blt.n	800d502 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d4ea:	79fb      	ldrb	r3, [r7, #7]
 800d4ec:	f003 021f 	and.w	r2, r3, #31
 800d4f0:	4906      	ldr	r1, [pc, #24]	; (800d50c <__NVIC_EnableIRQ+0x34>)
 800d4f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d4f6:	095b      	lsrs	r3, r3, #5
 800d4f8:	2001      	movs	r0, #1
 800d4fa:	fa00 f202 	lsl.w	r2, r0, r2
 800d4fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800d502:	bf00      	nop
 800d504:	370c      	adds	r7, #12
 800d506:	46bd      	mov	sp, r7
 800d508:	bc80      	pop	{r7}
 800d50a:	4770      	bx	lr
 800d50c:	e000e100 	.word	0xe000e100

0800d510 <__NVIC_SetPriority>:
{
 800d510:	b480      	push	{r7}
 800d512:	b083      	sub	sp, #12
 800d514:	af00      	add	r7, sp, #0
 800d516:	4603      	mov	r3, r0
 800d518:	6039      	str	r1, [r7, #0]
 800d51a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d51c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d520:	2b00      	cmp	r3, #0
 800d522:	db0a      	blt.n	800d53a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	b2da      	uxtb	r2, r3
 800d528:	490c      	ldr	r1, [pc, #48]	; (800d55c <__NVIC_SetPriority+0x4c>)
 800d52a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d52e:	0112      	lsls	r2, r2, #4
 800d530:	b2d2      	uxtb	r2, r2
 800d532:	440b      	add	r3, r1
 800d534:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d538:	e00a      	b.n	800d550 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d53a:	683b      	ldr	r3, [r7, #0]
 800d53c:	b2da      	uxtb	r2, r3
 800d53e:	4908      	ldr	r1, [pc, #32]	; (800d560 <__NVIC_SetPriority+0x50>)
 800d540:	79fb      	ldrb	r3, [r7, #7]
 800d542:	f003 030f 	and.w	r3, r3, #15
 800d546:	3b04      	subs	r3, #4
 800d548:	0112      	lsls	r2, r2, #4
 800d54a:	b2d2      	uxtb	r2, r2
 800d54c:	440b      	add	r3, r1
 800d54e:	761a      	strb	r2, [r3, #24]
}
 800d550:	bf00      	nop
 800d552:	370c      	adds	r7, #12
 800d554:	46bd      	mov	sp, r7
 800d556:	bc80      	pop	{r7}
 800d558:	4770      	bx	lr
 800d55a:	bf00      	nop
 800d55c:	e000e100 	.word	0xe000e100
 800d560:	e000ed00 	.word	0xe000ed00

0800d564 <NVIC_EncodePriority>:
{
 800d564:	b480      	push	{r7}
 800d566:	b089      	sub	sp, #36	; 0x24
 800d568:	af00      	add	r7, sp, #0
 800d56a:	60f8      	str	r0, [r7, #12]
 800d56c:	60b9      	str	r1, [r7, #8]
 800d56e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	f003 0307 	and.w	r3, r3, #7
 800d576:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800d578:	69fb      	ldr	r3, [r7, #28]
 800d57a:	f1c3 0307 	rsb	r3, r3, #7
 800d57e:	2b04      	cmp	r3, #4
 800d580:	bf28      	it	cs
 800d582:	2304      	movcs	r3, #4
 800d584:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800d586:	69fb      	ldr	r3, [r7, #28]
 800d588:	3304      	adds	r3, #4
 800d58a:	2b06      	cmp	r3, #6
 800d58c:	d902      	bls.n	800d594 <NVIC_EncodePriority+0x30>
 800d58e:	69fb      	ldr	r3, [r7, #28]
 800d590:	3b03      	subs	r3, #3
 800d592:	e000      	b.n	800d596 <NVIC_EncodePriority+0x32>
 800d594:	2300      	movs	r3, #0
 800d596:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d598:	f04f 32ff 	mov.w	r2, #4294967295
 800d59c:	69bb      	ldr	r3, [r7, #24]
 800d59e:	fa02 f303 	lsl.w	r3, r2, r3
 800d5a2:	43da      	mvns	r2, r3
 800d5a4:	68bb      	ldr	r3, [r7, #8]
 800d5a6:	401a      	ands	r2, r3
 800d5a8:	697b      	ldr	r3, [r7, #20]
 800d5aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800d5ac:	f04f 31ff 	mov.w	r1, #4294967295
 800d5b0:	697b      	ldr	r3, [r7, #20]
 800d5b2:	fa01 f303 	lsl.w	r3, r1, r3
 800d5b6:	43d9      	mvns	r1, r3
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d5bc:	4313      	orrs	r3, r2
}
 800d5be:	4618      	mov	r0, r3
 800d5c0:	3724      	adds	r7, #36	; 0x24
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	bc80      	pop	{r7}
 800d5c6:	4770      	bx	lr

0800d5c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b082      	sub	sp, #8
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	3b01      	subs	r3, #1
 800d5d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d5d8:	d301      	bcc.n	800d5de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800d5da:	2301      	movs	r3, #1
 800d5dc:	e00f      	b.n	800d5fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800d5de:	4a0a      	ldr	r2, [pc, #40]	; (800d608 <SysTick_Config+0x40>)
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	3b01      	subs	r3, #1
 800d5e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800d5e6:	210f      	movs	r1, #15
 800d5e8:	f04f 30ff 	mov.w	r0, #4294967295
 800d5ec:	f7ff ff90 	bl	800d510 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800d5f0:	4b05      	ldr	r3, [pc, #20]	; (800d608 <SysTick_Config+0x40>)
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800d5f6:	4b04      	ldr	r3, [pc, #16]	; (800d608 <SysTick_Config+0x40>)
 800d5f8:	2207      	movs	r2, #7
 800d5fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800d5fc:	2300      	movs	r3, #0
}
 800d5fe:	4618      	mov	r0, r3
 800d600:	3708      	adds	r7, #8
 800d602:	46bd      	mov	sp, r7
 800d604:	bd80      	pop	{r7, pc}
 800d606:	bf00      	nop
 800d608:	e000e010 	.word	0xe000e010

0800d60c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b082      	sub	sp, #8
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	f7ff ff2d 	bl	800d474 <__NVIC_SetPriorityGrouping>
}
 800d61a:	bf00      	nop
 800d61c:	3708      	adds	r7, #8
 800d61e:	46bd      	mov	sp, r7
 800d620:	bd80      	pop	{r7, pc}

0800d622 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800d622:	b580      	push	{r7, lr}
 800d624:	b086      	sub	sp, #24
 800d626:	af00      	add	r7, sp, #0
 800d628:	4603      	mov	r3, r0
 800d62a:	60b9      	str	r1, [r7, #8]
 800d62c:	607a      	str	r2, [r7, #4]
 800d62e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800d630:	2300      	movs	r3, #0
 800d632:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800d634:	f7ff ff42 	bl	800d4bc <__NVIC_GetPriorityGrouping>
 800d638:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800d63a:	687a      	ldr	r2, [r7, #4]
 800d63c:	68b9      	ldr	r1, [r7, #8]
 800d63e:	6978      	ldr	r0, [r7, #20]
 800d640:	f7ff ff90 	bl	800d564 <NVIC_EncodePriority>
 800d644:	4602      	mov	r2, r0
 800d646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d64a:	4611      	mov	r1, r2
 800d64c:	4618      	mov	r0, r3
 800d64e:	f7ff ff5f 	bl	800d510 <__NVIC_SetPriority>
}
 800d652:	bf00      	nop
 800d654:	3718      	adds	r7, #24
 800d656:	46bd      	mov	sp, r7
 800d658:	bd80      	pop	{r7, pc}

0800d65a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800d65a:	b580      	push	{r7, lr}
 800d65c:	b082      	sub	sp, #8
 800d65e:	af00      	add	r7, sp, #0
 800d660:	4603      	mov	r3, r0
 800d662:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800d664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d668:	4618      	mov	r0, r3
 800d66a:	f7ff ff35 	bl	800d4d8 <__NVIC_EnableIRQ>
}
 800d66e:	bf00      	nop
 800d670:	3708      	adds	r7, #8
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}

0800d676 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800d676:	b580      	push	{r7, lr}
 800d678:	b082      	sub	sp, #8
 800d67a:	af00      	add	r7, sp, #0
 800d67c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800d67e:	6878      	ldr	r0, [r7, #4]
 800d680:	f7ff ffa2 	bl	800d5c8 <SysTick_Config>
 800d684:	4603      	mov	r3, r0
}
 800d686:	4618      	mov	r0, r3
 800d688:	3708      	adds	r7, #8
 800d68a:	46bd      	mov	sp, r7
 800d68c:	bd80      	pop	{r7, pc}

0800d68e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800d68e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d690:	b08b      	sub	sp, #44	; 0x2c
 800d692:	af06      	add	r7, sp, #24
 800d694:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d101      	bne.n	800d6a0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800d69c:	2301      	movs	r3, #1
 800d69e:	e0f1      	b.n	800d884 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800d6a6:	b2db      	uxtb	r3, r3
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d106      	bne.n	800d6ba <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800d6b4:	6878      	ldr	r0, [r7, #4]
 800d6b6:	f007 f9e1 	bl	8014a7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	2203      	movs	r2, #3
 800d6be:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	f002 f9fa 	bl	800fac0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	603b      	str	r3, [r7, #0]
 800d6d2:	687e      	ldr	r6, [r7, #4]
 800d6d4:	466d      	mov	r5, sp
 800d6d6:	f106 0410 	add.w	r4, r6, #16
 800d6da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d6dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d6de:	6823      	ldr	r3, [r4, #0]
 800d6e0:	602b      	str	r3, [r5, #0]
 800d6e2:	1d33      	adds	r3, r6, #4
 800d6e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d6e6:	6838      	ldr	r0, [r7, #0]
 800d6e8:	f002 f9c4 	bl	800fa74 <USB_CoreInit>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d005      	beq.n	800d6fe <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	2202      	movs	r2, #2
 800d6f6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800d6fa:	2301      	movs	r3, #1
 800d6fc:	e0c2      	b.n	800d884 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	2100      	movs	r1, #0
 800d704:	4618      	mov	r0, r3
 800d706:	f002 f9f5 	bl	800faf4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d70a:	2300      	movs	r3, #0
 800d70c:	73fb      	strb	r3, [r7, #15]
 800d70e:	e040      	b.n	800d792 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800d710:	7bfb      	ldrb	r3, [r7, #15]
 800d712:	6879      	ldr	r1, [r7, #4]
 800d714:	1c5a      	adds	r2, r3, #1
 800d716:	4613      	mov	r3, r2
 800d718:	009b      	lsls	r3, r3, #2
 800d71a:	4413      	add	r3, r2
 800d71c:	00db      	lsls	r3, r3, #3
 800d71e:	440b      	add	r3, r1
 800d720:	3301      	adds	r3, #1
 800d722:	2201      	movs	r2, #1
 800d724:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800d726:	7bfb      	ldrb	r3, [r7, #15]
 800d728:	6879      	ldr	r1, [r7, #4]
 800d72a:	1c5a      	adds	r2, r3, #1
 800d72c:	4613      	mov	r3, r2
 800d72e:	009b      	lsls	r3, r3, #2
 800d730:	4413      	add	r3, r2
 800d732:	00db      	lsls	r3, r3, #3
 800d734:	440b      	add	r3, r1
 800d736:	7bfa      	ldrb	r2, [r7, #15]
 800d738:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800d73a:	7bfb      	ldrb	r3, [r7, #15]
 800d73c:	6879      	ldr	r1, [r7, #4]
 800d73e:	1c5a      	adds	r2, r3, #1
 800d740:	4613      	mov	r3, r2
 800d742:	009b      	lsls	r3, r3, #2
 800d744:	4413      	add	r3, r2
 800d746:	00db      	lsls	r3, r3, #3
 800d748:	440b      	add	r3, r1
 800d74a:	3303      	adds	r3, #3
 800d74c:	2200      	movs	r2, #0
 800d74e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800d750:	7bfa      	ldrb	r2, [r7, #15]
 800d752:	6879      	ldr	r1, [r7, #4]
 800d754:	4613      	mov	r3, r2
 800d756:	009b      	lsls	r3, r3, #2
 800d758:	4413      	add	r3, r2
 800d75a:	00db      	lsls	r3, r3, #3
 800d75c:	440b      	add	r3, r1
 800d75e:	3338      	adds	r3, #56	; 0x38
 800d760:	2200      	movs	r2, #0
 800d762:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800d764:	7bfa      	ldrb	r2, [r7, #15]
 800d766:	6879      	ldr	r1, [r7, #4]
 800d768:	4613      	mov	r3, r2
 800d76a:	009b      	lsls	r3, r3, #2
 800d76c:	4413      	add	r3, r2
 800d76e:	00db      	lsls	r3, r3, #3
 800d770:	440b      	add	r3, r1
 800d772:	333c      	adds	r3, #60	; 0x3c
 800d774:	2200      	movs	r2, #0
 800d776:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800d778:	7bfa      	ldrb	r2, [r7, #15]
 800d77a:	6879      	ldr	r1, [r7, #4]
 800d77c:	4613      	mov	r3, r2
 800d77e:	009b      	lsls	r3, r3, #2
 800d780:	4413      	add	r3, r2
 800d782:	00db      	lsls	r3, r3, #3
 800d784:	440b      	add	r3, r1
 800d786:	3340      	adds	r3, #64	; 0x40
 800d788:	2200      	movs	r2, #0
 800d78a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d78c:	7bfb      	ldrb	r3, [r7, #15]
 800d78e:	3301      	adds	r3, #1
 800d790:	73fb      	strb	r3, [r7, #15]
 800d792:	7bfa      	ldrb	r2, [r7, #15]
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	685b      	ldr	r3, [r3, #4]
 800d798:	429a      	cmp	r2, r3
 800d79a:	d3b9      	bcc.n	800d710 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d79c:	2300      	movs	r3, #0
 800d79e:	73fb      	strb	r3, [r7, #15]
 800d7a0:	e044      	b.n	800d82c <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800d7a2:	7bfa      	ldrb	r2, [r7, #15]
 800d7a4:	6879      	ldr	r1, [r7, #4]
 800d7a6:	4613      	mov	r3, r2
 800d7a8:	009b      	lsls	r3, r3, #2
 800d7aa:	4413      	add	r3, r2
 800d7ac:	00db      	lsls	r3, r3, #3
 800d7ae:	440b      	add	r3, r1
 800d7b0:	f203 1369 	addw	r3, r3, #361	; 0x169
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800d7b8:	7bfa      	ldrb	r2, [r7, #15]
 800d7ba:	6879      	ldr	r1, [r7, #4]
 800d7bc:	4613      	mov	r3, r2
 800d7be:	009b      	lsls	r3, r3, #2
 800d7c0:	4413      	add	r3, r2
 800d7c2:	00db      	lsls	r3, r3, #3
 800d7c4:	440b      	add	r3, r1
 800d7c6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800d7ca:	7bfa      	ldrb	r2, [r7, #15]
 800d7cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800d7ce:	7bfa      	ldrb	r2, [r7, #15]
 800d7d0:	6879      	ldr	r1, [r7, #4]
 800d7d2:	4613      	mov	r3, r2
 800d7d4:	009b      	lsls	r3, r3, #2
 800d7d6:	4413      	add	r3, r2
 800d7d8:	00db      	lsls	r3, r3, #3
 800d7da:	440b      	add	r3, r1
 800d7dc:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800d7e4:	7bfa      	ldrb	r2, [r7, #15]
 800d7e6:	6879      	ldr	r1, [r7, #4]
 800d7e8:	4613      	mov	r3, r2
 800d7ea:	009b      	lsls	r3, r3, #2
 800d7ec:	4413      	add	r3, r2
 800d7ee:	00db      	lsls	r3, r3, #3
 800d7f0:	440b      	add	r3, r1
 800d7f2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800d7fa:	7bfa      	ldrb	r2, [r7, #15]
 800d7fc:	6879      	ldr	r1, [r7, #4]
 800d7fe:	4613      	mov	r3, r2
 800d800:	009b      	lsls	r3, r3, #2
 800d802:	4413      	add	r3, r2
 800d804:	00db      	lsls	r3, r3, #3
 800d806:	440b      	add	r3, r1
 800d808:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800d80c:	2200      	movs	r2, #0
 800d80e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800d810:	7bfa      	ldrb	r2, [r7, #15]
 800d812:	6879      	ldr	r1, [r7, #4]
 800d814:	4613      	mov	r3, r2
 800d816:	009b      	lsls	r3, r3, #2
 800d818:	4413      	add	r3, r2
 800d81a:	00db      	lsls	r3, r3, #3
 800d81c:	440b      	add	r3, r1
 800d81e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800d822:	2200      	movs	r2, #0
 800d824:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d826:	7bfb      	ldrb	r3, [r7, #15]
 800d828:	3301      	adds	r3, #1
 800d82a:	73fb      	strb	r3, [r7, #15]
 800d82c:	7bfa      	ldrb	r2, [r7, #15]
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	685b      	ldr	r3, [r3, #4]
 800d832:	429a      	cmp	r2, r3
 800d834:	d3b5      	bcc.n	800d7a2 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	603b      	str	r3, [r7, #0]
 800d83c:	687e      	ldr	r6, [r7, #4]
 800d83e:	466d      	mov	r5, sp
 800d840:	f106 0410 	add.w	r4, r6, #16
 800d844:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d846:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d848:	6823      	ldr	r3, [r4, #0]
 800d84a:	602b      	str	r3, [r5, #0]
 800d84c:	1d33      	adds	r3, r6, #4
 800d84e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d850:	6838      	ldr	r0, [r7, #0]
 800d852:	f002 f95b 	bl	800fb0c <USB_DevInit>
 800d856:	4603      	mov	r3, r0
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d005      	beq.n	800d868 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2202      	movs	r2, #2
 800d860:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800d864:	2301      	movs	r3, #1
 800d866:	e00d      	b.n	800d884 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	2200      	movs	r2, #0
 800d86c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	2201      	movs	r2, #1
 800d874:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	4618      	mov	r0, r3
 800d87e:	f004 fbf2 	bl	8012066 <USB_DevDisconnect>

  return HAL_OK;
 800d882:	2300      	movs	r3, #0
}
 800d884:	4618      	mov	r0, r3
 800d886:	3714      	adds	r7, #20
 800d888:	46bd      	mov	sp, r7
 800d88a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d88c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b082      	sub	sp, #8
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800d89a:	2b01      	cmp	r3, #1
 800d89c:	d101      	bne.n	800d8a2 <HAL_PCD_Start+0x16>
 800d89e:	2302      	movs	r3, #2
 800d8a0:	e016      	b.n	800d8d0 <HAL_PCD_Start+0x44>
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	2201      	movs	r2, #1
 800d8a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	f002 f8f0 	bl	800fa94 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800d8b4:	2101      	movs	r1, #1
 800d8b6:	6878      	ldr	r0, [r7, #4]
 800d8b8:	f007 fb69 	bl	8014f8e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	f004 fbc6 	bl	8012052 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800d8ce:	2300      	movs	r3, #0
}
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	3708      	adds	r7, #8
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	bd80      	pop	{r7, pc}

0800d8d8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b088      	sub	sp, #32
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	f004 fbc8 	bl	801207a <USB_ReadInterrupts>
 800d8ea:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800d8ec:	69bb      	ldr	r3, [r7, #24]
 800d8ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d003      	beq.n	800d8fe <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800d8f6:	6878      	ldr	r0, [r7, #4]
 800d8f8:	f000 fb48 	bl	800df8c <PCD_EP_ISR_Handler>

    return;
 800d8fc:	e119      	b.n	800db32 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800d8fe:	69bb      	ldr	r3, [r7, #24]
 800d900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d904:	2b00      	cmp	r3, #0
 800d906:	d013      	beq.n	800d930 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800d910:	b29a      	uxth	r2, r3
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d91a:	b292      	uxth	r2, r2
 800d91c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800d920:	6878      	ldr	r0, [r7, #4]
 800d922:	f007 f926 	bl	8014b72 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800d926:	2100      	movs	r1, #0
 800d928:	6878      	ldr	r0, [r7, #4]
 800d92a:	f000 f905 	bl	800db38 <HAL_PCD_SetAddress>

    return;
 800d92e:	e100      	b.n	800db32 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800d930:	69bb      	ldr	r3, [r7, #24]
 800d932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d936:	2b00      	cmp	r3, #0
 800d938:	d00c      	beq.n	800d954 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800d942:	b29a      	uxth	r2, r3
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d94c:	b292      	uxth	r2, r2
 800d94e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800d952:	e0ee      	b.n	800db32 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800d954:	69bb      	ldr	r3, [r7, #24]
 800d956:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d00c      	beq.n	800d978 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800d966:	b29a      	uxth	r2, r3
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d970:	b292      	uxth	r2, r2
 800d972:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800d976:	e0dc      	b.n	800db32 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800d978:	69bb      	ldr	r3, [r7, #24]
 800d97a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d027      	beq.n	800d9d2 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800d98a:	b29a      	uxth	r2, r3
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	f022 0204 	bic.w	r2, r2, #4
 800d994:	b292      	uxth	r2, r2
 800d996:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800d9a2:	b29a      	uxth	r2, r3
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	f022 0208 	bic.w	r2, r2, #8
 800d9ac:	b292      	uxth	r2, r2
 800d9ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800d9b2:	6878      	ldr	r0, [r7, #4]
 800d9b4:	f007 f916 	bl	8014be4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800d9c0:	b29a      	uxth	r2, r3
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d9ca:	b292      	uxth	r2, r2
 800d9cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800d9d0:	e0af      	b.n	800db32 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800d9d2:	69bb      	ldr	r3, [r7, #24]
 800d9d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	f000 8083 	beq.w	800dae4 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800d9de:	2300      	movs	r3, #0
 800d9e0:	77fb      	strb	r3, [r7, #31]
 800d9e2:	e010      	b.n	800da06 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	461a      	mov	r2, r3
 800d9ea:	7ffb      	ldrb	r3, [r7, #31]
 800d9ec:	009b      	lsls	r3, r3, #2
 800d9ee:	441a      	add	r2, r3
 800d9f0:	7ffb      	ldrb	r3, [r7, #31]
 800d9f2:	8812      	ldrh	r2, [r2, #0]
 800d9f4:	b292      	uxth	r2, r2
 800d9f6:	005b      	lsls	r3, r3, #1
 800d9f8:	3320      	adds	r3, #32
 800d9fa:	443b      	add	r3, r7
 800d9fc:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800da00:	7ffb      	ldrb	r3, [r7, #31]
 800da02:	3301      	adds	r3, #1
 800da04:	77fb      	strb	r3, [r7, #31]
 800da06:	7ffb      	ldrb	r3, [r7, #31]
 800da08:	2b07      	cmp	r3, #7
 800da0a:	d9eb      	bls.n	800d9e4 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800da14:	b29a      	uxth	r2, r3
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	f042 0201 	orr.w	r2, r2, #1
 800da1e:	b292      	uxth	r2, r2
 800da20:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800da2c:	b29a      	uxth	r2, r3
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	f022 0201 	bic.w	r2, r2, #1
 800da36:	b292      	uxth	r2, r2
 800da38:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800da3c:	bf00      	nop
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800da46:	b29b      	uxth	r3, r3
 800da48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d0f6      	beq.n	800da3e <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800da58:	b29a      	uxth	r2, r3
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800da62:	b292      	uxth	r2, r2
 800da64:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800da68:	2300      	movs	r3, #0
 800da6a:	77fb      	strb	r3, [r7, #31]
 800da6c:	e00f      	b.n	800da8e <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800da6e:	7ffb      	ldrb	r3, [r7, #31]
 800da70:	687a      	ldr	r2, [r7, #4]
 800da72:	6812      	ldr	r2, [r2, #0]
 800da74:	4611      	mov	r1, r2
 800da76:	7ffa      	ldrb	r2, [r7, #31]
 800da78:	0092      	lsls	r2, r2, #2
 800da7a:	440a      	add	r2, r1
 800da7c:	005b      	lsls	r3, r3, #1
 800da7e:	3320      	adds	r3, #32
 800da80:	443b      	add	r3, r7
 800da82:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800da86:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800da88:	7ffb      	ldrb	r3, [r7, #31]
 800da8a:	3301      	adds	r3, #1
 800da8c:	77fb      	strb	r3, [r7, #31]
 800da8e:	7ffb      	ldrb	r3, [r7, #31]
 800da90:	2b07      	cmp	r3, #7
 800da92:	d9ec      	bls.n	800da6e <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800da9c:	b29a      	uxth	r2, r3
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	f042 0208 	orr.w	r2, r2, #8
 800daa6:	b292      	uxth	r2, r2
 800daa8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800dab4:	b29a      	uxth	r2, r3
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dabe:	b292      	uxth	r2, r2
 800dac0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800dacc:	b29a      	uxth	r2, r3
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	f042 0204 	orr.w	r2, r2, #4
 800dad6:	b292      	uxth	r2, r2
 800dad8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800dadc:	6878      	ldr	r0, [r7, #4]
 800dade:	f007 f867 	bl	8014bb0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800dae2:	e026      	b.n	800db32 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800dae4:	69bb      	ldr	r3, [r7, #24]
 800dae6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800daea:	2b00      	cmp	r3, #0
 800daec:	d00f      	beq.n	800db0e <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800daf6:	b29a      	uxth	r2, r3
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800db00:	b292      	uxth	r2, r2
 800db02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800db06:	6878      	ldr	r0, [r7, #4]
 800db08:	f007 f825 	bl	8014b56 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800db0c:	e011      	b.n	800db32 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800db0e:	69bb      	ldr	r3, [r7, #24]
 800db10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db14:	2b00      	cmp	r3, #0
 800db16:	d00c      	beq.n	800db32 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800db20:	b29a      	uxth	r2, r3
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800db2a:	b292      	uxth	r2, r2
 800db2c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800db30:	bf00      	nop
  }
}
 800db32:	3720      	adds	r7, #32
 800db34:	46bd      	mov	sp, r7
 800db36:	bd80      	pop	{r7, pc}

0800db38 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b082      	sub	sp, #8
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
 800db40:	460b      	mov	r3, r1
 800db42:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800db4a:	2b01      	cmp	r3, #1
 800db4c:	d101      	bne.n	800db52 <HAL_PCD_SetAddress+0x1a>
 800db4e:	2302      	movs	r3, #2
 800db50:	e013      	b.n	800db7a <HAL_PCD_SetAddress+0x42>
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	2201      	movs	r2, #1
 800db56:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	78fa      	ldrb	r2, [r7, #3]
 800db5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	78fa      	ldrb	r2, [r7, #3]
 800db68:	4611      	mov	r1, r2
 800db6a:	4618      	mov	r0, r3
 800db6c:	f004 fa5e 	bl	801202c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	2200      	movs	r2, #0
 800db74:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800db78:	2300      	movs	r3, #0
}
 800db7a:	4618      	mov	r0, r3
 800db7c:	3708      	adds	r7, #8
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd80      	pop	{r7, pc}

0800db82 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800db82:	b580      	push	{r7, lr}
 800db84:	b084      	sub	sp, #16
 800db86:	af00      	add	r7, sp, #0
 800db88:	6078      	str	r0, [r7, #4]
 800db8a:	4608      	mov	r0, r1
 800db8c:	4611      	mov	r1, r2
 800db8e:	461a      	mov	r2, r3
 800db90:	4603      	mov	r3, r0
 800db92:	70fb      	strb	r3, [r7, #3]
 800db94:	460b      	mov	r3, r1
 800db96:	803b      	strh	r3, [r7, #0]
 800db98:	4613      	mov	r3, r2
 800db9a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800db9c:	2300      	movs	r3, #0
 800db9e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800dba0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	da0e      	bge.n	800dbc6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800dba8:	78fb      	ldrb	r3, [r7, #3]
 800dbaa:	f003 0307 	and.w	r3, r3, #7
 800dbae:	1c5a      	adds	r2, r3, #1
 800dbb0:	4613      	mov	r3, r2
 800dbb2:	009b      	lsls	r3, r3, #2
 800dbb4:	4413      	add	r3, r2
 800dbb6:	00db      	lsls	r3, r3, #3
 800dbb8:	687a      	ldr	r2, [r7, #4]
 800dbba:	4413      	add	r3, r2
 800dbbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	2201      	movs	r2, #1
 800dbc2:	705a      	strb	r2, [r3, #1]
 800dbc4:	e00e      	b.n	800dbe4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800dbc6:	78fb      	ldrb	r3, [r7, #3]
 800dbc8:	f003 0207 	and.w	r2, r3, #7
 800dbcc:	4613      	mov	r3, r2
 800dbce:	009b      	lsls	r3, r3, #2
 800dbd0:	4413      	add	r3, r2
 800dbd2:	00db      	lsls	r3, r3, #3
 800dbd4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800dbd8:	687a      	ldr	r2, [r7, #4]
 800dbda:	4413      	add	r3, r2
 800dbdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800dbe4:	78fb      	ldrb	r3, [r7, #3]
 800dbe6:	f003 0307 	and.w	r3, r3, #7
 800dbea:	b2da      	uxtb	r2, r3
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800dbf0:	883a      	ldrh	r2, [r7, #0]
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	78ba      	ldrb	r2, [r7, #2]
 800dbfa:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800dbfc:	78bb      	ldrb	r3, [r7, #2]
 800dbfe:	2b02      	cmp	r3, #2
 800dc00:	d102      	bne.n	800dc08 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	2200      	movs	r2, #0
 800dc06:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800dc0e:	2b01      	cmp	r3, #1
 800dc10:	d101      	bne.n	800dc16 <HAL_PCD_EP_Open+0x94>
 800dc12:	2302      	movs	r3, #2
 800dc14:	e00e      	b.n	800dc34 <HAL_PCD_EP_Open+0xb2>
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	2201      	movs	r2, #1
 800dc1a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	68f9      	ldr	r1, [r7, #12]
 800dc24:	4618      	mov	r0, r3
 800dc26:	f001 ffa7 	bl	800fb78 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800dc32:	7afb      	ldrb	r3, [r7, #11]
}
 800dc34:	4618      	mov	r0, r3
 800dc36:	3710      	adds	r7, #16
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	bd80      	pop	{r7, pc}

0800dc3c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b084      	sub	sp, #16
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
 800dc44:	460b      	mov	r3, r1
 800dc46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800dc48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	da0e      	bge.n	800dc6e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800dc50:	78fb      	ldrb	r3, [r7, #3]
 800dc52:	f003 0307 	and.w	r3, r3, #7
 800dc56:	1c5a      	adds	r2, r3, #1
 800dc58:	4613      	mov	r3, r2
 800dc5a:	009b      	lsls	r3, r3, #2
 800dc5c:	4413      	add	r3, r2
 800dc5e:	00db      	lsls	r3, r3, #3
 800dc60:	687a      	ldr	r2, [r7, #4]
 800dc62:	4413      	add	r3, r2
 800dc64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	2201      	movs	r2, #1
 800dc6a:	705a      	strb	r2, [r3, #1]
 800dc6c:	e00e      	b.n	800dc8c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800dc6e:	78fb      	ldrb	r3, [r7, #3]
 800dc70:	f003 0207 	and.w	r2, r3, #7
 800dc74:	4613      	mov	r3, r2
 800dc76:	009b      	lsls	r3, r3, #2
 800dc78:	4413      	add	r3, r2
 800dc7a:	00db      	lsls	r3, r3, #3
 800dc7c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800dc80:	687a      	ldr	r2, [r7, #4]
 800dc82:	4413      	add	r3, r2
 800dc84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	2200      	movs	r2, #0
 800dc8a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800dc8c:	78fb      	ldrb	r3, [r7, #3]
 800dc8e:	f003 0307 	and.w	r3, r3, #7
 800dc92:	b2da      	uxtb	r2, r3
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800dc9e:	2b01      	cmp	r3, #1
 800dca0:	d101      	bne.n	800dca6 <HAL_PCD_EP_Close+0x6a>
 800dca2:	2302      	movs	r3, #2
 800dca4:	e00e      	b.n	800dcc4 <HAL_PCD_EP_Close+0x88>
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	2201      	movs	r2, #1
 800dcaa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	68f9      	ldr	r1, [r7, #12]
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	f002 fb1f 	bl	80102f8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800dcc2:	2300      	movs	r3, #0
}
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	3710      	adds	r7, #16
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	bd80      	pop	{r7, pc}

0800dccc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b086      	sub	sp, #24
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	60f8      	str	r0, [r7, #12]
 800dcd4:	607a      	str	r2, [r7, #4]
 800dcd6:	603b      	str	r3, [r7, #0]
 800dcd8:	460b      	mov	r3, r1
 800dcda:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800dcdc:	7afb      	ldrb	r3, [r7, #11]
 800dcde:	f003 0207 	and.w	r2, r3, #7
 800dce2:	4613      	mov	r3, r2
 800dce4:	009b      	lsls	r3, r3, #2
 800dce6:	4413      	add	r3, r2
 800dce8:	00db      	lsls	r3, r3, #3
 800dcea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800dcee:	68fa      	ldr	r2, [r7, #12]
 800dcf0:	4413      	add	r3, r2
 800dcf2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800dcf4:	697b      	ldr	r3, [r7, #20]
 800dcf6:	687a      	ldr	r2, [r7, #4]
 800dcf8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800dcfa:	697b      	ldr	r3, [r7, #20]
 800dcfc:	683a      	ldr	r2, [r7, #0]
 800dcfe:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800dd00:	697b      	ldr	r3, [r7, #20]
 800dd02:	2200      	movs	r2, #0
 800dd04:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800dd06:	697b      	ldr	r3, [r7, #20]
 800dd08:	2200      	movs	r2, #0
 800dd0a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800dd0c:	7afb      	ldrb	r3, [r7, #11]
 800dd0e:	f003 0307 	and.w	r3, r3, #7
 800dd12:	b2da      	uxtb	r2, r3
 800dd14:	697b      	ldr	r3, [r7, #20]
 800dd16:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	6979      	ldr	r1, [r7, #20]
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f002 fcd6 	bl	80106d0 <USB_EPStartXfer>

  return HAL_OK;
 800dd24:	2300      	movs	r3, #0
}
 800dd26:	4618      	mov	r0, r3
 800dd28:	3718      	adds	r7, #24
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bd80      	pop	{r7, pc}

0800dd2e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800dd2e:	b480      	push	{r7}
 800dd30:	b083      	sub	sp, #12
 800dd32:	af00      	add	r7, sp, #0
 800dd34:	6078      	str	r0, [r7, #4]
 800dd36:	460b      	mov	r3, r1
 800dd38:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800dd3a:	78fb      	ldrb	r3, [r7, #3]
 800dd3c:	f003 0207 	and.w	r2, r3, #7
 800dd40:	6879      	ldr	r1, [r7, #4]
 800dd42:	4613      	mov	r3, r2
 800dd44:	009b      	lsls	r3, r3, #2
 800dd46:	4413      	add	r3, r2
 800dd48:	00db      	lsls	r3, r3, #3
 800dd4a:	440b      	add	r3, r1
 800dd4c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800dd50:	681b      	ldr	r3, [r3, #0]
}
 800dd52:	4618      	mov	r0, r3
 800dd54:	370c      	adds	r7, #12
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bc80      	pop	{r7}
 800dd5a:	4770      	bx	lr

0800dd5c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b086      	sub	sp, #24
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	60f8      	str	r0, [r7, #12]
 800dd64:	607a      	str	r2, [r7, #4]
 800dd66:	603b      	str	r3, [r7, #0]
 800dd68:	460b      	mov	r3, r1
 800dd6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800dd6c:	7afb      	ldrb	r3, [r7, #11]
 800dd6e:	f003 0307 	and.w	r3, r3, #7
 800dd72:	1c5a      	adds	r2, r3, #1
 800dd74:	4613      	mov	r3, r2
 800dd76:	009b      	lsls	r3, r3, #2
 800dd78:	4413      	add	r3, r2
 800dd7a:	00db      	lsls	r3, r3, #3
 800dd7c:	68fa      	ldr	r2, [r7, #12]
 800dd7e:	4413      	add	r3, r2
 800dd80:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800dd82:	697b      	ldr	r3, [r7, #20]
 800dd84:	687a      	ldr	r2, [r7, #4]
 800dd86:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800dd88:	697b      	ldr	r3, [r7, #20]
 800dd8a:	683a      	ldr	r2, [r7, #0]
 800dd8c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800dd8e:	697b      	ldr	r3, [r7, #20]
 800dd90:	2201      	movs	r2, #1
 800dd92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800dd96:	697b      	ldr	r3, [r7, #20]
 800dd98:	683a      	ldr	r2, [r7, #0]
 800dd9a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800dd9c:	697b      	ldr	r3, [r7, #20]
 800dd9e:	2200      	movs	r2, #0
 800dda0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800dda2:	697b      	ldr	r3, [r7, #20]
 800dda4:	2201      	movs	r2, #1
 800dda6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800dda8:	7afb      	ldrb	r3, [r7, #11]
 800ddaa:	f003 0307 	and.w	r3, r3, #7
 800ddae:	b2da      	uxtb	r2, r3
 800ddb0:	697b      	ldr	r3, [r7, #20]
 800ddb2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	6979      	ldr	r1, [r7, #20]
 800ddba:	4618      	mov	r0, r3
 800ddbc:	f002 fc88 	bl	80106d0 <USB_EPStartXfer>

  return HAL_OK;
 800ddc0:	2300      	movs	r3, #0
}
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	3718      	adds	r7, #24
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}

0800ddca <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ddca:	b580      	push	{r7, lr}
 800ddcc:	b084      	sub	sp, #16
 800ddce:	af00      	add	r7, sp, #0
 800ddd0:	6078      	str	r0, [r7, #4]
 800ddd2:	460b      	mov	r3, r1
 800ddd4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800ddd6:	78fb      	ldrb	r3, [r7, #3]
 800ddd8:	f003 0207 	and.w	r2, r3, #7
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	685b      	ldr	r3, [r3, #4]
 800dde0:	429a      	cmp	r2, r3
 800dde2:	d901      	bls.n	800dde8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800dde4:	2301      	movs	r3, #1
 800dde6:	e04c      	b.n	800de82 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800dde8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	da0e      	bge.n	800de0e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ddf0:	78fb      	ldrb	r3, [r7, #3]
 800ddf2:	f003 0307 	and.w	r3, r3, #7
 800ddf6:	1c5a      	adds	r2, r3, #1
 800ddf8:	4613      	mov	r3, r2
 800ddfa:	009b      	lsls	r3, r3, #2
 800ddfc:	4413      	add	r3, r2
 800ddfe:	00db      	lsls	r3, r3, #3
 800de00:	687a      	ldr	r2, [r7, #4]
 800de02:	4413      	add	r3, r2
 800de04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	2201      	movs	r2, #1
 800de0a:	705a      	strb	r2, [r3, #1]
 800de0c:	e00c      	b.n	800de28 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800de0e:	78fa      	ldrb	r2, [r7, #3]
 800de10:	4613      	mov	r3, r2
 800de12:	009b      	lsls	r3, r3, #2
 800de14:	4413      	add	r3, r2
 800de16:	00db      	lsls	r3, r3, #3
 800de18:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800de1c:	687a      	ldr	r2, [r7, #4]
 800de1e:	4413      	add	r3, r2
 800de20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	2200      	movs	r2, #0
 800de26:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	2201      	movs	r2, #1
 800de2c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800de2e:	78fb      	ldrb	r3, [r7, #3]
 800de30:	f003 0307 	and.w	r3, r3, #7
 800de34:	b2da      	uxtb	r2, r3
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800de40:	2b01      	cmp	r3, #1
 800de42:	d101      	bne.n	800de48 <HAL_PCD_EP_SetStall+0x7e>
 800de44:	2302      	movs	r3, #2
 800de46:	e01c      	b.n	800de82 <HAL_PCD_EP_SetStall+0xb8>
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	2201      	movs	r2, #1
 800de4c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	68f9      	ldr	r1, [r7, #12]
 800de56:	4618      	mov	r0, r3
 800de58:	f003 ffeb 	bl	8011e32 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800de5c:	78fb      	ldrb	r3, [r7, #3]
 800de5e:	f003 0307 	and.w	r3, r3, #7
 800de62:	2b00      	cmp	r3, #0
 800de64:	d108      	bne.n	800de78 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	681a      	ldr	r2, [r3, #0]
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800de70:	4619      	mov	r1, r3
 800de72:	4610      	mov	r0, r2
 800de74:	f004 f910 	bl	8012098 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	2200      	movs	r2, #0
 800de7c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800de80:	2300      	movs	r3, #0
}
 800de82:	4618      	mov	r0, r3
 800de84:	3710      	adds	r7, #16
 800de86:	46bd      	mov	sp, r7
 800de88:	bd80      	pop	{r7, pc}

0800de8a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800de8a:	b580      	push	{r7, lr}
 800de8c:	b084      	sub	sp, #16
 800de8e:	af00      	add	r7, sp, #0
 800de90:	6078      	str	r0, [r7, #4]
 800de92:	460b      	mov	r3, r1
 800de94:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800de96:	78fb      	ldrb	r3, [r7, #3]
 800de98:	f003 020f 	and.w	r2, r3, #15
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	685b      	ldr	r3, [r3, #4]
 800dea0:	429a      	cmp	r2, r3
 800dea2:	d901      	bls.n	800dea8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800dea4:	2301      	movs	r3, #1
 800dea6:	e040      	b.n	800df2a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800dea8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800deac:	2b00      	cmp	r3, #0
 800deae:	da0e      	bge.n	800dece <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800deb0:	78fb      	ldrb	r3, [r7, #3]
 800deb2:	f003 0307 	and.w	r3, r3, #7
 800deb6:	1c5a      	adds	r2, r3, #1
 800deb8:	4613      	mov	r3, r2
 800deba:	009b      	lsls	r3, r3, #2
 800debc:	4413      	add	r3, r2
 800debe:	00db      	lsls	r3, r3, #3
 800dec0:	687a      	ldr	r2, [r7, #4]
 800dec2:	4413      	add	r3, r2
 800dec4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	2201      	movs	r2, #1
 800deca:	705a      	strb	r2, [r3, #1]
 800decc:	e00e      	b.n	800deec <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800dece:	78fb      	ldrb	r3, [r7, #3]
 800ded0:	f003 0207 	and.w	r2, r3, #7
 800ded4:	4613      	mov	r3, r2
 800ded6:	009b      	lsls	r3, r3, #2
 800ded8:	4413      	add	r3, r2
 800deda:	00db      	lsls	r3, r3, #3
 800dedc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800dee0:	687a      	ldr	r2, [r7, #4]
 800dee2:	4413      	add	r3, r2
 800dee4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	2200      	movs	r2, #0
 800deea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	2200      	movs	r2, #0
 800def0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800def2:	78fb      	ldrb	r3, [r7, #3]
 800def4:	f003 0307 	and.w	r3, r3, #7
 800def8:	b2da      	uxtb	r2, r3
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800df04:	2b01      	cmp	r3, #1
 800df06:	d101      	bne.n	800df0c <HAL_PCD_EP_ClrStall+0x82>
 800df08:	2302      	movs	r3, #2
 800df0a:	e00e      	b.n	800df2a <HAL_PCD_EP_ClrStall+0xa0>
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	2201      	movs	r2, #1
 800df10:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	68f9      	ldr	r1, [r7, #12]
 800df1a:	4618      	mov	r0, r3
 800df1c:	f003 ffd9 	bl	8011ed2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	2200      	movs	r2, #0
 800df24:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800df28:	2300      	movs	r3, #0
}
 800df2a:	4618      	mov	r0, r3
 800df2c:	3710      	adds	r7, #16
 800df2e:	46bd      	mov	sp, r7
 800df30:	bd80      	pop	{r7, pc}

0800df32 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800df32:	b580      	push	{r7, lr}
 800df34:	b082      	sub	sp, #8
 800df36:	af00      	add	r7, sp, #0
 800df38:	6078      	str	r0, [r7, #4]
 800df3a:	460b      	mov	r3, r1
 800df3c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800df44:	2b01      	cmp	r3, #1
 800df46:	d101      	bne.n	800df4c <HAL_PCD_EP_Flush+0x1a>
 800df48:	2302      	movs	r3, #2
 800df4a:	e01b      	b.n	800df84 <HAL_PCD_EP_Flush+0x52>
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	2201      	movs	r2, #1
 800df50:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  if ((ep_addr & 0x80U) == 0x80U)
 800df54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	da09      	bge.n	800df70 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681a      	ldr	r2, [r3, #0]
 800df60:	78fb      	ldrb	r3, [r7, #3]
 800df62:	f003 0307 	and.w	r3, r3, #7
 800df66:	4619      	mov	r1, r3
 800df68:	4610      	mov	r0, r2
 800df6a:	f001 fdef 	bl	800fb4c <USB_FlushTxFifo>
 800df6e:	e004      	b.n	800df7a <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	4618      	mov	r0, r3
 800df76:	f001 fdf4 	bl	800fb62 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	2200      	movs	r2, #0
 800df7e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800df82:	2300      	movs	r3, #0
}
 800df84:	4618      	mov	r0, r3
 800df86:	3708      	adds	r7, #8
 800df88:	46bd      	mov	sp, r7
 800df8a:	bd80      	pop	{r7, pc}

0800df8c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b096      	sub	sp, #88	; 0x58
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800df94:	e3bf      	b.n	800e716 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800df9e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800dfa2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800dfa6:	b2db      	uxtb	r3, r3
 800dfa8:	f003 030f 	and.w	r3, r3, #15
 800dfac:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800dfb0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	f040 8179 	bne.w	800e2ac <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800dfba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800dfbe:	f003 0310 	and.w	r3, r3, #16
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d152      	bne.n	800e06c <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	881b      	ldrh	r3, [r3, #0]
 800dfcc:	b29b      	uxth	r3, r3
 800dfce:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800dfd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dfd6:	81fb      	strh	r3, [r7, #14]
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681a      	ldr	r2, [r3, #0]
 800dfdc:	89fb      	ldrh	r3, [r7, #14]
 800dfde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dfe2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dfe6:	b29b      	uxth	r3, r3
 800dfe8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	3328      	adds	r3, #40	; 0x28
 800dfee:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dff8:	b29b      	uxth	r3, r3
 800dffa:	461a      	mov	r2, r3
 800dffc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dffe:	781b      	ldrb	r3, [r3, #0]
 800e000:	00db      	lsls	r3, r3, #3
 800e002:	4413      	add	r3, r2
 800e004:	3302      	adds	r3, #2
 800e006:	005b      	lsls	r3, r3, #1
 800e008:	687a      	ldr	r2, [r7, #4]
 800e00a:	6812      	ldr	r2, [r2, #0]
 800e00c:	4413      	add	r3, r2
 800e00e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e012:	881b      	ldrh	r3, [r3, #0]
 800e014:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800e018:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e01a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800e01c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e01e:	695a      	ldr	r2, [r3, #20]
 800e020:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e022:	69db      	ldr	r3, [r3, #28]
 800e024:	441a      	add	r2, r3
 800e026:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e028:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800e02a:	2100      	movs	r1, #0
 800e02c:	6878      	ldr	r0, [r7, #4]
 800e02e:	f006 fd78 	bl	8014b22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e038:	b2db      	uxtb	r3, r3
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	f000 836b 	beq.w	800e716 <PCD_EP_ISR_Handler+0x78a>
 800e040:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e042:	699b      	ldr	r3, [r3, #24]
 800e044:	2b00      	cmp	r3, #0
 800e046:	f040 8366 	bne.w	800e716 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e050:	b2db      	uxtb	r3, r3
 800e052:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e056:	b2da      	uxtb	r2, r3
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	b292      	uxth	r2, r2
 800e05e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2200      	movs	r2, #0
 800e066:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800e06a:	e354      	b.n	800e716 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800e072:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	881b      	ldrh	r3, [r3, #0]
 800e07a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800e07e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800e082:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e086:	2b00      	cmp	r3, #0
 800e088:	d034      	beq.n	800e0f4 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e092:	b29b      	uxth	r3, r3
 800e094:	461a      	mov	r2, r3
 800e096:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e098:	781b      	ldrb	r3, [r3, #0]
 800e09a:	00db      	lsls	r3, r3, #3
 800e09c:	4413      	add	r3, r2
 800e09e:	3306      	adds	r3, #6
 800e0a0:	005b      	lsls	r3, r3, #1
 800e0a2:	687a      	ldr	r2, [r7, #4]
 800e0a4:	6812      	ldr	r2, [r2, #0]
 800e0a6:	4413      	add	r3, r2
 800e0a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e0ac:	881b      	ldrh	r3, [r3, #0]
 800e0ae:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800e0b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e0b4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	6818      	ldr	r0, [r3, #0]
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800e0c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e0c2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800e0c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e0c6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800e0c8:	b29b      	uxth	r3, r3
 800e0ca:	f004 f835 	bl	8012138 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	881b      	ldrh	r3, [r3, #0]
 800e0d4:	b29a      	uxth	r2, r3
 800e0d6:	f640 738f 	movw	r3, #3983	; 0xf8f
 800e0da:	4013      	ands	r3, r2
 800e0dc:	823b      	strh	r3, [r7, #16]
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	8a3a      	ldrh	r2, [r7, #16]
 800e0e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e0e8:	b292      	uxth	r2, r2
 800e0ea:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800e0ec:	6878      	ldr	r0, [r7, #4]
 800e0ee:	f006 fceb 	bl	8014ac8 <HAL_PCD_SetupStageCallback>
 800e0f2:	e310      	b.n	800e716 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800e0f4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	f280 830c 	bge.w	800e716 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	881b      	ldrh	r3, [r3, #0]
 800e104:	b29a      	uxth	r2, r3
 800e106:	f640 738f 	movw	r3, #3983	; 0xf8f
 800e10a:	4013      	ands	r3, r2
 800e10c:	83fb      	strh	r3, [r7, #30]
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	8bfa      	ldrh	r2, [r7, #30]
 800e114:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e118:	b292      	uxth	r2, r2
 800e11a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e124:	b29b      	uxth	r3, r3
 800e126:	461a      	mov	r2, r3
 800e128:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e12a:	781b      	ldrb	r3, [r3, #0]
 800e12c:	00db      	lsls	r3, r3, #3
 800e12e:	4413      	add	r3, r2
 800e130:	3306      	adds	r3, #6
 800e132:	005b      	lsls	r3, r3, #1
 800e134:	687a      	ldr	r2, [r7, #4]
 800e136:	6812      	ldr	r2, [r2, #0]
 800e138:	4413      	add	r3, r2
 800e13a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e13e:	881b      	ldrh	r3, [r3, #0]
 800e140:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800e144:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e146:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800e148:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e14a:	69db      	ldr	r3, [r3, #28]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d019      	beq.n	800e184 <PCD_EP_ISR_Handler+0x1f8>
 800e150:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e152:	695b      	ldr	r3, [r3, #20]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d015      	beq.n	800e184 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	6818      	ldr	r0, [r3, #0]
 800e15c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e15e:	6959      	ldr	r1, [r3, #20]
 800e160:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e162:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800e164:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e166:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800e168:	b29b      	uxth	r3, r3
 800e16a:	f003 ffe5 	bl	8012138 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800e16e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e170:	695a      	ldr	r2, [r3, #20]
 800e172:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e174:	69db      	ldr	r3, [r3, #28]
 800e176:	441a      	add	r2, r3
 800e178:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e17a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800e17c:	2100      	movs	r1, #0
 800e17e:	6878      	ldr	r0, [r7, #4]
 800e180:	f006 fcb4 	bl	8014aec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	881b      	ldrh	r3, [r3, #0]
 800e18a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800e18e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800e192:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e196:	2b00      	cmp	r3, #0
 800e198:	f040 82bd 	bne.w	800e716 <PCD_EP_ISR_Handler+0x78a>
 800e19c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800e1a0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800e1a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e1a8:	f000 82b5 	beq.w	800e716 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	61bb      	str	r3, [r7, #24]
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e1ba:	b29b      	uxth	r3, r3
 800e1bc:	461a      	mov	r2, r3
 800e1be:	69bb      	ldr	r3, [r7, #24]
 800e1c0:	4413      	add	r3, r2
 800e1c2:	61bb      	str	r3, [r7, #24]
 800e1c4:	69bb      	ldr	r3, [r7, #24]
 800e1c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800e1ca:	617b      	str	r3, [r7, #20]
 800e1cc:	697b      	ldr	r3, [r7, #20]
 800e1ce:	881b      	ldrh	r3, [r3, #0]
 800e1d0:	b29b      	uxth	r3, r3
 800e1d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e1d6:	b29a      	uxth	r2, r3
 800e1d8:	697b      	ldr	r3, [r7, #20]
 800e1da:	801a      	strh	r2, [r3, #0]
 800e1dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e1de:	691b      	ldr	r3, [r3, #16]
 800e1e0:	2b3e      	cmp	r3, #62	; 0x3e
 800e1e2:	d91d      	bls.n	800e220 <PCD_EP_ISR_Handler+0x294>
 800e1e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e1e6:	691b      	ldr	r3, [r3, #16]
 800e1e8:	095b      	lsrs	r3, r3, #5
 800e1ea:	647b      	str	r3, [r7, #68]	; 0x44
 800e1ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e1ee:	691b      	ldr	r3, [r3, #16]
 800e1f0:	f003 031f 	and.w	r3, r3, #31
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d102      	bne.n	800e1fe <PCD_EP_ISR_Handler+0x272>
 800e1f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e1fa:	3b01      	subs	r3, #1
 800e1fc:	647b      	str	r3, [r7, #68]	; 0x44
 800e1fe:	697b      	ldr	r3, [r7, #20]
 800e200:	881b      	ldrh	r3, [r3, #0]
 800e202:	b29a      	uxth	r2, r3
 800e204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e206:	b29b      	uxth	r3, r3
 800e208:	029b      	lsls	r3, r3, #10
 800e20a:	b29b      	uxth	r3, r3
 800e20c:	4313      	orrs	r3, r2
 800e20e:	b29b      	uxth	r3, r3
 800e210:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e214:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e218:	b29a      	uxth	r2, r3
 800e21a:	697b      	ldr	r3, [r7, #20]
 800e21c:	801a      	strh	r2, [r3, #0]
 800e21e:	e026      	b.n	800e26e <PCD_EP_ISR_Handler+0x2e2>
 800e220:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e222:	691b      	ldr	r3, [r3, #16]
 800e224:	2b00      	cmp	r3, #0
 800e226:	d10a      	bne.n	800e23e <PCD_EP_ISR_Handler+0x2b2>
 800e228:	697b      	ldr	r3, [r7, #20]
 800e22a:	881b      	ldrh	r3, [r3, #0]
 800e22c:	b29b      	uxth	r3, r3
 800e22e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e232:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e236:	b29a      	uxth	r2, r3
 800e238:	697b      	ldr	r3, [r7, #20]
 800e23a:	801a      	strh	r2, [r3, #0]
 800e23c:	e017      	b.n	800e26e <PCD_EP_ISR_Handler+0x2e2>
 800e23e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e240:	691b      	ldr	r3, [r3, #16]
 800e242:	085b      	lsrs	r3, r3, #1
 800e244:	647b      	str	r3, [r7, #68]	; 0x44
 800e246:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e248:	691b      	ldr	r3, [r3, #16]
 800e24a:	f003 0301 	and.w	r3, r3, #1
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d002      	beq.n	800e258 <PCD_EP_ISR_Handler+0x2cc>
 800e252:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e254:	3301      	adds	r3, #1
 800e256:	647b      	str	r3, [r7, #68]	; 0x44
 800e258:	697b      	ldr	r3, [r7, #20]
 800e25a:	881b      	ldrh	r3, [r3, #0]
 800e25c:	b29a      	uxth	r2, r3
 800e25e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e260:	b29b      	uxth	r3, r3
 800e262:	029b      	lsls	r3, r3, #10
 800e264:	b29b      	uxth	r3, r3
 800e266:	4313      	orrs	r3, r2
 800e268:	b29a      	uxth	r2, r3
 800e26a:	697b      	ldr	r3, [r7, #20]
 800e26c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	881b      	ldrh	r3, [r3, #0]
 800e274:	b29b      	uxth	r3, r3
 800e276:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e27a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e27e:	827b      	strh	r3, [r7, #18]
 800e280:	8a7b      	ldrh	r3, [r7, #18]
 800e282:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800e286:	827b      	strh	r3, [r7, #18]
 800e288:	8a7b      	ldrh	r3, [r7, #18]
 800e28a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800e28e:	827b      	strh	r3, [r7, #18]
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	681a      	ldr	r2, [r3, #0]
 800e294:	8a7b      	ldrh	r3, [r7, #18]
 800e296:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e29a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e29e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e2a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e2a6:	b29b      	uxth	r3, r3
 800e2a8:	8013      	strh	r3, [r2, #0]
 800e2aa:	e234      	b.n	800e716 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	461a      	mov	r2, r3
 800e2b2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800e2b6:	009b      	lsls	r3, r3, #2
 800e2b8:	4413      	add	r3, r2
 800e2ba:	881b      	ldrh	r3, [r3, #0]
 800e2bc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800e2c0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	f280 80fc 	bge.w	800e4c2 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	461a      	mov	r2, r3
 800e2d0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800e2d4:	009b      	lsls	r3, r3, #2
 800e2d6:	4413      	add	r3, r2
 800e2d8:	881b      	ldrh	r3, [r3, #0]
 800e2da:	b29a      	uxth	r2, r3
 800e2dc:	f640 738f 	movw	r3, #3983	; 0xf8f
 800e2e0:	4013      	ands	r3, r2
 800e2e2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	461a      	mov	r2, r3
 800e2ec:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800e2f0:	009b      	lsls	r3, r3, #2
 800e2f2:	4413      	add	r3, r2
 800e2f4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800e2f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e2fc:	b292      	uxth	r2, r2
 800e2fe:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800e300:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800e304:	4613      	mov	r3, r2
 800e306:	009b      	lsls	r3, r3, #2
 800e308:	4413      	add	r3, r2
 800e30a:	00db      	lsls	r3, r3, #3
 800e30c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800e310:	687a      	ldr	r2, [r7, #4]
 800e312:	4413      	add	r3, r2
 800e314:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800e316:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e318:	7b1b      	ldrb	r3, [r3, #12]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d125      	bne.n	800e36a <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e326:	b29b      	uxth	r3, r3
 800e328:	461a      	mov	r2, r3
 800e32a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e32c:	781b      	ldrb	r3, [r3, #0]
 800e32e:	00db      	lsls	r3, r3, #3
 800e330:	4413      	add	r3, r2
 800e332:	3306      	adds	r3, #6
 800e334:	005b      	lsls	r3, r3, #1
 800e336:	687a      	ldr	r2, [r7, #4]
 800e338:	6812      	ldr	r2, [r2, #0]
 800e33a:	4413      	add	r3, r2
 800e33c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e340:	881b      	ldrh	r3, [r3, #0]
 800e342:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e346:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800e34a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800e34e:	2b00      	cmp	r3, #0
 800e350:	f000 8092 	beq.w	800e478 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	6818      	ldr	r0, [r3, #0]
 800e358:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e35a:	6959      	ldr	r1, [r3, #20]
 800e35c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e35e:	88da      	ldrh	r2, [r3, #6]
 800e360:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800e364:	f003 fee8 	bl	8012138 <USB_ReadPMA>
 800e368:	e086      	b.n	800e478 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800e36a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e36c:	78db      	ldrb	r3, [r3, #3]
 800e36e:	2b02      	cmp	r3, #2
 800e370:	d10a      	bne.n	800e388 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800e372:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800e376:	461a      	mov	r2, r3
 800e378:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e37a:	6878      	ldr	r0, [r7, #4]
 800e37c:	f000 f9d9 	bl	800e732 <HAL_PCD_EP_DB_Receive>
 800e380:	4603      	mov	r3, r0
 800e382:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800e386:	e077      	b.n	800e478 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	461a      	mov	r2, r3
 800e38e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e390:	781b      	ldrb	r3, [r3, #0]
 800e392:	009b      	lsls	r3, r3, #2
 800e394:	4413      	add	r3, r2
 800e396:	881b      	ldrh	r3, [r3, #0]
 800e398:	b29b      	uxth	r3, r3
 800e39a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e39e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e3a2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	461a      	mov	r2, r3
 800e3ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e3ae:	781b      	ldrb	r3, [r3, #0]
 800e3b0:	009b      	lsls	r3, r3, #2
 800e3b2:	441a      	add	r2, r3
 800e3b4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800e3b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e3bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e3c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e3c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e3c8:	b29b      	uxth	r3, r3
 800e3ca:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	461a      	mov	r2, r3
 800e3d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e3d4:	781b      	ldrb	r3, [r3, #0]
 800e3d6:	009b      	lsls	r3, r3, #2
 800e3d8:	4413      	add	r3, r2
 800e3da:	881b      	ldrh	r3, [r3, #0]
 800e3dc:	b29b      	uxth	r3, r3
 800e3de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d024      	beq.n	800e430 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e3ee:	b29b      	uxth	r3, r3
 800e3f0:	461a      	mov	r2, r3
 800e3f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e3f4:	781b      	ldrb	r3, [r3, #0]
 800e3f6:	00db      	lsls	r3, r3, #3
 800e3f8:	4413      	add	r3, r2
 800e3fa:	3302      	adds	r3, #2
 800e3fc:	005b      	lsls	r3, r3, #1
 800e3fe:	687a      	ldr	r2, [r7, #4]
 800e400:	6812      	ldr	r2, [r2, #0]
 800e402:	4413      	add	r3, r2
 800e404:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e408:	881b      	ldrh	r3, [r3, #0]
 800e40a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e40e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800e412:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800e416:	2b00      	cmp	r3, #0
 800e418:	d02e      	beq.n	800e478 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	6818      	ldr	r0, [r3, #0]
 800e41e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e420:	6959      	ldr	r1, [r3, #20]
 800e422:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e424:	891a      	ldrh	r2, [r3, #8]
 800e426:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800e42a:	f003 fe85 	bl	8012138 <USB_ReadPMA>
 800e42e:	e023      	b.n	800e478 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e438:	b29b      	uxth	r3, r3
 800e43a:	461a      	mov	r2, r3
 800e43c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e43e:	781b      	ldrb	r3, [r3, #0]
 800e440:	00db      	lsls	r3, r3, #3
 800e442:	4413      	add	r3, r2
 800e444:	3306      	adds	r3, #6
 800e446:	005b      	lsls	r3, r3, #1
 800e448:	687a      	ldr	r2, [r7, #4]
 800e44a:	6812      	ldr	r2, [r2, #0]
 800e44c:	4413      	add	r3, r2
 800e44e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e452:	881b      	ldrh	r3, [r3, #0]
 800e454:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e458:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800e45c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800e460:	2b00      	cmp	r3, #0
 800e462:	d009      	beq.n	800e478 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	6818      	ldr	r0, [r3, #0]
 800e468:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e46a:	6959      	ldr	r1, [r3, #20]
 800e46c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e46e:	895a      	ldrh	r2, [r3, #10]
 800e470:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800e474:	f003 fe60 	bl	8012138 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800e478:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e47a:	69da      	ldr	r2, [r3, #28]
 800e47c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800e480:	441a      	add	r2, r3
 800e482:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e484:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800e486:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e488:	695a      	ldr	r2, [r3, #20]
 800e48a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800e48e:	441a      	add	r2, r3
 800e490:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e492:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800e494:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e496:	699b      	ldr	r3, [r3, #24]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d005      	beq.n	800e4a8 <PCD_EP_ISR_Handler+0x51c>
 800e49c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800e4a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e4a2:	691b      	ldr	r3, [r3, #16]
 800e4a4:	429a      	cmp	r2, r3
 800e4a6:	d206      	bcs.n	800e4b6 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800e4a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e4aa:	781b      	ldrb	r3, [r3, #0]
 800e4ac:	4619      	mov	r1, r3
 800e4ae:	6878      	ldr	r0, [r7, #4]
 800e4b0:	f006 fb1c 	bl	8014aec <HAL_PCD_DataOutStageCallback>
 800e4b4:	e005      	b.n	800e4c2 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e4bc:	4618      	mov	r0, r3
 800e4be:	f002 f907 	bl	80106d0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800e4c2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800e4c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	f000 8123 	beq.w	800e716 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 800e4d0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800e4d4:	1c5a      	adds	r2, r3, #1
 800e4d6:	4613      	mov	r3, r2
 800e4d8:	009b      	lsls	r3, r3, #2
 800e4da:	4413      	add	r3, r2
 800e4dc:	00db      	lsls	r3, r3, #3
 800e4de:	687a      	ldr	r2, [r7, #4]
 800e4e0:	4413      	add	r3, r2
 800e4e2:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	461a      	mov	r2, r3
 800e4ea:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800e4ee:	009b      	lsls	r3, r3, #2
 800e4f0:	4413      	add	r3, r2
 800e4f2:	881b      	ldrh	r3, [r3, #0]
 800e4f4:	b29b      	uxth	r3, r3
 800e4f6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800e4fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e4fe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	461a      	mov	r2, r3
 800e508:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800e50c:	009b      	lsls	r3, r3, #2
 800e50e:	441a      	add	r2, r3
 800e510:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e514:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e518:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e51c:	b29b      	uxth	r3, r3
 800e51e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800e520:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e522:	78db      	ldrb	r3, [r3, #3]
 800e524:	2b01      	cmp	r3, #1
 800e526:	f040 80a2 	bne.w	800e66e <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 800e52a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e52c:	2200      	movs	r2, #0
 800e52e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800e530:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e532:	7b1b      	ldrb	r3, [r3, #12]
 800e534:	2b00      	cmp	r3, #0
 800e536:	f000 8093 	beq.w	800e660 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800e53a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800e53e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e542:	2b00      	cmp	r3, #0
 800e544:	d046      	beq.n	800e5d4 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800e546:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e548:	785b      	ldrb	r3, [r3, #1]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d126      	bne.n	800e59c <PCD_EP_ISR_Handler+0x610>
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	627b      	str	r3, [r7, #36]	; 0x24
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e55c:	b29b      	uxth	r3, r3
 800e55e:	461a      	mov	r2, r3
 800e560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e562:	4413      	add	r3, r2
 800e564:	627b      	str	r3, [r7, #36]	; 0x24
 800e566:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e568:	781b      	ldrb	r3, [r3, #0]
 800e56a:	011a      	lsls	r2, r3, #4
 800e56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e56e:	4413      	add	r3, r2
 800e570:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800e574:	623b      	str	r3, [r7, #32]
 800e576:	6a3b      	ldr	r3, [r7, #32]
 800e578:	881b      	ldrh	r3, [r3, #0]
 800e57a:	b29b      	uxth	r3, r3
 800e57c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e580:	b29a      	uxth	r2, r3
 800e582:	6a3b      	ldr	r3, [r7, #32]
 800e584:	801a      	strh	r2, [r3, #0]
 800e586:	6a3b      	ldr	r3, [r7, #32]
 800e588:	881b      	ldrh	r3, [r3, #0]
 800e58a:	b29b      	uxth	r3, r3
 800e58c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e590:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e594:	b29a      	uxth	r2, r3
 800e596:	6a3b      	ldr	r3, [r7, #32]
 800e598:	801a      	strh	r2, [r3, #0]
 800e59a:	e061      	b.n	800e660 <PCD_EP_ISR_Handler+0x6d4>
 800e59c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e59e:	785b      	ldrb	r3, [r3, #1]
 800e5a0:	2b01      	cmp	r3, #1
 800e5a2:	d15d      	bne.n	800e660 <PCD_EP_ISR_Handler+0x6d4>
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e5b2:	b29b      	uxth	r3, r3
 800e5b4:	461a      	mov	r2, r3
 800e5b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5b8:	4413      	add	r3, r2
 800e5ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e5bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e5be:	781b      	ldrb	r3, [r3, #0]
 800e5c0:	011a      	lsls	r2, r3, #4
 800e5c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5c4:	4413      	add	r3, r2
 800e5c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800e5ca:	62bb      	str	r3, [r7, #40]	; 0x28
 800e5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	801a      	strh	r2, [r3, #0]
 800e5d2:	e045      	b.n	800e660 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e5da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e5dc:	785b      	ldrb	r3, [r3, #1]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d126      	bne.n	800e630 <PCD_EP_ISR_Handler+0x6a4>
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	637b      	str	r3, [r7, #52]	; 0x34
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e5f0:	b29b      	uxth	r3, r3
 800e5f2:	461a      	mov	r2, r3
 800e5f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5f6:	4413      	add	r3, r2
 800e5f8:	637b      	str	r3, [r7, #52]	; 0x34
 800e5fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e5fc:	781b      	ldrb	r3, [r3, #0]
 800e5fe:	011a      	lsls	r2, r3, #4
 800e600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e602:	4413      	add	r3, r2
 800e604:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800e608:	633b      	str	r3, [r7, #48]	; 0x30
 800e60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e60c:	881b      	ldrh	r3, [r3, #0]
 800e60e:	b29b      	uxth	r3, r3
 800e610:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e614:	b29a      	uxth	r2, r3
 800e616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e618:	801a      	strh	r2, [r3, #0]
 800e61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e61c:	881b      	ldrh	r3, [r3, #0]
 800e61e:	b29b      	uxth	r3, r3
 800e620:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e624:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e628:	b29a      	uxth	r2, r3
 800e62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e62c:	801a      	strh	r2, [r3, #0]
 800e62e:	e017      	b.n	800e660 <PCD_EP_ISR_Handler+0x6d4>
 800e630:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e632:	785b      	ldrb	r3, [r3, #1]
 800e634:	2b01      	cmp	r3, #1
 800e636:	d113      	bne.n	800e660 <PCD_EP_ISR_Handler+0x6d4>
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e640:	b29b      	uxth	r3, r3
 800e642:	461a      	mov	r2, r3
 800e644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e646:	4413      	add	r3, r2
 800e648:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e64a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e64c:	781b      	ldrb	r3, [r3, #0]
 800e64e:	011a      	lsls	r2, r3, #4
 800e650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e652:	4413      	add	r3, r2
 800e654:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800e658:	63bb      	str	r3, [r7, #56]	; 0x38
 800e65a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e65c:	2200      	movs	r2, #0
 800e65e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800e660:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e662:	781b      	ldrb	r3, [r3, #0]
 800e664:	4619      	mov	r1, r3
 800e666:	6878      	ldr	r0, [r7, #4]
 800e668:	f006 fa5b 	bl	8014b22 <HAL_PCD_DataInStageCallback>
 800e66c:	e053      	b.n	800e716 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800e66e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800e672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e676:	2b00      	cmp	r3, #0
 800e678:	d146      	bne.n	800e708 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e682:	b29b      	uxth	r3, r3
 800e684:	461a      	mov	r2, r3
 800e686:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e688:	781b      	ldrb	r3, [r3, #0]
 800e68a:	00db      	lsls	r3, r3, #3
 800e68c:	4413      	add	r3, r2
 800e68e:	3302      	adds	r3, #2
 800e690:	005b      	lsls	r3, r3, #1
 800e692:	687a      	ldr	r2, [r7, #4]
 800e694:	6812      	ldr	r2, [r2, #0]
 800e696:	4413      	add	r3, r2
 800e698:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e69c:	881b      	ldrh	r3, [r3, #0]
 800e69e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e6a2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800e6a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e6a8:	699a      	ldr	r2, [r3, #24]
 800e6aa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e6ae:	429a      	cmp	r2, r3
 800e6b0:	d907      	bls.n	800e6c2 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 800e6b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e6b4:	699a      	ldr	r2, [r3, #24]
 800e6b6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e6ba:	1ad2      	subs	r2, r2, r3
 800e6bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e6be:	619a      	str	r2, [r3, #24]
 800e6c0:	e002      	b.n	800e6c8 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 800e6c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800e6c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e6ca:	699b      	ldr	r3, [r3, #24]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d106      	bne.n	800e6de <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800e6d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e6d2:	781b      	ldrb	r3, [r3, #0]
 800e6d4:	4619      	mov	r1, r3
 800e6d6:	6878      	ldr	r0, [r7, #4]
 800e6d8:	f006 fa23 	bl	8014b22 <HAL_PCD_DataInStageCallback>
 800e6dc:	e01b      	b.n	800e716 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800e6de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e6e0:	695a      	ldr	r2, [r3, #20]
 800e6e2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e6e6:	441a      	add	r2, r3
 800e6e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e6ea:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800e6ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e6ee:	69da      	ldr	r2, [r3, #28]
 800e6f0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e6f4:	441a      	add	r2, r3
 800e6f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e6f8:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e700:	4618      	mov	r0, r3
 800e702:	f001 ffe5 	bl	80106d0 <USB_EPStartXfer>
 800e706:	e006      	b.n	800e716 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800e708:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800e70c:	461a      	mov	r2, r3
 800e70e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e710:	6878      	ldr	r0, [r7, #4]
 800e712:	f000 f91b 	bl	800e94c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800e71e:	b29b      	uxth	r3, r3
 800e720:	b21b      	sxth	r3, r3
 800e722:	2b00      	cmp	r3, #0
 800e724:	f6ff ac37 	blt.w	800df96 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800e728:	2300      	movs	r3, #0
}
 800e72a:	4618      	mov	r0, r3
 800e72c:	3758      	adds	r7, #88	; 0x58
 800e72e:	46bd      	mov	sp, r7
 800e730:	bd80      	pop	{r7, pc}

0800e732 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800e732:	b580      	push	{r7, lr}
 800e734:	b088      	sub	sp, #32
 800e736:	af00      	add	r7, sp, #0
 800e738:	60f8      	str	r0, [r7, #12]
 800e73a:	60b9      	str	r1, [r7, #8]
 800e73c:	4613      	mov	r3, r2
 800e73e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800e740:	88fb      	ldrh	r3, [r7, #6]
 800e742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e746:	2b00      	cmp	r3, #0
 800e748:	d07e      	beq.n	800e848 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e752:	b29b      	uxth	r3, r3
 800e754:	461a      	mov	r2, r3
 800e756:	68bb      	ldr	r3, [r7, #8]
 800e758:	781b      	ldrb	r3, [r3, #0]
 800e75a:	00db      	lsls	r3, r3, #3
 800e75c:	4413      	add	r3, r2
 800e75e:	3302      	adds	r3, #2
 800e760:	005b      	lsls	r3, r3, #1
 800e762:	68fa      	ldr	r2, [r7, #12]
 800e764:	6812      	ldr	r2, [r2, #0]
 800e766:	4413      	add	r3, r2
 800e768:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e76c:	881b      	ldrh	r3, [r3, #0]
 800e76e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e772:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800e774:	68bb      	ldr	r3, [r7, #8]
 800e776:	699a      	ldr	r2, [r3, #24]
 800e778:	8b7b      	ldrh	r3, [r7, #26]
 800e77a:	429a      	cmp	r2, r3
 800e77c:	d306      	bcc.n	800e78c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800e77e:	68bb      	ldr	r3, [r7, #8]
 800e780:	699a      	ldr	r2, [r3, #24]
 800e782:	8b7b      	ldrh	r3, [r7, #26]
 800e784:	1ad2      	subs	r2, r2, r3
 800e786:	68bb      	ldr	r3, [r7, #8]
 800e788:	619a      	str	r2, [r3, #24]
 800e78a:	e002      	b.n	800e792 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800e78c:	68bb      	ldr	r3, [r7, #8]
 800e78e:	2200      	movs	r2, #0
 800e790:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800e792:	68bb      	ldr	r3, [r7, #8]
 800e794:	699b      	ldr	r3, [r3, #24]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d123      	bne.n	800e7e2 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	461a      	mov	r2, r3
 800e7a0:	68bb      	ldr	r3, [r7, #8]
 800e7a2:	781b      	ldrb	r3, [r3, #0]
 800e7a4:	009b      	lsls	r3, r3, #2
 800e7a6:	4413      	add	r3, r2
 800e7a8:	881b      	ldrh	r3, [r3, #0]
 800e7aa:	b29b      	uxth	r3, r3
 800e7ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e7b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e7b4:	833b      	strh	r3, [r7, #24]
 800e7b6:	8b3b      	ldrh	r3, [r7, #24]
 800e7b8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800e7bc:	833b      	strh	r3, [r7, #24]
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	461a      	mov	r2, r3
 800e7c4:	68bb      	ldr	r3, [r7, #8]
 800e7c6:	781b      	ldrb	r3, [r3, #0]
 800e7c8:	009b      	lsls	r3, r3, #2
 800e7ca:	441a      	add	r2, r3
 800e7cc:	8b3b      	ldrh	r3, [r7, #24]
 800e7ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e7d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e7d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e7da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7de:	b29b      	uxth	r3, r3
 800e7e0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800e7e2:	88fb      	ldrh	r3, [r7, #6]
 800e7e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d01f      	beq.n	800e82c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	461a      	mov	r2, r3
 800e7f2:	68bb      	ldr	r3, [r7, #8]
 800e7f4:	781b      	ldrb	r3, [r3, #0]
 800e7f6:	009b      	lsls	r3, r3, #2
 800e7f8:	4413      	add	r3, r2
 800e7fa:	881b      	ldrh	r3, [r3, #0]
 800e7fc:	b29b      	uxth	r3, r3
 800e7fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e806:	82fb      	strh	r3, [r7, #22]
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	461a      	mov	r2, r3
 800e80e:	68bb      	ldr	r3, [r7, #8]
 800e810:	781b      	ldrb	r3, [r3, #0]
 800e812:	009b      	lsls	r3, r3, #2
 800e814:	441a      	add	r2, r3
 800e816:	8afb      	ldrh	r3, [r7, #22]
 800e818:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e81c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e820:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e824:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e828:	b29b      	uxth	r3, r3
 800e82a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800e82c:	8b7b      	ldrh	r3, [r7, #26]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	f000 8087 	beq.w	800e942 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	6818      	ldr	r0, [r3, #0]
 800e838:	68bb      	ldr	r3, [r7, #8]
 800e83a:	6959      	ldr	r1, [r3, #20]
 800e83c:	68bb      	ldr	r3, [r7, #8]
 800e83e:	891a      	ldrh	r2, [r3, #8]
 800e840:	8b7b      	ldrh	r3, [r7, #26]
 800e842:	f003 fc79 	bl	8012138 <USB_ReadPMA>
 800e846:	e07c      	b.n	800e942 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e850:	b29b      	uxth	r3, r3
 800e852:	461a      	mov	r2, r3
 800e854:	68bb      	ldr	r3, [r7, #8]
 800e856:	781b      	ldrb	r3, [r3, #0]
 800e858:	00db      	lsls	r3, r3, #3
 800e85a:	4413      	add	r3, r2
 800e85c:	3306      	adds	r3, #6
 800e85e:	005b      	lsls	r3, r3, #1
 800e860:	68fa      	ldr	r2, [r7, #12]
 800e862:	6812      	ldr	r2, [r2, #0]
 800e864:	4413      	add	r3, r2
 800e866:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e86a:	881b      	ldrh	r3, [r3, #0]
 800e86c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e870:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800e872:	68bb      	ldr	r3, [r7, #8]
 800e874:	699a      	ldr	r2, [r3, #24]
 800e876:	8b7b      	ldrh	r3, [r7, #26]
 800e878:	429a      	cmp	r2, r3
 800e87a:	d306      	bcc.n	800e88a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800e87c:	68bb      	ldr	r3, [r7, #8]
 800e87e:	699a      	ldr	r2, [r3, #24]
 800e880:	8b7b      	ldrh	r3, [r7, #26]
 800e882:	1ad2      	subs	r2, r2, r3
 800e884:	68bb      	ldr	r3, [r7, #8]
 800e886:	619a      	str	r2, [r3, #24]
 800e888:	e002      	b.n	800e890 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800e88a:	68bb      	ldr	r3, [r7, #8]
 800e88c:	2200      	movs	r2, #0
 800e88e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800e890:	68bb      	ldr	r3, [r7, #8]
 800e892:	699b      	ldr	r3, [r3, #24]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d123      	bne.n	800e8e0 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	461a      	mov	r2, r3
 800e89e:	68bb      	ldr	r3, [r7, #8]
 800e8a0:	781b      	ldrb	r3, [r3, #0]
 800e8a2:	009b      	lsls	r3, r3, #2
 800e8a4:	4413      	add	r3, r2
 800e8a6:	881b      	ldrh	r3, [r3, #0]
 800e8a8:	b29b      	uxth	r3, r3
 800e8aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e8ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e8b2:	83fb      	strh	r3, [r7, #30]
 800e8b4:	8bfb      	ldrh	r3, [r7, #30]
 800e8b6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800e8ba:	83fb      	strh	r3, [r7, #30]
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	461a      	mov	r2, r3
 800e8c2:	68bb      	ldr	r3, [r7, #8]
 800e8c4:	781b      	ldrb	r3, [r3, #0]
 800e8c6:	009b      	lsls	r3, r3, #2
 800e8c8:	441a      	add	r2, r3
 800e8ca:	8bfb      	ldrh	r3, [r7, #30]
 800e8cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e8d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e8d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e8d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e8dc:	b29b      	uxth	r3, r3
 800e8de:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800e8e0:	88fb      	ldrh	r3, [r7, #6]
 800e8e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d11f      	bne.n	800e92a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	461a      	mov	r2, r3
 800e8f0:	68bb      	ldr	r3, [r7, #8]
 800e8f2:	781b      	ldrb	r3, [r3, #0]
 800e8f4:	009b      	lsls	r3, r3, #2
 800e8f6:	4413      	add	r3, r2
 800e8f8:	881b      	ldrh	r3, [r3, #0]
 800e8fa:	b29b      	uxth	r3, r3
 800e8fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e900:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e904:	83bb      	strh	r3, [r7, #28]
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	461a      	mov	r2, r3
 800e90c:	68bb      	ldr	r3, [r7, #8]
 800e90e:	781b      	ldrb	r3, [r3, #0]
 800e910:	009b      	lsls	r3, r3, #2
 800e912:	441a      	add	r2, r3
 800e914:	8bbb      	ldrh	r3, [r7, #28]
 800e916:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e91a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e91e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e922:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e926:	b29b      	uxth	r3, r3
 800e928:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800e92a:	8b7b      	ldrh	r3, [r7, #26]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d008      	beq.n	800e942 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	6818      	ldr	r0, [r3, #0]
 800e934:	68bb      	ldr	r3, [r7, #8]
 800e936:	6959      	ldr	r1, [r3, #20]
 800e938:	68bb      	ldr	r3, [r7, #8]
 800e93a:	895a      	ldrh	r2, [r3, #10]
 800e93c:	8b7b      	ldrh	r3, [r7, #26]
 800e93e:	f003 fbfb 	bl	8012138 <USB_ReadPMA>
    }
  }

  return count;
 800e942:	8b7b      	ldrh	r3, [r7, #26]
}
 800e944:	4618      	mov	r0, r3
 800e946:	3720      	adds	r7, #32
 800e948:	46bd      	mov	sp, r7
 800e94a:	bd80      	pop	{r7, pc}

0800e94c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b0a4      	sub	sp, #144	; 0x90
 800e950:	af00      	add	r7, sp, #0
 800e952:	60f8      	str	r0, [r7, #12]
 800e954:	60b9      	str	r1, [r7, #8]
 800e956:	4613      	mov	r3, r2
 800e958:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800e95a:	88fb      	ldrh	r3, [r7, #6]
 800e95c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e960:	2b00      	cmp	r3, #0
 800e962:	f000 81dd 	beq.w	800ed20 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e96e:	b29b      	uxth	r3, r3
 800e970:	461a      	mov	r2, r3
 800e972:	68bb      	ldr	r3, [r7, #8]
 800e974:	781b      	ldrb	r3, [r3, #0]
 800e976:	00db      	lsls	r3, r3, #3
 800e978:	4413      	add	r3, r2
 800e97a:	3302      	adds	r3, #2
 800e97c:	005b      	lsls	r3, r3, #1
 800e97e:	68fa      	ldr	r2, [r7, #12]
 800e980:	6812      	ldr	r2, [r2, #0]
 800e982:	4413      	add	r3, r2
 800e984:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e988:	881b      	ldrh	r3, [r3, #0]
 800e98a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e98e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800e992:	68bb      	ldr	r3, [r7, #8]
 800e994:	699a      	ldr	r2, [r3, #24]
 800e996:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800e99a:	429a      	cmp	r2, r3
 800e99c:	d907      	bls.n	800e9ae <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800e99e:	68bb      	ldr	r3, [r7, #8]
 800e9a0:	699a      	ldr	r2, [r3, #24]
 800e9a2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800e9a6:	1ad2      	subs	r2, r2, r3
 800e9a8:	68bb      	ldr	r3, [r7, #8]
 800e9aa:	619a      	str	r2, [r3, #24]
 800e9ac:	e002      	b.n	800e9b4 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800e9ae:	68bb      	ldr	r3, [r7, #8]
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800e9b4:	68bb      	ldr	r3, [r7, #8]
 800e9b6:	699b      	ldr	r3, [r3, #24]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	f040 80b9 	bne.w	800eb30 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800e9be:	68bb      	ldr	r3, [r7, #8]
 800e9c0:	785b      	ldrb	r3, [r3, #1]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d126      	bne.n	800ea14 <HAL_PCD_EP_DB_Transmit+0xc8>
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e9d4:	b29b      	uxth	r3, r3
 800e9d6:	461a      	mov	r2, r3
 800e9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9da:	4413      	add	r3, r2
 800e9dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e9de:	68bb      	ldr	r3, [r7, #8]
 800e9e0:	781b      	ldrb	r3, [r3, #0]
 800e9e2:	011a      	lsls	r2, r3, #4
 800e9e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9e6:	4413      	add	r3, r2
 800e9e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800e9ec:	62bb      	str	r3, [r7, #40]	; 0x28
 800e9ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9f0:	881b      	ldrh	r3, [r3, #0]
 800e9f2:	b29b      	uxth	r3, r3
 800e9f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e9f8:	b29a      	uxth	r2, r3
 800e9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9fc:	801a      	strh	r2, [r3, #0]
 800e9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea00:	881b      	ldrh	r3, [r3, #0]
 800ea02:	b29b      	uxth	r3, r3
 800ea04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ea08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ea0c:	b29a      	uxth	r2, r3
 800ea0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea10:	801a      	strh	r2, [r3, #0]
 800ea12:	e01a      	b.n	800ea4a <HAL_PCD_EP_DB_Transmit+0xfe>
 800ea14:	68bb      	ldr	r3, [r7, #8]
 800ea16:	785b      	ldrb	r3, [r3, #1]
 800ea18:	2b01      	cmp	r3, #1
 800ea1a:	d116      	bne.n	800ea4a <HAL_PCD_EP_DB_Transmit+0xfe>
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	637b      	str	r3, [r7, #52]	; 0x34
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ea2a:	b29b      	uxth	r3, r3
 800ea2c:	461a      	mov	r2, r3
 800ea2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea30:	4413      	add	r3, r2
 800ea32:	637b      	str	r3, [r7, #52]	; 0x34
 800ea34:	68bb      	ldr	r3, [r7, #8]
 800ea36:	781b      	ldrb	r3, [r3, #0]
 800ea38:	011a      	lsls	r2, r3, #4
 800ea3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea3c:	4413      	add	r3, r2
 800ea3e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ea42:	633b      	str	r3, [r7, #48]	; 0x30
 800ea44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea46:	2200      	movs	r2, #0
 800ea48:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	627b      	str	r3, [r7, #36]	; 0x24
 800ea50:	68bb      	ldr	r3, [r7, #8]
 800ea52:	785b      	ldrb	r3, [r3, #1]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d126      	bne.n	800eaa6 <HAL_PCD_EP_DB_Transmit+0x15a>
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	61fb      	str	r3, [r7, #28]
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ea66:	b29b      	uxth	r3, r3
 800ea68:	461a      	mov	r2, r3
 800ea6a:	69fb      	ldr	r3, [r7, #28]
 800ea6c:	4413      	add	r3, r2
 800ea6e:	61fb      	str	r3, [r7, #28]
 800ea70:	68bb      	ldr	r3, [r7, #8]
 800ea72:	781b      	ldrb	r3, [r3, #0]
 800ea74:	011a      	lsls	r2, r3, #4
 800ea76:	69fb      	ldr	r3, [r7, #28]
 800ea78:	4413      	add	r3, r2
 800ea7a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ea7e:	61bb      	str	r3, [r7, #24]
 800ea80:	69bb      	ldr	r3, [r7, #24]
 800ea82:	881b      	ldrh	r3, [r3, #0]
 800ea84:	b29b      	uxth	r3, r3
 800ea86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ea8a:	b29a      	uxth	r2, r3
 800ea8c:	69bb      	ldr	r3, [r7, #24]
 800ea8e:	801a      	strh	r2, [r3, #0]
 800ea90:	69bb      	ldr	r3, [r7, #24]
 800ea92:	881b      	ldrh	r3, [r3, #0]
 800ea94:	b29b      	uxth	r3, r3
 800ea96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ea9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ea9e:	b29a      	uxth	r2, r3
 800eaa0:	69bb      	ldr	r3, [r7, #24]
 800eaa2:	801a      	strh	r2, [r3, #0]
 800eaa4:	e017      	b.n	800ead6 <HAL_PCD_EP_DB_Transmit+0x18a>
 800eaa6:	68bb      	ldr	r3, [r7, #8]
 800eaa8:	785b      	ldrb	r3, [r3, #1]
 800eaaa:	2b01      	cmp	r3, #1
 800eaac:	d113      	bne.n	800ead6 <HAL_PCD_EP_DB_Transmit+0x18a>
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eab6:	b29b      	uxth	r3, r3
 800eab8:	461a      	mov	r2, r3
 800eaba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eabc:	4413      	add	r3, r2
 800eabe:	627b      	str	r3, [r7, #36]	; 0x24
 800eac0:	68bb      	ldr	r3, [r7, #8]
 800eac2:	781b      	ldrb	r3, [r3, #0]
 800eac4:	011a      	lsls	r2, r3, #4
 800eac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eac8:	4413      	add	r3, r2
 800eaca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800eace:	623b      	str	r3, [r7, #32]
 800ead0:	6a3b      	ldr	r3, [r7, #32]
 800ead2:	2200      	movs	r2, #0
 800ead4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800ead6:	68bb      	ldr	r3, [r7, #8]
 800ead8:	781b      	ldrb	r3, [r3, #0]
 800eada:	4619      	mov	r1, r3
 800eadc:	68f8      	ldr	r0, [r7, #12]
 800eade:	f006 f820 	bl	8014b22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800eae2:	88fb      	ldrh	r3, [r7, #6]
 800eae4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	f000 82fc 	beq.w	800f0e6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	461a      	mov	r2, r3
 800eaf4:	68bb      	ldr	r3, [r7, #8]
 800eaf6:	781b      	ldrb	r3, [r3, #0]
 800eaf8:	009b      	lsls	r3, r3, #2
 800eafa:	4413      	add	r3, r2
 800eafc:	881b      	ldrh	r3, [r3, #0]
 800eafe:	b29b      	uxth	r3, r3
 800eb00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eb04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eb08:	82fb      	strh	r3, [r7, #22]
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	461a      	mov	r2, r3
 800eb10:	68bb      	ldr	r3, [r7, #8]
 800eb12:	781b      	ldrb	r3, [r3, #0]
 800eb14:	009b      	lsls	r3, r3, #2
 800eb16:	441a      	add	r2, r3
 800eb18:	8afb      	ldrh	r3, [r7, #22]
 800eb1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eb1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eb22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800eb26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb2a:	b29b      	uxth	r3, r3
 800eb2c:	8013      	strh	r3, [r2, #0]
 800eb2e:	e2da      	b.n	800f0e6 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800eb30:	88fb      	ldrh	r3, [r7, #6]
 800eb32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d021      	beq.n	800eb7e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	461a      	mov	r2, r3
 800eb40:	68bb      	ldr	r3, [r7, #8]
 800eb42:	781b      	ldrb	r3, [r3, #0]
 800eb44:	009b      	lsls	r3, r3, #2
 800eb46:	4413      	add	r3, r2
 800eb48:	881b      	ldrh	r3, [r3, #0]
 800eb4a:	b29b      	uxth	r3, r3
 800eb4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eb50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eb54:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	461a      	mov	r2, r3
 800eb5e:	68bb      	ldr	r3, [r7, #8]
 800eb60:	781b      	ldrb	r3, [r3, #0]
 800eb62:	009b      	lsls	r3, r3, #2
 800eb64:	441a      	add	r2, r3
 800eb66:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800eb6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eb6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eb72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800eb76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb7a:	b29b      	uxth	r3, r3
 800eb7c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800eb7e:	68bb      	ldr	r3, [r7, #8]
 800eb80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800eb84:	2b01      	cmp	r3, #1
 800eb86:	f040 82ae 	bne.w	800f0e6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800eb8a:	68bb      	ldr	r3, [r7, #8]
 800eb8c:	695a      	ldr	r2, [r3, #20]
 800eb8e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800eb92:	441a      	add	r2, r3
 800eb94:	68bb      	ldr	r3, [r7, #8]
 800eb96:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800eb98:	68bb      	ldr	r3, [r7, #8]
 800eb9a:	69da      	ldr	r2, [r3, #28]
 800eb9c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800eba0:	441a      	add	r2, r3
 800eba2:	68bb      	ldr	r3, [r7, #8]
 800eba4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800eba6:	68bb      	ldr	r3, [r7, #8]
 800eba8:	6a1a      	ldr	r2, [r3, #32]
 800ebaa:	68bb      	ldr	r3, [r7, #8]
 800ebac:	691b      	ldr	r3, [r3, #16]
 800ebae:	429a      	cmp	r2, r3
 800ebb0:	d30b      	bcc.n	800ebca <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800ebb2:	68bb      	ldr	r3, [r7, #8]
 800ebb4:	691b      	ldr	r3, [r3, #16]
 800ebb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800ebba:	68bb      	ldr	r3, [r7, #8]
 800ebbc:	6a1a      	ldr	r2, [r3, #32]
 800ebbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ebc2:	1ad2      	subs	r2, r2, r3
 800ebc4:	68bb      	ldr	r3, [r7, #8]
 800ebc6:	621a      	str	r2, [r3, #32]
 800ebc8:	e017      	b.n	800ebfa <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800ebca:	68bb      	ldr	r3, [r7, #8]
 800ebcc:	6a1b      	ldr	r3, [r3, #32]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d108      	bne.n	800ebe4 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800ebd2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ebd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800ebda:	68bb      	ldr	r3, [r7, #8]
 800ebdc:	2200      	movs	r2, #0
 800ebde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800ebe2:	e00a      	b.n	800ebfa <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800ebe4:	68bb      	ldr	r3, [r7, #8]
 800ebe6:	2200      	movs	r2, #0
 800ebe8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800ebec:	68bb      	ldr	r3, [r7, #8]
 800ebee:	6a1b      	ldr	r3, [r3, #32]
 800ebf0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800ebf4:	68bb      	ldr	r3, [r7, #8]
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800ebfa:	68bb      	ldr	r3, [r7, #8]
 800ebfc:	785b      	ldrb	r3, [r3, #1]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d165      	bne.n	800ecce <HAL_PCD_EP_DB_Transmit+0x382>
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ec10:	b29b      	uxth	r3, r3
 800ec12:	461a      	mov	r2, r3
 800ec14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec16:	4413      	add	r3, r2
 800ec18:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ec1a:	68bb      	ldr	r3, [r7, #8]
 800ec1c:	781b      	ldrb	r3, [r3, #0]
 800ec1e:	011a      	lsls	r2, r3, #4
 800ec20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec22:	4413      	add	r3, r2
 800ec24:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ec28:	63bb      	str	r3, [r7, #56]	; 0x38
 800ec2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec2c:	881b      	ldrh	r3, [r3, #0]
 800ec2e:	b29b      	uxth	r3, r3
 800ec30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ec34:	b29a      	uxth	r2, r3
 800ec36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec38:	801a      	strh	r2, [r3, #0]
 800ec3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ec3e:	2b3e      	cmp	r3, #62	; 0x3e
 800ec40:	d91d      	bls.n	800ec7e <HAL_PCD_EP_DB_Transmit+0x332>
 800ec42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ec46:	095b      	lsrs	r3, r3, #5
 800ec48:	64bb      	str	r3, [r7, #72]	; 0x48
 800ec4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ec4e:	f003 031f 	and.w	r3, r3, #31
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d102      	bne.n	800ec5c <HAL_PCD_EP_DB_Transmit+0x310>
 800ec56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec58:	3b01      	subs	r3, #1
 800ec5a:	64bb      	str	r3, [r7, #72]	; 0x48
 800ec5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec5e:	881b      	ldrh	r3, [r3, #0]
 800ec60:	b29a      	uxth	r2, r3
 800ec62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec64:	b29b      	uxth	r3, r3
 800ec66:	029b      	lsls	r3, r3, #10
 800ec68:	b29b      	uxth	r3, r3
 800ec6a:	4313      	orrs	r3, r2
 800ec6c:	b29b      	uxth	r3, r3
 800ec6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ec72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ec76:	b29a      	uxth	r2, r3
 800ec78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec7a:	801a      	strh	r2, [r3, #0]
 800ec7c:	e044      	b.n	800ed08 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800ec7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d10a      	bne.n	800ec9c <HAL_PCD_EP_DB_Transmit+0x350>
 800ec86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec88:	881b      	ldrh	r3, [r3, #0]
 800ec8a:	b29b      	uxth	r3, r3
 800ec8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ec90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ec94:	b29a      	uxth	r2, r3
 800ec96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec98:	801a      	strh	r2, [r3, #0]
 800ec9a:	e035      	b.n	800ed08 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800ec9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800eca0:	085b      	lsrs	r3, r3, #1
 800eca2:	64bb      	str	r3, [r7, #72]	; 0x48
 800eca4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800eca8:	f003 0301 	and.w	r3, r3, #1
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d002      	beq.n	800ecb6 <HAL_PCD_EP_DB_Transmit+0x36a>
 800ecb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ecb2:	3301      	adds	r3, #1
 800ecb4:	64bb      	str	r3, [r7, #72]	; 0x48
 800ecb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecb8:	881b      	ldrh	r3, [r3, #0]
 800ecba:	b29a      	uxth	r2, r3
 800ecbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ecbe:	b29b      	uxth	r3, r3
 800ecc0:	029b      	lsls	r3, r3, #10
 800ecc2:	b29b      	uxth	r3, r3
 800ecc4:	4313      	orrs	r3, r2
 800ecc6:	b29a      	uxth	r2, r3
 800ecc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecca:	801a      	strh	r2, [r3, #0]
 800eccc:	e01c      	b.n	800ed08 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800ecce:	68bb      	ldr	r3, [r7, #8]
 800ecd0:	785b      	ldrb	r3, [r3, #1]
 800ecd2:	2b01      	cmp	r3, #1
 800ecd4:	d118      	bne.n	800ed08 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	647b      	str	r3, [r7, #68]	; 0x44
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ece4:	b29b      	uxth	r3, r3
 800ece6:	461a      	mov	r2, r3
 800ece8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ecea:	4413      	add	r3, r2
 800ecec:	647b      	str	r3, [r7, #68]	; 0x44
 800ecee:	68bb      	ldr	r3, [r7, #8]
 800ecf0:	781b      	ldrb	r3, [r3, #0]
 800ecf2:	011a      	lsls	r2, r3, #4
 800ecf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ecf6:	4413      	add	r3, r2
 800ecf8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ecfc:	643b      	str	r3, [r7, #64]	; 0x40
 800ecfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ed02:	b29a      	uxth	r2, r3
 800ed04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed06:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	6818      	ldr	r0, [r3, #0]
 800ed0c:	68bb      	ldr	r3, [r7, #8]
 800ed0e:	6959      	ldr	r1, [r3, #20]
 800ed10:	68bb      	ldr	r3, [r7, #8]
 800ed12:	891a      	ldrh	r2, [r3, #8]
 800ed14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ed18:	b29b      	uxth	r3, r3
 800ed1a:	f003 f9c8 	bl	80120ae <USB_WritePMA>
 800ed1e:	e1e2      	b.n	800f0e6 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ed28:	b29b      	uxth	r3, r3
 800ed2a:	461a      	mov	r2, r3
 800ed2c:	68bb      	ldr	r3, [r7, #8]
 800ed2e:	781b      	ldrb	r3, [r3, #0]
 800ed30:	00db      	lsls	r3, r3, #3
 800ed32:	4413      	add	r3, r2
 800ed34:	3306      	adds	r3, #6
 800ed36:	005b      	lsls	r3, r3, #1
 800ed38:	68fa      	ldr	r2, [r7, #12]
 800ed3a:	6812      	ldr	r2, [r2, #0]
 800ed3c:	4413      	add	r3, r2
 800ed3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ed42:	881b      	ldrh	r3, [r3, #0]
 800ed44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ed48:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800ed4c:	68bb      	ldr	r3, [r7, #8]
 800ed4e:	699a      	ldr	r2, [r3, #24]
 800ed50:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ed54:	429a      	cmp	r2, r3
 800ed56:	d307      	bcc.n	800ed68 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800ed58:	68bb      	ldr	r3, [r7, #8]
 800ed5a:	699a      	ldr	r2, [r3, #24]
 800ed5c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ed60:	1ad2      	subs	r2, r2, r3
 800ed62:	68bb      	ldr	r3, [r7, #8]
 800ed64:	619a      	str	r2, [r3, #24]
 800ed66:	e002      	b.n	800ed6e <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800ed68:	68bb      	ldr	r3, [r7, #8]
 800ed6a:	2200      	movs	r2, #0
 800ed6c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800ed6e:	68bb      	ldr	r3, [r7, #8]
 800ed70:	699b      	ldr	r3, [r3, #24]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	f040 80c0 	bne.w	800eef8 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ed78:	68bb      	ldr	r3, [r7, #8]
 800ed7a:	785b      	ldrb	r3, [r3, #1]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d126      	bne.n	800edce <HAL_PCD_EP_DB_Transmit+0x482>
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ed8e:	b29b      	uxth	r3, r3
 800ed90:	461a      	mov	r2, r3
 800ed92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ed94:	4413      	add	r3, r2
 800ed96:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ed98:	68bb      	ldr	r3, [r7, #8]
 800ed9a:	781b      	ldrb	r3, [r3, #0]
 800ed9c:	011a      	lsls	r2, r3, #4
 800ed9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800eda0:	4413      	add	r3, r2
 800eda2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800eda6:	67bb      	str	r3, [r7, #120]	; 0x78
 800eda8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800edaa:	881b      	ldrh	r3, [r3, #0]
 800edac:	b29b      	uxth	r3, r3
 800edae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800edb2:	b29a      	uxth	r2, r3
 800edb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800edb6:	801a      	strh	r2, [r3, #0]
 800edb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800edba:	881b      	ldrh	r3, [r3, #0]
 800edbc:	b29b      	uxth	r3, r3
 800edbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800edc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800edc6:	b29a      	uxth	r2, r3
 800edc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800edca:	801a      	strh	r2, [r3, #0]
 800edcc:	e01a      	b.n	800ee04 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800edce:	68bb      	ldr	r3, [r7, #8]
 800edd0:	785b      	ldrb	r3, [r3, #1]
 800edd2:	2b01      	cmp	r3, #1
 800edd4:	d116      	bne.n	800ee04 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	667b      	str	r3, [r7, #100]	; 0x64
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ede4:	b29b      	uxth	r3, r3
 800ede6:	461a      	mov	r2, r3
 800ede8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800edea:	4413      	add	r3, r2
 800edec:	667b      	str	r3, [r7, #100]	; 0x64
 800edee:	68bb      	ldr	r3, [r7, #8]
 800edf0:	781b      	ldrb	r3, [r3, #0]
 800edf2:	011a      	lsls	r2, r3, #4
 800edf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800edf6:	4413      	add	r3, r2
 800edf8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800edfc:	663b      	str	r3, [r7, #96]	; 0x60
 800edfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ee00:	2200      	movs	r2, #0
 800ee02:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	677b      	str	r3, [r7, #116]	; 0x74
 800ee0a:	68bb      	ldr	r3, [r7, #8]
 800ee0c:	785b      	ldrb	r3, [r3, #1]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d12b      	bne.n	800ee6a <HAL_PCD_EP_DB_Transmit+0x51e>
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ee20:	b29b      	uxth	r3, r3
 800ee22:	461a      	mov	r2, r3
 800ee24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee26:	4413      	add	r3, r2
 800ee28:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ee2a:	68bb      	ldr	r3, [r7, #8]
 800ee2c:	781b      	ldrb	r3, [r3, #0]
 800ee2e:	011a      	lsls	r2, r3, #4
 800ee30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee32:	4413      	add	r3, r2
 800ee34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ee38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ee3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ee40:	881b      	ldrh	r3, [r3, #0]
 800ee42:	b29b      	uxth	r3, r3
 800ee44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ee48:	b29a      	uxth	r2, r3
 800ee4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ee4e:	801a      	strh	r2, [r3, #0]
 800ee50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ee54:	881b      	ldrh	r3, [r3, #0]
 800ee56:	b29b      	uxth	r3, r3
 800ee58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ee5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ee60:	b29a      	uxth	r2, r3
 800ee62:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ee66:	801a      	strh	r2, [r3, #0]
 800ee68:	e017      	b.n	800ee9a <HAL_PCD_EP_DB_Transmit+0x54e>
 800ee6a:	68bb      	ldr	r3, [r7, #8]
 800ee6c:	785b      	ldrb	r3, [r3, #1]
 800ee6e:	2b01      	cmp	r3, #1
 800ee70:	d113      	bne.n	800ee9a <HAL_PCD_EP_DB_Transmit+0x54e>
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ee7a:	b29b      	uxth	r3, r3
 800ee7c:	461a      	mov	r2, r3
 800ee7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ee80:	4413      	add	r3, r2
 800ee82:	677b      	str	r3, [r7, #116]	; 0x74
 800ee84:	68bb      	ldr	r3, [r7, #8]
 800ee86:	781b      	ldrb	r3, [r3, #0]
 800ee88:	011a      	lsls	r2, r3, #4
 800ee8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ee8c:	4413      	add	r3, r2
 800ee8e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ee92:	673b      	str	r3, [r7, #112]	; 0x70
 800ee94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ee96:	2200      	movs	r2, #0
 800ee98:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800ee9a:	68bb      	ldr	r3, [r7, #8]
 800ee9c:	781b      	ldrb	r3, [r3, #0]
 800ee9e:	4619      	mov	r1, r3
 800eea0:	68f8      	ldr	r0, [r7, #12]
 800eea2:	f005 fe3e 	bl	8014b22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800eea6:	88fb      	ldrh	r3, [r7, #6]
 800eea8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	f040 811a 	bne.w	800f0e6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	461a      	mov	r2, r3
 800eeb8:	68bb      	ldr	r3, [r7, #8]
 800eeba:	781b      	ldrb	r3, [r3, #0]
 800eebc:	009b      	lsls	r3, r3, #2
 800eebe:	4413      	add	r3, r2
 800eec0:	881b      	ldrh	r3, [r3, #0]
 800eec2:	b29b      	uxth	r3, r3
 800eec4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eec8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eecc:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	461a      	mov	r2, r3
 800eed6:	68bb      	ldr	r3, [r7, #8]
 800eed8:	781b      	ldrb	r3, [r3, #0]
 800eeda:	009b      	lsls	r3, r3, #2
 800eedc:	441a      	add	r2, r3
 800eede:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800eee2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eee6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eeea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800eeee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eef2:	b29b      	uxth	r3, r3
 800eef4:	8013      	strh	r3, [r2, #0]
 800eef6:	e0f6      	b.n	800f0e6 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800eef8:	88fb      	ldrh	r3, [r7, #6]
 800eefa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d121      	bne.n	800ef46 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	461a      	mov	r2, r3
 800ef08:	68bb      	ldr	r3, [r7, #8]
 800ef0a:	781b      	ldrb	r3, [r3, #0]
 800ef0c:	009b      	lsls	r3, r3, #2
 800ef0e:	4413      	add	r3, r2
 800ef10:	881b      	ldrh	r3, [r3, #0]
 800ef12:	b29b      	uxth	r3, r3
 800ef14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ef18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ef1c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	461a      	mov	r2, r3
 800ef26:	68bb      	ldr	r3, [r7, #8]
 800ef28:	781b      	ldrb	r3, [r3, #0]
 800ef2a:	009b      	lsls	r3, r3, #2
 800ef2c:	441a      	add	r2, r3
 800ef2e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ef32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ef36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ef3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ef3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef42:	b29b      	uxth	r3, r3
 800ef44:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800ef46:	68bb      	ldr	r3, [r7, #8]
 800ef48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ef4c:	2b01      	cmp	r3, #1
 800ef4e:	f040 80ca 	bne.w	800f0e6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800ef52:	68bb      	ldr	r3, [r7, #8]
 800ef54:	695a      	ldr	r2, [r3, #20]
 800ef56:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ef5a:	441a      	add	r2, r3
 800ef5c:	68bb      	ldr	r3, [r7, #8]
 800ef5e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800ef60:	68bb      	ldr	r3, [r7, #8]
 800ef62:	69da      	ldr	r2, [r3, #28]
 800ef64:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ef68:	441a      	add	r2, r3
 800ef6a:	68bb      	ldr	r3, [r7, #8]
 800ef6c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800ef6e:	68bb      	ldr	r3, [r7, #8]
 800ef70:	6a1a      	ldr	r2, [r3, #32]
 800ef72:	68bb      	ldr	r3, [r7, #8]
 800ef74:	691b      	ldr	r3, [r3, #16]
 800ef76:	429a      	cmp	r2, r3
 800ef78:	d30b      	bcc.n	800ef92 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800ef7a:	68bb      	ldr	r3, [r7, #8]
 800ef7c:	691b      	ldr	r3, [r3, #16]
 800ef7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800ef82:	68bb      	ldr	r3, [r7, #8]
 800ef84:	6a1a      	ldr	r2, [r3, #32]
 800ef86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ef8a:	1ad2      	subs	r2, r2, r3
 800ef8c:	68bb      	ldr	r3, [r7, #8]
 800ef8e:	621a      	str	r2, [r3, #32]
 800ef90:	e017      	b.n	800efc2 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800ef92:	68bb      	ldr	r3, [r7, #8]
 800ef94:	6a1b      	ldr	r3, [r3, #32]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d108      	bne.n	800efac <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800ef9a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ef9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800efa2:	68bb      	ldr	r3, [r7, #8]
 800efa4:	2200      	movs	r2, #0
 800efa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800efaa:	e00a      	b.n	800efc2 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800efac:	68bb      	ldr	r3, [r7, #8]
 800efae:	6a1b      	ldr	r3, [r3, #32]
 800efb0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800efb4:	68bb      	ldr	r3, [r7, #8]
 800efb6:	2200      	movs	r2, #0
 800efb8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800efba:	68bb      	ldr	r3, [r7, #8]
 800efbc:	2200      	movs	r2, #0
 800efbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	657b      	str	r3, [r7, #84]	; 0x54
 800efc8:	68bb      	ldr	r3, [r7, #8]
 800efca:	785b      	ldrb	r3, [r3, #1]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d165      	bne.n	800f09c <HAL_PCD_EP_DB_Transmit+0x750>
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800efde:	b29b      	uxth	r3, r3
 800efe0:	461a      	mov	r2, r3
 800efe2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800efe4:	4413      	add	r3, r2
 800efe6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800efe8:	68bb      	ldr	r3, [r7, #8]
 800efea:	781b      	ldrb	r3, [r3, #0]
 800efec:	011a      	lsls	r2, r3, #4
 800efee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eff0:	4413      	add	r3, r2
 800eff2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800eff6:	65bb      	str	r3, [r7, #88]	; 0x58
 800eff8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800effa:	881b      	ldrh	r3, [r3, #0]
 800effc:	b29b      	uxth	r3, r3
 800effe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f002:	b29a      	uxth	r2, r3
 800f004:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f006:	801a      	strh	r2, [r3, #0]
 800f008:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f00c:	2b3e      	cmp	r3, #62	; 0x3e
 800f00e:	d91d      	bls.n	800f04c <HAL_PCD_EP_DB_Transmit+0x700>
 800f010:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f014:	095b      	lsrs	r3, r3, #5
 800f016:	66bb      	str	r3, [r7, #104]	; 0x68
 800f018:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f01c:	f003 031f 	and.w	r3, r3, #31
 800f020:	2b00      	cmp	r3, #0
 800f022:	d102      	bne.n	800f02a <HAL_PCD_EP_DB_Transmit+0x6de>
 800f024:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f026:	3b01      	subs	r3, #1
 800f028:	66bb      	str	r3, [r7, #104]	; 0x68
 800f02a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f02c:	881b      	ldrh	r3, [r3, #0]
 800f02e:	b29a      	uxth	r2, r3
 800f030:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f032:	b29b      	uxth	r3, r3
 800f034:	029b      	lsls	r3, r3, #10
 800f036:	b29b      	uxth	r3, r3
 800f038:	4313      	orrs	r3, r2
 800f03a:	b29b      	uxth	r3, r3
 800f03c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f040:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f044:	b29a      	uxth	r2, r3
 800f046:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f048:	801a      	strh	r2, [r3, #0]
 800f04a:	e041      	b.n	800f0d0 <HAL_PCD_EP_DB_Transmit+0x784>
 800f04c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f050:	2b00      	cmp	r3, #0
 800f052:	d10a      	bne.n	800f06a <HAL_PCD_EP_DB_Transmit+0x71e>
 800f054:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f056:	881b      	ldrh	r3, [r3, #0]
 800f058:	b29b      	uxth	r3, r3
 800f05a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f05e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f062:	b29a      	uxth	r2, r3
 800f064:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f066:	801a      	strh	r2, [r3, #0]
 800f068:	e032      	b.n	800f0d0 <HAL_PCD_EP_DB_Transmit+0x784>
 800f06a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f06e:	085b      	lsrs	r3, r3, #1
 800f070:	66bb      	str	r3, [r7, #104]	; 0x68
 800f072:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f076:	f003 0301 	and.w	r3, r3, #1
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d002      	beq.n	800f084 <HAL_PCD_EP_DB_Transmit+0x738>
 800f07e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f080:	3301      	adds	r3, #1
 800f082:	66bb      	str	r3, [r7, #104]	; 0x68
 800f084:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f086:	881b      	ldrh	r3, [r3, #0]
 800f088:	b29a      	uxth	r2, r3
 800f08a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f08c:	b29b      	uxth	r3, r3
 800f08e:	029b      	lsls	r3, r3, #10
 800f090:	b29b      	uxth	r3, r3
 800f092:	4313      	orrs	r3, r2
 800f094:	b29a      	uxth	r2, r3
 800f096:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f098:	801a      	strh	r2, [r3, #0]
 800f09a:	e019      	b.n	800f0d0 <HAL_PCD_EP_DB_Transmit+0x784>
 800f09c:	68bb      	ldr	r3, [r7, #8]
 800f09e:	785b      	ldrb	r3, [r3, #1]
 800f0a0:	2b01      	cmp	r3, #1
 800f0a2:	d115      	bne.n	800f0d0 <HAL_PCD_EP_DB_Transmit+0x784>
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f0ac:	b29b      	uxth	r3, r3
 800f0ae:	461a      	mov	r2, r3
 800f0b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f0b2:	4413      	add	r3, r2
 800f0b4:	657b      	str	r3, [r7, #84]	; 0x54
 800f0b6:	68bb      	ldr	r3, [r7, #8]
 800f0b8:	781b      	ldrb	r3, [r3, #0]
 800f0ba:	011a      	lsls	r2, r3, #4
 800f0bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f0be:	4413      	add	r3, r2
 800f0c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800f0c4:	653b      	str	r3, [r7, #80]	; 0x50
 800f0c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f0ca:	b29a      	uxth	r2, r3
 800f0cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0ce:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	6818      	ldr	r0, [r3, #0]
 800f0d4:	68bb      	ldr	r3, [r7, #8]
 800f0d6:	6959      	ldr	r1, [r3, #20]
 800f0d8:	68bb      	ldr	r3, [r7, #8]
 800f0da:	895a      	ldrh	r2, [r3, #10]
 800f0dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f0e0:	b29b      	uxth	r3, r3
 800f0e2:	f002 ffe4 	bl	80120ae <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	461a      	mov	r2, r3
 800f0ec:	68bb      	ldr	r3, [r7, #8]
 800f0ee:	781b      	ldrb	r3, [r3, #0]
 800f0f0:	009b      	lsls	r3, r3, #2
 800f0f2:	4413      	add	r3, r2
 800f0f4:	881b      	ldrh	r3, [r3, #0]
 800f0f6:	b29b      	uxth	r3, r3
 800f0f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f0fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f100:	82bb      	strh	r3, [r7, #20]
 800f102:	8abb      	ldrh	r3, [r7, #20]
 800f104:	f083 0310 	eor.w	r3, r3, #16
 800f108:	82bb      	strh	r3, [r7, #20]
 800f10a:	8abb      	ldrh	r3, [r7, #20]
 800f10c:	f083 0320 	eor.w	r3, r3, #32
 800f110:	82bb      	strh	r3, [r7, #20]
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	461a      	mov	r2, r3
 800f118:	68bb      	ldr	r3, [r7, #8]
 800f11a:	781b      	ldrb	r3, [r3, #0]
 800f11c:	009b      	lsls	r3, r3, #2
 800f11e:	441a      	add	r2, r3
 800f120:	8abb      	ldrh	r3, [r7, #20]
 800f122:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f126:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f12a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f12e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f132:	b29b      	uxth	r3, r3
 800f134:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800f136:	2300      	movs	r3, #0
}
 800f138:	4618      	mov	r0, r3
 800f13a:	3790      	adds	r7, #144	; 0x90
 800f13c:	46bd      	mov	sp, r7
 800f13e:	bd80      	pop	{r7, pc}

0800f140 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800f140:	b480      	push	{r7}
 800f142:	b087      	sub	sp, #28
 800f144:	af00      	add	r7, sp, #0
 800f146:	60f8      	str	r0, [r7, #12]
 800f148:	607b      	str	r3, [r7, #4]
 800f14a:	460b      	mov	r3, r1
 800f14c:	817b      	strh	r3, [r7, #10]
 800f14e:	4613      	mov	r3, r2
 800f150:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800f152:	897b      	ldrh	r3, [r7, #10]
 800f154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f158:	b29b      	uxth	r3, r3
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d00b      	beq.n	800f176 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800f15e:	897b      	ldrh	r3, [r7, #10]
 800f160:	f003 0307 	and.w	r3, r3, #7
 800f164:	1c5a      	adds	r2, r3, #1
 800f166:	4613      	mov	r3, r2
 800f168:	009b      	lsls	r3, r3, #2
 800f16a:	4413      	add	r3, r2
 800f16c:	00db      	lsls	r3, r3, #3
 800f16e:	68fa      	ldr	r2, [r7, #12]
 800f170:	4413      	add	r3, r2
 800f172:	617b      	str	r3, [r7, #20]
 800f174:	e009      	b.n	800f18a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800f176:	897a      	ldrh	r2, [r7, #10]
 800f178:	4613      	mov	r3, r2
 800f17a:	009b      	lsls	r3, r3, #2
 800f17c:	4413      	add	r3, r2
 800f17e:	00db      	lsls	r3, r3, #3
 800f180:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800f184:	68fa      	ldr	r2, [r7, #12]
 800f186:	4413      	add	r3, r2
 800f188:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800f18a:	893b      	ldrh	r3, [r7, #8]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d107      	bne.n	800f1a0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800f190:	697b      	ldr	r3, [r7, #20]
 800f192:	2200      	movs	r2, #0
 800f194:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	b29a      	uxth	r2, r3
 800f19a:	697b      	ldr	r3, [r7, #20]
 800f19c:	80da      	strh	r2, [r3, #6]
 800f19e:	e00b      	b.n	800f1b8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800f1a0:	697b      	ldr	r3, [r7, #20]
 800f1a2:	2201      	movs	r2, #1
 800f1a4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	b29a      	uxth	r2, r3
 800f1aa:	697b      	ldr	r3, [r7, #20]
 800f1ac:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	0c1b      	lsrs	r3, r3, #16
 800f1b2:	b29a      	uxth	r2, r3
 800f1b4:	697b      	ldr	r3, [r7, #20]
 800f1b6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800f1b8:	2300      	movs	r3, #0
}
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	371c      	adds	r7, #28
 800f1be:	46bd      	mov	sp, r7
 800f1c0:	bc80      	pop	{r7}
 800f1c2:	4770      	bx	lr

0800f1c4 <LL_GPIO_SetPinMode>:
{
 800f1c4:	b490      	push	{r4, r7}
 800f1c6:	b088      	sub	sp, #32
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	60f8      	str	r0, [r7, #12]
 800f1cc:	60b9      	str	r1, [r7, #8]
 800f1ce:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	461a      	mov	r2, r3
 800f1d4:	68bb      	ldr	r3, [r7, #8]
 800f1d6:	0e1b      	lsrs	r3, r3, #24
 800f1d8:	4413      	add	r3, r2
 800f1da:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 800f1dc:	6822      	ldr	r2, [r4, #0]
 800f1de:	68bb      	ldr	r3, [r7, #8]
 800f1e0:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f1e2:	697b      	ldr	r3, [r7, #20]
 800f1e4:	fa93 f3a3 	rbit	r3, r3
 800f1e8:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800f1ea:	693b      	ldr	r3, [r7, #16]
 800f1ec:	fab3 f383 	clz	r3, r3
 800f1f0:	b2db      	uxtb	r3, r3
 800f1f2:	009b      	lsls	r3, r3, #2
 800f1f4:	210f      	movs	r1, #15
 800f1f6:	fa01 f303 	lsl.w	r3, r1, r3
 800f1fa:	43db      	mvns	r3, r3
 800f1fc:	401a      	ands	r2, r3
 800f1fe:	68bb      	ldr	r3, [r7, #8]
 800f200:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f202:	69fb      	ldr	r3, [r7, #28]
 800f204:	fa93 f3a3 	rbit	r3, r3
 800f208:	61bb      	str	r3, [r7, #24]
  return result;
 800f20a:	69bb      	ldr	r3, [r7, #24]
 800f20c:	fab3 f383 	clz	r3, r3
 800f210:	b2db      	uxtb	r3, r3
 800f212:	009b      	lsls	r3, r3, #2
 800f214:	6879      	ldr	r1, [r7, #4]
 800f216:	fa01 f303 	lsl.w	r3, r1, r3
 800f21a:	4313      	orrs	r3, r2
 800f21c:	6023      	str	r3, [r4, #0]
}
 800f21e:	bf00      	nop
 800f220:	3720      	adds	r7, #32
 800f222:	46bd      	mov	sp, r7
 800f224:	bc90      	pop	{r4, r7}
 800f226:	4770      	bx	lr

0800f228 <LL_GPIO_SetPinSpeed>:
{
 800f228:	b490      	push	{r4, r7}
 800f22a:	b088      	sub	sp, #32
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	60f8      	str	r0, [r7, #12]
 800f230:	60b9      	str	r1, [r7, #8]
 800f232:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	461a      	mov	r2, r3
 800f238:	68bb      	ldr	r3, [r7, #8]
 800f23a:	0e1b      	lsrs	r3, r3, #24
 800f23c:	4413      	add	r3, r2
 800f23e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 800f240:	6822      	ldr	r2, [r4, #0]
 800f242:	68bb      	ldr	r3, [r7, #8]
 800f244:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f246:	697b      	ldr	r3, [r7, #20]
 800f248:	fa93 f3a3 	rbit	r3, r3
 800f24c:	613b      	str	r3, [r7, #16]
  return result;
 800f24e:	693b      	ldr	r3, [r7, #16]
 800f250:	fab3 f383 	clz	r3, r3
 800f254:	b2db      	uxtb	r3, r3
 800f256:	009b      	lsls	r3, r3, #2
 800f258:	2103      	movs	r1, #3
 800f25a:	fa01 f303 	lsl.w	r3, r1, r3
 800f25e:	43db      	mvns	r3, r3
 800f260:	401a      	ands	r2, r3
 800f262:	68bb      	ldr	r3, [r7, #8]
 800f264:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f266:	69fb      	ldr	r3, [r7, #28]
 800f268:	fa93 f3a3 	rbit	r3, r3
 800f26c:	61bb      	str	r3, [r7, #24]
  return result;
 800f26e:	69bb      	ldr	r3, [r7, #24]
 800f270:	fab3 f383 	clz	r3, r3
 800f274:	b2db      	uxtb	r3, r3
 800f276:	009b      	lsls	r3, r3, #2
 800f278:	6879      	ldr	r1, [r7, #4]
 800f27a:	fa01 f303 	lsl.w	r3, r1, r3
 800f27e:	4313      	orrs	r3, r2
 800f280:	6023      	str	r3, [r4, #0]
}
 800f282:	bf00      	nop
 800f284:	3720      	adds	r7, #32
 800f286:	46bd      	mov	sp, r7
 800f288:	bc90      	pop	{r4, r7}
 800f28a:	4770      	bx	lr

0800f28c <LL_GPIO_SetPinOutputType>:
{
 800f28c:	b490      	push	{r4, r7}
 800f28e:	b088      	sub	sp, #32
 800f290:	af00      	add	r7, sp, #0
 800f292:	60f8      	str	r0, [r7, #12]
 800f294:	60b9      	str	r1, [r7, #8]
 800f296:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	461a      	mov	r2, r3
 800f29c:	68bb      	ldr	r3, [r7, #8]
 800f29e:	0e1b      	lsrs	r3, r3, #24
 800f2a0:	4413      	add	r3, r2
 800f2a2:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 800f2a4:	6822      	ldr	r2, [r4, #0]
 800f2a6:	68bb      	ldr	r3, [r7, #8]
 800f2a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f2aa:	697b      	ldr	r3, [r7, #20]
 800f2ac:	fa93 f3a3 	rbit	r3, r3
 800f2b0:	613b      	str	r3, [r7, #16]
  return result;
 800f2b2:	693b      	ldr	r3, [r7, #16]
 800f2b4:	fab3 f383 	clz	r3, r3
 800f2b8:	b2db      	uxtb	r3, r3
 800f2ba:	009b      	lsls	r3, r3, #2
 800f2bc:	2104      	movs	r1, #4
 800f2be:	fa01 f303 	lsl.w	r3, r1, r3
 800f2c2:	43db      	mvns	r3, r3
 800f2c4:	401a      	ands	r2, r3
 800f2c6:	68bb      	ldr	r3, [r7, #8]
 800f2c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f2ca:	69fb      	ldr	r3, [r7, #28]
 800f2cc:	fa93 f3a3 	rbit	r3, r3
 800f2d0:	61bb      	str	r3, [r7, #24]
  return result;
 800f2d2:	69bb      	ldr	r3, [r7, #24]
 800f2d4:	fab3 f383 	clz	r3, r3
 800f2d8:	b2db      	uxtb	r3, r3
 800f2da:	009b      	lsls	r3, r3, #2
 800f2dc:	6879      	ldr	r1, [r7, #4]
 800f2de:	fa01 f303 	lsl.w	r3, r1, r3
 800f2e2:	4313      	orrs	r3, r2
 800f2e4:	6023      	str	r3, [r4, #0]
}
 800f2e6:	bf00      	nop
 800f2e8:	3720      	adds	r7, #32
 800f2ea:	46bd      	mov	sp, r7
 800f2ec:	bc90      	pop	{r4, r7}
 800f2ee:	4770      	bx	lr

0800f2f0 <LL_GPIO_SetPinPull>:
{
 800f2f0:	b480      	push	{r7}
 800f2f2:	b087      	sub	sp, #28
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	60f8      	str	r0, [r7, #12]
 800f2f8:	60b9      	str	r1, [r7, #8]
 800f2fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	68da      	ldr	r2, [r3, #12]
 800f300:	68bb      	ldr	r3, [r7, #8]
 800f302:	0a1b      	lsrs	r3, r3, #8
 800f304:	43db      	mvns	r3, r3
 800f306:	401a      	ands	r2, r3
 800f308:	68bb      	ldr	r3, [r7, #8]
 800f30a:	0a1b      	lsrs	r3, r3, #8
 800f30c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f30e:	697b      	ldr	r3, [r7, #20]
 800f310:	fa93 f3a3 	rbit	r3, r3
 800f314:	613b      	str	r3, [r7, #16]
  return result;
 800f316:	693b      	ldr	r3, [r7, #16]
 800f318:	fab3 f383 	clz	r3, r3
 800f31c:	b2db      	uxtb	r3, r3
 800f31e:	4619      	mov	r1, r3
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	408b      	lsls	r3, r1
 800f324:	431a      	orrs	r2, r3
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	60da      	str	r2, [r3, #12]
}
 800f32a:	bf00      	nop
 800f32c:	371c      	adds	r7, #28
 800f32e:	46bd      	mov	sp, r7
 800f330:	bc80      	pop	{r7}
 800f332:	4770      	bx	lr

0800f334 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800f334:	b580      	push	{r7, lr}
 800f336:	b088      	sub	sp, #32
 800f338:	af00      	add	r7, sp, #0
 800f33a:	6078      	str	r0, [r7, #4]
 800f33c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 800f33e:	683b      	ldr	r3, [r7, #0]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	021b      	lsls	r3, r3, #8
 800f344:	0c1b      	lsrs	r3, r3, #16
 800f346:	617b      	str	r3, [r7, #20]
 800f348:	697b      	ldr	r3, [r7, #20]
 800f34a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f34c:	693b      	ldr	r3, [r7, #16]
 800f34e:	fa93 f3a3 	rbit	r3, r3
 800f352:	60fb      	str	r3, [r7, #12]
  return result;
 800f354:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 800f356:	fab3 f383 	clz	r3, r3
 800f35a:	b2db      	uxtb	r3, r3
 800f35c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 800f35e:	e044      	b.n	800f3ea <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 800f360:	2201      	movs	r2, #1
 800f362:	69fb      	ldr	r3, [r7, #28]
 800f364:	409a      	lsls	r2, r3
 800f366:	697b      	ldr	r3, [r7, #20]
 800f368:	4013      	ands	r3, r2
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d03a      	beq.n	800f3e4 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 800f36e:	69fb      	ldr	r3, [r7, #28]
 800f370:	2b07      	cmp	r3, #7
 800f372:	d806      	bhi.n	800f382 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 800f374:	f240 1201 	movw	r2, #257	; 0x101
 800f378:	69fb      	ldr	r3, [r7, #28]
 800f37a:	fa02 f303 	lsl.w	r3, r2, r3
 800f37e:	61bb      	str	r3, [r7, #24]
 800f380:	e008      	b.n	800f394 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 800f382:	69fb      	ldr	r3, [r7, #28]
 800f384:	3b08      	subs	r3, #8
 800f386:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800f38a:	fa02 f303 	lsl.w	r3, r2, r3
 800f38e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f392:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 800f394:	683b      	ldr	r3, [r7, #0]
 800f396:	685b      	ldr	r3, [r3, #4]
 800f398:	2b08      	cmp	r3, #8
 800f39a:	d106      	bne.n	800f3aa <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800f39c:	683b      	ldr	r3, [r7, #0]
 800f39e:	691b      	ldr	r3, [r3, #16]
 800f3a0:	461a      	mov	r2, r3
 800f3a2:	69b9      	ldr	r1, [r7, #24]
 800f3a4:	6878      	ldr	r0, [r7, #4]
 800f3a6:	f7ff ffa3 	bl	800f2f0 <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800f3aa:	683b      	ldr	r3, [r7, #0]
 800f3ac:	685b      	ldr	r3, [r3, #4]
 800f3ae:	461a      	mov	r2, r3
 800f3b0:	69b9      	ldr	r1, [r7, #24]
 800f3b2:	6878      	ldr	r0, [r7, #4]
 800f3b4:	f7ff ff06 	bl	800f1c4 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800f3b8:	683b      	ldr	r3, [r7, #0]
 800f3ba:	685b      	ldr	r3, [r3, #4]
 800f3bc:	2b01      	cmp	r3, #1
 800f3be:	d003      	beq.n	800f3c8 <LL_GPIO_Init+0x94>
 800f3c0:	683b      	ldr	r3, [r7, #0]
 800f3c2:	685b      	ldr	r3, [r3, #4]
 800f3c4:	2b09      	cmp	r3, #9
 800f3c6:	d10d      	bne.n	800f3e4 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800f3c8:	683b      	ldr	r3, [r7, #0]
 800f3ca:	689b      	ldr	r3, [r3, #8]
 800f3cc:	461a      	mov	r2, r3
 800f3ce:	69b9      	ldr	r1, [r7, #24]
 800f3d0:	6878      	ldr	r0, [r7, #4]
 800f3d2:	f7ff ff29 	bl	800f228 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800f3d6:	683b      	ldr	r3, [r7, #0]
 800f3d8:	68db      	ldr	r3, [r3, #12]
 800f3da:	461a      	mov	r2, r3
 800f3dc:	69b9      	ldr	r1, [r7, #24]
 800f3de:	6878      	ldr	r0, [r7, #4]
 800f3e0:	f7ff ff54 	bl	800f28c <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 800f3e4:	69fb      	ldr	r3, [r7, #28]
 800f3e6:	3301      	adds	r3, #1
 800f3e8:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 800f3ea:	697a      	ldr	r2, [r7, #20]
 800f3ec:	69fb      	ldr	r3, [r7, #28]
 800f3ee:	fa22 f303 	lsr.w	r3, r2, r3
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d1b4      	bne.n	800f360 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 800f3f6:	2300      	movs	r3, #0
}
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	3720      	adds	r7, #32
 800f3fc:	46bd      	mov	sp, r7
 800f3fe:	bd80      	pop	{r7, pc}

0800f400 <LL_SPI_IsEnabled>:
{
 800f400:	b480      	push	{r7}
 800f402:	b083      	sub	sp, #12
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f410:	2b40      	cmp	r3, #64	; 0x40
 800f412:	d101      	bne.n	800f418 <LL_SPI_IsEnabled+0x18>
 800f414:	2301      	movs	r3, #1
 800f416:	e000      	b.n	800f41a <LL_SPI_IsEnabled+0x1a>
 800f418:	2300      	movs	r3, #0
}
 800f41a:	4618      	mov	r0, r3
 800f41c:	370c      	adds	r7, #12
 800f41e:	46bd      	mov	sp, r7
 800f420:	bc80      	pop	{r7}
 800f422:	4770      	bx	lr

0800f424 <LL_SPI_SetCRCPolynomial>:
{
 800f424:	b480      	push	{r7}
 800f426:	b083      	sub	sp, #12
 800f428:	af00      	add	r7, sp, #0
 800f42a:	6078      	str	r0, [r7, #4]
 800f42c:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800f42e:	683b      	ldr	r3, [r7, #0]
 800f430:	b29b      	uxth	r3, r3
 800f432:	461a      	mov	r2, r3
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	611a      	str	r2, [r3, #16]
}
 800f438:	bf00      	nop
 800f43a:	370c      	adds	r7, #12
 800f43c:	46bd      	mov	sp, r7
 800f43e:	bc80      	pop	{r7}
 800f440:	4770      	bx	lr

0800f442 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800f442:	b580      	push	{r7, lr}
 800f444:	b084      	sub	sp, #16
 800f446:	af00      	add	r7, sp, #0
 800f448:	6078      	str	r0, [r7, #4]
 800f44a:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800f44c:	2301      	movs	r3, #1
 800f44e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800f450:	6878      	ldr	r0, [r7, #4]
 800f452:	f7ff ffd5 	bl	800f400 <LL_SPI_IsEnabled>
 800f456:	4603      	mov	r3, r0
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d139      	bne.n	800f4d0 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f464:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 800f468:	683a      	ldr	r2, [r7, #0]
 800f46a:	6811      	ldr	r1, [r2, #0]
 800f46c:	683a      	ldr	r2, [r7, #0]
 800f46e:	6852      	ldr	r2, [r2, #4]
 800f470:	4311      	orrs	r1, r2
 800f472:	683a      	ldr	r2, [r7, #0]
 800f474:	6892      	ldr	r2, [r2, #8]
 800f476:	4311      	orrs	r1, r2
 800f478:	683a      	ldr	r2, [r7, #0]
 800f47a:	68d2      	ldr	r2, [r2, #12]
 800f47c:	4311      	orrs	r1, r2
 800f47e:	683a      	ldr	r2, [r7, #0]
 800f480:	6912      	ldr	r2, [r2, #16]
 800f482:	4311      	orrs	r1, r2
 800f484:	683a      	ldr	r2, [r7, #0]
 800f486:	6952      	ldr	r2, [r2, #20]
 800f488:	4311      	orrs	r1, r2
 800f48a:	683a      	ldr	r2, [r7, #0]
 800f48c:	6992      	ldr	r2, [r2, #24]
 800f48e:	4311      	orrs	r1, r2
 800f490:	683a      	ldr	r2, [r7, #0]
 800f492:	69d2      	ldr	r2, [r2, #28]
 800f494:	4311      	orrs	r1, r2
 800f496:	683a      	ldr	r2, [r7, #0]
 800f498:	6a12      	ldr	r2, [r2, #32]
 800f49a:	430a      	orrs	r2, r1
 800f49c:	431a      	orrs	r2, r3
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	685b      	ldr	r3, [r3, #4]
 800f4a6:	f023 0204 	bic.w	r2, r3, #4
 800f4aa:	683b      	ldr	r3, [r7, #0]
 800f4ac:	695b      	ldr	r3, [r3, #20]
 800f4ae:	0c1b      	lsrs	r3, r3, #16
 800f4b0:	431a      	orrs	r2, r3
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800f4b6:	683b      	ldr	r3, [r7, #0]
 800f4b8:	6a1b      	ldr	r3, [r3, #32]
 800f4ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f4be:	d105      	bne.n	800f4cc <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800f4c0:	683b      	ldr	r3, [r7, #0]
 800f4c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4c4:	4619      	mov	r1, r3
 800f4c6:	6878      	ldr	r0, [r7, #4]
 800f4c8:	f7ff ffac 	bl	800f424 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800f4cc:	2300      	movs	r3, #0
 800f4ce:	73fb      	strb	r3, [r7, #15]
  }

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	69db      	ldr	r3, [r3, #28]
 800f4d4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2S_SUPPORT */
  return status;
 800f4dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4de:	4618      	mov	r0, r3
 800f4e0:	3710      	adds	r7, #16
 800f4e2:	46bd      	mov	sp, r7
 800f4e4:	bd80      	pop	{r7, pc}

0800f4e6 <LL_TIM_SetPrescaler>:
{
 800f4e6:	b480      	push	{r7}
 800f4e8:	b083      	sub	sp, #12
 800f4ea:	af00      	add	r7, sp, #0
 800f4ec:	6078      	str	r0, [r7, #4]
 800f4ee:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	683a      	ldr	r2, [r7, #0]
 800f4f4:	629a      	str	r2, [r3, #40]	; 0x28
}
 800f4f6:	bf00      	nop
 800f4f8:	370c      	adds	r7, #12
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	bc80      	pop	{r7}
 800f4fe:	4770      	bx	lr

0800f500 <LL_TIM_SetAutoReload>:
{
 800f500:	b480      	push	{r7}
 800f502:	b083      	sub	sp, #12
 800f504:	af00      	add	r7, sp, #0
 800f506:	6078      	str	r0, [r7, #4]
 800f508:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	683a      	ldr	r2, [r7, #0]
 800f50e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800f510:	bf00      	nop
 800f512:	370c      	adds	r7, #12
 800f514:	46bd      	mov	sp, r7
 800f516:	bc80      	pop	{r7}
 800f518:	4770      	bx	lr

0800f51a <LL_TIM_SetRepetitionCounter>:
{
 800f51a:	b480      	push	{r7}
 800f51c:	b083      	sub	sp, #12
 800f51e:	af00      	add	r7, sp, #0
 800f520:	6078      	str	r0, [r7, #4]
 800f522:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	683a      	ldr	r2, [r7, #0]
 800f528:	631a      	str	r2, [r3, #48]	; 0x30
}
 800f52a:	bf00      	nop
 800f52c:	370c      	adds	r7, #12
 800f52e:	46bd      	mov	sp, r7
 800f530:	bc80      	pop	{r7}
 800f532:	4770      	bx	lr

0800f534 <LL_TIM_OC_SetCompareCH1>:
{
 800f534:	b480      	push	{r7}
 800f536:	b083      	sub	sp, #12
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
 800f53c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	683a      	ldr	r2, [r7, #0]
 800f542:	635a      	str	r2, [r3, #52]	; 0x34
}
 800f544:	bf00      	nop
 800f546:	370c      	adds	r7, #12
 800f548:	46bd      	mov	sp, r7
 800f54a:	bc80      	pop	{r7}
 800f54c:	4770      	bx	lr

0800f54e <LL_TIM_OC_SetCompareCH2>:
{
 800f54e:	b480      	push	{r7}
 800f550:	b083      	sub	sp, #12
 800f552:	af00      	add	r7, sp, #0
 800f554:	6078      	str	r0, [r7, #4]
 800f556:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	683a      	ldr	r2, [r7, #0]
 800f55c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800f55e:	bf00      	nop
 800f560:	370c      	adds	r7, #12
 800f562:	46bd      	mov	sp, r7
 800f564:	bc80      	pop	{r7}
 800f566:	4770      	bx	lr

0800f568 <LL_TIM_OC_SetCompareCH3>:
{
 800f568:	b480      	push	{r7}
 800f56a:	b083      	sub	sp, #12
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	6078      	str	r0, [r7, #4]
 800f570:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	683a      	ldr	r2, [r7, #0]
 800f576:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800f578:	bf00      	nop
 800f57a:	370c      	adds	r7, #12
 800f57c:	46bd      	mov	sp, r7
 800f57e:	bc80      	pop	{r7}
 800f580:	4770      	bx	lr

0800f582 <LL_TIM_OC_SetCompareCH4>:
{
 800f582:	b480      	push	{r7}
 800f584:	b083      	sub	sp, #12
 800f586:	af00      	add	r7, sp, #0
 800f588:	6078      	str	r0, [r7, #4]
 800f58a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	683a      	ldr	r2, [r7, #0]
 800f590:	641a      	str	r2, [r3, #64]	; 0x40
}
 800f592:	bf00      	nop
 800f594:	370c      	adds	r7, #12
 800f596:	46bd      	mov	sp, r7
 800f598:	bc80      	pop	{r7}
 800f59a:	4770      	bx	lr

0800f59c <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800f59c:	b480      	push	{r7}
 800f59e:	b083      	sub	sp, #12
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	695b      	ldr	r3, [r3, #20]
 800f5a8:	f043 0201 	orr.w	r2, r3, #1
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	615a      	str	r2, [r3, #20]
}
 800f5b0:	bf00      	nop
 800f5b2:	370c      	adds	r7, #12
 800f5b4:	46bd      	mov	sp, r7
 800f5b6:	bc80      	pop	{r7}
 800f5b8:	4770      	bx	lr
	...

0800f5bc <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b084      	sub	sp, #16
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
 800f5c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	4a31      	ldr	r2, [pc, #196]	; (800f694 <LL_TIM_Init+0xd8>)
 800f5d0:	4293      	cmp	r3, r2
 800f5d2:	d013      	beq.n	800f5fc <LL_TIM_Init+0x40>
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	4a30      	ldr	r2, [pc, #192]	; (800f698 <LL_TIM_Init+0xdc>)
 800f5d8:	4293      	cmp	r3, r2
 800f5da:	d00f      	beq.n	800f5fc <LL_TIM_Init+0x40>
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f5e2:	d00b      	beq.n	800f5fc <LL_TIM_Init+0x40>
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	4a2d      	ldr	r2, [pc, #180]	; (800f69c <LL_TIM_Init+0xe0>)
 800f5e8:	4293      	cmp	r3, r2
 800f5ea:	d007      	beq.n	800f5fc <LL_TIM_Init+0x40>
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	4a2c      	ldr	r2, [pc, #176]	; (800f6a0 <LL_TIM_Init+0xe4>)
 800f5f0:	4293      	cmp	r3, r2
 800f5f2:	d003      	beq.n	800f5fc <LL_TIM_Init+0x40>
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	4a2b      	ldr	r2, [pc, #172]	; (800f6a4 <LL_TIM_Init+0xe8>)
 800f5f8:	4293      	cmp	r3, r2
 800f5fa:	d106      	bne.n	800f60a <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800f602:	683b      	ldr	r3, [r7, #0]
 800f604:	685b      	ldr	r3, [r3, #4]
 800f606:	4313      	orrs	r3, r2
 800f608:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	4a21      	ldr	r2, [pc, #132]	; (800f694 <LL_TIM_Init+0xd8>)
 800f60e:	4293      	cmp	r3, r2
 800f610:	d013      	beq.n	800f63a <LL_TIM_Init+0x7e>
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	4a20      	ldr	r2, [pc, #128]	; (800f698 <LL_TIM_Init+0xdc>)
 800f616:	4293      	cmp	r3, r2
 800f618:	d00f      	beq.n	800f63a <LL_TIM_Init+0x7e>
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f620:	d00b      	beq.n	800f63a <LL_TIM_Init+0x7e>
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	4a1d      	ldr	r2, [pc, #116]	; (800f69c <LL_TIM_Init+0xe0>)
 800f626:	4293      	cmp	r3, r2
 800f628:	d007      	beq.n	800f63a <LL_TIM_Init+0x7e>
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	4a1c      	ldr	r2, [pc, #112]	; (800f6a0 <LL_TIM_Init+0xe4>)
 800f62e:	4293      	cmp	r3, r2
 800f630:	d003      	beq.n	800f63a <LL_TIM_Init+0x7e>
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	4a1b      	ldr	r2, [pc, #108]	; (800f6a4 <LL_TIM_Init+0xe8>)
 800f636:	4293      	cmp	r3, r2
 800f638:	d106      	bne.n	800f648 <LL_TIM_Init+0x8c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f640:	683b      	ldr	r3, [r7, #0]
 800f642:	68db      	ldr	r3, [r3, #12]
 800f644:	4313      	orrs	r3, r2
 800f646:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	68fa      	ldr	r2, [r7, #12]
 800f64c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800f64e:	683b      	ldr	r3, [r7, #0]
 800f650:	689b      	ldr	r3, [r3, #8]
 800f652:	4619      	mov	r1, r3
 800f654:	6878      	ldr	r0, [r7, #4]
 800f656:	f7ff ff53 	bl	800f500 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800f65a:	683b      	ldr	r3, [r7, #0]
 800f65c:	881b      	ldrh	r3, [r3, #0]
 800f65e:	4619      	mov	r1, r3
 800f660:	6878      	ldr	r0, [r7, #4]
 800f662:	f7ff ff40 	bl	800f4e6 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	4a0a      	ldr	r2, [pc, #40]	; (800f694 <LL_TIM_Init+0xd8>)
 800f66a:	4293      	cmp	r3, r2
 800f66c:	d003      	beq.n	800f676 <LL_TIM_Init+0xba>
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	4a09      	ldr	r2, [pc, #36]	; (800f698 <LL_TIM_Init+0xdc>)
 800f672:	4293      	cmp	r3, r2
 800f674:	d105      	bne.n	800f682 <LL_TIM_Init+0xc6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800f676:	683b      	ldr	r3, [r7, #0]
 800f678:	691b      	ldr	r3, [r3, #16]
 800f67a:	4619      	mov	r1, r3
 800f67c:	6878      	ldr	r0, [r7, #4]
 800f67e:	f7ff ff4c 	bl	800f51a <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800f682:	6878      	ldr	r0, [r7, #4]
 800f684:	f7ff ff8a 	bl	800f59c <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800f688:	2300      	movs	r3, #0
}
 800f68a:	4618      	mov	r0, r3
 800f68c:	3710      	adds	r7, #16
 800f68e:	46bd      	mov	sp, r7
 800f690:	bd80      	pop	{r7, pc}
 800f692:	bf00      	nop
 800f694:	40012c00 	.word	0x40012c00
 800f698:	40013400 	.word	0x40013400
 800f69c:	40000400 	.word	0x40000400
 800f6a0:	40000800 	.word	0x40000800
 800f6a4:	40000c00 	.word	0x40000c00

0800f6a8 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	b086      	sub	sp, #24
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	60f8      	str	r0, [r7, #12]
 800f6b0:	60b9      	str	r1, [r7, #8]
 800f6b2:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 800f6b4:	2301      	movs	r3, #1
 800f6b6:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 800f6b8:	68bb      	ldr	r3, [r7, #8]
 800f6ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f6be:	d027      	beq.n	800f710 <LL_TIM_OC_Init+0x68>
 800f6c0:	68bb      	ldr	r3, [r7, #8]
 800f6c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f6c6:	d82a      	bhi.n	800f71e <LL_TIM_OC_Init+0x76>
 800f6c8:	68bb      	ldr	r3, [r7, #8]
 800f6ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f6ce:	d018      	beq.n	800f702 <LL_TIM_OC_Init+0x5a>
 800f6d0:	68bb      	ldr	r3, [r7, #8]
 800f6d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f6d6:	d822      	bhi.n	800f71e <LL_TIM_OC_Init+0x76>
 800f6d8:	68bb      	ldr	r3, [r7, #8]
 800f6da:	2b01      	cmp	r3, #1
 800f6dc:	d003      	beq.n	800f6e6 <LL_TIM_OC_Init+0x3e>
 800f6de:	68bb      	ldr	r3, [r7, #8]
 800f6e0:	2b10      	cmp	r3, #16
 800f6e2:	d007      	beq.n	800f6f4 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 800f6e4:	e01b      	b.n	800f71e <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800f6e6:	6879      	ldr	r1, [r7, #4]
 800f6e8:	68f8      	ldr	r0, [r7, #12]
 800f6ea:	f000 f81f 	bl	800f72c <OC1Config>
 800f6ee:	4603      	mov	r3, r0
 800f6f0:	75fb      	strb	r3, [r7, #23]
      break;
 800f6f2:	e015      	b.n	800f720 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800f6f4:	6879      	ldr	r1, [r7, #4]
 800f6f6:	68f8      	ldr	r0, [r7, #12]
 800f6f8:	f000 f884 	bl	800f804 <OC2Config>
 800f6fc:	4603      	mov	r3, r0
 800f6fe:	75fb      	strb	r3, [r7, #23]
      break;
 800f700:	e00e      	b.n	800f720 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800f702:	6879      	ldr	r1, [r7, #4]
 800f704:	68f8      	ldr	r0, [r7, #12]
 800f706:	f000 f8ed 	bl	800f8e4 <OC3Config>
 800f70a:	4603      	mov	r3, r0
 800f70c:	75fb      	strb	r3, [r7, #23]
      break;
 800f70e:	e007      	b.n	800f720 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800f710:	6879      	ldr	r1, [r7, #4]
 800f712:	68f8      	ldr	r0, [r7, #12]
 800f714:	f000 f956 	bl	800f9c4 <OC4Config>
 800f718:	4603      	mov	r3, r0
 800f71a:	75fb      	strb	r3, [r7, #23]
      break;
 800f71c:	e000      	b.n	800f720 <LL_TIM_OC_Init+0x78>
      break;
 800f71e:	bf00      	nop
  }

  return result;
 800f720:	7dfb      	ldrb	r3, [r7, #23]
}
 800f722:	4618      	mov	r0, r3
 800f724:	3718      	adds	r7, #24
 800f726:	46bd      	mov	sp, r7
 800f728:	bd80      	pop	{r7, pc}
	...

0800f72c <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b086      	sub	sp, #24
 800f730:	af00      	add	r7, sp, #0
 800f732:	6078      	str	r0, [r7, #4]
 800f734:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	6a1b      	ldr	r3, [r3, #32]
 800f73a:	f023 0201 	bic.w	r2, r3, #1
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	6a1b      	ldr	r3, [r3, #32]
 800f746:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	685b      	ldr	r3, [r3, #4]
 800f74c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	699b      	ldr	r3, [r3, #24]
 800f752:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	f023 0303 	bic.w	r3, r3, #3
 800f75a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800f762:	683b      	ldr	r3, [r7, #0]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	4313      	orrs	r3, r2
 800f768:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800f76a:	697b      	ldr	r3, [r7, #20]
 800f76c:	f023 0202 	bic.w	r2, r3, #2
 800f770:	683b      	ldr	r3, [r7, #0]
 800f772:	691b      	ldr	r3, [r3, #16]
 800f774:	4313      	orrs	r3, r2
 800f776:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800f778:	697b      	ldr	r3, [r7, #20]
 800f77a:	f023 0201 	bic.w	r2, r3, #1
 800f77e:	683b      	ldr	r3, [r7, #0]
 800f780:	685b      	ldr	r3, [r3, #4]
 800f782:	4313      	orrs	r3, r2
 800f784:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	4a1c      	ldr	r2, [pc, #112]	; (800f7fc <OC1Config+0xd0>)
 800f78a:	4293      	cmp	r3, r2
 800f78c:	d003      	beq.n	800f796 <OC1Config+0x6a>
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	4a1b      	ldr	r2, [pc, #108]	; (800f800 <OC1Config+0xd4>)
 800f792:	4293      	cmp	r3, r2
 800f794:	d11e      	bne.n	800f7d4 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800f796:	697b      	ldr	r3, [r7, #20]
 800f798:	f023 0208 	bic.w	r2, r3, #8
 800f79c:	683b      	ldr	r3, [r7, #0]
 800f79e:	695b      	ldr	r3, [r3, #20]
 800f7a0:	009b      	lsls	r3, r3, #2
 800f7a2:	4313      	orrs	r3, r2
 800f7a4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800f7a6:	697b      	ldr	r3, [r7, #20]
 800f7a8:	f023 0204 	bic.w	r2, r3, #4
 800f7ac:	683b      	ldr	r3, [r7, #0]
 800f7ae:	689b      	ldr	r3, [r3, #8]
 800f7b0:	009b      	lsls	r3, r3, #2
 800f7b2:	4313      	orrs	r3, r2
 800f7b4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800f7b6:	693b      	ldr	r3, [r7, #16]
 800f7b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f7bc:	683b      	ldr	r3, [r7, #0]
 800f7be:	699b      	ldr	r3, [r3, #24]
 800f7c0:	4313      	orrs	r3, r2
 800f7c2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800f7c4:	693b      	ldr	r3, [r7, #16]
 800f7c6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800f7ca:	683b      	ldr	r3, [r7, #0]
 800f7cc:	69db      	ldr	r3, [r3, #28]
 800f7ce:	005b      	lsls	r3, r3, #1
 800f7d0:	4313      	orrs	r3, r2
 800f7d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	693a      	ldr	r2, [r7, #16]
 800f7d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	68fa      	ldr	r2, [r7, #12]
 800f7de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800f7e0:	683b      	ldr	r3, [r7, #0]
 800f7e2:	68db      	ldr	r3, [r3, #12]
 800f7e4:	4619      	mov	r1, r3
 800f7e6:	6878      	ldr	r0, [r7, #4]
 800f7e8:	f7ff fea4 	bl	800f534 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	697a      	ldr	r2, [r7, #20]
 800f7f0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800f7f2:	2300      	movs	r3, #0
}
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	3718      	adds	r7, #24
 800f7f8:	46bd      	mov	sp, r7
 800f7fa:	bd80      	pop	{r7, pc}
 800f7fc:	40012c00 	.word	0x40012c00
 800f800:	40013400 	.word	0x40013400

0800f804 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800f804:	b580      	push	{r7, lr}
 800f806:	b086      	sub	sp, #24
 800f808:	af00      	add	r7, sp, #0
 800f80a:	6078      	str	r0, [r7, #4]
 800f80c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	6a1b      	ldr	r3, [r3, #32]
 800f812:	f023 0210 	bic.w	r2, r3, #16
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	6a1b      	ldr	r3, [r3, #32]
 800f81e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	685b      	ldr	r3, [r3, #4]
 800f824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	699b      	ldr	r3, [r3, #24]
 800f82a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f832:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800f83a:	683b      	ldr	r3, [r7, #0]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	021b      	lsls	r3, r3, #8
 800f840:	4313      	orrs	r3, r2
 800f842:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800f844:	697b      	ldr	r3, [r7, #20]
 800f846:	f023 0220 	bic.w	r2, r3, #32
 800f84a:	683b      	ldr	r3, [r7, #0]
 800f84c:	691b      	ldr	r3, [r3, #16]
 800f84e:	011b      	lsls	r3, r3, #4
 800f850:	4313      	orrs	r3, r2
 800f852:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 800f854:	697b      	ldr	r3, [r7, #20]
 800f856:	f023 0210 	bic.w	r2, r3, #16
 800f85a:	683b      	ldr	r3, [r7, #0]
 800f85c:	685b      	ldr	r3, [r3, #4]
 800f85e:	011b      	lsls	r3, r3, #4
 800f860:	4313      	orrs	r3, r2
 800f862:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	4a1d      	ldr	r2, [pc, #116]	; (800f8dc <OC2Config+0xd8>)
 800f868:	4293      	cmp	r3, r2
 800f86a:	d003      	beq.n	800f874 <OC2Config+0x70>
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	4a1c      	ldr	r2, [pc, #112]	; (800f8e0 <OC2Config+0xdc>)
 800f870:	4293      	cmp	r3, r2
 800f872:	d11f      	bne.n	800f8b4 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800f874:	697b      	ldr	r3, [r7, #20]
 800f876:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f87a:	683b      	ldr	r3, [r7, #0]
 800f87c:	695b      	ldr	r3, [r3, #20]
 800f87e:	019b      	lsls	r3, r3, #6
 800f880:	4313      	orrs	r3, r2
 800f882:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800f884:	697b      	ldr	r3, [r7, #20]
 800f886:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800f88a:	683b      	ldr	r3, [r7, #0]
 800f88c:	689b      	ldr	r3, [r3, #8]
 800f88e:	019b      	lsls	r3, r3, #6
 800f890:	4313      	orrs	r3, r2
 800f892:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800f894:	693b      	ldr	r3, [r7, #16]
 800f896:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f89a:	683b      	ldr	r3, [r7, #0]
 800f89c:	699b      	ldr	r3, [r3, #24]
 800f89e:	009b      	lsls	r3, r3, #2
 800f8a0:	4313      	orrs	r3, r2
 800f8a2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800f8a4:	693b      	ldr	r3, [r7, #16]
 800f8a6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f8aa:	683b      	ldr	r3, [r7, #0]
 800f8ac:	69db      	ldr	r3, [r3, #28]
 800f8ae:	00db      	lsls	r3, r3, #3
 800f8b0:	4313      	orrs	r3, r2
 800f8b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	693a      	ldr	r2, [r7, #16]
 800f8b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	68fa      	ldr	r2, [r7, #12]
 800f8be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 800f8c0:	683b      	ldr	r3, [r7, #0]
 800f8c2:	68db      	ldr	r3, [r3, #12]
 800f8c4:	4619      	mov	r1, r3
 800f8c6:	6878      	ldr	r0, [r7, #4]
 800f8c8:	f7ff fe41 	bl	800f54e <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	697a      	ldr	r2, [r7, #20]
 800f8d0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800f8d2:	2300      	movs	r3, #0
}
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	3718      	adds	r7, #24
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bd80      	pop	{r7, pc}
 800f8dc:	40012c00 	.word	0x40012c00
 800f8e0:	40013400 	.word	0x40013400

0800f8e4 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b086      	sub	sp, #24
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	6078      	str	r0, [r7, #4]
 800f8ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	6a1b      	ldr	r3, [r3, #32]
 800f8f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	6a1b      	ldr	r3, [r3, #32]
 800f8fe:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	685b      	ldr	r3, [r3, #4]
 800f904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	69db      	ldr	r3, [r3, #28]
 800f90a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	f023 0303 	bic.w	r3, r3, #3
 800f912:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800f91a:	683b      	ldr	r3, [r7, #0]
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	4313      	orrs	r3, r2
 800f920:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800f922:	697b      	ldr	r3, [r7, #20]
 800f924:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800f928:	683b      	ldr	r3, [r7, #0]
 800f92a:	691b      	ldr	r3, [r3, #16]
 800f92c:	021b      	lsls	r3, r3, #8
 800f92e:	4313      	orrs	r3, r2
 800f930:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800f932:	697b      	ldr	r3, [r7, #20]
 800f934:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f938:	683b      	ldr	r3, [r7, #0]
 800f93a:	685b      	ldr	r3, [r3, #4]
 800f93c:	021b      	lsls	r3, r3, #8
 800f93e:	4313      	orrs	r3, r2
 800f940:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	4a1d      	ldr	r2, [pc, #116]	; (800f9bc <OC3Config+0xd8>)
 800f946:	4293      	cmp	r3, r2
 800f948:	d003      	beq.n	800f952 <OC3Config+0x6e>
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	4a1c      	ldr	r2, [pc, #112]	; (800f9c0 <OC3Config+0xdc>)
 800f94e:	4293      	cmp	r3, r2
 800f950:	d11f      	bne.n	800f992 <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800f952:	697b      	ldr	r3, [r7, #20]
 800f954:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f958:	683b      	ldr	r3, [r7, #0]
 800f95a:	695b      	ldr	r3, [r3, #20]
 800f95c:	029b      	lsls	r3, r3, #10
 800f95e:	4313      	orrs	r3, r2
 800f960:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800f962:	697b      	ldr	r3, [r7, #20]
 800f964:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f968:	683b      	ldr	r3, [r7, #0]
 800f96a:	689b      	ldr	r3, [r3, #8]
 800f96c:	029b      	lsls	r3, r3, #10
 800f96e:	4313      	orrs	r3, r2
 800f970:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800f972:	693b      	ldr	r3, [r7, #16]
 800f974:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f978:	683b      	ldr	r3, [r7, #0]
 800f97a:	699b      	ldr	r3, [r3, #24]
 800f97c:	011b      	lsls	r3, r3, #4
 800f97e:	4313      	orrs	r3, r2
 800f980:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800f982:	693b      	ldr	r3, [r7, #16]
 800f984:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f988:	683b      	ldr	r3, [r7, #0]
 800f98a:	69db      	ldr	r3, [r3, #28]
 800f98c:	015b      	lsls	r3, r3, #5
 800f98e:	4313      	orrs	r3, r2
 800f990:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	693a      	ldr	r2, [r7, #16]
 800f996:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	68fa      	ldr	r2, [r7, #12]
 800f99c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800f99e:	683b      	ldr	r3, [r7, #0]
 800f9a0:	68db      	ldr	r3, [r3, #12]
 800f9a2:	4619      	mov	r1, r3
 800f9a4:	6878      	ldr	r0, [r7, #4]
 800f9a6:	f7ff fddf 	bl	800f568 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	697a      	ldr	r2, [r7, #20]
 800f9ae:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800f9b0:	2300      	movs	r3, #0
}
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	3718      	adds	r7, #24
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	bd80      	pop	{r7, pc}
 800f9ba:	bf00      	nop
 800f9bc:	40012c00 	.word	0x40012c00
 800f9c0:	40013400 	.word	0x40013400

0800f9c4 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800f9c4:	b580      	push	{r7, lr}
 800f9c6:	b086      	sub	sp, #24
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6078      	str	r0, [r7, #4]
 800f9cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	6a1b      	ldr	r3, [r3, #32]
 800f9d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	6a1b      	ldr	r3, [r3, #32]
 800f9de:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	685b      	ldr	r3, [r3, #4]
 800f9e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	69db      	ldr	r3, [r3, #28]
 800f9ea:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f9f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800f9fa:	683b      	ldr	r3, [r7, #0]
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	021b      	lsls	r3, r3, #8
 800fa00:	4313      	orrs	r3, r2
 800fa02:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800fa04:	693b      	ldr	r3, [r7, #16]
 800fa06:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800fa0a:	683b      	ldr	r3, [r7, #0]
 800fa0c:	691b      	ldr	r3, [r3, #16]
 800fa0e:	031b      	lsls	r3, r3, #12
 800fa10:	4313      	orrs	r3, r2
 800fa12:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800fa14:	693b      	ldr	r3, [r7, #16]
 800fa16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fa1a:	683b      	ldr	r3, [r7, #0]
 800fa1c:	685b      	ldr	r3, [r3, #4]
 800fa1e:	031b      	lsls	r3, r3, #12
 800fa20:	4313      	orrs	r3, r2
 800fa22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	4a11      	ldr	r2, [pc, #68]	; (800fa6c <OC4Config+0xa8>)
 800fa28:	4293      	cmp	r3, r2
 800fa2a:	d003      	beq.n	800fa34 <OC4Config+0x70>
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	4a10      	ldr	r2, [pc, #64]	; (800fa70 <OC4Config+0xac>)
 800fa30:	4293      	cmp	r3, r2
 800fa32:	d107      	bne.n	800fa44 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 800fa34:	697b      	ldr	r3, [r7, #20]
 800fa36:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800fa3a:	683b      	ldr	r3, [r7, #0]
 800fa3c:	699b      	ldr	r3, [r3, #24]
 800fa3e:	019b      	lsls	r3, r3, #6
 800fa40:	4313      	orrs	r3, r2
 800fa42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	697a      	ldr	r2, [r7, #20]
 800fa48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	68fa      	ldr	r2, [r7, #12]
 800fa4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800fa50:	683b      	ldr	r3, [r7, #0]
 800fa52:	68db      	ldr	r3, [r3, #12]
 800fa54:	4619      	mov	r1, r3
 800fa56:	6878      	ldr	r0, [r7, #4]
 800fa58:	f7ff fd93 	bl	800f582 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	693a      	ldr	r2, [r7, #16]
 800fa60:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800fa62:	2300      	movs	r3, #0
}
 800fa64:	4618      	mov	r0, r3
 800fa66:	3718      	adds	r7, #24
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	bd80      	pop	{r7, pc}
 800fa6c:	40012c00 	.word	0x40012c00
 800fa70:	40013400 	.word	0x40013400

0800fa74 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800fa74:	b084      	sub	sp, #16
 800fa76:	b480      	push	{r7}
 800fa78:	b083      	sub	sp, #12
 800fa7a:	af00      	add	r7, sp, #0
 800fa7c:	6078      	str	r0, [r7, #4]
 800fa7e:	f107 0014 	add.w	r0, r7, #20
 800fa82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800fa86:	2300      	movs	r3, #0
}
 800fa88:	4618      	mov	r0, r3
 800fa8a:	370c      	adds	r7, #12
 800fa8c:	46bd      	mov	sp, r7
 800fa8e:	bc80      	pop	{r7}
 800fa90:	b004      	add	sp, #16
 800fa92:	4770      	bx	lr

0800fa94 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800fa94:	b480      	push	{r7}
 800fa96:	b085      	sub	sp, #20
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	2200      	movs	r2, #0
 800faa0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800faa4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800faa8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	b29a      	uxth	r2, r3
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800fab4:	2300      	movs	r3, #0
}
 800fab6:	4618      	mov	r0, r3
 800fab8:	3714      	adds	r7, #20
 800faba:	46bd      	mov	sp, r7
 800fabc:	bc80      	pop	{r7}
 800fabe:	4770      	bx	lr

0800fac0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800fac0:	b480      	push	{r7}
 800fac2:	b085      	sub	sp, #20
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800fac8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800facc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800fad4:	b29a      	uxth	r2, r3
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	b29b      	uxth	r3, r3
 800fada:	43db      	mvns	r3, r3
 800fadc:	b29b      	uxth	r3, r3
 800fade:	4013      	ands	r3, r2
 800fae0:	b29a      	uxth	r2, r3
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800fae8:	2300      	movs	r3, #0
}
 800faea:	4618      	mov	r0, r3
 800faec:	3714      	adds	r7, #20
 800faee:	46bd      	mov	sp, r7
 800faf0:	bc80      	pop	{r7}
 800faf2:	4770      	bx	lr

0800faf4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800faf4:	b480      	push	{r7}
 800faf6:	b083      	sub	sp, #12
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	6078      	str	r0, [r7, #4]
 800fafc:	460b      	mov	r3, r1
 800fafe:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800fb00:	2300      	movs	r3, #0
}
 800fb02:	4618      	mov	r0, r3
 800fb04:	370c      	adds	r7, #12
 800fb06:	46bd      	mov	sp, r7
 800fb08:	bc80      	pop	{r7}
 800fb0a:	4770      	bx	lr

0800fb0c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800fb0c:	b084      	sub	sp, #16
 800fb0e:	b480      	push	{r7}
 800fb10:	b083      	sub	sp, #12
 800fb12:	af00      	add	r7, sp, #0
 800fb14:	6078      	str	r0, [r7, #4]
 800fb16:	f107 0014 	add.w	r0, r7, #20
 800fb1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	2201      	movs	r2, #1
 800fb22:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	2200      	movs	r2, #0
 800fb2a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	2200      	movs	r2, #0
 800fb32:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	2200      	movs	r2, #0
 800fb3a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800fb3e:	2300      	movs	r3, #0
}
 800fb40:	4618      	mov	r0, r3
 800fb42:	370c      	adds	r7, #12
 800fb44:	46bd      	mov	sp, r7
 800fb46:	bc80      	pop	{r7}
 800fb48:	b004      	add	sp, #16
 800fb4a:	4770      	bx	lr

0800fb4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_TypeDef const *USBx, uint32_t num)
{
 800fb4c:	b480      	push	{r7}
 800fb4e:	b083      	sub	sp, #12
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	6078      	str	r0, [r7, #4]
 800fb54:	6039      	str	r1, [r7, #0]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800fb56:	2300      	movs	r3, #0
}
 800fb58:	4618      	mov	r0, r3
 800fb5a:	370c      	adds	r7, #12
 800fb5c:	46bd      	mov	sp, r7
 800fb5e:	bc80      	pop	{r7}
 800fb60:	4770      	bx	lr

0800fb62 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_TypeDef const *USBx)
{
 800fb62:	b480      	push	{r7}
 800fb64:	b083      	sub	sp, #12
 800fb66:	af00      	add	r7, sp, #0
 800fb68:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800fb6a:	2300      	movs	r3, #0
}
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	370c      	adds	r7, #12
 800fb70:	46bd      	mov	sp, r7
 800fb72:	bc80      	pop	{r7}
 800fb74:	4770      	bx	lr
	...

0800fb78 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800fb78:	b480      	push	{r7}
 800fb7a:	b09d      	sub	sp, #116	; 0x74
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
 800fb80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800fb82:	2300      	movs	r3, #0
 800fb84:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800fb88:	687a      	ldr	r2, [r7, #4]
 800fb8a:	683b      	ldr	r3, [r7, #0]
 800fb8c:	781b      	ldrb	r3, [r3, #0]
 800fb8e:	009b      	lsls	r3, r3, #2
 800fb90:	4413      	add	r3, r2
 800fb92:	881b      	ldrh	r3, [r3, #0]
 800fb94:	b29b      	uxth	r3, r3
 800fb96:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800fb9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fb9e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800fba2:	683b      	ldr	r3, [r7, #0]
 800fba4:	78db      	ldrb	r3, [r3, #3]
 800fba6:	2b03      	cmp	r3, #3
 800fba8:	d81f      	bhi.n	800fbea <USB_ActivateEndpoint+0x72>
 800fbaa:	a201      	add	r2, pc, #4	; (adr r2, 800fbb0 <USB_ActivateEndpoint+0x38>)
 800fbac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbb0:	0800fbc1 	.word	0x0800fbc1
 800fbb4:	0800fbdd 	.word	0x0800fbdd
 800fbb8:	0800fbf3 	.word	0x0800fbf3
 800fbbc:	0800fbcf 	.word	0x0800fbcf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800fbc0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800fbc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fbc8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800fbcc:	e012      	b.n	800fbf4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800fbce:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800fbd2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800fbd6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800fbda:	e00b      	b.n	800fbf4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800fbdc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800fbe0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800fbe4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800fbe8:	e004      	b.n	800fbf4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800fbea:	2301      	movs	r3, #1
 800fbec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800fbf0:	e000      	b.n	800fbf4 <USB_ActivateEndpoint+0x7c>
      break;
 800fbf2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800fbf4:	687a      	ldr	r2, [r7, #4]
 800fbf6:	683b      	ldr	r3, [r7, #0]
 800fbf8:	781b      	ldrb	r3, [r3, #0]
 800fbfa:	009b      	lsls	r3, r3, #2
 800fbfc:	441a      	add	r2, r3
 800fbfe:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800fc02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fc06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fc0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fc0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc12:	b29b      	uxth	r3, r3
 800fc14:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800fc16:	687a      	ldr	r2, [r7, #4]
 800fc18:	683b      	ldr	r3, [r7, #0]
 800fc1a:	781b      	ldrb	r3, [r3, #0]
 800fc1c:	009b      	lsls	r3, r3, #2
 800fc1e:	4413      	add	r3, r2
 800fc20:	881b      	ldrh	r3, [r3, #0]
 800fc22:	b29b      	uxth	r3, r3
 800fc24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fc28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fc2c:	b29a      	uxth	r2, r3
 800fc2e:	683b      	ldr	r3, [r7, #0]
 800fc30:	781b      	ldrb	r3, [r3, #0]
 800fc32:	b29b      	uxth	r3, r3
 800fc34:	4313      	orrs	r3, r2
 800fc36:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800fc3a:	687a      	ldr	r2, [r7, #4]
 800fc3c:	683b      	ldr	r3, [r7, #0]
 800fc3e:	781b      	ldrb	r3, [r3, #0]
 800fc40:	009b      	lsls	r3, r3, #2
 800fc42:	441a      	add	r2, r3
 800fc44:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800fc48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fc4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fc50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fc54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc58:	b29b      	uxth	r3, r3
 800fc5a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800fc5c:	683b      	ldr	r3, [r7, #0]
 800fc5e:	7b1b      	ldrb	r3, [r3, #12]
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	f040 8178 	bne.w	800ff56 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 800fc66:	683b      	ldr	r3, [r7, #0]
 800fc68:	785b      	ldrb	r3, [r3, #1]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	f000 8084 	beq.w	800fd78 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	61bb      	str	r3, [r7, #24]
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fc7a:	b29b      	uxth	r3, r3
 800fc7c:	461a      	mov	r2, r3
 800fc7e:	69bb      	ldr	r3, [r7, #24]
 800fc80:	4413      	add	r3, r2
 800fc82:	61bb      	str	r3, [r7, #24]
 800fc84:	683b      	ldr	r3, [r7, #0]
 800fc86:	781b      	ldrb	r3, [r3, #0]
 800fc88:	011a      	lsls	r2, r3, #4
 800fc8a:	69bb      	ldr	r3, [r7, #24]
 800fc8c:	4413      	add	r3, r2
 800fc8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fc92:	617b      	str	r3, [r7, #20]
 800fc94:	683b      	ldr	r3, [r7, #0]
 800fc96:	88db      	ldrh	r3, [r3, #6]
 800fc98:	085b      	lsrs	r3, r3, #1
 800fc9a:	b29b      	uxth	r3, r3
 800fc9c:	005b      	lsls	r3, r3, #1
 800fc9e:	b29a      	uxth	r2, r3
 800fca0:	697b      	ldr	r3, [r7, #20]
 800fca2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800fca4:	687a      	ldr	r2, [r7, #4]
 800fca6:	683b      	ldr	r3, [r7, #0]
 800fca8:	781b      	ldrb	r3, [r3, #0]
 800fcaa:	009b      	lsls	r3, r3, #2
 800fcac:	4413      	add	r3, r2
 800fcae:	881b      	ldrh	r3, [r3, #0]
 800fcb0:	827b      	strh	r3, [r7, #18]
 800fcb2:	8a7b      	ldrh	r3, [r7, #18]
 800fcb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d01b      	beq.n	800fcf4 <USB_ActivateEndpoint+0x17c>
 800fcbc:	687a      	ldr	r2, [r7, #4]
 800fcbe:	683b      	ldr	r3, [r7, #0]
 800fcc0:	781b      	ldrb	r3, [r3, #0]
 800fcc2:	009b      	lsls	r3, r3, #2
 800fcc4:	4413      	add	r3, r2
 800fcc6:	881b      	ldrh	r3, [r3, #0]
 800fcc8:	b29b      	uxth	r3, r3
 800fcca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fcce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fcd2:	823b      	strh	r3, [r7, #16]
 800fcd4:	687a      	ldr	r2, [r7, #4]
 800fcd6:	683b      	ldr	r3, [r7, #0]
 800fcd8:	781b      	ldrb	r3, [r3, #0]
 800fcda:	009b      	lsls	r3, r3, #2
 800fcdc:	441a      	add	r2, r3
 800fcde:	8a3b      	ldrh	r3, [r7, #16]
 800fce0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fce4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fce8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fcec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800fcf0:	b29b      	uxth	r3, r3
 800fcf2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800fcf4:	683b      	ldr	r3, [r7, #0]
 800fcf6:	78db      	ldrb	r3, [r3, #3]
 800fcf8:	2b01      	cmp	r3, #1
 800fcfa:	d020      	beq.n	800fd3e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800fcfc:	687a      	ldr	r2, [r7, #4]
 800fcfe:	683b      	ldr	r3, [r7, #0]
 800fd00:	781b      	ldrb	r3, [r3, #0]
 800fd02:	009b      	lsls	r3, r3, #2
 800fd04:	4413      	add	r3, r2
 800fd06:	881b      	ldrh	r3, [r3, #0]
 800fd08:	b29b      	uxth	r3, r3
 800fd0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fd0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fd12:	81bb      	strh	r3, [r7, #12]
 800fd14:	89bb      	ldrh	r3, [r7, #12]
 800fd16:	f083 0320 	eor.w	r3, r3, #32
 800fd1a:	81bb      	strh	r3, [r7, #12]
 800fd1c:	687a      	ldr	r2, [r7, #4]
 800fd1e:	683b      	ldr	r3, [r7, #0]
 800fd20:	781b      	ldrb	r3, [r3, #0]
 800fd22:	009b      	lsls	r3, r3, #2
 800fd24:	441a      	add	r2, r3
 800fd26:	89bb      	ldrh	r3, [r7, #12]
 800fd28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fd2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fd30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fd34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd38:	b29b      	uxth	r3, r3
 800fd3a:	8013      	strh	r3, [r2, #0]
 800fd3c:	e2d5      	b.n	80102ea <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800fd3e:	687a      	ldr	r2, [r7, #4]
 800fd40:	683b      	ldr	r3, [r7, #0]
 800fd42:	781b      	ldrb	r3, [r3, #0]
 800fd44:	009b      	lsls	r3, r3, #2
 800fd46:	4413      	add	r3, r2
 800fd48:	881b      	ldrh	r3, [r3, #0]
 800fd4a:	b29b      	uxth	r3, r3
 800fd4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fd50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fd54:	81fb      	strh	r3, [r7, #14]
 800fd56:	687a      	ldr	r2, [r7, #4]
 800fd58:	683b      	ldr	r3, [r7, #0]
 800fd5a:	781b      	ldrb	r3, [r3, #0]
 800fd5c:	009b      	lsls	r3, r3, #2
 800fd5e:	441a      	add	r2, r3
 800fd60:	89fb      	ldrh	r3, [r7, #14]
 800fd62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fd66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fd6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fd6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd72:	b29b      	uxth	r3, r3
 800fd74:	8013      	strh	r3, [r2, #0]
 800fd76:	e2b8      	b.n	80102ea <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	633b      	str	r3, [r7, #48]	; 0x30
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fd82:	b29b      	uxth	r3, r3
 800fd84:	461a      	mov	r2, r3
 800fd86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd88:	4413      	add	r3, r2
 800fd8a:	633b      	str	r3, [r7, #48]	; 0x30
 800fd8c:	683b      	ldr	r3, [r7, #0]
 800fd8e:	781b      	ldrb	r3, [r3, #0]
 800fd90:	011a      	lsls	r2, r3, #4
 800fd92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd94:	4413      	add	r3, r2
 800fd96:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800fd9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fd9c:	683b      	ldr	r3, [r7, #0]
 800fd9e:	88db      	ldrh	r3, [r3, #6]
 800fda0:	085b      	lsrs	r3, r3, #1
 800fda2:	b29b      	uxth	r3, r3
 800fda4:	005b      	lsls	r3, r3, #1
 800fda6:	b29a      	uxth	r2, r3
 800fda8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdaa:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	62bb      	str	r3, [r7, #40]	; 0x28
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fdb6:	b29b      	uxth	r3, r3
 800fdb8:	461a      	mov	r2, r3
 800fdba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdbc:	4413      	add	r3, r2
 800fdbe:	62bb      	str	r3, [r7, #40]	; 0x28
 800fdc0:	683b      	ldr	r3, [r7, #0]
 800fdc2:	781b      	ldrb	r3, [r3, #0]
 800fdc4:	011a      	lsls	r2, r3, #4
 800fdc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdc8:	4413      	add	r3, r2
 800fdca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800fdce:	627b      	str	r3, [r7, #36]	; 0x24
 800fdd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdd2:	881b      	ldrh	r3, [r3, #0]
 800fdd4:	b29b      	uxth	r3, r3
 800fdd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fdda:	b29a      	uxth	r2, r3
 800fddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdde:	801a      	strh	r2, [r3, #0]
 800fde0:	683b      	ldr	r3, [r7, #0]
 800fde2:	691b      	ldr	r3, [r3, #16]
 800fde4:	2b3e      	cmp	r3, #62	; 0x3e
 800fde6:	d91d      	bls.n	800fe24 <USB_ActivateEndpoint+0x2ac>
 800fde8:	683b      	ldr	r3, [r7, #0]
 800fdea:	691b      	ldr	r3, [r3, #16]
 800fdec:	095b      	lsrs	r3, r3, #5
 800fdee:	66bb      	str	r3, [r7, #104]	; 0x68
 800fdf0:	683b      	ldr	r3, [r7, #0]
 800fdf2:	691b      	ldr	r3, [r3, #16]
 800fdf4:	f003 031f 	and.w	r3, r3, #31
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d102      	bne.n	800fe02 <USB_ActivateEndpoint+0x28a>
 800fdfc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fdfe:	3b01      	subs	r3, #1
 800fe00:	66bb      	str	r3, [r7, #104]	; 0x68
 800fe02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe04:	881b      	ldrh	r3, [r3, #0]
 800fe06:	b29a      	uxth	r2, r3
 800fe08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fe0a:	b29b      	uxth	r3, r3
 800fe0c:	029b      	lsls	r3, r3, #10
 800fe0e:	b29b      	uxth	r3, r3
 800fe10:	4313      	orrs	r3, r2
 800fe12:	b29b      	uxth	r3, r3
 800fe14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fe18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fe1c:	b29a      	uxth	r2, r3
 800fe1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe20:	801a      	strh	r2, [r3, #0]
 800fe22:	e026      	b.n	800fe72 <USB_ActivateEndpoint+0x2fa>
 800fe24:	683b      	ldr	r3, [r7, #0]
 800fe26:	691b      	ldr	r3, [r3, #16]
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d10a      	bne.n	800fe42 <USB_ActivateEndpoint+0x2ca>
 800fe2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe2e:	881b      	ldrh	r3, [r3, #0]
 800fe30:	b29b      	uxth	r3, r3
 800fe32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fe36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fe3a:	b29a      	uxth	r2, r3
 800fe3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe3e:	801a      	strh	r2, [r3, #0]
 800fe40:	e017      	b.n	800fe72 <USB_ActivateEndpoint+0x2fa>
 800fe42:	683b      	ldr	r3, [r7, #0]
 800fe44:	691b      	ldr	r3, [r3, #16]
 800fe46:	085b      	lsrs	r3, r3, #1
 800fe48:	66bb      	str	r3, [r7, #104]	; 0x68
 800fe4a:	683b      	ldr	r3, [r7, #0]
 800fe4c:	691b      	ldr	r3, [r3, #16]
 800fe4e:	f003 0301 	and.w	r3, r3, #1
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d002      	beq.n	800fe5c <USB_ActivateEndpoint+0x2e4>
 800fe56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fe58:	3301      	adds	r3, #1
 800fe5a:	66bb      	str	r3, [r7, #104]	; 0x68
 800fe5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe5e:	881b      	ldrh	r3, [r3, #0]
 800fe60:	b29a      	uxth	r2, r3
 800fe62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fe64:	b29b      	uxth	r3, r3
 800fe66:	029b      	lsls	r3, r3, #10
 800fe68:	b29b      	uxth	r3, r3
 800fe6a:	4313      	orrs	r3, r2
 800fe6c:	b29a      	uxth	r2, r3
 800fe6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe70:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800fe72:	687a      	ldr	r2, [r7, #4]
 800fe74:	683b      	ldr	r3, [r7, #0]
 800fe76:	781b      	ldrb	r3, [r3, #0]
 800fe78:	009b      	lsls	r3, r3, #2
 800fe7a:	4413      	add	r3, r2
 800fe7c:	881b      	ldrh	r3, [r3, #0]
 800fe7e:	847b      	strh	r3, [r7, #34]	; 0x22
 800fe80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fe82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d01b      	beq.n	800fec2 <USB_ActivateEndpoint+0x34a>
 800fe8a:	687a      	ldr	r2, [r7, #4]
 800fe8c:	683b      	ldr	r3, [r7, #0]
 800fe8e:	781b      	ldrb	r3, [r3, #0]
 800fe90:	009b      	lsls	r3, r3, #2
 800fe92:	4413      	add	r3, r2
 800fe94:	881b      	ldrh	r3, [r3, #0]
 800fe96:	b29b      	uxth	r3, r3
 800fe98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fe9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fea0:	843b      	strh	r3, [r7, #32]
 800fea2:	687a      	ldr	r2, [r7, #4]
 800fea4:	683b      	ldr	r3, [r7, #0]
 800fea6:	781b      	ldrb	r3, [r3, #0]
 800fea8:	009b      	lsls	r3, r3, #2
 800feaa:	441a      	add	r2, r3
 800feac:	8c3b      	ldrh	r3, [r7, #32]
 800feae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800feb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800feb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800feba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800febe:	b29b      	uxth	r3, r3
 800fec0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800fec2:	683b      	ldr	r3, [r7, #0]
 800fec4:	781b      	ldrb	r3, [r3, #0]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d124      	bne.n	800ff14 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800feca:	687a      	ldr	r2, [r7, #4]
 800fecc:	683b      	ldr	r3, [r7, #0]
 800fece:	781b      	ldrb	r3, [r3, #0]
 800fed0:	009b      	lsls	r3, r3, #2
 800fed2:	4413      	add	r3, r2
 800fed4:	881b      	ldrh	r3, [r3, #0]
 800fed6:	b29b      	uxth	r3, r3
 800fed8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fedc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fee0:	83bb      	strh	r3, [r7, #28]
 800fee2:	8bbb      	ldrh	r3, [r7, #28]
 800fee4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800fee8:	83bb      	strh	r3, [r7, #28]
 800feea:	8bbb      	ldrh	r3, [r7, #28]
 800feec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800fef0:	83bb      	strh	r3, [r7, #28]
 800fef2:	687a      	ldr	r2, [r7, #4]
 800fef4:	683b      	ldr	r3, [r7, #0]
 800fef6:	781b      	ldrb	r3, [r3, #0]
 800fef8:	009b      	lsls	r3, r3, #2
 800fefa:	441a      	add	r2, r3
 800fefc:	8bbb      	ldrh	r3, [r7, #28]
 800fefe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ff02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ff06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ff0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff0e:	b29b      	uxth	r3, r3
 800ff10:	8013      	strh	r3, [r2, #0]
 800ff12:	e1ea      	b.n	80102ea <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800ff14:	687a      	ldr	r2, [r7, #4]
 800ff16:	683b      	ldr	r3, [r7, #0]
 800ff18:	781b      	ldrb	r3, [r3, #0]
 800ff1a:	009b      	lsls	r3, r3, #2
 800ff1c:	4413      	add	r3, r2
 800ff1e:	881b      	ldrh	r3, [r3, #0]
 800ff20:	b29b      	uxth	r3, r3
 800ff22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ff26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ff2a:	83fb      	strh	r3, [r7, #30]
 800ff2c:	8bfb      	ldrh	r3, [r7, #30]
 800ff2e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ff32:	83fb      	strh	r3, [r7, #30]
 800ff34:	687a      	ldr	r2, [r7, #4]
 800ff36:	683b      	ldr	r3, [r7, #0]
 800ff38:	781b      	ldrb	r3, [r3, #0]
 800ff3a:	009b      	lsls	r3, r3, #2
 800ff3c:	441a      	add	r2, r3
 800ff3e:	8bfb      	ldrh	r3, [r7, #30]
 800ff40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ff44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ff48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ff4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff50:	b29b      	uxth	r3, r3
 800ff52:	8013      	strh	r3, [r2, #0]
 800ff54:	e1c9      	b.n	80102ea <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800ff56:	683b      	ldr	r3, [r7, #0]
 800ff58:	78db      	ldrb	r3, [r3, #3]
 800ff5a:	2b02      	cmp	r3, #2
 800ff5c:	d11e      	bne.n	800ff9c <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ff5e:	687a      	ldr	r2, [r7, #4]
 800ff60:	683b      	ldr	r3, [r7, #0]
 800ff62:	781b      	ldrb	r3, [r3, #0]
 800ff64:	009b      	lsls	r3, r3, #2
 800ff66:	4413      	add	r3, r2
 800ff68:	881b      	ldrh	r3, [r3, #0]
 800ff6a:	b29b      	uxth	r3, r3
 800ff6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ff70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ff74:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800ff78:	687a      	ldr	r2, [r7, #4]
 800ff7a:	683b      	ldr	r3, [r7, #0]
 800ff7c:	781b      	ldrb	r3, [r3, #0]
 800ff7e:	009b      	lsls	r3, r3, #2
 800ff80:	441a      	add	r2, r3
 800ff82:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800ff86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ff8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ff8e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800ff92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff96:	b29b      	uxth	r3, r3
 800ff98:	8013      	strh	r3, [r2, #0]
 800ff9a:	e01d      	b.n	800ffd8 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800ff9c:	687a      	ldr	r2, [r7, #4]
 800ff9e:	683b      	ldr	r3, [r7, #0]
 800ffa0:	781b      	ldrb	r3, [r3, #0]
 800ffa2:	009b      	lsls	r3, r3, #2
 800ffa4:	4413      	add	r3, r2
 800ffa6:	881b      	ldrh	r3, [r3, #0]
 800ffa8:	b29b      	uxth	r3, r3
 800ffaa:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800ffae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ffb2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800ffb6:	687a      	ldr	r2, [r7, #4]
 800ffb8:	683b      	ldr	r3, [r7, #0]
 800ffba:	781b      	ldrb	r3, [r3, #0]
 800ffbc:	009b      	lsls	r3, r3, #2
 800ffbe:	441a      	add	r2, r3
 800ffc0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800ffc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ffc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ffcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ffd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ffd4:	b29b      	uxth	r3, r3
 800ffd6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ffe2:	b29b      	uxth	r3, r3
 800ffe4:	461a      	mov	r2, r3
 800ffe6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ffe8:	4413      	add	r3, r2
 800ffea:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ffec:	683b      	ldr	r3, [r7, #0]
 800ffee:	781b      	ldrb	r3, [r3, #0]
 800fff0:	011a      	lsls	r2, r3, #4
 800fff2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fff4:	4413      	add	r3, r2
 800fff6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fffa:	65bb      	str	r3, [r7, #88]	; 0x58
 800fffc:	683b      	ldr	r3, [r7, #0]
 800fffe:	891b      	ldrh	r3, [r3, #8]
 8010000:	085b      	lsrs	r3, r3, #1
 8010002:	b29b      	uxth	r3, r3
 8010004:	005b      	lsls	r3, r3, #1
 8010006:	b29a      	uxth	r2, r3
 8010008:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801000a:	801a      	strh	r2, [r3, #0]
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	657b      	str	r3, [r7, #84]	; 0x54
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010016:	b29b      	uxth	r3, r3
 8010018:	461a      	mov	r2, r3
 801001a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801001c:	4413      	add	r3, r2
 801001e:	657b      	str	r3, [r7, #84]	; 0x54
 8010020:	683b      	ldr	r3, [r7, #0]
 8010022:	781b      	ldrb	r3, [r3, #0]
 8010024:	011a      	lsls	r2, r3, #4
 8010026:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010028:	4413      	add	r3, r2
 801002a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 801002e:	653b      	str	r3, [r7, #80]	; 0x50
 8010030:	683b      	ldr	r3, [r7, #0]
 8010032:	895b      	ldrh	r3, [r3, #10]
 8010034:	085b      	lsrs	r3, r3, #1
 8010036:	b29b      	uxth	r3, r3
 8010038:	005b      	lsls	r3, r3, #1
 801003a:	b29a      	uxth	r2, r3
 801003c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801003e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8010040:	683b      	ldr	r3, [r7, #0]
 8010042:	785b      	ldrb	r3, [r3, #1]
 8010044:	2b00      	cmp	r3, #0
 8010046:	f040 8093 	bne.w	8010170 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801004a:	687a      	ldr	r2, [r7, #4]
 801004c:	683b      	ldr	r3, [r7, #0]
 801004e:	781b      	ldrb	r3, [r3, #0]
 8010050:	009b      	lsls	r3, r3, #2
 8010052:	4413      	add	r3, r2
 8010054:	881b      	ldrh	r3, [r3, #0]
 8010056:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801005a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801005e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010062:	2b00      	cmp	r3, #0
 8010064:	d01b      	beq.n	801009e <USB_ActivateEndpoint+0x526>
 8010066:	687a      	ldr	r2, [r7, #4]
 8010068:	683b      	ldr	r3, [r7, #0]
 801006a:	781b      	ldrb	r3, [r3, #0]
 801006c:	009b      	lsls	r3, r3, #2
 801006e:	4413      	add	r3, r2
 8010070:	881b      	ldrh	r3, [r3, #0]
 8010072:	b29b      	uxth	r3, r3
 8010074:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801007c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 801007e:	687a      	ldr	r2, [r7, #4]
 8010080:	683b      	ldr	r3, [r7, #0]
 8010082:	781b      	ldrb	r3, [r3, #0]
 8010084:	009b      	lsls	r3, r3, #2
 8010086:	441a      	add	r2, r3
 8010088:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801008a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801008e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010092:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010096:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801009a:	b29b      	uxth	r3, r3
 801009c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801009e:	687a      	ldr	r2, [r7, #4]
 80100a0:	683b      	ldr	r3, [r7, #0]
 80100a2:	781b      	ldrb	r3, [r3, #0]
 80100a4:	009b      	lsls	r3, r3, #2
 80100a6:	4413      	add	r3, r2
 80100a8:	881b      	ldrh	r3, [r3, #0]
 80100aa:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80100ac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80100ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d01b      	beq.n	80100ee <USB_ActivateEndpoint+0x576>
 80100b6:	687a      	ldr	r2, [r7, #4]
 80100b8:	683b      	ldr	r3, [r7, #0]
 80100ba:	781b      	ldrb	r3, [r3, #0]
 80100bc:	009b      	lsls	r3, r3, #2
 80100be:	4413      	add	r3, r2
 80100c0:	881b      	ldrh	r3, [r3, #0]
 80100c2:	b29b      	uxth	r3, r3
 80100c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80100c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80100cc:	877b      	strh	r3, [r7, #58]	; 0x3a
 80100ce:	687a      	ldr	r2, [r7, #4]
 80100d0:	683b      	ldr	r3, [r7, #0]
 80100d2:	781b      	ldrb	r3, [r3, #0]
 80100d4:	009b      	lsls	r3, r3, #2
 80100d6:	441a      	add	r2, r3
 80100d8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80100da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80100de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80100e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80100e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80100ea:	b29b      	uxth	r3, r3
 80100ec:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80100ee:	687a      	ldr	r2, [r7, #4]
 80100f0:	683b      	ldr	r3, [r7, #0]
 80100f2:	781b      	ldrb	r3, [r3, #0]
 80100f4:	009b      	lsls	r3, r3, #2
 80100f6:	4413      	add	r3, r2
 80100f8:	881b      	ldrh	r3, [r3, #0]
 80100fa:	b29b      	uxth	r3, r3
 80100fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010104:	873b      	strh	r3, [r7, #56]	; 0x38
 8010106:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8010108:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 801010c:	873b      	strh	r3, [r7, #56]	; 0x38
 801010e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8010110:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8010114:	873b      	strh	r3, [r7, #56]	; 0x38
 8010116:	687a      	ldr	r2, [r7, #4]
 8010118:	683b      	ldr	r3, [r7, #0]
 801011a:	781b      	ldrb	r3, [r3, #0]
 801011c:	009b      	lsls	r3, r3, #2
 801011e:	441a      	add	r2, r3
 8010120:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8010122:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010126:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801012a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801012e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010132:	b29b      	uxth	r3, r3
 8010134:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010136:	687a      	ldr	r2, [r7, #4]
 8010138:	683b      	ldr	r3, [r7, #0]
 801013a:	781b      	ldrb	r3, [r3, #0]
 801013c:	009b      	lsls	r3, r3, #2
 801013e:	4413      	add	r3, r2
 8010140:	881b      	ldrh	r3, [r3, #0]
 8010142:	b29b      	uxth	r3, r3
 8010144:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010148:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801014c:	86fb      	strh	r3, [r7, #54]	; 0x36
 801014e:	687a      	ldr	r2, [r7, #4]
 8010150:	683b      	ldr	r3, [r7, #0]
 8010152:	781b      	ldrb	r3, [r3, #0]
 8010154:	009b      	lsls	r3, r3, #2
 8010156:	441a      	add	r2, r3
 8010158:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801015a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801015e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010162:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801016a:	b29b      	uxth	r3, r3
 801016c:	8013      	strh	r3, [r2, #0]
 801016e:	e0bc      	b.n	80102ea <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010170:	687a      	ldr	r2, [r7, #4]
 8010172:	683b      	ldr	r3, [r7, #0]
 8010174:	781b      	ldrb	r3, [r3, #0]
 8010176:	009b      	lsls	r3, r3, #2
 8010178:	4413      	add	r3, r2
 801017a:	881b      	ldrh	r3, [r3, #0]
 801017c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8010180:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010184:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010188:	2b00      	cmp	r3, #0
 801018a:	d01d      	beq.n	80101c8 <USB_ActivateEndpoint+0x650>
 801018c:	687a      	ldr	r2, [r7, #4]
 801018e:	683b      	ldr	r3, [r7, #0]
 8010190:	781b      	ldrb	r3, [r3, #0]
 8010192:	009b      	lsls	r3, r3, #2
 8010194:	4413      	add	r3, r2
 8010196:	881b      	ldrh	r3, [r3, #0]
 8010198:	b29b      	uxth	r3, r3
 801019a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801019e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80101a2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80101a6:	687a      	ldr	r2, [r7, #4]
 80101a8:	683b      	ldr	r3, [r7, #0]
 80101aa:	781b      	ldrb	r3, [r3, #0]
 80101ac:	009b      	lsls	r3, r3, #2
 80101ae:	441a      	add	r2, r3
 80101b0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80101b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80101b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80101bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80101c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80101c4:	b29b      	uxth	r3, r3
 80101c6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80101c8:	687a      	ldr	r2, [r7, #4]
 80101ca:	683b      	ldr	r3, [r7, #0]
 80101cc:	781b      	ldrb	r3, [r3, #0]
 80101ce:	009b      	lsls	r3, r3, #2
 80101d0:	4413      	add	r3, r2
 80101d2:	881b      	ldrh	r3, [r3, #0]
 80101d4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80101d8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80101dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d01d      	beq.n	8010220 <USB_ActivateEndpoint+0x6a8>
 80101e4:	687a      	ldr	r2, [r7, #4]
 80101e6:	683b      	ldr	r3, [r7, #0]
 80101e8:	781b      	ldrb	r3, [r3, #0]
 80101ea:	009b      	lsls	r3, r3, #2
 80101ec:	4413      	add	r3, r2
 80101ee:	881b      	ldrh	r3, [r3, #0]
 80101f0:	b29b      	uxth	r3, r3
 80101f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80101f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80101fa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80101fe:	687a      	ldr	r2, [r7, #4]
 8010200:	683b      	ldr	r3, [r7, #0]
 8010202:	781b      	ldrb	r3, [r3, #0]
 8010204:	009b      	lsls	r3, r3, #2
 8010206:	441a      	add	r2, r3
 8010208:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801020c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010210:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010214:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010218:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801021c:	b29b      	uxth	r3, r3
 801021e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010220:	683b      	ldr	r3, [r7, #0]
 8010222:	78db      	ldrb	r3, [r3, #3]
 8010224:	2b01      	cmp	r3, #1
 8010226:	d024      	beq.n	8010272 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8010228:	687a      	ldr	r2, [r7, #4]
 801022a:	683b      	ldr	r3, [r7, #0]
 801022c:	781b      	ldrb	r3, [r3, #0]
 801022e:	009b      	lsls	r3, r3, #2
 8010230:	4413      	add	r3, r2
 8010232:	881b      	ldrh	r3, [r3, #0]
 8010234:	b29b      	uxth	r3, r3
 8010236:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801023a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801023e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8010242:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010246:	f083 0320 	eor.w	r3, r3, #32
 801024a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 801024e:	687a      	ldr	r2, [r7, #4]
 8010250:	683b      	ldr	r3, [r7, #0]
 8010252:	781b      	ldrb	r3, [r3, #0]
 8010254:	009b      	lsls	r3, r3, #2
 8010256:	441a      	add	r2, r3
 8010258:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801025c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010260:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010264:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801026c:	b29b      	uxth	r3, r3
 801026e:	8013      	strh	r3, [r2, #0]
 8010270:	e01d      	b.n	80102ae <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010272:	687a      	ldr	r2, [r7, #4]
 8010274:	683b      	ldr	r3, [r7, #0]
 8010276:	781b      	ldrb	r3, [r3, #0]
 8010278:	009b      	lsls	r3, r3, #2
 801027a:	4413      	add	r3, r2
 801027c:	881b      	ldrh	r3, [r3, #0]
 801027e:	b29b      	uxth	r3, r3
 8010280:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010284:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010288:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 801028c:	687a      	ldr	r2, [r7, #4]
 801028e:	683b      	ldr	r3, [r7, #0]
 8010290:	781b      	ldrb	r3, [r3, #0]
 8010292:	009b      	lsls	r3, r3, #2
 8010294:	441a      	add	r2, r3
 8010296:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801029a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801029e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80102a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80102a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80102aa:	b29b      	uxth	r3, r3
 80102ac:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80102ae:	687a      	ldr	r2, [r7, #4]
 80102b0:	683b      	ldr	r3, [r7, #0]
 80102b2:	781b      	ldrb	r3, [r3, #0]
 80102b4:	009b      	lsls	r3, r3, #2
 80102b6:	4413      	add	r3, r2
 80102b8:	881b      	ldrh	r3, [r3, #0]
 80102ba:	b29b      	uxth	r3, r3
 80102bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80102c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80102c4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80102c8:	687a      	ldr	r2, [r7, #4]
 80102ca:	683b      	ldr	r3, [r7, #0]
 80102cc:	781b      	ldrb	r3, [r3, #0]
 80102ce:	009b      	lsls	r3, r3, #2
 80102d0:	441a      	add	r2, r3
 80102d2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80102d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80102da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80102de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80102e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80102e6:	b29b      	uxth	r3, r3
 80102e8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80102ea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80102ee:	4618      	mov	r0, r3
 80102f0:	3774      	adds	r7, #116	; 0x74
 80102f2:	46bd      	mov	sp, r7
 80102f4:	bc80      	pop	{r7}
 80102f6:	4770      	bx	lr

080102f8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80102f8:	b480      	push	{r7}
 80102fa:	b08d      	sub	sp, #52	; 0x34
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	6078      	str	r0, [r7, #4]
 8010300:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8010302:	683b      	ldr	r3, [r7, #0]
 8010304:	7b1b      	ldrb	r3, [r3, #12]
 8010306:	2b00      	cmp	r3, #0
 8010308:	f040 808e 	bne.w	8010428 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 801030c:	683b      	ldr	r3, [r7, #0]
 801030e:	785b      	ldrb	r3, [r3, #1]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d044      	beq.n	801039e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010314:	687a      	ldr	r2, [r7, #4]
 8010316:	683b      	ldr	r3, [r7, #0]
 8010318:	781b      	ldrb	r3, [r3, #0]
 801031a:	009b      	lsls	r3, r3, #2
 801031c:	4413      	add	r3, r2
 801031e:	881b      	ldrh	r3, [r3, #0]
 8010320:	81bb      	strh	r3, [r7, #12]
 8010322:	89bb      	ldrh	r3, [r7, #12]
 8010324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010328:	2b00      	cmp	r3, #0
 801032a:	d01b      	beq.n	8010364 <USB_DeactivateEndpoint+0x6c>
 801032c:	687a      	ldr	r2, [r7, #4]
 801032e:	683b      	ldr	r3, [r7, #0]
 8010330:	781b      	ldrb	r3, [r3, #0]
 8010332:	009b      	lsls	r3, r3, #2
 8010334:	4413      	add	r3, r2
 8010336:	881b      	ldrh	r3, [r3, #0]
 8010338:	b29b      	uxth	r3, r3
 801033a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801033e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010342:	817b      	strh	r3, [r7, #10]
 8010344:	687a      	ldr	r2, [r7, #4]
 8010346:	683b      	ldr	r3, [r7, #0]
 8010348:	781b      	ldrb	r3, [r3, #0]
 801034a:	009b      	lsls	r3, r3, #2
 801034c:	441a      	add	r2, r3
 801034e:	897b      	ldrh	r3, [r7, #10]
 8010350:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010354:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010358:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801035c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010360:	b29b      	uxth	r3, r3
 8010362:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010364:	687a      	ldr	r2, [r7, #4]
 8010366:	683b      	ldr	r3, [r7, #0]
 8010368:	781b      	ldrb	r3, [r3, #0]
 801036a:	009b      	lsls	r3, r3, #2
 801036c:	4413      	add	r3, r2
 801036e:	881b      	ldrh	r3, [r3, #0]
 8010370:	b29b      	uxth	r3, r3
 8010372:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010376:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801037a:	813b      	strh	r3, [r7, #8]
 801037c:	687a      	ldr	r2, [r7, #4]
 801037e:	683b      	ldr	r3, [r7, #0]
 8010380:	781b      	ldrb	r3, [r3, #0]
 8010382:	009b      	lsls	r3, r3, #2
 8010384:	441a      	add	r2, r3
 8010386:	893b      	ldrh	r3, [r7, #8]
 8010388:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801038c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010390:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010398:	b29b      	uxth	r3, r3
 801039a:	8013      	strh	r3, [r2, #0]
 801039c:	e192      	b.n	80106c4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801039e:	687a      	ldr	r2, [r7, #4]
 80103a0:	683b      	ldr	r3, [r7, #0]
 80103a2:	781b      	ldrb	r3, [r3, #0]
 80103a4:	009b      	lsls	r3, r3, #2
 80103a6:	4413      	add	r3, r2
 80103a8:	881b      	ldrh	r3, [r3, #0]
 80103aa:	827b      	strh	r3, [r7, #18]
 80103ac:	8a7b      	ldrh	r3, [r7, #18]
 80103ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d01b      	beq.n	80103ee <USB_DeactivateEndpoint+0xf6>
 80103b6:	687a      	ldr	r2, [r7, #4]
 80103b8:	683b      	ldr	r3, [r7, #0]
 80103ba:	781b      	ldrb	r3, [r3, #0]
 80103bc:	009b      	lsls	r3, r3, #2
 80103be:	4413      	add	r3, r2
 80103c0:	881b      	ldrh	r3, [r3, #0]
 80103c2:	b29b      	uxth	r3, r3
 80103c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80103c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80103cc:	823b      	strh	r3, [r7, #16]
 80103ce:	687a      	ldr	r2, [r7, #4]
 80103d0:	683b      	ldr	r3, [r7, #0]
 80103d2:	781b      	ldrb	r3, [r3, #0]
 80103d4:	009b      	lsls	r3, r3, #2
 80103d6:	441a      	add	r2, r3
 80103d8:	8a3b      	ldrh	r3, [r7, #16]
 80103da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80103de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80103e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80103e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80103ea:	b29b      	uxth	r3, r3
 80103ec:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80103ee:	687a      	ldr	r2, [r7, #4]
 80103f0:	683b      	ldr	r3, [r7, #0]
 80103f2:	781b      	ldrb	r3, [r3, #0]
 80103f4:	009b      	lsls	r3, r3, #2
 80103f6:	4413      	add	r3, r2
 80103f8:	881b      	ldrh	r3, [r3, #0]
 80103fa:	b29b      	uxth	r3, r3
 80103fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010400:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010404:	81fb      	strh	r3, [r7, #14]
 8010406:	687a      	ldr	r2, [r7, #4]
 8010408:	683b      	ldr	r3, [r7, #0]
 801040a:	781b      	ldrb	r3, [r3, #0]
 801040c:	009b      	lsls	r3, r3, #2
 801040e:	441a      	add	r2, r3
 8010410:	89fb      	ldrh	r3, [r7, #14]
 8010412:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010416:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801041a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801041e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010422:	b29b      	uxth	r3, r3
 8010424:	8013      	strh	r3, [r2, #0]
 8010426:	e14d      	b.n	80106c4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8010428:	683b      	ldr	r3, [r7, #0]
 801042a:	785b      	ldrb	r3, [r3, #1]
 801042c:	2b00      	cmp	r3, #0
 801042e:	f040 80a5 	bne.w	801057c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010432:	687a      	ldr	r2, [r7, #4]
 8010434:	683b      	ldr	r3, [r7, #0]
 8010436:	781b      	ldrb	r3, [r3, #0]
 8010438:	009b      	lsls	r3, r3, #2
 801043a:	4413      	add	r3, r2
 801043c:	881b      	ldrh	r3, [r3, #0]
 801043e:	843b      	strh	r3, [r7, #32]
 8010440:	8c3b      	ldrh	r3, [r7, #32]
 8010442:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010446:	2b00      	cmp	r3, #0
 8010448:	d01b      	beq.n	8010482 <USB_DeactivateEndpoint+0x18a>
 801044a:	687a      	ldr	r2, [r7, #4]
 801044c:	683b      	ldr	r3, [r7, #0]
 801044e:	781b      	ldrb	r3, [r3, #0]
 8010450:	009b      	lsls	r3, r3, #2
 8010452:	4413      	add	r3, r2
 8010454:	881b      	ldrh	r3, [r3, #0]
 8010456:	b29b      	uxth	r3, r3
 8010458:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801045c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010460:	83fb      	strh	r3, [r7, #30]
 8010462:	687a      	ldr	r2, [r7, #4]
 8010464:	683b      	ldr	r3, [r7, #0]
 8010466:	781b      	ldrb	r3, [r3, #0]
 8010468:	009b      	lsls	r3, r3, #2
 801046a:	441a      	add	r2, r3
 801046c:	8bfb      	ldrh	r3, [r7, #30]
 801046e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010472:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010476:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801047a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801047e:	b29b      	uxth	r3, r3
 8010480:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010482:	687a      	ldr	r2, [r7, #4]
 8010484:	683b      	ldr	r3, [r7, #0]
 8010486:	781b      	ldrb	r3, [r3, #0]
 8010488:	009b      	lsls	r3, r3, #2
 801048a:	4413      	add	r3, r2
 801048c:	881b      	ldrh	r3, [r3, #0]
 801048e:	83bb      	strh	r3, [r7, #28]
 8010490:	8bbb      	ldrh	r3, [r7, #28]
 8010492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010496:	2b00      	cmp	r3, #0
 8010498:	d01b      	beq.n	80104d2 <USB_DeactivateEndpoint+0x1da>
 801049a:	687a      	ldr	r2, [r7, #4]
 801049c:	683b      	ldr	r3, [r7, #0]
 801049e:	781b      	ldrb	r3, [r3, #0]
 80104a0:	009b      	lsls	r3, r3, #2
 80104a2:	4413      	add	r3, r2
 80104a4:	881b      	ldrh	r3, [r3, #0]
 80104a6:	b29b      	uxth	r3, r3
 80104a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80104ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80104b0:	837b      	strh	r3, [r7, #26]
 80104b2:	687a      	ldr	r2, [r7, #4]
 80104b4:	683b      	ldr	r3, [r7, #0]
 80104b6:	781b      	ldrb	r3, [r3, #0]
 80104b8:	009b      	lsls	r3, r3, #2
 80104ba:	441a      	add	r2, r3
 80104bc:	8b7b      	ldrh	r3, [r7, #26]
 80104be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80104c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80104c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80104ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80104ce:	b29b      	uxth	r3, r3
 80104d0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80104d2:	687a      	ldr	r2, [r7, #4]
 80104d4:	683b      	ldr	r3, [r7, #0]
 80104d6:	781b      	ldrb	r3, [r3, #0]
 80104d8:	009b      	lsls	r3, r3, #2
 80104da:	4413      	add	r3, r2
 80104dc:	881b      	ldrh	r3, [r3, #0]
 80104de:	b29b      	uxth	r3, r3
 80104e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80104e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80104e8:	833b      	strh	r3, [r7, #24]
 80104ea:	687a      	ldr	r2, [r7, #4]
 80104ec:	683b      	ldr	r3, [r7, #0]
 80104ee:	781b      	ldrb	r3, [r3, #0]
 80104f0:	009b      	lsls	r3, r3, #2
 80104f2:	441a      	add	r2, r3
 80104f4:	8b3b      	ldrh	r3, [r7, #24]
 80104f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80104fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80104fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010502:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010506:	b29b      	uxth	r3, r3
 8010508:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801050a:	687a      	ldr	r2, [r7, #4]
 801050c:	683b      	ldr	r3, [r7, #0]
 801050e:	781b      	ldrb	r3, [r3, #0]
 8010510:	009b      	lsls	r3, r3, #2
 8010512:	4413      	add	r3, r2
 8010514:	881b      	ldrh	r3, [r3, #0]
 8010516:	b29b      	uxth	r3, r3
 8010518:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801051c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010520:	82fb      	strh	r3, [r7, #22]
 8010522:	687a      	ldr	r2, [r7, #4]
 8010524:	683b      	ldr	r3, [r7, #0]
 8010526:	781b      	ldrb	r3, [r3, #0]
 8010528:	009b      	lsls	r3, r3, #2
 801052a:	441a      	add	r2, r3
 801052c:	8afb      	ldrh	r3, [r7, #22]
 801052e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010532:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801053a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801053e:	b29b      	uxth	r3, r3
 8010540:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010542:	687a      	ldr	r2, [r7, #4]
 8010544:	683b      	ldr	r3, [r7, #0]
 8010546:	781b      	ldrb	r3, [r3, #0]
 8010548:	009b      	lsls	r3, r3, #2
 801054a:	4413      	add	r3, r2
 801054c:	881b      	ldrh	r3, [r3, #0]
 801054e:	b29b      	uxth	r3, r3
 8010550:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010554:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010558:	82bb      	strh	r3, [r7, #20]
 801055a:	687a      	ldr	r2, [r7, #4]
 801055c:	683b      	ldr	r3, [r7, #0]
 801055e:	781b      	ldrb	r3, [r3, #0]
 8010560:	009b      	lsls	r3, r3, #2
 8010562:	441a      	add	r2, r3
 8010564:	8abb      	ldrh	r3, [r7, #20]
 8010566:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801056a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801056e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010572:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010576:	b29b      	uxth	r3, r3
 8010578:	8013      	strh	r3, [r2, #0]
 801057a:	e0a3      	b.n	80106c4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801057c:	687a      	ldr	r2, [r7, #4]
 801057e:	683b      	ldr	r3, [r7, #0]
 8010580:	781b      	ldrb	r3, [r3, #0]
 8010582:	009b      	lsls	r3, r3, #2
 8010584:	4413      	add	r3, r2
 8010586:	881b      	ldrh	r3, [r3, #0]
 8010588:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801058a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801058c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010590:	2b00      	cmp	r3, #0
 8010592:	d01b      	beq.n	80105cc <USB_DeactivateEndpoint+0x2d4>
 8010594:	687a      	ldr	r2, [r7, #4]
 8010596:	683b      	ldr	r3, [r7, #0]
 8010598:	781b      	ldrb	r3, [r3, #0]
 801059a:	009b      	lsls	r3, r3, #2
 801059c:	4413      	add	r3, r2
 801059e:	881b      	ldrh	r3, [r3, #0]
 80105a0:	b29b      	uxth	r3, r3
 80105a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80105a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80105aa:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80105ac:	687a      	ldr	r2, [r7, #4]
 80105ae:	683b      	ldr	r3, [r7, #0]
 80105b0:	781b      	ldrb	r3, [r3, #0]
 80105b2:	009b      	lsls	r3, r3, #2
 80105b4:	441a      	add	r2, r3
 80105b6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80105b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80105bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80105c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80105c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80105c8:	b29b      	uxth	r3, r3
 80105ca:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80105cc:	687a      	ldr	r2, [r7, #4]
 80105ce:	683b      	ldr	r3, [r7, #0]
 80105d0:	781b      	ldrb	r3, [r3, #0]
 80105d2:	009b      	lsls	r3, r3, #2
 80105d4:	4413      	add	r3, r2
 80105d6:	881b      	ldrh	r3, [r3, #0]
 80105d8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80105da:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80105dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d01b      	beq.n	801061c <USB_DeactivateEndpoint+0x324>
 80105e4:	687a      	ldr	r2, [r7, #4]
 80105e6:	683b      	ldr	r3, [r7, #0]
 80105e8:	781b      	ldrb	r3, [r3, #0]
 80105ea:	009b      	lsls	r3, r3, #2
 80105ec:	4413      	add	r3, r2
 80105ee:	881b      	ldrh	r3, [r3, #0]
 80105f0:	b29b      	uxth	r3, r3
 80105f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80105f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80105fa:	853b      	strh	r3, [r7, #40]	; 0x28
 80105fc:	687a      	ldr	r2, [r7, #4]
 80105fe:	683b      	ldr	r3, [r7, #0]
 8010600:	781b      	ldrb	r3, [r3, #0]
 8010602:	009b      	lsls	r3, r3, #2
 8010604:	441a      	add	r2, r3
 8010606:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010608:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801060c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010610:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010614:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010618:	b29b      	uxth	r3, r3
 801061a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 801061c:	687a      	ldr	r2, [r7, #4]
 801061e:	683b      	ldr	r3, [r7, #0]
 8010620:	781b      	ldrb	r3, [r3, #0]
 8010622:	009b      	lsls	r3, r3, #2
 8010624:	4413      	add	r3, r2
 8010626:	881b      	ldrh	r3, [r3, #0]
 8010628:	b29b      	uxth	r3, r3
 801062a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801062e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010632:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010634:	687a      	ldr	r2, [r7, #4]
 8010636:	683b      	ldr	r3, [r7, #0]
 8010638:	781b      	ldrb	r3, [r3, #0]
 801063a:	009b      	lsls	r3, r3, #2
 801063c:	441a      	add	r2, r3
 801063e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010640:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010644:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010648:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801064c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010650:	b29b      	uxth	r3, r3
 8010652:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010654:	687a      	ldr	r2, [r7, #4]
 8010656:	683b      	ldr	r3, [r7, #0]
 8010658:	781b      	ldrb	r3, [r3, #0]
 801065a:	009b      	lsls	r3, r3, #2
 801065c:	4413      	add	r3, r2
 801065e:	881b      	ldrh	r3, [r3, #0]
 8010660:	b29b      	uxth	r3, r3
 8010662:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010666:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801066a:	84bb      	strh	r3, [r7, #36]	; 0x24
 801066c:	687a      	ldr	r2, [r7, #4]
 801066e:	683b      	ldr	r3, [r7, #0]
 8010670:	781b      	ldrb	r3, [r3, #0]
 8010672:	009b      	lsls	r3, r3, #2
 8010674:	441a      	add	r2, r3
 8010676:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010678:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801067c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010680:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010688:	b29b      	uxth	r3, r3
 801068a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801068c:	687a      	ldr	r2, [r7, #4]
 801068e:	683b      	ldr	r3, [r7, #0]
 8010690:	781b      	ldrb	r3, [r3, #0]
 8010692:	009b      	lsls	r3, r3, #2
 8010694:	4413      	add	r3, r2
 8010696:	881b      	ldrh	r3, [r3, #0]
 8010698:	b29b      	uxth	r3, r3
 801069a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801069e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80106a2:	847b      	strh	r3, [r7, #34]	; 0x22
 80106a4:	687a      	ldr	r2, [r7, #4]
 80106a6:	683b      	ldr	r3, [r7, #0]
 80106a8:	781b      	ldrb	r3, [r3, #0]
 80106aa:	009b      	lsls	r3, r3, #2
 80106ac:	441a      	add	r2, r3
 80106ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80106b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80106b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80106b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80106bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80106c0:	b29b      	uxth	r3, r3
 80106c2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80106c4:	2300      	movs	r3, #0
}
 80106c6:	4618      	mov	r0, r3
 80106c8:	3734      	adds	r7, #52	; 0x34
 80106ca:	46bd      	mov	sp, r7
 80106cc:	bc80      	pop	{r7}
 80106ce:	4770      	bx	lr

080106d0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80106d0:	b580      	push	{r7, lr}
 80106d2:	b0c2      	sub	sp, #264	; 0x108
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80106de:	6018      	str	r0, [r3, #0]
 80106e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106e8:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80106ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	785b      	ldrb	r3, [r3, #1]
 80106f6:	2b01      	cmp	r3, #1
 80106f8:	f040 86b7 	bne.w	801146a <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80106fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010700:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	699a      	ldr	r2, [r3, #24]
 8010708:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801070c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	691b      	ldr	r3, [r3, #16]
 8010714:	429a      	cmp	r2, r3
 8010716:	d908      	bls.n	801072a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8010718:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801071c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	691b      	ldr	r3, [r3, #16]
 8010724:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8010728:	e007      	b.n	801073a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 801072a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801072e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	699b      	ldr	r3, [r3, #24]
 8010736:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 801073a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801073e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	7b1b      	ldrb	r3, [r3, #12]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d13a      	bne.n	80107c0 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 801074a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801074e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	6959      	ldr	r1, [r3, #20]
 8010756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801075a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	88da      	ldrh	r2, [r3, #6]
 8010762:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010766:	b29b      	uxth	r3, r3
 8010768:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801076c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010770:	6800      	ldr	r0, [r0, #0]
 8010772:	f001 fc9c 	bl	80120ae <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8010776:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801077a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	613b      	str	r3, [r7, #16]
 8010782:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010786:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010790:	b29b      	uxth	r3, r3
 8010792:	461a      	mov	r2, r3
 8010794:	693b      	ldr	r3, [r7, #16]
 8010796:	4413      	add	r3, r2
 8010798:	613b      	str	r3, [r7, #16]
 801079a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801079e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	781b      	ldrb	r3, [r3, #0]
 80107a6:	011a      	lsls	r2, r3, #4
 80107a8:	693b      	ldr	r3, [r7, #16]
 80107aa:	4413      	add	r3, r2
 80107ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80107b0:	60fb      	str	r3, [r7, #12]
 80107b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80107b6:	b29a      	uxth	r2, r3
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	801a      	strh	r2, [r3, #0]
 80107bc:	f000 be1f 	b.w	80113fe <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80107c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	78db      	ldrb	r3, [r3, #3]
 80107cc:	2b02      	cmp	r3, #2
 80107ce:	f040 8462 	bne.w	8011096 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80107d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	6a1a      	ldr	r2, [r3, #32]
 80107de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	691b      	ldr	r3, [r3, #16]
 80107ea:	429a      	cmp	r2, r3
 80107ec:	f240 83df 	bls.w	8010fae <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80107f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80107f8:	681a      	ldr	r2, [r3, #0]
 80107fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	781b      	ldrb	r3, [r3, #0]
 8010806:	009b      	lsls	r3, r3, #2
 8010808:	4413      	add	r3, r2
 801080a:	881b      	ldrh	r3, [r3, #0]
 801080c:	b29b      	uxth	r3, r3
 801080e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010816:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 801081a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801081e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010822:	681a      	ldr	r2, [r3, #0]
 8010824:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010828:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	781b      	ldrb	r3, [r3, #0]
 8010830:	009b      	lsls	r3, r3, #2
 8010832:	441a      	add	r2, r3
 8010834:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8010838:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801083c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010840:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8010844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010848:	b29b      	uxth	r3, r3
 801084a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 801084c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010850:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	6a1a      	ldr	r2, [r3, #32]
 8010858:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801085c:	1ad2      	subs	r2, r2, r3
 801085e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010862:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801086a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801086e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010872:	681a      	ldr	r2, [r3, #0]
 8010874:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010878:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	781b      	ldrb	r3, [r3, #0]
 8010880:	009b      	lsls	r3, r3, #2
 8010882:	4413      	add	r3, r2
 8010884:	881b      	ldrh	r3, [r3, #0]
 8010886:	b29b      	uxth	r3, r3
 8010888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801088c:	2b00      	cmp	r3, #0
 801088e:	f000 81c7 	beq.w	8010c20 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8010892:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010896:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	633b      	str	r3, [r7, #48]	; 0x30
 801089e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	785b      	ldrb	r3, [r3, #1]
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d177      	bne.n	801099e <USB_EPStartXfer+0x2ce>
 80108ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80108ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80108c8:	b29b      	uxth	r3, r3
 80108ca:	461a      	mov	r2, r3
 80108cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108ce:	4413      	add	r3, r2
 80108d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80108d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	781b      	ldrb	r3, [r3, #0]
 80108de:	011a      	lsls	r2, r3, #4
 80108e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108e2:	4413      	add	r3, r2
 80108e4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80108e8:	627b      	str	r3, [r7, #36]	; 0x24
 80108ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ec:	881b      	ldrh	r3, [r3, #0]
 80108ee:	b29b      	uxth	r3, r3
 80108f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80108f4:	b29a      	uxth	r2, r3
 80108f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108f8:	801a      	strh	r2, [r3, #0]
 80108fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80108fe:	2b3e      	cmp	r3, #62	; 0x3e
 8010900:	d921      	bls.n	8010946 <USB_EPStartXfer+0x276>
 8010902:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010906:	095b      	lsrs	r3, r3, #5
 8010908:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 801090c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010910:	f003 031f 	and.w	r3, r3, #31
 8010914:	2b00      	cmp	r3, #0
 8010916:	d104      	bne.n	8010922 <USB_EPStartXfer+0x252>
 8010918:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801091c:	3b01      	subs	r3, #1
 801091e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8010922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010924:	881b      	ldrh	r3, [r3, #0]
 8010926:	b29a      	uxth	r2, r3
 8010928:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801092c:	b29b      	uxth	r3, r3
 801092e:	029b      	lsls	r3, r3, #10
 8010930:	b29b      	uxth	r3, r3
 8010932:	4313      	orrs	r3, r2
 8010934:	b29b      	uxth	r3, r3
 8010936:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801093a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801093e:	b29a      	uxth	r2, r3
 8010940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010942:	801a      	strh	r2, [r3, #0]
 8010944:	e050      	b.n	80109e8 <USB_EPStartXfer+0x318>
 8010946:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801094a:	2b00      	cmp	r3, #0
 801094c:	d10a      	bne.n	8010964 <USB_EPStartXfer+0x294>
 801094e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010950:	881b      	ldrh	r3, [r3, #0]
 8010952:	b29b      	uxth	r3, r3
 8010954:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010958:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801095c:	b29a      	uxth	r2, r3
 801095e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010960:	801a      	strh	r2, [r3, #0]
 8010962:	e041      	b.n	80109e8 <USB_EPStartXfer+0x318>
 8010964:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010968:	085b      	lsrs	r3, r3, #1
 801096a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 801096e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010972:	f003 0301 	and.w	r3, r3, #1
 8010976:	2b00      	cmp	r3, #0
 8010978:	d004      	beq.n	8010984 <USB_EPStartXfer+0x2b4>
 801097a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801097e:	3301      	adds	r3, #1
 8010980:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8010984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010986:	881b      	ldrh	r3, [r3, #0]
 8010988:	b29a      	uxth	r2, r3
 801098a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801098e:	b29b      	uxth	r3, r3
 8010990:	029b      	lsls	r3, r3, #10
 8010992:	b29b      	uxth	r3, r3
 8010994:	4313      	orrs	r3, r2
 8010996:	b29a      	uxth	r2, r3
 8010998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801099a:	801a      	strh	r2, [r3, #0]
 801099c:	e024      	b.n	80109e8 <USB_EPStartXfer+0x318>
 801099e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	785b      	ldrb	r3, [r3, #1]
 80109aa:	2b01      	cmp	r3, #1
 80109ac:	d11c      	bne.n	80109e8 <USB_EPStartXfer+0x318>
 80109ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80109bc:	b29b      	uxth	r3, r3
 80109be:	461a      	mov	r2, r3
 80109c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109c2:	4413      	add	r3, r2
 80109c4:	633b      	str	r3, [r7, #48]	; 0x30
 80109c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	781b      	ldrb	r3, [r3, #0]
 80109d2:	011a      	lsls	r2, r3, #4
 80109d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109d6:	4413      	add	r3, r2
 80109d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80109dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80109de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80109e2:	b29a      	uxth	r2, r3
 80109e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109e6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80109e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	895b      	ldrh	r3, [r3, #10]
 80109f4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80109f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	6959      	ldr	r1, [r3, #20]
 8010a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010a08:	b29b      	uxth	r3, r3
 8010a0a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010a0e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010a12:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010a16:	6800      	ldr	r0, [r0, #0]
 8010a18:	f001 fb49 	bl	80120ae <USB_WritePMA>
            ep->xfer_buff += len;
 8010a1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	695a      	ldr	r2, [r3, #20]
 8010a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010a2c:	441a      	add	r2, r3
 8010a2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8010a3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	6a1a      	ldr	r2, [r3, #32]
 8010a46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	691b      	ldr	r3, [r3, #16]
 8010a52:	429a      	cmp	r2, r3
 8010a54:	d90f      	bls.n	8010a76 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8010a56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	6a1a      	ldr	r2, [r3, #32]
 8010a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010a66:	1ad2      	subs	r2, r2, r3
 8010a68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	621a      	str	r2, [r3, #32]
 8010a74:	e00e      	b.n	8010a94 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8010a76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	6a1b      	ldr	r3, [r3, #32]
 8010a82:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8010a86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	2200      	movs	r2, #0
 8010a92:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8010a94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	785b      	ldrb	r3, [r3, #1]
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d177      	bne.n	8010b94 <USB_EPStartXfer+0x4c4>
 8010aa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010aa8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	61bb      	str	r3, [r7, #24]
 8010ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ab4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010abe:	b29b      	uxth	r3, r3
 8010ac0:	461a      	mov	r2, r3
 8010ac2:	69bb      	ldr	r3, [r7, #24]
 8010ac4:	4413      	add	r3, r2
 8010ac6:	61bb      	str	r3, [r7, #24]
 8010ac8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010acc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	781b      	ldrb	r3, [r3, #0]
 8010ad4:	011a      	lsls	r2, r3, #4
 8010ad6:	69bb      	ldr	r3, [r7, #24]
 8010ad8:	4413      	add	r3, r2
 8010ada:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8010ade:	617b      	str	r3, [r7, #20]
 8010ae0:	697b      	ldr	r3, [r7, #20]
 8010ae2:	881b      	ldrh	r3, [r3, #0]
 8010ae4:	b29b      	uxth	r3, r3
 8010ae6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010aea:	b29a      	uxth	r2, r3
 8010aec:	697b      	ldr	r3, [r7, #20]
 8010aee:	801a      	strh	r2, [r3, #0]
 8010af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010af4:	2b3e      	cmp	r3, #62	; 0x3e
 8010af6:	d921      	bls.n	8010b3c <USB_EPStartXfer+0x46c>
 8010af8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010afc:	095b      	lsrs	r3, r3, #5
 8010afe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010b02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010b06:	f003 031f 	and.w	r3, r3, #31
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d104      	bne.n	8010b18 <USB_EPStartXfer+0x448>
 8010b0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010b12:	3b01      	subs	r3, #1
 8010b14:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010b18:	697b      	ldr	r3, [r7, #20]
 8010b1a:	881b      	ldrh	r3, [r3, #0]
 8010b1c:	b29a      	uxth	r2, r3
 8010b1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010b22:	b29b      	uxth	r3, r3
 8010b24:	029b      	lsls	r3, r3, #10
 8010b26:	b29b      	uxth	r3, r3
 8010b28:	4313      	orrs	r3, r2
 8010b2a:	b29b      	uxth	r3, r3
 8010b2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010b30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010b34:	b29a      	uxth	r2, r3
 8010b36:	697b      	ldr	r3, [r7, #20]
 8010b38:	801a      	strh	r2, [r3, #0]
 8010b3a:	e056      	b.n	8010bea <USB_EPStartXfer+0x51a>
 8010b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d10a      	bne.n	8010b5a <USB_EPStartXfer+0x48a>
 8010b44:	697b      	ldr	r3, [r7, #20]
 8010b46:	881b      	ldrh	r3, [r3, #0]
 8010b48:	b29b      	uxth	r3, r3
 8010b4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010b4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010b52:	b29a      	uxth	r2, r3
 8010b54:	697b      	ldr	r3, [r7, #20]
 8010b56:	801a      	strh	r2, [r3, #0]
 8010b58:	e047      	b.n	8010bea <USB_EPStartXfer+0x51a>
 8010b5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010b5e:	085b      	lsrs	r3, r3, #1
 8010b60:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010b68:	f003 0301 	and.w	r3, r3, #1
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d004      	beq.n	8010b7a <USB_EPStartXfer+0x4aa>
 8010b70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010b74:	3301      	adds	r3, #1
 8010b76:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010b7a:	697b      	ldr	r3, [r7, #20]
 8010b7c:	881b      	ldrh	r3, [r3, #0]
 8010b7e:	b29a      	uxth	r2, r3
 8010b80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010b84:	b29b      	uxth	r3, r3
 8010b86:	029b      	lsls	r3, r3, #10
 8010b88:	b29b      	uxth	r3, r3
 8010b8a:	4313      	orrs	r3, r2
 8010b8c:	b29a      	uxth	r2, r3
 8010b8e:	697b      	ldr	r3, [r7, #20]
 8010b90:	801a      	strh	r2, [r3, #0]
 8010b92:	e02a      	b.n	8010bea <USB_EPStartXfer+0x51a>
 8010b94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	785b      	ldrb	r3, [r3, #1]
 8010ba0:	2b01      	cmp	r3, #1
 8010ba2:	d122      	bne.n	8010bea <USB_EPStartXfer+0x51a>
 8010ba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ba8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	623b      	str	r3, [r7, #32]
 8010bb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010bb4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010bbe:	b29b      	uxth	r3, r3
 8010bc0:	461a      	mov	r2, r3
 8010bc2:	6a3b      	ldr	r3, [r7, #32]
 8010bc4:	4413      	add	r3, r2
 8010bc6:	623b      	str	r3, [r7, #32]
 8010bc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010bcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	781b      	ldrb	r3, [r3, #0]
 8010bd4:	011a      	lsls	r2, r3, #4
 8010bd6:	6a3b      	ldr	r3, [r7, #32]
 8010bd8:	4413      	add	r3, r2
 8010bda:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8010bde:	61fb      	str	r3, [r7, #28]
 8010be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010be4:	b29a      	uxth	r2, r3
 8010be6:	69fb      	ldr	r3, [r7, #28]
 8010be8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8010bea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010bee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	891b      	ldrh	r3, [r3, #8]
 8010bf6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010bfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010bfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	6959      	ldr	r1, [r3, #20]
 8010c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010c0a:	b29b      	uxth	r3, r3
 8010c0c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010c10:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010c14:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010c18:	6800      	ldr	r0, [r0, #0]
 8010c1a:	f001 fa48 	bl	80120ae <USB_WritePMA>
 8010c1e:	e3ee      	b.n	80113fe <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8010c20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	785b      	ldrb	r3, [r3, #1]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d177      	bne.n	8010d20 <USB_EPStartXfer+0x650>
 8010c30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8010c3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010c4a:	b29b      	uxth	r3, r3
 8010c4c:	461a      	mov	r2, r3
 8010c4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c50:	4413      	add	r3, r2
 8010c52:	64bb      	str	r3, [r7, #72]	; 0x48
 8010c54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	781b      	ldrb	r3, [r3, #0]
 8010c60:	011a      	lsls	r2, r3, #4
 8010c62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c64:	4413      	add	r3, r2
 8010c66:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8010c6a:	647b      	str	r3, [r7, #68]	; 0x44
 8010c6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010c6e:	881b      	ldrh	r3, [r3, #0]
 8010c70:	b29b      	uxth	r3, r3
 8010c72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010c76:	b29a      	uxth	r2, r3
 8010c78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010c7a:	801a      	strh	r2, [r3, #0]
 8010c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010c80:	2b3e      	cmp	r3, #62	; 0x3e
 8010c82:	d921      	bls.n	8010cc8 <USB_EPStartXfer+0x5f8>
 8010c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010c88:	095b      	lsrs	r3, r3, #5
 8010c8a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8010c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010c92:	f003 031f 	and.w	r3, r3, #31
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d104      	bne.n	8010ca4 <USB_EPStartXfer+0x5d4>
 8010c9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010c9e:	3b01      	subs	r3, #1
 8010ca0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8010ca4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ca6:	881b      	ldrh	r3, [r3, #0]
 8010ca8:	b29a      	uxth	r2, r3
 8010caa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010cae:	b29b      	uxth	r3, r3
 8010cb0:	029b      	lsls	r3, r3, #10
 8010cb2:	b29b      	uxth	r3, r3
 8010cb4:	4313      	orrs	r3, r2
 8010cb6:	b29b      	uxth	r3, r3
 8010cb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010cbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010cc0:	b29a      	uxth	r2, r3
 8010cc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010cc4:	801a      	strh	r2, [r3, #0]
 8010cc6:	e056      	b.n	8010d76 <USB_EPStartXfer+0x6a6>
 8010cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d10a      	bne.n	8010ce6 <USB_EPStartXfer+0x616>
 8010cd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010cd2:	881b      	ldrh	r3, [r3, #0]
 8010cd4:	b29b      	uxth	r3, r3
 8010cd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010cda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010cde:	b29a      	uxth	r2, r3
 8010ce0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ce2:	801a      	strh	r2, [r3, #0]
 8010ce4:	e047      	b.n	8010d76 <USB_EPStartXfer+0x6a6>
 8010ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010cea:	085b      	lsrs	r3, r3, #1
 8010cec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8010cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010cf4:	f003 0301 	and.w	r3, r3, #1
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d004      	beq.n	8010d06 <USB_EPStartXfer+0x636>
 8010cfc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010d00:	3301      	adds	r3, #1
 8010d02:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8010d06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d08:	881b      	ldrh	r3, [r3, #0]
 8010d0a:	b29a      	uxth	r2, r3
 8010d0c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010d10:	b29b      	uxth	r3, r3
 8010d12:	029b      	lsls	r3, r3, #10
 8010d14:	b29b      	uxth	r3, r3
 8010d16:	4313      	orrs	r3, r2
 8010d18:	b29a      	uxth	r2, r3
 8010d1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d1c:	801a      	strh	r2, [r3, #0]
 8010d1e:	e02a      	b.n	8010d76 <USB_EPStartXfer+0x6a6>
 8010d20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	785b      	ldrb	r3, [r3, #1]
 8010d2c:	2b01      	cmp	r3, #1
 8010d2e:	d122      	bne.n	8010d76 <USB_EPStartXfer+0x6a6>
 8010d30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	653b      	str	r3, [r7, #80]	; 0x50
 8010d3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010d4a:	b29b      	uxth	r3, r3
 8010d4c:	461a      	mov	r2, r3
 8010d4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d50:	4413      	add	r3, r2
 8010d52:	653b      	str	r3, [r7, #80]	; 0x50
 8010d54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	781b      	ldrb	r3, [r3, #0]
 8010d60:	011a      	lsls	r2, r3, #4
 8010d62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d64:	4413      	add	r3, r2
 8010d66:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8010d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010d6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010d70:	b29a      	uxth	r2, r3
 8010d72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d74:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8010d76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	891b      	ldrh	r3, [r3, #8]
 8010d82:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010d86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	6959      	ldr	r1, [r3, #20]
 8010d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010d96:	b29b      	uxth	r3, r3
 8010d98:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010d9c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010da0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010da4:	6800      	ldr	r0, [r0, #0]
 8010da6:	f001 f982 	bl	80120ae <USB_WritePMA>
            ep->xfer_buff += len;
 8010daa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010dae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	695a      	ldr	r2, [r3, #20]
 8010db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010dba:	441a      	add	r2, r3
 8010dbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010dc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8010dc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010dcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	6a1a      	ldr	r2, [r3, #32]
 8010dd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010dd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	691b      	ldr	r3, [r3, #16]
 8010de0:	429a      	cmp	r2, r3
 8010de2:	d90f      	bls.n	8010e04 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8010de4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010de8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	6a1a      	ldr	r2, [r3, #32]
 8010df0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010df4:	1ad2      	subs	r2, r2, r3
 8010df6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010dfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	621a      	str	r2, [r3, #32]
 8010e02:	e00e      	b.n	8010e22 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8010e04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	6a1b      	ldr	r3, [r3, #32]
 8010e10:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8010e14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	2200      	movs	r2, #0
 8010e20:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8010e22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	643b      	str	r3, [r7, #64]	; 0x40
 8010e2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	785b      	ldrb	r3, [r3, #1]
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d177      	bne.n	8010f2e <USB_EPStartXfer+0x85e>
 8010e3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	63bb      	str	r3, [r7, #56]	; 0x38
 8010e4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010e58:	b29b      	uxth	r3, r3
 8010e5a:	461a      	mov	r2, r3
 8010e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e5e:	4413      	add	r3, r2
 8010e60:	63bb      	str	r3, [r7, #56]	; 0x38
 8010e62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	781b      	ldrb	r3, [r3, #0]
 8010e6e:	011a      	lsls	r2, r3, #4
 8010e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e72:	4413      	add	r3, r2
 8010e74:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8010e78:	637b      	str	r3, [r7, #52]	; 0x34
 8010e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e7c:	881b      	ldrh	r3, [r3, #0]
 8010e7e:	b29b      	uxth	r3, r3
 8010e80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010e84:	b29a      	uxth	r2, r3
 8010e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e88:	801a      	strh	r2, [r3, #0]
 8010e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e8e:	2b3e      	cmp	r3, #62	; 0x3e
 8010e90:	d921      	bls.n	8010ed6 <USB_EPStartXfer+0x806>
 8010e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e96:	095b      	lsrs	r3, r3, #5
 8010e98:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8010e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010ea0:	f003 031f 	and.w	r3, r3, #31
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d104      	bne.n	8010eb2 <USB_EPStartXfer+0x7e2>
 8010ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010eac:	3b01      	subs	r3, #1
 8010eae:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8010eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010eb4:	881b      	ldrh	r3, [r3, #0]
 8010eb6:	b29a      	uxth	r2, r3
 8010eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010ebc:	b29b      	uxth	r3, r3
 8010ebe:	029b      	lsls	r3, r3, #10
 8010ec0:	b29b      	uxth	r3, r3
 8010ec2:	4313      	orrs	r3, r2
 8010ec4:	b29b      	uxth	r3, r3
 8010ec6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010eca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010ece:	b29a      	uxth	r2, r3
 8010ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ed2:	801a      	strh	r2, [r3, #0]
 8010ed4:	e050      	b.n	8010f78 <USB_EPStartXfer+0x8a8>
 8010ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d10a      	bne.n	8010ef4 <USB_EPStartXfer+0x824>
 8010ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ee0:	881b      	ldrh	r3, [r3, #0]
 8010ee2:	b29b      	uxth	r3, r3
 8010ee4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010ee8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010eec:	b29a      	uxth	r2, r3
 8010eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ef0:	801a      	strh	r2, [r3, #0]
 8010ef2:	e041      	b.n	8010f78 <USB_EPStartXfer+0x8a8>
 8010ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010ef8:	085b      	lsrs	r3, r3, #1
 8010efa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8010efe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f02:	f003 0301 	and.w	r3, r3, #1
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d004      	beq.n	8010f14 <USB_EPStartXfer+0x844>
 8010f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010f0e:	3301      	adds	r3, #1
 8010f10:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8010f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f16:	881b      	ldrh	r3, [r3, #0]
 8010f18:	b29a      	uxth	r2, r3
 8010f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010f1e:	b29b      	uxth	r3, r3
 8010f20:	029b      	lsls	r3, r3, #10
 8010f22:	b29b      	uxth	r3, r3
 8010f24:	4313      	orrs	r3, r2
 8010f26:	b29a      	uxth	r2, r3
 8010f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f2a:	801a      	strh	r2, [r3, #0]
 8010f2c:	e024      	b.n	8010f78 <USB_EPStartXfer+0x8a8>
 8010f2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	785b      	ldrb	r3, [r3, #1]
 8010f3a:	2b01      	cmp	r3, #1
 8010f3c:	d11c      	bne.n	8010f78 <USB_EPStartXfer+0x8a8>
 8010f3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010f4c:	b29b      	uxth	r3, r3
 8010f4e:	461a      	mov	r2, r3
 8010f50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f52:	4413      	add	r3, r2
 8010f54:	643b      	str	r3, [r7, #64]	; 0x40
 8010f56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	781b      	ldrb	r3, [r3, #0]
 8010f62:	011a      	lsls	r2, r3, #4
 8010f64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f66:	4413      	add	r3, r2
 8010f68:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8010f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010f6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f72:	b29a      	uxth	r2, r3
 8010f74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f76:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8010f78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	895b      	ldrh	r3, [r3, #10]
 8010f84:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010f88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	6959      	ldr	r1, [r3, #20]
 8010f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f98:	b29b      	uxth	r3, r3
 8010f9a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010f9e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010fa2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010fa6:	6800      	ldr	r0, [r0, #0]
 8010fa8:	f001 f881 	bl	80120ae <USB_WritePMA>
 8010fac:	e227      	b.n	80113fe <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8010fae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	6a1b      	ldr	r3, [r3, #32]
 8010fba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8010fbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010fc6:	681a      	ldr	r2, [r3, #0]
 8010fc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	781b      	ldrb	r3, [r3, #0]
 8010fd4:	009b      	lsls	r3, r3, #2
 8010fd6:	4413      	add	r3, r2
 8010fd8:	881b      	ldrh	r3, [r3, #0]
 8010fda:	b29b      	uxth	r3, r3
 8010fdc:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8010fe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010fe4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8010fe8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010ff0:	681a      	ldr	r2, [r3, #0]
 8010ff2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ff6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	781b      	ldrb	r3, [r3, #0]
 8010ffe:	009b      	lsls	r3, r3, #2
 8011000:	441a      	add	r2, r3
 8011002:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8011006:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801100a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801100e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011016:	b29b      	uxth	r3, r3
 8011018:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801101a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801101e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011026:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801102a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011034:	b29b      	uxth	r3, r3
 8011036:	461a      	mov	r2, r3
 8011038:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801103a:	4413      	add	r3, r2
 801103c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801103e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011042:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	781b      	ldrb	r3, [r3, #0]
 801104a:	011a      	lsls	r2, r3, #4
 801104c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801104e:	4413      	add	r3, r2
 8011050:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8011054:	65bb      	str	r3, [r7, #88]	; 0x58
 8011056:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801105a:	b29a      	uxth	r2, r3
 801105c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801105e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8011060:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011064:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	891b      	ldrh	r3, [r3, #8]
 801106c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011070:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011074:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	6959      	ldr	r1, [r3, #20]
 801107c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011080:	b29b      	uxth	r3, r3
 8011082:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011086:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801108a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801108e:	6800      	ldr	r0, [r0, #0]
 8011090:	f001 f80d 	bl	80120ae <USB_WritePMA>
 8011094:	e1b3      	b.n	80113fe <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8011096:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801109a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	6a1a      	ldr	r2, [r3, #32]
 80110a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80110a6:	1ad2      	subs	r2, r2, r3
 80110a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80110b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80110bc:	681a      	ldr	r2, [r3, #0]
 80110be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	781b      	ldrb	r3, [r3, #0]
 80110ca:	009b      	lsls	r3, r3, #2
 80110cc:	4413      	add	r3, r2
 80110ce:	881b      	ldrh	r3, [r3, #0]
 80110d0:	b29b      	uxth	r3, r3
 80110d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	f000 80c6 	beq.w	8011268 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80110dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	673b      	str	r3, [r7, #112]	; 0x70
 80110e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	785b      	ldrb	r3, [r3, #1]
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d177      	bne.n	80111e8 <USB_EPStartXfer+0xb18>
 80110f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	66bb      	str	r3, [r7, #104]	; 0x68
 8011104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011108:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011112:	b29b      	uxth	r3, r3
 8011114:	461a      	mov	r2, r3
 8011116:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011118:	4413      	add	r3, r2
 801111a:	66bb      	str	r3, [r7, #104]	; 0x68
 801111c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011120:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	781b      	ldrb	r3, [r3, #0]
 8011128:	011a      	lsls	r2, r3, #4
 801112a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801112c:	4413      	add	r3, r2
 801112e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8011132:	667b      	str	r3, [r7, #100]	; 0x64
 8011134:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011136:	881b      	ldrh	r3, [r3, #0]
 8011138:	b29b      	uxth	r3, r3
 801113a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801113e:	b29a      	uxth	r2, r3
 8011140:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011142:	801a      	strh	r2, [r3, #0]
 8011144:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011148:	2b3e      	cmp	r3, #62	; 0x3e
 801114a:	d921      	bls.n	8011190 <USB_EPStartXfer+0xac0>
 801114c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011150:	095b      	lsrs	r3, r3, #5
 8011152:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8011156:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801115a:	f003 031f 	and.w	r3, r3, #31
 801115e:	2b00      	cmp	r3, #0
 8011160:	d104      	bne.n	801116c <USB_EPStartXfer+0xa9c>
 8011162:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011166:	3b01      	subs	r3, #1
 8011168:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801116c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801116e:	881b      	ldrh	r3, [r3, #0]
 8011170:	b29a      	uxth	r2, r3
 8011172:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011176:	b29b      	uxth	r3, r3
 8011178:	029b      	lsls	r3, r3, #10
 801117a:	b29b      	uxth	r3, r3
 801117c:	4313      	orrs	r3, r2
 801117e:	b29b      	uxth	r3, r3
 8011180:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011184:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011188:	b29a      	uxth	r2, r3
 801118a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801118c:	801a      	strh	r2, [r3, #0]
 801118e:	e050      	b.n	8011232 <USB_EPStartXfer+0xb62>
 8011190:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011194:	2b00      	cmp	r3, #0
 8011196:	d10a      	bne.n	80111ae <USB_EPStartXfer+0xade>
 8011198:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801119a:	881b      	ldrh	r3, [r3, #0]
 801119c:	b29b      	uxth	r3, r3
 801119e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80111a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80111a6:	b29a      	uxth	r2, r3
 80111a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80111aa:	801a      	strh	r2, [r3, #0]
 80111ac:	e041      	b.n	8011232 <USB_EPStartXfer+0xb62>
 80111ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80111b2:	085b      	lsrs	r3, r3, #1
 80111b4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80111b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80111bc:	f003 0301 	and.w	r3, r3, #1
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d004      	beq.n	80111ce <USB_EPStartXfer+0xafe>
 80111c4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80111c8:	3301      	adds	r3, #1
 80111ca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80111ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80111d0:	881b      	ldrh	r3, [r3, #0]
 80111d2:	b29a      	uxth	r2, r3
 80111d4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80111d8:	b29b      	uxth	r3, r3
 80111da:	029b      	lsls	r3, r3, #10
 80111dc:	b29b      	uxth	r3, r3
 80111de:	4313      	orrs	r3, r2
 80111e0:	b29a      	uxth	r2, r3
 80111e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80111e4:	801a      	strh	r2, [r3, #0]
 80111e6:	e024      	b.n	8011232 <USB_EPStartXfer+0xb62>
 80111e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80111ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	785b      	ldrb	r3, [r3, #1]
 80111f4:	2b01      	cmp	r3, #1
 80111f6:	d11c      	bne.n	8011232 <USB_EPStartXfer+0xb62>
 80111f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80111fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011206:	b29b      	uxth	r3, r3
 8011208:	461a      	mov	r2, r3
 801120a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801120c:	4413      	add	r3, r2
 801120e:	673b      	str	r3, [r7, #112]	; 0x70
 8011210:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011214:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	781b      	ldrb	r3, [r3, #0]
 801121c:	011a      	lsls	r2, r3, #4
 801121e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011220:	4413      	add	r3, r2
 8011222:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8011226:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011228:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801122c:	b29a      	uxth	r2, r3
 801122e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011230:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8011232:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011236:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	895b      	ldrh	r3, [r3, #10]
 801123e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011242:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011246:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	6959      	ldr	r1, [r3, #20]
 801124e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011252:	b29b      	uxth	r3, r3
 8011254:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011258:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801125c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011260:	6800      	ldr	r0, [r0, #0]
 8011262:	f000 ff24 	bl	80120ae <USB_WritePMA>
 8011266:	e0ca      	b.n	80113fe <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8011268:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801126c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	785b      	ldrb	r3, [r3, #1]
 8011274:	2b00      	cmp	r3, #0
 8011276:	d177      	bne.n	8011368 <USB_EPStartXfer+0xc98>
 8011278:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801127c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011284:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011288:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011292:	b29b      	uxth	r3, r3
 8011294:	461a      	mov	r2, r3
 8011296:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011298:	4413      	add	r3, r2
 801129a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801129c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	781b      	ldrb	r3, [r3, #0]
 80112a8:	011a      	lsls	r2, r3, #4
 80112aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80112ac:	4413      	add	r3, r2
 80112ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80112b2:	67bb      	str	r3, [r7, #120]	; 0x78
 80112b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80112b6:	881b      	ldrh	r3, [r3, #0]
 80112b8:	b29b      	uxth	r3, r3
 80112ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80112be:	b29a      	uxth	r2, r3
 80112c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80112c2:	801a      	strh	r2, [r3, #0]
 80112c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80112c8:	2b3e      	cmp	r3, #62	; 0x3e
 80112ca:	d921      	bls.n	8011310 <USB_EPStartXfer+0xc40>
 80112cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80112d0:	095b      	lsrs	r3, r3, #5
 80112d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80112d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80112da:	f003 031f 	and.w	r3, r3, #31
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d104      	bne.n	80112ec <USB_EPStartXfer+0xc1c>
 80112e2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80112e6:	3b01      	subs	r3, #1
 80112e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80112ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80112ee:	881b      	ldrh	r3, [r3, #0]
 80112f0:	b29a      	uxth	r2, r3
 80112f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80112f6:	b29b      	uxth	r3, r3
 80112f8:	029b      	lsls	r3, r3, #10
 80112fa:	b29b      	uxth	r3, r3
 80112fc:	4313      	orrs	r3, r2
 80112fe:	b29b      	uxth	r3, r3
 8011300:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011304:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011308:	b29a      	uxth	r2, r3
 801130a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801130c:	801a      	strh	r2, [r3, #0]
 801130e:	e05c      	b.n	80113ca <USB_EPStartXfer+0xcfa>
 8011310:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011314:	2b00      	cmp	r3, #0
 8011316:	d10a      	bne.n	801132e <USB_EPStartXfer+0xc5e>
 8011318:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801131a:	881b      	ldrh	r3, [r3, #0]
 801131c:	b29b      	uxth	r3, r3
 801131e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011322:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011326:	b29a      	uxth	r2, r3
 8011328:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801132a:	801a      	strh	r2, [r3, #0]
 801132c:	e04d      	b.n	80113ca <USB_EPStartXfer+0xcfa>
 801132e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011332:	085b      	lsrs	r3, r3, #1
 8011334:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8011338:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801133c:	f003 0301 	and.w	r3, r3, #1
 8011340:	2b00      	cmp	r3, #0
 8011342:	d004      	beq.n	801134e <USB_EPStartXfer+0xc7e>
 8011344:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011348:	3301      	adds	r3, #1
 801134a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801134e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011350:	881b      	ldrh	r3, [r3, #0]
 8011352:	b29a      	uxth	r2, r3
 8011354:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011358:	b29b      	uxth	r3, r3
 801135a:	029b      	lsls	r3, r3, #10
 801135c:	b29b      	uxth	r3, r3
 801135e:	4313      	orrs	r3, r2
 8011360:	b29a      	uxth	r2, r3
 8011362:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011364:	801a      	strh	r2, [r3, #0]
 8011366:	e030      	b.n	80113ca <USB_EPStartXfer+0xcfa>
 8011368:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801136c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	785b      	ldrb	r3, [r3, #1]
 8011374:	2b01      	cmp	r3, #1
 8011376:	d128      	bne.n	80113ca <USB_EPStartXfer+0xcfa>
 8011378:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801137c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011386:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801138a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011394:	b29b      	uxth	r3, r3
 8011396:	461a      	mov	r2, r3
 8011398:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801139c:	4413      	add	r3, r2
 801139e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80113a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	781b      	ldrb	r3, [r3, #0]
 80113ae:	011a      	lsls	r2, r3, #4
 80113b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80113b4:	4413      	add	r3, r2
 80113b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80113ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80113be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80113c2:	b29a      	uxth	r2, r3
 80113c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80113c8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80113ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	891b      	ldrh	r3, [r3, #8]
 80113d6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80113da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	6959      	ldr	r1, [r3, #20]
 80113e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80113ea:	b29b      	uxth	r3, r3
 80113ec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80113f0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80113f4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80113f8:	6800      	ldr	r0, [r0, #0]
 80113fa:	f000 fe58 	bl	80120ae <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80113fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011402:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011406:	681a      	ldr	r2, [r3, #0]
 8011408:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801140c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	781b      	ldrb	r3, [r3, #0]
 8011414:	009b      	lsls	r3, r3, #2
 8011416:	4413      	add	r3, r2
 8011418:	881b      	ldrh	r3, [r3, #0]
 801141a:	b29b      	uxth	r3, r3
 801141c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011420:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011424:	817b      	strh	r3, [r7, #10]
 8011426:	897b      	ldrh	r3, [r7, #10]
 8011428:	f083 0310 	eor.w	r3, r3, #16
 801142c:	817b      	strh	r3, [r7, #10]
 801142e:	897b      	ldrh	r3, [r7, #10]
 8011430:	f083 0320 	eor.w	r3, r3, #32
 8011434:	817b      	strh	r3, [r7, #10]
 8011436:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801143a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801143e:	681a      	ldr	r2, [r3, #0]
 8011440:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011444:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	781b      	ldrb	r3, [r3, #0]
 801144c:	009b      	lsls	r3, r3, #2
 801144e:	441a      	add	r2, r3
 8011450:	897b      	ldrh	r3, [r7, #10]
 8011452:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011456:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801145a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801145e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011462:	b29b      	uxth	r3, r3
 8011464:	8013      	strh	r3, [r2, #0]
 8011466:	f000 bcde 	b.w	8011e26 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 801146a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801146e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	7b1b      	ldrb	r3, [r3, #12]
 8011476:	2b00      	cmp	r3, #0
 8011478:	f040 80bb 	bne.w	80115f2 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 801147c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011480:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	699a      	ldr	r2, [r3, #24]
 8011488:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801148c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	691b      	ldr	r3, [r3, #16]
 8011494:	429a      	cmp	r2, r3
 8011496:	d917      	bls.n	80114c8 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8011498:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801149c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	691b      	ldr	r3, [r3, #16]
 80114a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80114a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	699a      	ldr	r2, [r3, #24]
 80114b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80114b8:	1ad2      	subs	r2, r2, r3
 80114ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	619a      	str	r2, [r3, #24]
 80114c6:	e00e      	b.n	80114e6 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80114c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	699b      	ldr	r3, [r3, #24]
 80114d4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80114d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	2200      	movs	r2, #0
 80114e4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80114e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80114f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011502:	b29b      	uxth	r3, r3
 8011504:	461a      	mov	r2, r3
 8011506:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801150a:	4413      	add	r3, r2
 801150c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011510:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011514:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	781b      	ldrb	r3, [r3, #0]
 801151c:	011a      	lsls	r2, r3, #4
 801151e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011522:	4413      	add	r3, r2
 8011524:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8011528:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801152c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011530:	881b      	ldrh	r3, [r3, #0]
 8011532:	b29b      	uxth	r3, r3
 8011534:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011538:	b29a      	uxth	r2, r3
 801153a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801153e:	801a      	strh	r2, [r3, #0]
 8011540:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011544:	2b3e      	cmp	r3, #62	; 0x3e
 8011546:	d924      	bls.n	8011592 <USB_EPStartXfer+0xec2>
 8011548:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801154c:	095b      	lsrs	r3, r3, #5
 801154e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011552:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011556:	f003 031f 	and.w	r3, r3, #31
 801155a:	2b00      	cmp	r3, #0
 801155c:	d104      	bne.n	8011568 <USB_EPStartXfer+0xe98>
 801155e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011562:	3b01      	subs	r3, #1
 8011564:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011568:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801156c:	881b      	ldrh	r3, [r3, #0]
 801156e:	b29a      	uxth	r2, r3
 8011570:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011574:	b29b      	uxth	r3, r3
 8011576:	029b      	lsls	r3, r3, #10
 8011578:	b29b      	uxth	r3, r3
 801157a:	4313      	orrs	r3, r2
 801157c:	b29b      	uxth	r3, r3
 801157e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011582:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011586:	b29a      	uxth	r2, r3
 8011588:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801158c:	801a      	strh	r2, [r3, #0]
 801158e:	f000 bc10 	b.w	8011db2 <USB_EPStartXfer+0x16e2>
 8011592:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011596:	2b00      	cmp	r3, #0
 8011598:	d10c      	bne.n	80115b4 <USB_EPStartXfer+0xee4>
 801159a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801159e:	881b      	ldrh	r3, [r3, #0]
 80115a0:	b29b      	uxth	r3, r3
 80115a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80115a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80115aa:	b29a      	uxth	r2, r3
 80115ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80115b0:	801a      	strh	r2, [r3, #0]
 80115b2:	e3fe      	b.n	8011db2 <USB_EPStartXfer+0x16e2>
 80115b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80115b8:	085b      	lsrs	r3, r3, #1
 80115ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80115be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80115c2:	f003 0301 	and.w	r3, r3, #1
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d004      	beq.n	80115d4 <USB_EPStartXfer+0xf04>
 80115ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80115ce:	3301      	adds	r3, #1
 80115d0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80115d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80115d8:	881b      	ldrh	r3, [r3, #0]
 80115da:	b29a      	uxth	r2, r3
 80115dc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80115e0:	b29b      	uxth	r3, r3
 80115e2:	029b      	lsls	r3, r3, #10
 80115e4:	b29b      	uxth	r3, r3
 80115e6:	4313      	orrs	r3, r2
 80115e8:	b29a      	uxth	r2, r3
 80115ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80115ee:	801a      	strh	r2, [r3, #0]
 80115f0:	e3df      	b.n	8011db2 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80115f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	78db      	ldrb	r3, [r3, #3]
 80115fe:	2b02      	cmp	r3, #2
 8011600:	f040 8218 	bne.w	8011a34 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8011604:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011608:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	785b      	ldrb	r3, [r3, #1]
 8011610:	2b00      	cmp	r3, #0
 8011612:	f040 809d 	bne.w	8011750 <USB_EPStartXfer+0x1080>
 8011616:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801161a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8011624:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011628:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011632:	b29b      	uxth	r3, r3
 8011634:	461a      	mov	r2, r3
 8011636:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801163a:	4413      	add	r3, r2
 801163c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8011640:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011644:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	781b      	ldrb	r3, [r3, #0]
 801164c:	011a      	lsls	r2, r3, #4
 801164e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011652:	4413      	add	r3, r2
 8011654:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8011658:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801165c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011660:	881b      	ldrh	r3, [r3, #0]
 8011662:	b29b      	uxth	r3, r3
 8011664:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011668:	b29a      	uxth	r2, r3
 801166a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801166e:	801a      	strh	r2, [r3, #0]
 8011670:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011674:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	691b      	ldr	r3, [r3, #16]
 801167c:	2b3e      	cmp	r3, #62	; 0x3e
 801167e:	d92b      	bls.n	80116d8 <USB_EPStartXfer+0x1008>
 8011680:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011684:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	691b      	ldr	r3, [r3, #16]
 801168c:	095b      	lsrs	r3, r3, #5
 801168e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011692:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011696:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	691b      	ldr	r3, [r3, #16]
 801169e:	f003 031f 	and.w	r3, r3, #31
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d104      	bne.n	80116b0 <USB_EPStartXfer+0xfe0>
 80116a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80116aa:	3b01      	subs	r3, #1
 80116ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80116b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80116b4:	881b      	ldrh	r3, [r3, #0]
 80116b6:	b29a      	uxth	r2, r3
 80116b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80116bc:	b29b      	uxth	r3, r3
 80116be:	029b      	lsls	r3, r3, #10
 80116c0:	b29b      	uxth	r3, r3
 80116c2:	4313      	orrs	r3, r2
 80116c4:	b29b      	uxth	r3, r3
 80116c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80116ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80116ce:	b29a      	uxth	r2, r3
 80116d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80116d4:	801a      	strh	r2, [r3, #0]
 80116d6:	e070      	b.n	80117ba <USB_EPStartXfer+0x10ea>
 80116d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	691b      	ldr	r3, [r3, #16]
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d10c      	bne.n	8011702 <USB_EPStartXfer+0x1032>
 80116e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80116ec:	881b      	ldrh	r3, [r3, #0]
 80116ee:	b29b      	uxth	r3, r3
 80116f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80116f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80116f8:	b29a      	uxth	r2, r3
 80116fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80116fe:	801a      	strh	r2, [r3, #0]
 8011700:	e05b      	b.n	80117ba <USB_EPStartXfer+0x10ea>
 8011702:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011706:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	691b      	ldr	r3, [r3, #16]
 801170e:	085b      	lsrs	r3, r3, #1
 8011710:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011714:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011718:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	691b      	ldr	r3, [r3, #16]
 8011720:	f003 0301 	and.w	r3, r3, #1
 8011724:	2b00      	cmp	r3, #0
 8011726:	d004      	beq.n	8011732 <USB_EPStartXfer+0x1062>
 8011728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801172c:	3301      	adds	r3, #1
 801172e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011732:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011736:	881b      	ldrh	r3, [r3, #0]
 8011738:	b29a      	uxth	r2, r3
 801173a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801173e:	b29b      	uxth	r3, r3
 8011740:	029b      	lsls	r3, r3, #10
 8011742:	b29b      	uxth	r3, r3
 8011744:	4313      	orrs	r3, r2
 8011746:	b29a      	uxth	r2, r3
 8011748:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801174c:	801a      	strh	r2, [r3, #0]
 801174e:	e034      	b.n	80117ba <USB_EPStartXfer+0x10ea>
 8011750:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011754:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	785b      	ldrb	r3, [r3, #1]
 801175c:	2b01      	cmp	r3, #1
 801175e:	d12c      	bne.n	80117ba <USB_EPStartXfer+0x10ea>
 8011760:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011764:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801176e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011772:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801177c:	b29b      	uxth	r3, r3
 801177e:	461a      	mov	r2, r3
 8011780:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011784:	4413      	add	r3, r2
 8011786:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801178a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801178e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	781b      	ldrb	r3, [r3, #0]
 8011796:	011a      	lsls	r2, r3, #4
 8011798:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801179c:	4413      	add	r3, r2
 801179e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80117a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80117a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	691b      	ldr	r3, [r3, #16]
 80117b2:	b29a      	uxth	r2, r3
 80117b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80117b8:	801a      	strh	r2, [r3, #0]
 80117ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80117c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	785b      	ldrb	r3, [r3, #1]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	f040 809d 	bne.w	8011914 <USB_EPStartXfer+0x1244>
 80117da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80117e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80117f6:	b29b      	uxth	r3, r3
 80117f8:	461a      	mov	r2, r3
 80117fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80117fe:	4413      	add	r3, r2
 8011800:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011804:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011808:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	781b      	ldrb	r3, [r3, #0]
 8011810:	011a      	lsls	r2, r3, #4
 8011812:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011816:	4413      	add	r3, r2
 8011818:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 801181c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011820:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011824:	881b      	ldrh	r3, [r3, #0]
 8011826:	b29b      	uxth	r3, r3
 8011828:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801182c:	b29a      	uxth	r2, r3
 801182e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011832:	801a      	strh	r2, [r3, #0]
 8011834:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011838:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	691b      	ldr	r3, [r3, #16]
 8011840:	2b3e      	cmp	r3, #62	; 0x3e
 8011842:	d92b      	bls.n	801189c <USB_EPStartXfer+0x11cc>
 8011844:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011848:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	691b      	ldr	r3, [r3, #16]
 8011850:	095b      	lsrs	r3, r3, #5
 8011852:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011856:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801185a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	691b      	ldr	r3, [r3, #16]
 8011862:	f003 031f 	and.w	r3, r3, #31
 8011866:	2b00      	cmp	r3, #0
 8011868:	d104      	bne.n	8011874 <USB_EPStartXfer+0x11a4>
 801186a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801186e:	3b01      	subs	r3, #1
 8011870:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011874:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011878:	881b      	ldrh	r3, [r3, #0]
 801187a:	b29a      	uxth	r2, r3
 801187c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011880:	b29b      	uxth	r3, r3
 8011882:	029b      	lsls	r3, r3, #10
 8011884:	b29b      	uxth	r3, r3
 8011886:	4313      	orrs	r3, r2
 8011888:	b29b      	uxth	r3, r3
 801188a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801188e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011892:	b29a      	uxth	r2, r3
 8011894:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011898:	801a      	strh	r2, [r3, #0]
 801189a:	e069      	b.n	8011970 <USB_EPStartXfer+0x12a0>
 801189c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118a4:	681b      	ldr	r3, [r3, #0]
 80118a6:	691b      	ldr	r3, [r3, #16]
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d10c      	bne.n	80118c6 <USB_EPStartXfer+0x11f6>
 80118ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80118b0:	881b      	ldrh	r3, [r3, #0]
 80118b2:	b29b      	uxth	r3, r3
 80118b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80118b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80118bc:	b29a      	uxth	r2, r3
 80118be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80118c2:	801a      	strh	r2, [r3, #0]
 80118c4:	e054      	b.n	8011970 <USB_EPStartXfer+0x12a0>
 80118c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	691b      	ldr	r3, [r3, #16]
 80118d2:	085b      	lsrs	r3, r3, #1
 80118d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80118d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	691b      	ldr	r3, [r3, #16]
 80118e4:	f003 0301 	and.w	r3, r3, #1
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d004      	beq.n	80118f6 <USB_EPStartXfer+0x1226>
 80118ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80118f0:	3301      	adds	r3, #1
 80118f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80118f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80118fa:	881b      	ldrh	r3, [r3, #0]
 80118fc:	b29a      	uxth	r2, r3
 80118fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011902:	b29b      	uxth	r3, r3
 8011904:	029b      	lsls	r3, r3, #10
 8011906:	b29b      	uxth	r3, r3
 8011908:	4313      	orrs	r3, r2
 801190a:	b29a      	uxth	r2, r3
 801190c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011910:	801a      	strh	r2, [r3, #0]
 8011912:	e02d      	b.n	8011970 <USB_EPStartXfer+0x12a0>
 8011914:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011918:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	785b      	ldrb	r3, [r3, #1]
 8011920:	2b01      	cmp	r3, #1
 8011922:	d125      	bne.n	8011970 <USB_EPStartXfer+0x12a0>
 8011924:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011928:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011932:	b29b      	uxth	r3, r3
 8011934:	461a      	mov	r2, r3
 8011936:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801193a:	4413      	add	r3, r2
 801193c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8011940:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011944:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	781b      	ldrb	r3, [r3, #0]
 801194c:	011a      	lsls	r2, r3, #4
 801194e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011952:	4413      	add	r3, r2
 8011954:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8011958:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801195c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011960:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	691b      	ldr	r3, [r3, #16]
 8011968:	b29a      	uxth	r2, r3
 801196a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801196e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8011970:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011974:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	69db      	ldr	r3, [r3, #28]
 801197c:	2b00      	cmp	r3, #0
 801197e:	f000 8218 	beq.w	8011db2 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8011982:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011986:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801198a:	681a      	ldr	r2, [r3, #0]
 801198c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011990:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	781b      	ldrb	r3, [r3, #0]
 8011998:	009b      	lsls	r3, r3, #2
 801199a:	4413      	add	r3, r2
 801199c:	881b      	ldrh	r3, [r3, #0]
 801199e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80119a2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80119a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d005      	beq.n	80119ba <USB_EPStartXfer+0x12ea>
 80119ae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80119b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d10d      	bne.n	80119d6 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80119ba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80119be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	f040 81f5 	bne.w	8011db2 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80119c8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80119cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	f040 81ee 	bne.w	8011db2 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80119d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80119de:	681a      	ldr	r2, [r3, #0]
 80119e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	781b      	ldrb	r3, [r3, #0]
 80119ec:	009b      	lsls	r3, r3, #2
 80119ee:	4413      	add	r3, r2
 80119f0:	881b      	ldrh	r3, [r3, #0]
 80119f2:	b29b      	uxth	r3, r3
 80119f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80119f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80119fc:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8011a00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011a08:	681a      	ldr	r2, [r3, #0]
 8011a0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	781b      	ldrb	r3, [r3, #0]
 8011a16:	009b      	lsls	r3, r3, #2
 8011a18:	441a      	add	r2, r3
 8011a1a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8011a1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011a22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011a26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011a2a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011a2e:	b29b      	uxth	r3, r3
 8011a30:	8013      	strh	r3, [r2, #0]
 8011a32:	e1be      	b.n	8011db2 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8011a34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	78db      	ldrb	r3, [r3, #3]
 8011a40:	2b01      	cmp	r3, #1
 8011a42:	f040 81b4 	bne.w	8011dae <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8011a46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	699a      	ldr	r2, [r3, #24]
 8011a52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	691b      	ldr	r3, [r3, #16]
 8011a5e:	429a      	cmp	r2, r3
 8011a60:	d917      	bls.n	8011a92 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8011a62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	691b      	ldr	r3, [r3, #16]
 8011a6e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8011a72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	699a      	ldr	r2, [r3, #24]
 8011a7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a82:	1ad2      	subs	r2, r2, r3
 8011a84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	619a      	str	r2, [r3, #24]
 8011a90:	e00e      	b.n	8011ab0 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8011a92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	699b      	ldr	r3, [r3, #24]
 8011a9e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8011aa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011aa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	2200      	movs	r2, #0
 8011aae:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8011ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ab4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	785b      	ldrb	r3, [r3, #1]
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	f040 8085 	bne.w	8011bcc <USB_EPStartXfer+0x14fc>
 8011ac2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ac6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8011ad0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ad4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011ade:	b29b      	uxth	r3, r3
 8011ae0:	461a      	mov	r2, r3
 8011ae2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011ae6:	4413      	add	r3, r2
 8011ae8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8011aec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011af0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	781b      	ldrb	r3, [r3, #0]
 8011af8:	011a      	lsls	r2, r3, #4
 8011afa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011afe:	4413      	add	r3, r2
 8011b00:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8011b04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8011b08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011b0c:	881b      	ldrh	r3, [r3, #0]
 8011b0e:	b29b      	uxth	r3, r3
 8011b10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011b14:	b29a      	uxth	r2, r3
 8011b16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011b1a:	801a      	strh	r2, [r3, #0]
 8011b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011b20:	2b3e      	cmp	r3, #62	; 0x3e
 8011b22:	d923      	bls.n	8011b6c <USB_EPStartXfer+0x149c>
 8011b24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011b28:	095b      	lsrs	r3, r3, #5
 8011b2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011b32:	f003 031f 	and.w	r3, r3, #31
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d104      	bne.n	8011b44 <USB_EPStartXfer+0x1474>
 8011b3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011b3e:	3b01      	subs	r3, #1
 8011b40:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011b44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011b48:	881b      	ldrh	r3, [r3, #0]
 8011b4a:	b29a      	uxth	r2, r3
 8011b4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011b50:	b29b      	uxth	r3, r3
 8011b52:	029b      	lsls	r3, r3, #10
 8011b54:	b29b      	uxth	r3, r3
 8011b56:	4313      	orrs	r3, r2
 8011b58:	b29b      	uxth	r3, r3
 8011b5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011b5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011b62:	b29a      	uxth	r2, r3
 8011b64:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011b68:	801a      	strh	r2, [r3, #0]
 8011b6a:	e060      	b.n	8011c2e <USB_EPStartXfer+0x155e>
 8011b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d10c      	bne.n	8011b8e <USB_EPStartXfer+0x14be>
 8011b74:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011b78:	881b      	ldrh	r3, [r3, #0]
 8011b7a:	b29b      	uxth	r3, r3
 8011b7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011b80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011b84:	b29a      	uxth	r2, r3
 8011b86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011b8a:	801a      	strh	r2, [r3, #0]
 8011b8c:	e04f      	b.n	8011c2e <USB_EPStartXfer+0x155e>
 8011b8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011b92:	085b      	lsrs	r3, r3, #1
 8011b94:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011b9c:	f003 0301 	and.w	r3, r3, #1
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d004      	beq.n	8011bae <USB_EPStartXfer+0x14de>
 8011ba4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011ba8:	3301      	adds	r3, #1
 8011baa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011bae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011bb2:	881b      	ldrh	r3, [r3, #0]
 8011bb4:	b29a      	uxth	r2, r3
 8011bb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011bba:	b29b      	uxth	r3, r3
 8011bbc:	029b      	lsls	r3, r3, #10
 8011bbe:	b29b      	uxth	r3, r3
 8011bc0:	4313      	orrs	r3, r2
 8011bc2:	b29a      	uxth	r2, r3
 8011bc4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011bc8:	801a      	strh	r2, [r3, #0]
 8011bca:	e030      	b.n	8011c2e <USB_EPStartXfer+0x155e>
 8011bcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011bd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	785b      	ldrb	r3, [r3, #1]
 8011bd8:	2b01      	cmp	r3, #1
 8011bda:	d128      	bne.n	8011c2e <USB_EPStartXfer+0x155e>
 8011bdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011be0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8011bea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011bee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011bf8:	b29b      	uxth	r3, r3
 8011bfa:	461a      	mov	r2, r3
 8011bfc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011c00:	4413      	add	r3, r2
 8011c02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8011c06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	781b      	ldrb	r3, [r3, #0]
 8011c12:	011a      	lsls	r2, r3, #4
 8011c14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011c18:	4413      	add	r3, r2
 8011c1a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8011c1e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8011c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011c26:	b29a      	uxth	r2, r3
 8011c28:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011c2c:	801a      	strh	r2, [r3, #0]
 8011c2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011c3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	785b      	ldrb	r3, [r3, #1]
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	f040 8085 	bne.w	8011d58 <USB_EPStartXfer+0x1688>
 8011c4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8011c5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011c6a:	b29b      	uxth	r3, r3
 8011c6c:	461a      	mov	r2, r3
 8011c6e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011c72:	4413      	add	r3, r2
 8011c74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8011c78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	781b      	ldrb	r3, [r3, #0]
 8011c84:	011a      	lsls	r2, r3, #4
 8011c86:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011c8a:	4413      	add	r3, r2
 8011c8c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8011c90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8011c94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011c98:	881b      	ldrh	r3, [r3, #0]
 8011c9a:	b29b      	uxth	r3, r3
 8011c9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011ca0:	b29a      	uxth	r2, r3
 8011ca2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011ca6:	801a      	strh	r2, [r3, #0]
 8011ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011cac:	2b3e      	cmp	r3, #62	; 0x3e
 8011cae:	d923      	bls.n	8011cf8 <USB_EPStartXfer+0x1628>
 8011cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011cb4:	095b      	lsrs	r3, r3, #5
 8011cb6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011cbe:	f003 031f 	and.w	r3, r3, #31
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d104      	bne.n	8011cd0 <USB_EPStartXfer+0x1600>
 8011cc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011cca:	3b01      	subs	r3, #1
 8011ccc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011cd0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011cd4:	881b      	ldrh	r3, [r3, #0]
 8011cd6:	b29a      	uxth	r2, r3
 8011cd8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011cdc:	b29b      	uxth	r3, r3
 8011cde:	029b      	lsls	r3, r3, #10
 8011ce0:	b29b      	uxth	r3, r3
 8011ce2:	4313      	orrs	r3, r2
 8011ce4:	b29b      	uxth	r3, r3
 8011ce6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011cea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011cee:	b29a      	uxth	r2, r3
 8011cf0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011cf4:	801a      	strh	r2, [r3, #0]
 8011cf6:	e05c      	b.n	8011db2 <USB_EPStartXfer+0x16e2>
 8011cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d10c      	bne.n	8011d1a <USB_EPStartXfer+0x164a>
 8011d00:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011d04:	881b      	ldrh	r3, [r3, #0]
 8011d06:	b29b      	uxth	r3, r3
 8011d08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011d0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011d10:	b29a      	uxth	r2, r3
 8011d12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011d16:	801a      	strh	r2, [r3, #0]
 8011d18:	e04b      	b.n	8011db2 <USB_EPStartXfer+0x16e2>
 8011d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011d1e:	085b      	lsrs	r3, r3, #1
 8011d20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011d28:	f003 0301 	and.w	r3, r3, #1
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d004      	beq.n	8011d3a <USB_EPStartXfer+0x166a>
 8011d30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011d34:	3301      	adds	r3, #1
 8011d36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011d3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011d3e:	881b      	ldrh	r3, [r3, #0]
 8011d40:	b29a      	uxth	r2, r3
 8011d42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011d46:	b29b      	uxth	r3, r3
 8011d48:	029b      	lsls	r3, r3, #10
 8011d4a:	b29b      	uxth	r3, r3
 8011d4c:	4313      	orrs	r3, r2
 8011d4e:	b29a      	uxth	r2, r3
 8011d50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011d54:	801a      	strh	r2, [r3, #0]
 8011d56:	e02c      	b.n	8011db2 <USB_EPStartXfer+0x16e2>
 8011d58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	785b      	ldrb	r3, [r3, #1]
 8011d64:	2b01      	cmp	r3, #1
 8011d66:	d124      	bne.n	8011db2 <USB_EPStartXfer+0x16e2>
 8011d68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011d76:	b29b      	uxth	r3, r3
 8011d78:	461a      	mov	r2, r3
 8011d7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011d7e:	4413      	add	r3, r2
 8011d80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011d84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	781b      	ldrb	r3, [r3, #0]
 8011d90:	011a      	lsls	r2, r3, #4
 8011d92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011d96:	4413      	add	r3, r2
 8011d98:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8011d9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8011da0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011da4:	b29a      	uxth	r2, r3
 8011da6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011daa:	801a      	strh	r2, [r3, #0]
 8011dac:	e001      	b.n	8011db2 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8011dae:	2301      	movs	r3, #1
 8011db0:	e03a      	b.n	8011e28 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011db2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011db6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011dba:	681a      	ldr	r2, [r3, #0]
 8011dbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011dc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	781b      	ldrb	r3, [r3, #0]
 8011dc8:	009b      	lsls	r3, r3, #2
 8011dca:	4413      	add	r3, r2
 8011dcc:	881b      	ldrh	r3, [r3, #0]
 8011dce:	b29b      	uxth	r3, r3
 8011dd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011dd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011dd8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8011ddc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011de0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8011de4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8011de8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011dec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8011df0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8011df4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011df8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011dfc:	681a      	ldr	r2, [r3, #0]
 8011dfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	781b      	ldrb	r3, [r3, #0]
 8011e0a:	009b      	lsls	r3, r3, #2
 8011e0c:	441a      	add	r2, r3
 8011e0e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011e12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011e16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011e1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011e1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e22:	b29b      	uxth	r3, r3
 8011e24:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8011e26:	2300      	movs	r3, #0
}
 8011e28:	4618      	mov	r0, r3
 8011e2a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8011e2e:	46bd      	mov	sp, r7
 8011e30:	bd80      	pop	{r7, pc}

08011e32 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011e32:	b480      	push	{r7}
 8011e34:	b085      	sub	sp, #20
 8011e36:	af00      	add	r7, sp, #0
 8011e38:	6078      	str	r0, [r7, #4]
 8011e3a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8011e3c:	683b      	ldr	r3, [r7, #0]
 8011e3e:	785b      	ldrb	r3, [r3, #1]
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d020      	beq.n	8011e86 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8011e44:	687a      	ldr	r2, [r7, #4]
 8011e46:	683b      	ldr	r3, [r7, #0]
 8011e48:	781b      	ldrb	r3, [r3, #0]
 8011e4a:	009b      	lsls	r3, r3, #2
 8011e4c:	4413      	add	r3, r2
 8011e4e:	881b      	ldrh	r3, [r3, #0]
 8011e50:	b29b      	uxth	r3, r3
 8011e52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011e56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011e5a:	81bb      	strh	r3, [r7, #12]
 8011e5c:	89bb      	ldrh	r3, [r7, #12]
 8011e5e:	f083 0310 	eor.w	r3, r3, #16
 8011e62:	81bb      	strh	r3, [r7, #12]
 8011e64:	687a      	ldr	r2, [r7, #4]
 8011e66:	683b      	ldr	r3, [r7, #0]
 8011e68:	781b      	ldrb	r3, [r3, #0]
 8011e6a:	009b      	lsls	r3, r3, #2
 8011e6c:	441a      	add	r2, r3
 8011e6e:	89bb      	ldrh	r3, [r7, #12]
 8011e70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011e74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011e78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e80:	b29b      	uxth	r3, r3
 8011e82:	8013      	strh	r3, [r2, #0]
 8011e84:	e01f      	b.n	8011ec6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8011e86:	687a      	ldr	r2, [r7, #4]
 8011e88:	683b      	ldr	r3, [r7, #0]
 8011e8a:	781b      	ldrb	r3, [r3, #0]
 8011e8c:	009b      	lsls	r3, r3, #2
 8011e8e:	4413      	add	r3, r2
 8011e90:	881b      	ldrh	r3, [r3, #0]
 8011e92:	b29b      	uxth	r3, r3
 8011e94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011e98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011e9c:	81fb      	strh	r3, [r7, #14]
 8011e9e:	89fb      	ldrh	r3, [r7, #14]
 8011ea0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8011ea4:	81fb      	strh	r3, [r7, #14]
 8011ea6:	687a      	ldr	r2, [r7, #4]
 8011ea8:	683b      	ldr	r3, [r7, #0]
 8011eaa:	781b      	ldrb	r3, [r3, #0]
 8011eac:	009b      	lsls	r3, r3, #2
 8011eae:	441a      	add	r2, r3
 8011eb0:	89fb      	ldrh	r3, [r7, #14]
 8011eb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011eb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011eba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011ebe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ec2:	b29b      	uxth	r3, r3
 8011ec4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8011ec6:	2300      	movs	r3, #0
}
 8011ec8:	4618      	mov	r0, r3
 8011eca:	3714      	adds	r7, #20
 8011ecc:	46bd      	mov	sp, r7
 8011ece:	bc80      	pop	{r7}
 8011ed0:	4770      	bx	lr

08011ed2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011ed2:	b480      	push	{r7}
 8011ed4:	b087      	sub	sp, #28
 8011ed6:	af00      	add	r7, sp, #0
 8011ed8:	6078      	str	r0, [r7, #4]
 8011eda:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8011edc:	683b      	ldr	r3, [r7, #0]
 8011ede:	7b1b      	ldrb	r3, [r3, #12]
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	f040 809d 	bne.w	8012020 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8011ee6:	683b      	ldr	r3, [r7, #0]
 8011ee8:	785b      	ldrb	r3, [r3, #1]
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d04c      	beq.n	8011f88 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011eee:	687a      	ldr	r2, [r7, #4]
 8011ef0:	683b      	ldr	r3, [r7, #0]
 8011ef2:	781b      	ldrb	r3, [r3, #0]
 8011ef4:	009b      	lsls	r3, r3, #2
 8011ef6:	4413      	add	r3, r2
 8011ef8:	881b      	ldrh	r3, [r3, #0]
 8011efa:	823b      	strh	r3, [r7, #16]
 8011efc:	8a3b      	ldrh	r3, [r7, #16]
 8011efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d01b      	beq.n	8011f3e <USB_EPClearStall+0x6c>
 8011f06:	687a      	ldr	r2, [r7, #4]
 8011f08:	683b      	ldr	r3, [r7, #0]
 8011f0a:	781b      	ldrb	r3, [r3, #0]
 8011f0c:	009b      	lsls	r3, r3, #2
 8011f0e:	4413      	add	r3, r2
 8011f10:	881b      	ldrh	r3, [r3, #0]
 8011f12:	b29b      	uxth	r3, r3
 8011f14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011f1c:	81fb      	strh	r3, [r7, #14]
 8011f1e:	687a      	ldr	r2, [r7, #4]
 8011f20:	683b      	ldr	r3, [r7, #0]
 8011f22:	781b      	ldrb	r3, [r3, #0]
 8011f24:	009b      	lsls	r3, r3, #2
 8011f26:	441a      	add	r2, r3
 8011f28:	89fb      	ldrh	r3, [r7, #14]
 8011f2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011f2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011f32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011f36:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011f3a:	b29b      	uxth	r3, r3
 8011f3c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011f3e:	683b      	ldr	r3, [r7, #0]
 8011f40:	78db      	ldrb	r3, [r3, #3]
 8011f42:	2b01      	cmp	r3, #1
 8011f44:	d06c      	beq.n	8012020 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011f46:	687a      	ldr	r2, [r7, #4]
 8011f48:	683b      	ldr	r3, [r7, #0]
 8011f4a:	781b      	ldrb	r3, [r3, #0]
 8011f4c:	009b      	lsls	r3, r3, #2
 8011f4e:	4413      	add	r3, r2
 8011f50:	881b      	ldrh	r3, [r3, #0]
 8011f52:	b29b      	uxth	r3, r3
 8011f54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011f58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011f5c:	81bb      	strh	r3, [r7, #12]
 8011f5e:	89bb      	ldrh	r3, [r7, #12]
 8011f60:	f083 0320 	eor.w	r3, r3, #32
 8011f64:	81bb      	strh	r3, [r7, #12]
 8011f66:	687a      	ldr	r2, [r7, #4]
 8011f68:	683b      	ldr	r3, [r7, #0]
 8011f6a:	781b      	ldrb	r3, [r3, #0]
 8011f6c:	009b      	lsls	r3, r3, #2
 8011f6e:	441a      	add	r2, r3
 8011f70:	89bb      	ldrh	r3, [r7, #12]
 8011f72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011f76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011f7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011f7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011f82:	b29b      	uxth	r3, r3
 8011f84:	8013      	strh	r3, [r2, #0]
 8011f86:	e04b      	b.n	8012020 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011f88:	687a      	ldr	r2, [r7, #4]
 8011f8a:	683b      	ldr	r3, [r7, #0]
 8011f8c:	781b      	ldrb	r3, [r3, #0]
 8011f8e:	009b      	lsls	r3, r3, #2
 8011f90:	4413      	add	r3, r2
 8011f92:	881b      	ldrh	r3, [r3, #0]
 8011f94:	82fb      	strh	r3, [r7, #22]
 8011f96:	8afb      	ldrh	r3, [r7, #22]
 8011f98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d01b      	beq.n	8011fd8 <USB_EPClearStall+0x106>
 8011fa0:	687a      	ldr	r2, [r7, #4]
 8011fa2:	683b      	ldr	r3, [r7, #0]
 8011fa4:	781b      	ldrb	r3, [r3, #0]
 8011fa6:	009b      	lsls	r3, r3, #2
 8011fa8:	4413      	add	r3, r2
 8011faa:	881b      	ldrh	r3, [r3, #0]
 8011fac:	b29b      	uxth	r3, r3
 8011fae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011fb6:	82bb      	strh	r3, [r7, #20]
 8011fb8:	687a      	ldr	r2, [r7, #4]
 8011fba:	683b      	ldr	r3, [r7, #0]
 8011fbc:	781b      	ldrb	r3, [r3, #0]
 8011fbe:	009b      	lsls	r3, r3, #2
 8011fc0:	441a      	add	r2, r3
 8011fc2:	8abb      	ldrh	r3, [r7, #20]
 8011fc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011fc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011fcc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011fd4:	b29b      	uxth	r3, r3
 8011fd6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011fd8:	687a      	ldr	r2, [r7, #4]
 8011fda:	683b      	ldr	r3, [r7, #0]
 8011fdc:	781b      	ldrb	r3, [r3, #0]
 8011fde:	009b      	lsls	r3, r3, #2
 8011fe0:	4413      	add	r3, r2
 8011fe2:	881b      	ldrh	r3, [r3, #0]
 8011fe4:	b29b      	uxth	r3, r3
 8011fe6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011fee:	827b      	strh	r3, [r7, #18]
 8011ff0:	8a7b      	ldrh	r3, [r7, #18]
 8011ff2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8011ff6:	827b      	strh	r3, [r7, #18]
 8011ff8:	8a7b      	ldrh	r3, [r7, #18]
 8011ffa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8011ffe:	827b      	strh	r3, [r7, #18]
 8012000:	687a      	ldr	r2, [r7, #4]
 8012002:	683b      	ldr	r3, [r7, #0]
 8012004:	781b      	ldrb	r3, [r3, #0]
 8012006:	009b      	lsls	r3, r3, #2
 8012008:	441a      	add	r2, r3
 801200a:	8a7b      	ldrh	r3, [r7, #18]
 801200c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012010:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012014:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801201c:	b29b      	uxth	r3, r3
 801201e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8012020:	2300      	movs	r3, #0
}
 8012022:	4618      	mov	r0, r3
 8012024:	371c      	adds	r7, #28
 8012026:	46bd      	mov	sp, r7
 8012028:	bc80      	pop	{r7}
 801202a:	4770      	bx	lr

0801202c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 801202c:	b480      	push	{r7}
 801202e:	b083      	sub	sp, #12
 8012030:	af00      	add	r7, sp, #0
 8012032:	6078      	str	r0, [r7, #4]
 8012034:	460b      	mov	r3, r1
 8012036:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8012038:	78fb      	ldrb	r3, [r7, #3]
 801203a:	2b00      	cmp	r3, #0
 801203c:	d103      	bne.n	8012046 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	2280      	movs	r2, #128	; 0x80
 8012042:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8012046:	2300      	movs	r3, #0
}
 8012048:	4618      	mov	r0, r3
 801204a:	370c      	adds	r7, #12
 801204c:	46bd      	mov	sp, r7
 801204e:	bc80      	pop	{r7}
 8012050:	4770      	bx	lr

08012052 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8012052:	b480      	push	{r7}
 8012054:	b083      	sub	sp, #12
 8012056:	af00      	add	r7, sp, #0
 8012058:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 801205a:	2300      	movs	r3, #0
}
 801205c:	4618      	mov	r0, r3
 801205e:	370c      	adds	r7, #12
 8012060:	46bd      	mov	sp, r7
 8012062:	bc80      	pop	{r7}
 8012064:	4770      	bx	lr

08012066 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8012066:	b480      	push	{r7}
 8012068:	b083      	sub	sp, #12
 801206a:	af00      	add	r7, sp, #0
 801206c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 801206e:	2300      	movs	r3, #0
}
 8012070:	4618      	mov	r0, r3
 8012072:	370c      	adds	r7, #12
 8012074:	46bd      	mov	sp, r7
 8012076:	bc80      	pop	{r7}
 8012078:	4770      	bx	lr

0801207a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 801207a:	b480      	push	{r7}
 801207c:	b085      	sub	sp, #20
 801207e:	af00      	add	r7, sp, #0
 8012080:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8012088:	b29b      	uxth	r3, r3
 801208a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 801208c:	68fb      	ldr	r3, [r7, #12]
}
 801208e:	4618      	mov	r0, r3
 8012090:	3714      	adds	r7, #20
 8012092:	46bd      	mov	sp, r7
 8012094:	bc80      	pop	{r7}
 8012096:	4770      	bx	lr

08012098 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8012098:	b480      	push	{r7}
 801209a:	b083      	sub	sp, #12
 801209c:	af00      	add	r7, sp, #0
 801209e:	6078      	str	r0, [r7, #4]
 80120a0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80120a2:	2300      	movs	r3, #0
}
 80120a4:	4618      	mov	r0, r3
 80120a6:	370c      	adds	r7, #12
 80120a8:	46bd      	mov	sp, r7
 80120aa:	bc80      	pop	{r7}
 80120ac:	4770      	bx	lr

080120ae <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80120ae:	b480      	push	{r7}
 80120b0:	b08b      	sub	sp, #44	; 0x2c
 80120b2:	af00      	add	r7, sp, #0
 80120b4:	60f8      	str	r0, [r7, #12]
 80120b6:	60b9      	str	r1, [r7, #8]
 80120b8:	4611      	mov	r1, r2
 80120ba:	461a      	mov	r2, r3
 80120bc:	460b      	mov	r3, r1
 80120be:	80fb      	strh	r3, [r7, #6]
 80120c0:	4613      	mov	r3, r2
 80120c2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80120c4:	88bb      	ldrh	r3, [r7, #4]
 80120c6:	3301      	adds	r3, #1
 80120c8:	085b      	lsrs	r3, r3, #1
 80120ca:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80120d0:	68bb      	ldr	r3, [r7, #8]
 80120d2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80120d4:	88fb      	ldrh	r3, [r7, #6]
 80120d6:	005a      	lsls	r2, r3, #1
 80120d8:	697b      	ldr	r3, [r7, #20]
 80120da:	4413      	add	r3, r2
 80120dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80120e0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80120e2:	69bb      	ldr	r3, [r7, #24]
 80120e4:	627b      	str	r3, [r7, #36]	; 0x24
 80120e6:	e01e      	b.n	8012126 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80120e8:	69fb      	ldr	r3, [r7, #28]
 80120ea:	781b      	ldrb	r3, [r3, #0]
 80120ec:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80120ee:	69fb      	ldr	r3, [r7, #28]
 80120f0:	3301      	adds	r3, #1
 80120f2:	781b      	ldrb	r3, [r3, #0]
 80120f4:	021b      	lsls	r3, r3, #8
 80120f6:	b21a      	sxth	r2, r3
 80120f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80120fc:	4313      	orrs	r3, r2
 80120fe:	b21b      	sxth	r3, r3
 8012100:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8012102:	6a3b      	ldr	r3, [r7, #32]
 8012104:	8a7a      	ldrh	r2, [r7, #18]
 8012106:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8012108:	6a3b      	ldr	r3, [r7, #32]
 801210a:	3302      	adds	r3, #2
 801210c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 801210e:	6a3b      	ldr	r3, [r7, #32]
 8012110:	3302      	adds	r3, #2
 8012112:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8012114:	69fb      	ldr	r3, [r7, #28]
 8012116:	3301      	adds	r3, #1
 8012118:	61fb      	str	r3, [r7, #28]
    pBuf++;
 801211a:	69fb      	ldr	r3, [r7, #28]
 801211c:	3301      	adds	r3, #1
 801211e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8012120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012122:	3b01      	subs	r3, #1
 8012124:	627b      	str	r3, [r7, #36]	; 0x24
 8012126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012128:	2b00      	cmp	r3, #0
 801212a:	d1dd      	bne.n	80120e8 <USB_WritePMA+0x3a>
  }
}
 801212c:	bf00      	nop
 801212e:	bf00      	nop
 8012130:	372c      	adds	r7, #44	; 0x2c
 8012132:	46bd      	mov	sp, r7
 8012134:	bc80      	pop	{r7}
 8012136:	4770      	bx	lr

08012138 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8012138:	b480      	push	{r7}
 801213a:	b08b      	sub	sp, #44	; 0x2c
 801213c:	af00      	add	r7, sp, #0
 801213e:	60f8      	str	r0, [r7, #12]
 8012140:	60b9      	str	r1, [r7, #8]
 8012142:	4611      	mov	r1, r2
 8012144:	461a      	mov	r2, r3
 8012146:	460b      	mov	r3, r1
 8012148:	80fb      	strh	r3, [r7, #6]
 801214a:	4613      	mov	r3, r2
 801214c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 801214e:	88bb      	ldrh	r3, [r7, #4]
 8012150:	085b      	lsrs	r3, r3, #1
 8012152:	b29b      	uxth	r3, r3
 8012154:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801215a:	68bb      	ldr	r3, [r7, #8]
 801215c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801215e:	88fb      	ldrh	r3, [r7, #6]
 8012160:	005a      	lsls	r2, r3, #1
 8012162:	697b      	ldr	r3, [r7, #20]
 8012164:	4413      	add	r3, r2
 8012166:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801216a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801216c:	69bb      	ldr	r3, [r7, #24]
 801216e:	627b      	str	r3, [r7, #36]	; 0x24
 8012170:	e01b      	b.n	80121aa <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8012172:	6a3b      	ldr	r3, [r7, #32]
 8012174:	881b      	ldrh	r3, [r3, #0]
 8012176:	b29b      	uxth	r3, r3
 8012178:	613b      	str	r3, [r7, #16]
    pdwVal++;
 801217a:	6a3b      	ldr	r3, [r7, #32]
 801217c:	3302      	adds	r3, #2
 801217e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8012180:	693b      	ldr	r3, [r7, #16]
 8012182:	b2da      	uxtb	r2, r3
 8012184:	69fb      	ldr	r3, [r7, #28]
 8012186:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8012188:	69fb      	ldr	r3, [r7, #28]
 801218a:	3301      	adds	r3, #1
 801218c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 801218e:	693b      	ldr	r3, [r7, #16]
 8012190:	0a1b      	lsrs	r3, r3, #8
 8012192:	b2da      	uxtb	r2, r3
 8012194:	69fb      	ldr	r3, [r7, #28]
 8012196:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8012198:	69fb      	ldr	r3, [r7, #28]
 801219a:	3301      	adds	r3, #1
 801219c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 801219e:	6a3b      	ldr	r3, [r7, #32]
 80121a0:	3302      	adds	r3, #2
 80121a2:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80121a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121a6:	3b01      	subs	r3, #1
 80121a8:	627b      	str	r3, [r7, #36]	; 0x24
 80121aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d1e0      	bne.n	8012172 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80121b0:	88bb      	ldrh	r3, [r7, #4]
 80121b2:	f003 0301 	and.w	r3, r3, #1
 80121b6:	b29b      	uxth	r3, r3
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d007      	beq.n	80121cc <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80121bc:	6a3b      	ldr	r3, [r7, #32]
 80121be:	881b      	ldrh	r3, [r3, #0]
 80121c0:	b29b      	uxth	r3, r3
 80121c2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80121c4:	693b      	ldr	r3, [r7, #16]
 80121c6:	b2da      	uxtb	r2, r3
 80121c8:	69fb      	ldr	r3, [r7, #28]
 80121ca:	701a      	strb	r2, [r3, #0]
  }
}
 80121cc:	bf00      	nop
 80121ce:	372c      	adds	r7, #44	; 0x2c
 80121d0:	46bd      	mov	sp, r7
 80121d2:	bc80      	pop	{r7}
 80121d4:	4770      	bx	lr
	...

080121d8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80121d8:	b480      	push	{r7}
 80121da:	b083      	sub	sp, #12
 80121dc:	af00      	add	r7, sp, #0
 80121de:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80121e0:	4a03      	ldr	r2, [pc, #12]	; (80121f0 <LL_SetSystemCoreClock+0x18>)
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	6013      	str	r3, [r2, #0]
}
 80121e6:	bf00      	nop
 80121e8:	370c      	adds	r7, #12
 80121ea:	46bd      	mov	sp, r7
 80121ec:	bc80      	pop	{r7}
 80121ee:	4770      	bx	lr
 80121f0:	20000040 	.word	0x20000040

080121f4 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80121f4:	b580      	push	{r7, lr}
 80121f6:	b082      	sub	sp, #8
 80121f8:	af00      	add	r7, sp, #0
 80121fa:	6078      	str	r0, [r7, #4]
 80121fc:	460b      	mov	r3, r1
 80121fe:	70fb      	strb	r3, [r7, #3]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	7c1b      	ldrb	r3, [r3, #16]
 8012204:	2b00      	cmp	r3, #0
 8012206:	d115      	bne.n	8012234 <USBD_MSC_Init+0x40>
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8012208:	f44f 7300 	mov.w	r3, #512	; 0x200
 801220c:	2202      	movs	r2, #2
 801220e:	2101      	movs	r1, #1
 8012210:	6878      	ldr	r0, [r7, #4]
 8012212:	f002 fd60 	bl	8014cd6 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	2201      	movs	r2, #1
 801221a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801221e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012222:	2202      	movs	r2, #2
 8012224:	2181      	movs	r1, #129	; 0x81
 8012226:	6878      	ldr	r0, [r7, #4]
 8012228:	f002 fd55 	bl	8014cd6 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	2201      	movs	r2, #1
 8012230:	62da      	str	r2, [r3, #44]	; 0x2c
 8012232:	e012      	b.n	801225a <USBD_MSC_Init+0x66>
  }
  else
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8012234:	2340      	movs	r3, #64	; 0x40
 8012236:	2202      	movs	r2, #2
 8012238:	2101      	movs	r1, #1
 801223a:	6878      	ldr	r0, [r7, #4]
 801223c:	f002 fd4b 	bl	8014cd6 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	2201      	movs	r2, #1
 8012244:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8012248:	2340      	movs	r3, #64	; 0x40
 801224a:	2202      	movs	r2, #2
 801224c:	2181      	movs	r1, #129	; 0x81
 801224e:	6878      	ldr	r0, [r7, #4]
 8012250:	f002 fd41 	bl	8014cd6 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	2201      	movs	r2, #1
 8012258:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  pdev->pClassData = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 801225a:	f44f 701b 	mov.w	r0, #620	; 0x26c
 801225e:	f002 fe81 	bl	8014f64 <USBD_static_malloc>
 8012262:	4602      	mov	r2, r0
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012270:	2b00      	cmp	r3, #0
 8012272:	d101      	bne.n	8012278 <USBD_MSC_Init+0x84>
  {
    return USBD_FAIL;
 8012274:	2302      	movs	r3, #2
 8012276:	e003      	b.n	8012280 <USBD_MSC_Init+0x8c>
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8012278:	6878      	ldr	r0, [r7, #4]
 801227a:	f000 f9d9 	bl	8012630 <MSC_BOT_Init>

  return USBD_OK;
 801227e:	2300      	movs	r3, #0
}
 8012280:	4618      	mov	r0, r3
 8012282:	3708      	adds	r7, #8
 8012284:	46bd      	mov	sp, r7
 8012286:	bd80      	pop	{r7, pc}

08012288 <USBD_MSC_DeInit>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev,
                         uint8_t cfgidx)
{
 8012288:	b580      	push	{r7, lr}
 801228a:	b082      	sub	sp, #8
 801228c:	af00      	add	r7, sp, #0
 801228e:	6078      	str	r0, [r7, #4]
 8012290:	460b      	mov	r3, r1
 8012292:	70fb      	strb	r3, [r7, #3]
  /* Close MSC EPs */
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8012294:	2101      	movs	r1, #1
 8012296:	6878      	ldr	r0, [r7, #4]
 8012298:	f002 fd43 	bl	8014d22 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	2200      	movs	r2, #0
 80122a0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 80122a4:	2181      	movs	r1, #129	; 0x81
 80122a6:	6878      	ldr	r0, [r7, #4]
 80122a8:	f002 fd3b 	bl	8014d22 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	2200      	movs	r2, #0
 80122b0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 80122b2:	6878      	ldr	r0, [r7, #4]
 80122b4:	f000 fa06 	bl	80126c4 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d009      	beq.n	80122d6 <USBD_MSC_DeInit+0x4e>
  {
    USBD_free(pdev->pClassData);
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80122c8:	4618      	mov	r0, r3
 80122ca:	f002 fe57 	bl	8014f7c <USBD_static_free>
    pdev->pClassData  = NULL;
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	2200      	movs	r2, #0
 80122d2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 80122d6:	2300      	movs	r3, #0
}
 80122d8:	4618      	mov	r0, r3
 80122da:	3708      	adds	r7, #8
 80122dc:	46bd      	mov	sp, r7
 80122de:	bd80      	pop	{r7, pc}

080122e0 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80122e0:	b580      	push	{r7, lr}
 80122e2:	b086      	sub	sp, #24
 80122e4:	af00      	add	r7, sp, #0
 80122e6:	6078      	str	r0, [r7, #4]
 80122e8:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80122f0:	613b      	str	r3, [r7, #16]
  uint8_t ret = USBD_OK;
 80122f2:	2300      	movs	r3, #0
 80122f4:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 80122f6:	2300      	movs	r3, #0
 80122f8:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80122fa:	683b      	ldr	r3, [r7, #0]
 80122fc:	781b      	ldrb	r3, [r3, #0]
 80122fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012302:	2b00      	cmp	r3, #0
 8012304:	d04d      	beq.n	80123a2 <USBD_MSC_Setup+0xc2>
 8012306:	2b20      	cmp	r3, #32
 8012308:	f040 8113 	bne.w	8012532 <USBD_MSC_Setup+0x252>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 801230c:	683b      	ldr	r3, [r7, #0]
 801230e:	785b      	ldrb	r3, [r3, #1]
 8012310:	2bfe      	cmp	r3, #254	; 0xfe
 8012312:	d002      	beq.n	801231a <USBD_MSC_Setup+0x3a>
 8012314:	2bff      	cmp	r3, #255	; 0xff
 8012316:	d024      	beq.n	8012362 <USBD_MSC_Setup+0x82>
 8012318:	e03b      	b.n	8012392 <USBD_MSC_Setup+0xb2>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 801231a:	683b      	ldr	r3, [r7, #0]
 801231c:	885b      	ldrh	r3, [r3, #2]
 801231e:	2b00      	cmp	r3, #0
 8012320:	d118      	bne.n	8012354 <USBD_MSC_Setup+0x74>
 8012322:	683b      	ldr	r3, [r7, #0]
 8012324:	88db      	ldrh	r3, [r3, #6]
 8012326:	2b01      	cmp	r3, #1
 8012328:	d114      	bne.n	8012354 <USBD_MSC_Setup+0x74>
              ((req->bmRequest & 0x80U) == 0x80U))
 801232a:	683b      	ldr	r3, [r7, #0]
 801232c:	781b      	ldrb	r3, [r3, #0]
 801232e:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8012330:	2b00      	cmp	r3, #0
 8012332:	da0f      	bge.n	8012354 <USBD_MSC_Setup+0x74>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801233a:	699b      	ldr	r3, [r3, #24]
 801233c:	4798      	blx	r3
 801233e:	4603      	mov	r3, r0
 8012340:	461a      	mov	r2, r3
 8012342:	693b      	ldr	r3, [r7, #16]
 8012344:	601a      	str	r2, [r3, #0]
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 8012346:	693b      	ldr	r3, [r7, #16]
 8012348:	2201      	movs	r2, #1
 801234a:	4619      	mov	r1, r3
 801234c:	6878      	ldr	r0, [r7, #4]
 801234e:	f002 f992 	bl	8014676 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012352:	e025      	b.n	80123a0 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 8012354:	6839      	ldr	r1, [r7, #0]
 8012356:	6878      	ldr	r0, [r7, #4]
 8012358:	f002 f923 	bl	80145a2 <USBD_CtlError>
            ret = USBD_FAIL;
 801235c:	2302      	movs	r3, #2
 801235e:	75fb      	strb	r3, [r7, #23]
          break;
 8012360:	e01e      	b.n	80123a0 <USBD_MSC_Setup+0xc0>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8012362:	683b      	ldr	r3, [r7, #0]
 8012364:	885b      	ldrh	r3, [r3, #2]
 8012366:	2b00      	cmp	r3, #0
 8012368:	d10c      	bne.n	8012384 <USBD_MSC_Setup+0xa4>
 801236a:	683b      	ldr	r3, [r7, #0]
 801236c:	88db      	ldrh	r3, [r3, #6]
 801236e:	2b00      	cmp	r3, #0
 8012370:	d108      	bne.n	8012384 <USBD_MSC_Setup+0xa4>
              ((req->bmRequest & 0x80U) != 0x80U))
 8012372:	683b      	ldr	r3, [r7, #0]
 8012374:	781b      	ldrb	r3, [r3, #0]
 8012376:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8012378:	2b00      	cmp	r3, #0
 801237a:	db03      	blt.n	8012384 <USBD_MSC_Setup+0xa4>
          {
            MSC_BOT_Reset(pdev);
 801237c:	6878      	ldr	r0, [r7, #4]
 801237e:	f000 f987 	bl	8012690 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012382:	e00d      	b.n	80123a0 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 8012384:	6839      	ldr	r1, [r7, #0]
 8012386:	6878      	ldr	r0, [r7, #4]
 8012388:	f002 f90b 	bl	80145a2 <USBD_CtlError>
            ret = USBD_FAIL;
 801238c:	2302      	movs	r3, #2
 801238e:	75fb      	strb	r3, [r7, #23]
          break;
 8012390:	e006      	b.n	80123a0 <USBD_MSC_Setup+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8012392:	6839      	ldr	r1, [r7, #0]
 8012394:	6878      	ldr	r0, [r7, #4]
 8012396:	f002 f904 	bl	80145a2 <USBD_CtlError>
          ret = USBD_FAIL;
 801239a:	2302      	movs	r3, #2
 801239c:	75fb      	strb	r3, [r7, #23]
          break;
 801239e:	bf00      	nop
      }
      break;
 80123a0:	e0ce      	b.n	8012540 <USBD_MSC_Setup+0x260>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80123a2:	683b      	ldr	r3, [r7, #0]
 80123a4:	785b      	ldrb	r3, [r3, #1]
 80123a6:	2b0b      	cmp	r3, #11
 80123a8:	f200 80bb 	bhi.w	8012522 <USBD_MSC_Setup+0x242>
 80123ac:	a201      	add	r2, pc, #4	; (adr r2, 80123b4 <USBD_MSC_Setup+0xd4>)
 80123ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123b2:	bf00      	nop
 80123b4:	080123e5 	.word	0x080123e5
 80123b8:	0801245b 	.word	0x0801245b
 80123bc:	08012523 	.word	0x08012523
 80123c0:	08012523 	.word	0x08012523
 80123c4:	08012523 	.word	0x08012523
 80123c8:	08012523 	.word	0x08012523
 80123cc:	08012523 	.word	0x08012523
 80123d0:	08012523 	.word	0x08012523
 80123d4:	08012523 	.word	0x08012523
 80123d8:	08012523 	.word	0x08012523
 80123dc:	0801240d 	.word	0x0801240d
 80123e0:	08012435 	.word	0x08012435
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80123ea:	2b03      	cmp	r3, #3
 80123ec:	d107      	bne.n	80123fe <USBD_MSC_Setup+0x11e>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80123ee:	f107 030e 	add.w	r3, r7, #14
 80123f2:	2202      	movs	r2, #2
 80123f4:	4619      	mov	r1, r3
 80123f6:	6878      	ldr	r0, [r7, #4]
 80123f8:	f002 f93d 	bl	8014676 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80123fc:	e098      	b.n	8012530 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 80123fe:	6839      	ldr	r1, [r7, #0]
 8012400:	6878      	ldr	r0, [r7, #4]
 8012402:	f002 f8ce 	bl	80145a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8012406:	2302      	movs	r3, #2
 8012408:	75fb      	strb	r3, [r7, #23]
          break;
 801240a:	e091      	b.n	8012530 <USBD_MSC_Setup+0x250>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012412:	2b03      	cmp	r3, #3
 8012414:	d107      	bne.n	8012426 <USBD_MSC_Setup+0x146>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 8012416:	693b      	ldr	r3, [r7, #16]
 8012418:	3304      	adds	r3, #4
 801241a:	2201      	movs	r2, #1
 801241c:	4619      	mov	r1, r3
 801241e:	6878      	ldr	r0, [r7, #4]
 8012420:	f002 f929 	bl	8014676 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012424:	e084      	b.n	8012530 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8012426:	6839      	ldr	r1, [r7, #0]
 8012428:	6878      	ldr	r0, [r7, #4]
 801242a:	f002 f8ba 	bl	80145a2 <USBD_CtlError>
            ret = USBD_FAIL;
 801242e:	2302      	movs	r3, #2
 8012430:	75fb      	strb	r3, [r7, #23]
          break;
 8012432:	e07d      	b.n	8012530 <USBD_MSC_Setup+0x250>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801243a:	2b03      	cmp	r3, #3
 801243c:	d106      	bne.n	801244c <USBD_MSC_Setup+0x16c>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 801243e:	683b      	ldr	r3, [r7, #0]
 8012440:	885b      	ldrh	r3, [r3, #2]
 8012442:	b2db      	uxtb	r3, r3
 8012444:	461a      	mov	r2, r3
 8012446:	693b      	ldr	r3, [r7, #16]
 8012448:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801244a:	e071      	b.n	8012530 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 801244c:	6839      	ldr	r1, [r7, #0]
 801244e:	6878      	ldr	r0, [r7, #4]
 8012450:	f002 f8a7 	bl	80145a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8012454:	2302      	movs	r3, #2
 8012456:	75fb      	strb	r3, [r7, #23]
          break;
 8012458:	e06a      	b.n	8012530 <USBD_MSC_Setup+0x250>

        case USB_REQ_CLEAR_FEATURE:

          /* Flush the FIFO and Clear the stall status */
          USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 801245a:	683b      	ldr	r3, [r7, #0]
 801245c:	889b      	ldrh	r3, [r3, #4]
 801245e:	b2db      	uxtb	r3, r3
 8012460:	4619      	mov	r1, r3
 8012462:	6878      	ldr	r0, [r7, #4]
 8012464:	f002 fc7c 	bl	8014d60 <USBD_LL_FlushEP>

          /* Reactivate the EP */
          USBD_LL_CloseEP(pdev, (uint8_t)req->wIndex);
 8012468:	683b      	ldr	r3, [r7, #0]
 801246a:	889b      	ldrh	r3, [r3, #4]
 801246c:	b2db      	uxtb	r3, r3
 801246e:	4619      	mov	r1, r3
 8012470:	6878      	ldr	r0, [r7, #4]
 8012472:	f002 fc56 	bl	8014d22 <USBD_LL_CloseEP>
          if ((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 8012476:	683b      	ldr	r3, [r7, #0]
 8012478:	889b      	ldrh	r3, [r3, #4]
 801247a:	b25b      	sxtb	r3, r3
 801247c:	2b00      	cmp	r3, #0
 801247e:	da23      	bge.n	80124c8 <USBD_MSC_Setup+0x1e8>
          {
            pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8012480:	683b      	ldr	r3, [r7, #0]
 8012482:	889b      	ldrh	r3, [r3, #4]
 8012484:	b2db      	uxtb	r3, r3
 8012486:	f003 020f 	and.w	r2, r3, #15
 801248a:	6879      	ldr	r1, [r7, #4]
 801248c:	4613      	mov	r3, r2
 801248e:	009b      	lsls	r3, r3, #2
 8012490:	4413      	add	r3, r2
 8012492:	009b      	lsls	r3, r3, #2
 8012494:	440b      	add	r3, r1
 8012496:	3318      	adds	r3, #24
 8012498:	2200      	movs	r2, #0
 801249a:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	7c1b      	ldrb	r3, [r3, #16]
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d107      	bne.n	80124b4 <USBD_MSC_Setup+0x1d4>
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 80124a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80124a8:	2202      	movs	r2, #2
 80124aa:	2181      	movs	r1, #129	; 0x81
 80124ac:	6878      	ldr	r0, [r7, #4]
 80124ae:	f002 fc12 	bl	8014cd6 <USBD_LL_OpenEP>
 80124b2:	e005      	b.n	80124c0 <USBD_MSC_Setup+0x1e0>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 80124b4:	2340      	movs	r3, #64	; 0x40
 80124b6:	2202      	movs	r2, #2
 80124b8:	2181      	movs	r1, #129	; 0x81
 80124ba:	6878      	ldr	r0, [r7, #4]
 80124bc:	f002 fc0b 	bl	8014cd6 <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	2201      	movs	r2, #1
 80124c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80124c6:	e024      	b.n	8012512 <USBD_MSC_Setup+0x232>
          }
          else
          {
            pdev->ep_out[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 80124c8:	683b      	ldr	r3, [r7, #0]
 80124ca:	889b      	ldrh	r3, [r3, #4]
 80124cc:	b2db      	uxtb	r3, r3
 80124ce:	f003 020f 	and.w	r2, r3, #15
 80124d2:	6879      	ldr	r1, [r7, #4]
 80124d4:	4613      	mov	r3, r2
 80124d6:	009b      	lsls	r3, r3, #2
 80124d8:	4413      	add	r3, r2
 80124da:	009b      	lsls	r3, r3, #2
 80124dc:	440b      	add	r3, r1
 80124de:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80124e2:	2200      	movs	r2, #0
 80124e4:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	7c1b      	ldrb	r3, [r3, #16]
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d107      	bne.n	80124fe <USBD_MSC_Setup+0x21e>
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 80124ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80124f2:	2202      	movs	r2, #2
 80124f4:	2101      	movs	r1, #1
 80124f6:	6878      	ldr	r0, [r7, #4]
 80124f8:	f002 fbed 	bl	8014cd6 <USBD_LL_OpenEP>
 80124fc:	e005      	b.n	801250a <USBD_MSC_Setup+0x22a>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 80124fe:	2340      	movs	r3, #64	; 0x40
 8012500:	2202      	movs	r2, #2
 8012502:	2101      	movs	r1, #1
 8012504:	6878      	ldr	r0, [r7, #4]
 8012506:	f002 fbe6 	bl	8014cd6 <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	2201      	movs	r2, #1
 801250e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
          }

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8012512:	683b      	ldr	r3, [r7, #0]
 8012514:	889b      	ldrh	r3, [r3, #4]
 8012516:	b2db      	uxtb	r3, r3
 8012518:	4619      	mov	r1, r3
 801251a:	6878      	ldr	r0, [r7, #4]
 801251c:	f000 fa52 	bl	80129c4 <MSC_BOT_CplClrFeature>
          break;
 8012520:	e006      	b.n	8012530 <USBD_MSC_Setup+0x250>

        default:
          USBD_CtlError(pdev, req);
 8012522:	6839      	ldr	r1, [r7, #0]
 8012524:	6878      	ldr	r0, [r7, #4]
 8012526:	f002 f83c 	bl	80145a2 <USBD_CtlError>
          ret = USBD_FAIL;
 801252a:	2302      	movs	r3, #2
 801252c:	75fb      	strb	r3, [r7, #23]
          break;
 801252e:	bf00      	nop
      }
      break;
 8012530:	e006      	b.n	8012540 <USBD_MSC_Setup+0x260>

    default:
      USBD_CtlError(pdev, req);
 8012532:	6839      	ldr	r1, [r7, #0]
 8012534:	6878      	ldr	r0, [r7, #4]
 8012536:	f002 f834 	bl	80145a2 <USBD_CtlError>
      ret = USBD_FAIL;
 801253a:	2302      	movs	r3, #2
 801253c:	75fb      	strb	r3, [r7, #23]
      break;
 801253e:	bf00      	nop
  }

  return ret;
 8012540:	7dfb      	ldrb	r3, [r7, #23]
}
 8012542:	4618      	mov	r0, r3
 8012544:	3718      	adds	r7, #24
 8012546:	46bd      	mov	sp, r7
 8012548:	bd80      	pop	{r7, pc}
 801254a:	bf00      	nop

0801254c <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801254c:	b580      	push	{r7, lr}
 801254e:	b082      	sub	sp, #8
 8012550:	af00      	add	r7, sp, #0
 8012552:	6078      	str	r0, [r7, #4]
 8012554:	460b      	mov	r3, r1
 8012556:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8012558:	78fb      	ldrb	r3, [r7, #3]
 801255a:	4619      	mov	r1, r3
 801255c:	6878      	ldr	r0, [r7, #4]
 801255e:	f000 f8c1 	bl	80126e4 <MSC_BOT_DataIn>

  return USBD_OK;
 8012562:	2300      	movs	r3, #0
}
 8012564:	4618      	mov	r0, r3
 8012566:	3708      	adds	r7, #8
 8012568:	46bd      	mov	sp, r7
 801256a:	bd80      	pop	{r7, pc}

0801256c <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801256c:	b580      	push	{r7, lr}
 801256e:	b082      	sub	sp, #8
 8012570:	af00      	add	r7, sp, #0
 8012572:	6078      	str	r0, [r7, #4]
 8012574:	460b      	mov	r3, r1
 8012576:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8012578:	78fb      	ldrb	r3, [r7, #3]
 801257a:	4619      	mov	r1, r3
 801257c:	6878      	ldr	r0, [r7, #4]
 801257e:	f000 f8e3 	bl	8012748 <MSC_BOT_DataOut>

  return USBD_OK;
 8012582:	2300      	movs	r3, #0
}
 8012584:	4618      	mov	r0, r3
 8012586:	3708      	adds	r7, #8
 8012588:	46bd      	mov	sp, r7
 801258a:	bd80      	pop	{r7, pc}

0801258c <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 801258c:	b480      	push	{r7}
 801258e:	b083      	sub	sp, #12
 8012590:	af00      	add	r7, sp, #0
 8012592:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgHSDesc);
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	2220      	movs	r2, #32
 8012598:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 801259a:	4b03      	ldr	r3, [pc, #12]	; (80125a8 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 801259c:	4618      	mov	r0, r3
 801259e:	370c      	adds	r7, #12
 80125a0:	46bd      	mov	sp, r7
 80125a2:	bc80      	pop	{r7}
 80125a4:	4770      	bx	lr
 80125a6:	bf00      	nop
 80125a8:	20000084 	.word	0x20000084

080125ac <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 80125ac:	b480      	push	{r7}
 80125ae:	b083      	sub	sp, #12
 80125b0:	af00      	add	r7, sp, #0
 80125b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgFSDesc);
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	2220      	movs	r2, #32
 80125b8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 80125ba:	4b03      	ldr	r3, [pc, #12]	; (80125c8 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 80125bc:	4618      	mov	r0, r3
 80125be:	370c      	adds	r7, #12
 80125c0:	46bd      	mov	sp, r7
 80125c2:	bc80      	pop	{r7}
 80125c4:	4770      	bx	lr
 80125c6:	bf00      	nop
 80125c8:	200000a4 	.word	0x200000a4

080125cc <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80125cc:	b480      	push	{r7}
 80125ce:	b083      	sub	sp, #12
 80125d0:	af00      	add	r7, sp, #0
 80125d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_OtherSpeedCfgDesc);
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	2220      	movs	r2, #32
 80125d8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 80125da:	4b03      	ldr	r3, [pc, #12]	; (80125e8 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 80125dc:	4618      	mov	r0, r3
 80125de:	370c      	adds	r7, #12
 80125e0:	46bd      	mov	sp, r7
 80125e2:	bc80      	pop	{r7}
 80125e4:	4770      	bx	lr
 80125e6:	bf00      	nop
 80125e8:	200000c4 	.word	0x200000c4

080125ec <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80125ec:	b480      	push	{r7}
 80125ee:	b083      	sub	sp, #12
 80125f0:	af00      	add	r7, sp, #0
 80125f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_DeviceQualifierDesc);
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	220a      	movs	r2, #10
 80125f8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 80125fa:	4b03      	ldr	r3, [pc, #12]	; (8012608 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 80125fc:	4618      	mov	r0, r3
 80125fe:	370c      	adds	r7, #12
 8012600:	46bd      	mov	sp, r7
 8012602:	bc80      	pop	{r7}
 8012604:	4770      	bx	lr
 8012606:	bf00      	nop
 8012608:	200000e4 	.word	0x200000e4

0801260c <USBD_MSC_RegisterStorage>:
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev,
                                 USBD_StorageTypeDef *fops)
{
 801260c:	b480      	push	{r7}
 801260e:	b083      	sub	sp, #12
 8012610:	af00      	add	r7, sp, #0
 8012612:	6078      	str	r0, [r7, #4]
 8012614:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 8012616:	683b      	ldr	r3, [r7, #0]
 8012618:	2b00      	cmp	r3, #0
 801261a:	d003      	beq.n	8012624 <USBD_MSC_RegisterStorage+0x18>
  {
    pdev->pUserData = fops;
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	683a      	ldr	r2, [r7, #0]
 8012620:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return USBD_OK;
 8012624:	2300      	movs	r3, #0
}
 8012626:	4618      	mov	r0, r3
 8012628:	370c      	adds	r7, #12
 801262a:	46bd      	mov	sp, r7
 801262c:	bc80      	pop	{r7}
 801262e:	4770      	bx	lr

08012630 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef  *pdev)
{
 8012630:	b580      	push	{r7, lr}
 8012632:	b084      	sub	sp, #16
 8012634:	af00      	add	r7, sp, #0
 8012636:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801263e:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 8012640:	68fb      	ldr	r3, [r7, #12]
 8012642:	2200      	movs	r2, #0
 8012644:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	2200      	movs	r2, #0
 801264a:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	2200      	movs	r2, #0
 8012650:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  hmsc->scsi_sense_head = 0U;
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	2200      	movs	r2, #0
 8012658:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	2000      	movs	r0, #0
 8012666:	4798      	blx	r3

  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8012668:	2101      	movs	r1, #1
 801266a:	6878      	ldr	r0, [r7, #4]
 801266c:	f002 fb78 	bl	8014d60 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8012670:	2181      	movs	r1, #129	; 0x81
 8012672:	6878      	ldr	r0, [r7, #4]
 8012674:	f002 fb74 	bl	8014d60 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 801267e:	231f      	movs	r3, #31
 8012680:	2101      	movs	r1, #1
 8012682:	6878      	ldr	r0, [r7, #4]
 8012684:	f002 fc37 	bl	8014ef6 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8012688:	bf00      	nop
 801268a:	3710      	adds	r7, #16
 801268c:	46bd      	mov	sp, r7
 801268e:	bd80      	pop	{r7, pc}

08012690 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef  *pdev)
{
 8012690:	b580      	push	{r7, lr}
 8012692:	b084      	sub	sp, #16
 8012694:	af00      	add	r7, sp, #0
 8012696:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801269e:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	2200      	movs	r2, #0
 80126a4:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 80126a6:	68fb      	ldr	r3, [r7, #12]
 80126a8:	2201      	movs	r2, #1
 80126aa:	725a      	strb	r2, [r3, #9]

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 80126b2:	231f      	movs	r3, #31
 80126b4:	2101      	movs	r1, #1
 80126b6:	6878      	ldr	r0, [r7, #4]
 80126b8:	f002 fc1d 	bl	8014ef6 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 80126bc:	bf00      	nop
 80126be:	3710      	adds	r7, #16
 80126c0:	46bd      	mov	sp, r7
 80126c2:	bd80      	pop	{r7, pc}

080126c4 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 80126c4:	b480      	push	{r7}
 80126c6:	b085      	sub	sp, #20
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80126d2:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	2200      	movs	r2, #0
 80126d8:	721a      	strb	r2, [r3, #8]
}
 80126da:	bf00      	nop
 80126dc:	3714      	adds	r7, #20
 80126de:	46bd      	mov	sp, r7
 80126e0:	bc80      	pop	{r7}
 80126e2:	4770      	bx	lr

080126e4 <MSC_BOT_DataIn>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef  *pdev,
                    uint8_t epnum)
{
 80126e4:	b580      	push	{r7, lr}
 80126e6:	b084      	sub	sp, #16
 80126e8:	af00      	add	r7, sp, #0
 80126ea:	6078      	str	r0, [r7, #4]
 80126ec:	460b      	mov	r3, r1
 80126ee:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80126f6:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	7a1b      	ldrb	r3, [r3, #8]
 80126fc:	2b02      	cmp	r3, #2
 80126fe:	d005      	beq.n	801270c <MSC_BOT_DataIn+0x28>
 8012700:	2b02      	cmp	r3, #2
 8012702:	db1a      	blt.n	801273a <MSC_BOT_DataIn+0x56>
 8012704:	3b03      	subs	r3, #3
 8012706:	2b01      	cmp	r3, #1
 8012708:	d817      	bhi.n	801273a <MSC_BOT_DataIn+0x56>
 801270a:	e011      	b.n	8012730 <MSC_BOT_DataIn+0x4c>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8012718:	461a      	mov	r2, r3
 801271a:	6878      	ldr	r0, [r7, #4]
 801271c:	f000 f97a 	bl	8012a14 <SCSI_ProcessCmd>
 8012720:	4603      	mov	r3, r0
 8012722:	2b00      	cmp	r3, #0
 8012724:	da0b      	bge.n	801273e <MSC_BOT_DataIn+0x5a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8012726:	2101      	movs	r1, #1
 8012728:	6878      	ldr	r0, [r7, #4]
 801272a:	f000 f8f1 	bl	8012910 <MSC_BOT_SendCSW>
      }
      break;
 801272e:	e006      	b.n	801273e <MSC_BOT_DataIn+0x5a>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8012730:	2100      	movs	r1, #0
 8012732:	6878      	ldr	r0, [r7, #4]
 8012734:	f000 f8ec 	bl	8012910 <MSC_BOT_SendCSW>
      break;
 8012738:	e002      	b.n	8012740 <MSC_BOT_DataIn+0x5c>

    default:
      break;
 801273a:	bf00      	nop
 801273c:	e000      	b.n	8012740 <MSC_BOT_DataIn+0x5c>
      break;
 801273e:	bf00      	nop
  }
}
 8012740:	bf00      	nop
 8012742:	3710      	adds	r7, #16
 8012744:	46bd      	mov	sp, r7
 8012746:	bd80      	pop	{r7, pc}

08012748 <MSC_BOT_DataOut>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef  *pdev,
                     uint8_t epnum)
{
 8012748:	b580      	push	{r7, lr}
 801274a:	b084      	sub	sp, #16
 801274c:	af00      	add	r7, sp, #0
 801274e:	6078      	str	r0, [r7, #4]
 8012750:	460b      	mov	r3, r1
 8012752:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801275a:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	7a1b      	ldrb	r3, [r3, #8]
 8012760:	2b00      	cmp	r3, #0
 8012762:	d002      	beq.n	801276a <MSC_BOT_DataOut+0x22>
 8012764:	2b01      	cmp	r3, #1
 8012766:	d004      	beq.n	8012772 <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8012768:	e015      	b.n	8012796 <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 801276a:	6878      	ldr	r0, [r7, #4]
 801276c:	f000 f818 	bl	80127a0 <MSC_BOT_CBW_Decode>
      break;
 8012770:	e011      	b.n	8012796 <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801277e:	461a      	mov	r2, r3
 8012780:	6878      	ldr	r0, [r7, #4]
 8012782:	f000 f947 	bl	8012a14 <SCSI_ProcessCmd>
 8012786:	4603      	mov	r3, r0
 8012788:	2b00      	cmp	r3, #0
 801278a:	da03      	bge.n	8012794 <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801278c:	2101      	movs	r1, #1
 801278e:	6878      	ldr	r0, [r7, #4]
 8012790:	f000 f8be 	bl	8012910 <MSC_BOT_SendCSW>
      break;
 8012794:	bf00      	nop
  }
}
 8012796:	bf00      	nop
 8012798:	3710      	adds	r7, #16
 801279a:	46bd      	mov	sp, r7
 801279c:	bd80      	pop	{r7, pc}
	...

080127a0 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef  *pdev)
{
 80127a0:	b580      	push	{r7, lr}
 80127a2:	b084      	sub	sp, #16
 80127a4:	af00      	add	r7, sp, #0
 80127a6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80127ae:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80127bc:	68fb      	ldr	r3, [r7, #12]
 80127be:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80127c8:	2101      	movs	r1, #1
 80127ca:	6878      	ldr	r0, [r7, #4]
 80127cc:	f002 fbb6 	bl	8014f3c <USBD_LL_GetRxDataSize>
 80127d0:	4603      	mov	r3, r0
 80127d2:	2b1f      	cmp	r3, #31
 80127d4:	d114      	bne.n	8012800 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80127dc:	4a32      	ldr	r2, [pc, #200]	; (80128a8 <MSC_BOT_CBW_Decode+0x108>)
 80127de:	4293      	cmp	r3, r2
 80127e0:	d10e      	bne.n	8012800 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) ||
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	f893 3219 	ldrb.w	r3, [r3, #537]	; 0x219
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80127e8:	2b01      	cmp	r3, #1
 80127ea:	d809      	bhi.n	8012800 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 80127ec:	68fb      	ldr	r3, [r7, #12]
 80127ee:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
      (hmsc->cbw.bLUN > 1U) ||
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d004      	beq.n	8012800 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 80127fc:	2b10      	cmp	r3, #16
 80127fe:	d90e      	bls.n	801281e <MSC_BOT_CBW_Decode+0x7e>
  {

    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8012806:	2320      	movs	r3, #32
 8012808:	2205      	movs	r2, #5
 801280a:	6878      	ldr	r0, [r7, #4]
 801280c:	f000 fc48 	bl	80130a0 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8012810:	68fb      	ldr	r3, [r7, #12]
 8012812:	2202      	movs	r2, #2
 8012814:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8012816:	6878      	ldr	r0, [r7, #4]
 8012818:	f000 f8a6 	bl	8012968 <MSC_BOT_Abort>
 801281c:	e041      	b.n	80128a2 <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801282a:	461a      	mov	r2, r3
 801282c:	6878      	ldr	r0, [r7, #4]
 801282e:	f000 f8f1 	bl	8012a14 <SCSI_ProcessCmd>
 8012832:	4603      	mov	r3, r0
 8012834:	2b00      	cmp	r3, #0
 8012836:	da0c      	bge.n	8012852 <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	7a1b      	ldrb	r3, [r3, #8]
 801283c:	2b05      	cmp	r3, #5
 801283e:	d104      	bne.n	801284a <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8012840:	2101      	movs	r1, #1
 8012842:	6878      	ldr	r0, [r7, #4]
 8012844:	f000 f864 	bl	8012910 <MSC_BOT_SendCSW>
 8012848:	e02b      	b.n	80128a2 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 801284a:	6878      	ldr	r0, [r7, #4]
 801284c:	f000 f88c 	bl	8012968 <MSC_BOT_Abort>
 8012850:	e027      	b.n	80128a2 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /*Burst xfer handled internally*/
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	7a1b      	ldrb	r3, [r3, #8]
 8012856:	2b02      	cmp	r3, #2
 8012858:	d022      	beq.n	80128a0 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 801285e:	2b01      	cmp	r3, #1
 8012860:	d01e      	beq.n	80128a0 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8012866:	2b03      	cmp	r3, #3
 8012868:	d01a      	beq.n	80128a0 <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 801286a:	68fb      	ldr	r3, [r7, #12]
 801286c:	895b      	ldrh	r3, [r3, #10]
 801286e:	2b00      	cmp	r3, #0
 8012870:	d009      	beq.n	8012886 <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	f103 010c 	add.w	r1, r3, #12
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	895b      	ldrh	r3, [r3, #10]
 801287c:	461a      	mov	r2, r3
 801287e:	6878      	ldr	r0, [r7, #4]
 8012880:	f000 f814 	bl	80128ac <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8012884:	e00d      	b.n	80128a2 <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	895b      	ldrh	r3, [r3, #10]
 801288a:	2b00      	cmp	r3, #0
 801288c:	d104      	bne.n	8012898 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801288e:	2100      	movs	r1, #0
 8012890:	6878      	ldr	r0, [r7, #4]
 8012892:	f000 f83d 	bl	8012910 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8012896:	e004      	b.n	80128a2 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8012898:	6878      	ldr	r0, [r7, #4]
 801289a:	f000 f865 	bl	8012968 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 801289e:	e000      	b.n	80128a2 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 80128a0:	bf00      	nop
    }
  }
}
 80128a2:	3710      	adds	r7, #16
 80128a4:	46bd      	mov	sp, r7
 80128a6:	bd80      	pop	{r7, pc}
 80128a8:	43425355 	.word	0x43425355

080128ac <MSC_BOT_SendData>:
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                              uint16_t len)
{
 80128ac:	b580      	push	{r7, lr}
 80128ae:	b086      	sub	sp, #24
 80128b0:	af00      	add	r7, sp, #0
 80128b2:	60f8      	str	r0, [r7, #12]
 80128b4:	60b9      	str	r1, [r7, #8]
 80128b6:	4613      	mov	r3, r2
 80128b8:	80fb      	strh	r3, [r7, #6]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80128ba:	68fb      	ldr	r3, [r7, #12]
 80128bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80128c0:	617b      	str	r3, [r7, #20]

  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 80128c2:	697b      	ldr	r3, [r7, #20]
 80128c4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80128c8:	88fb      	ldrh	r3, [r7, #6]
 80128ca:	429a      	cmp	r2, r3
 80128cc:	d204      	bcs.n	80128d8 <MSC_BOT_SendData+0x2c>
 80128ce:	697b      	ldr	r3, [r7, #20]
 80128d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80128d4:	b29b      	uxth	r3, r3
 80128d6:	e000      	b.n	80128da <MSC_BOT_SendData+0x2e>
 80128d8:	88fb      	ldrh	r3, [r7, #6]
 80128da:	827b      	strh	r3, [r7, #18]

  hmsc->csw.dDataResidue -= len;
 80128dc:	697b      	ldr	r3, [r7, #20]
 80128de:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 80128e2:	88fb      	ldrh	r3, [r7, #6]
 80128e4:	1ad2      	subs	r2, r2, r3
 80128e6:	697b      	ldr	r3, [r7, #20]
 80128e8:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 80128ec:	697b      	ldr	r3, [r7, #20]
 80128ee:	2200      	movs	r2, #0
 80128f0:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 80128f4:	697b      	ldr	r3, [r7, #20]
 80128f6:	2204      	movs	r2, #4
 80128f8:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 80128fa:	8a7b      	ldrh	r3, [r7, #18]
 80128fc:	68ba      	ldr	r2, [r7, #8]
 80128fe:	2181      	movs	r1, #129	; 0x81
 8012900:	68f8      	ldr	r0, [r7, #12]
 8012902:	f002 fad5 	bl	8014eb0 <USBD_LL_Transmit>
}
 8012906:	bf00      	nop
 8012908:	3718      	adds	r7, #24
 801290a:	46bd      	mov	sp, r7
 801290c:	bd80      	pop	{r7, pc}
	...

08012910 <MSC_BOT_SendCSW>:
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef  *pdev,
                      uint8_t CSW_Status)
{
 8012910:	b580      	push	{r7, lr}
 8012912:	b084      	sub	sp, #16
 8012914:	af00      	add	r7, sp, #0
 8012916:	6078      	str	r0, [r7, #4]
 8012918:	460b      	mov	r3, r1
 801291a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012922:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	4a0f      	ldr	r2, [pc, #60]	; (8012964 <MSC_BOT_SendCSW+0x54>)
 8012928:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
  hmsc->csw.bStatus = CSW_Status;
 801292c:	68fb      	ldr	r3, [r7, #12]
 801292e:	78fa      	ldrb	r2, [r7, #3]
 8012930:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	2200      	movs	r2, #0
 8012938:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)(void *)&hmsc->csw,
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	f503 720b 	add.w	r2, r3, #556	; 0x22c
 8012940:	230d      	movs	r3, #13
 8012942:	2181      	movs	r1, #129	; 0x81
 8012944:	6878      	ldr	r0, [r7, #4]
 8012946:	f002 fab3 	bl	8014eb0 <USBD_LL_Transmit>
                   USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 801294a:	68fb      	ldr	r3, [r7, #12]
 801294c:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8012950:	231f      	movs	r3, #31
 8012952:	2101      	movs	r1, #1
 8012954:	6878      	ldr	r0, [r7, #4]
 8012956:	f002 face 	bl	8014ef6 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 801295a:	bf00      	nop
 801295c:	3710      	adds	r7, #16
 801295e:	46bd      	mov	sp, r7
 8012960:	bd80      	pop	{r7, pc}
 8012962:	bf00      	nop
 8012964:	53425355 	.word	0x53425355

08012968 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef  *pdev)
{
 8012968:	b580      	push	{r7, lr}
 801296a:	b084      	sub	sp, #16
 801296c:	af00      	add	r7, sp, #0
 801296e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012976:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 801297e:	2b00      	cmp	r3, #0
 8012980:	d10c      	bne.n	801299c <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
  if ((hmsc->cbw.bmFlags == 0U) &&
 8012988:	2b00      	cmp	r3, #0
 801298a:	d007      	beq.n	801299c <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 801298c:	68fb      	ldr	r3, [r7, #12]
 801298e:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8012990:	2b00      	cmp	r3, #0
 8012992:	d103      	bne.n	801299c <MSC_BOT_Abort+0x34>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8012994:	2101      	movs	r1, #1
 8012996:	6878      	ldr	r0, [r7, #4]
 8012998:	f002 fa01 	bl	8014d9e <USBD_LL_StallEP>
  }

  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 801299c:	2181      	movs	r1, #129	; 0x81
 801299e:	6878      	ldr	r0, [r7, #4]
 80129a0:	f002 f9fd 	bl	8014d9e <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	7a5b      	ldrb	r3, [r3, #9]
 80129a8:	2b02      	cmp	r3, #2
 80129aa:	d107      	bne.n	80129bc <MSC_BOT_Abort+0x54>
  {
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 80129ac:	68fb      	ldr	r3, [r7, #12]
 80129ae:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 80129b2:	231f      	movs	r3, #31
 80129b4:	2101      	movs	r1, #1
 80129b6:	6878      	ldr	r0, [r7, #4]
 80129b8:	f002 fa9d 	bl	8014ef6 <USBD_LL_PrepareReceive>
                           USBD_BOT_CBW_LENGTH);
  }
}
 80129bc:	bf00      	nop
 80129be:	3710      	adds	r7, #16
 80129c0:	46bd      	mov	sp, r7
 80129c2:	bd80      	pop	{r7, pc}

080129c4 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 80129c4:	b580      	push	{r7, lr}
 80129c6:	b084      	sub	sp, #16
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	6078      	str	r0, [r7, #4]
 80129cc:	460b      	mov	r3, r1
 80129ce:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80129d6:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	7a5b      	ldrb	r3, [r3, #9]
 80129dc:	2b02      	cmp	r3, #2
 80129de:	d107      	bne.n	80129f0 <MSC_BOT_CplClrFeature+0x2c>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80129e0:	2181      	movs	r1, #129	; 0x81
 80129e2:	6878      	ldr	r0, [r7, #4]
 80129e4:	f002 f9db 	bl	8014d9e <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	2200      	movs	r2, #0
 80129ec:	725a      	strb	r2, [r3, #9]
 80129ee:	e00d      	b.n	8012a0c <MSC_BOT_CplClrFeature+0x48>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 80129f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	da08      	bge.n	8012a0a <MSC_BOT_CplClrFeature+0x46>
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	7a5b      	ldrb	r3, [r3, #9]
 80129fc:	2b01      	cmp	r3, #1
 80129fe:	d004      	beq.n	8012a0a <MSC_BOT_CplClrFeature+0x46>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8012a00:	2101      	movs	r1, #1
 8012a02:	6878      	ldr	r0, [r7, #4]
 8012a04:	f7ff ff84 	bl	8012910 <MSC_BOT_SendCSW>
 8012a08:	e000      	b.n	8012a0c <MSC_BOT_CplClrFeature+0x48>
  }
  else
  {
    return;
 8012a0a:	bf00      	nop
  }
}
 8012a0c:	3710      	adds	r7, #16
 8012a0e:	46bd      	mov	sp, r7
 8012a10:	bd80      	pop	{r7, pc}
	...

08012a14 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8012a14:	b580      	push	{r7, lr}
 8012a16:	b084      	sub	sp, #16
 8012a18:	af00      	add	r7, sp, #0
 8012a1a:	60f8      	str	r0, [r7, #12]
 8012a1c:	460b      	mov	r3, r1
 8012a1e:	607a      	str	r2, [r7, #4]
 8012a20:	72fb      	strb	r3, [r7, #11]
  switch (cmd[0])
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	781b      	ldrb	r3, [r3, #0]
 8012a26:	2b5a      	cmp	r3, #90	; 0x5a
 8012a28:	f200 810e 	bhi.w	8012c48 <SCSI_ProcessCmd+0x234>
 8012a2c:	a201      	add	r2, pc, #4	; (adr r2, 8012a34 <SCSI_ProcessCmd+0x20>)
 8012a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a32:	bf00      	nop
 8012a34:	08012ba1 	.word	0x08012ba1
 8012a38:	08012c49 	.word	0x08012c49
 8012a3c:	08012c49 	.word	0x08012c49
 8012a40:	08012baf 	.word	0x08012baf
 8012a44:	08012c49 	.word	0x08012c49
 8012a48:	08012c49 	.word	0x08012c49
 8012a4c:	08012c49 	.word	0x08012c49
 8012a50:	08012c49 	.word	0x08012c49
 8012a54:	08012c49 	.word	0x08012c49
 8012a58:	08012c49 	.word	0x08012c49
 8012a5c:	08012c49 	.word	0x08012c49
 8012a60:	08012c49 	.word	0x08012c49
 8012a64:	08012c49 	.word	0x08012c49
 8012a68:	08012c49 	.word	0x08012c49
 8012a6c:	08012c49 	.word	0x08012c49
 8012a70:	08012c49 	.word	0x08012c49
 8012a74:	08012c49 	.word	0x08012c49
 8012a78:	08012c49 	.word	0x08012c49
 8012a7c:	08012bbd 	.word	0x08012bbd
 8012a80:	08012c49 	.word	0x08012c49
 8012a84:	08012c49 	.word	0x08012c49
 8012a88:	08012c49 	.word	0x08012c49
 8012a8c:	08012c49 	.word	0x08012c49
 8012a90:	08012c49 	.word	0x08012c49
 8012a94:	08012c49 	.word	0x08012c49
 8012a98:	08012c49 	.word	0x08012c49
 8012a9c:	08012be7 	.word	0x08012be7
 8012aa0:	08012bcb 	.word	0x08012bcb
 8012aa4:	08012c49 	.word	0x08012c49
 8012aa8:	08012c49 	.word	0x08012c49
 8012aac:	08012bd9 	.word	0x08012bd9
 8012ab0:	08012c49 	.word	0x08012c49
 8012ab4:	08012c49 	.word	0x08012c49
 8012ab8:	08012c49 	.word	0x08012c49
 8012abc:	08012c49 	.word	0x08012c49
 8012ac0:	08012c03 	.word	0x08012c03
 8012ac4:	08012c49 	.word	0x08012c49
 8012ac8:	08012c11 	.word	0x08012c11
 8012acc:	08012c49 	.word	0x08012c49
 8012ad0:	08012c49 	.word	0x08012c49
 8012ad4:	08012c1f 	.word	0x08012c1f
 8012ad8:	08012c49 	.word	0x08012c49
 8012adc:	08012c2d 	.word	0x08012c2d
 8012ae0:	08012c49 	.word	0x08012c49
 8012ae4:	08012c49 	.word	0x08012c49
 8012ae8:	08012c49 	.word	0x08012c49
 8012aec:	08012c49 	.word	0x08012c49
 8012af0:	08012c3b 	.word	0x08012c3b
 8012af4:	08012c49 	.word	0x08012c49
 8012af8:	08012c49 	.word	0x08012c49
 8012afc:	08012c49 	.word	0x08012c49
 8012b00:	08012c49 	.word	0x08012c49
 8012b04:	08012c49 	.word	0x08012c49
 8012b08:	08012c49 	.word	0x08012c49
 8012b0c:	08012c49 	.word	0x08012c49
 8012b10:	08012c49 	.word	0x08012c49
 8012b14:	08012c49 	.word	0x08012c49
 8012b18:	08012c49 	.word	0x08012c49
 8012b1c:	08012c49 	.word	0x08012c49
 8012b20:	08012c49 	.word	0x08012c49
 8012b24:	08012c49 	.word	0x08012c49
 8012b28:	08012c49 	.word	0x08012c49
 8012b2c:	08012c49 	.word	0x08012c49
 8012b30:	08012c49 	.word	0x08012c49
 8012b34:	08012c49 	.word	0x08012c49
 8012b38:	08012c49 	.word	0x08012c49
 8012b3c:	08012c49 	.word	0x08012c49
 8012b40:	08012c49 	.word	0x08012c49
 8012b44:	08012c49 	.word	0x08012c49
 8012b48:	08012c49 	.word	0x08012c49
 8012b4c:	08012c49 	.word	0x08012c49
 8012b50:	08012c49 	.word	0x08012c49
 8012b54:	08012c49 	.word	0x08012c49
 8012b58:	08012c49 	.word	0x08012c49
 8012b5c:	08012c49 	.word	0x08012c49
 8012b60:	08012c49 	.word	0x08012c49
 8012b64:	08012c49 	.word	0x08012c49
 8012b68:	08012c49 	.word	0x08012c49
 8012b6c:	08012c49 	.word	0x08012c49
 8012b70:	08012c49 	.word	0x08012c49
 8012b74:	08012c49 	.word	0x08012c49
 8012b78:	08012c49 	.word	0x08012c49
 8012b7c:	08012c49 	.word	0x08012c49
 8012b80:	08012c49 	.word	0x08012c49
 8012b84:	08012c49 	.word	0x08012c49
 8012b88:	08012c49 	.word	0x08012c49
 8012b8c:	08012c49 	.word	0x08012c49
 8012b90:	08012c49 	.word	0x08012c49
 8012b94:	08012c49 	.word	0x08012c49
 8012b98:	08012c49 	.word	0x08012c49
 8012b9c:	08012bf5 	.word	0x08012bf5
  {
    case SCSI_TEST_UNIT_READY:
      SCSI_TestUnitReady(pdev, lun, cmd);
 8012ba0:	7afb      	ldrb	r3, [r7, #11]
 8012ba2:	687a      	ldr	r2, [r7, #4]
 8012ba4:	4619      	mov	r1, r3
 8012ba6:	68f8      	ldr	r0, [r7, #12]
 8012ba8:	f000 f85c 	bl	8012c64 <SCSI_TestUnitReady>
      break;
 8012bac:	e055      	b.n	8012c5a <SCSI_ProcessCmd+0x246>

    case SCSI_REQUEST_SENSE:
      SCSI_RequestSense(pdev, lun, cmd);
 8012bae:	7afb      	ldrb	r3, [r7, #11]
 8012bb0:	687a      	ldr	r2, [r7, #4]
 8012bb2:	4619      	mov	r1, r3
 8012bb4:	68f8      	ldr	r0, [r7, #12]
 8012bb6:	f000 fa09 	bl	8012fcc <SCSI_RequestSense>
      break;
 8012bba:	e04e      	b.n	8012c5a <SCSI_ProcessCmd+0x246>
    case SCSI_INQUIRY:
      SCSI_Inquiry(pdev, lun, cmd);
 8012bbc:	7afb      	ldrb	r3, [r7, #11]
 8012bbe:	687a      	ldr	r2, [r7, #4]
 8012bc0:	4619      	mov	r1, r3
 8012bc2:	68f8      	ldr	r0, [r7, #12]
 8012bc4:	f000 f888 	bl	8012cd8 <SCSI_Inquiry>
      break;
 8012bc8:	e047      	b.n	8012c5a <SCSI_ProcessCmd+0x246>

    case SCSI_START_STOP_UNIT:
      SCSI_StartStopUnit(pdev, lun, cmd);
 8012bca:	7afb      	ldrb	r3, [r7, #11]
 8012bcc:	687a      	ldr	r2, [r7, #4]
 8012bce:	4619      	mov	r1, r3
 8012bd0:	68f8      	ldr	r0, [r7, #12]
 8012bd2:	f000 fa9e 	bl	8013112 <SCSI_StartStopUnit>
      break;
 8012bd6:	e040      	b.n	8012c5a <SCSI_ProcessCmd+0x246>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      SCSI_StartStopUnit(pdev, lun, cmd);
 8012bd8:	7afb      	ldrb	r3, [r7, #11]
 8012bda:	687a      	ldr	r2, [r7, #4]
 8012bdc:	4619      	mov	r1, r3
 8012bde:	68f8      	ldr	r0, [r7, #12]
 8012be0:	f000 fa97 	bl	8013112 <SCSI_StartStopUnit>
      break;
 8012be4:	e039      	b.n	8012c5a <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE6:
      SCSI_ModeSense6(pdev, lun, cmd);
 8012be6:	7afb      	ldrb	r3, [r7, #11]
 8012be8:	687a      	ldr	r2, [r7, #4]
 8012bea:	4619      	mov	r1, r3
 8012bec:	68f8      	ldr	r0, [r7, #12]
 8012bee:	f000 f99d 	bl	8012f2c <SCSI_ModeSense6>
      break;
 8012bf2:	e032      	b.n	8012c5a <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE10:
      SCSI_ModeSense10(pdev, lun, cmd);
 8012bf4:	7afb      	ldrb	r3, [r7, #11]
 8012bf6:	687a      	ldr	r2, [r7, #4]
 8012bf8:	4619      	mov	r1, r3
 8012bfa:	68f8      	ldr	r0, [r7, #12]
 8012bfc:	f000 f9be 	bl	8012f7c <SCSI_ModeSense10>
      break;
 8012c00:	e02b      	b.n	8012c5a <SCSI_ProcessCmd+0x246>

    case SCSI_READ_FORMAT_CAPACITIES:
      SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8012c02:	7afb      	ldrb	r3, [r7, #11]
 8012c04:	687a      	ldr	r2, [r7, #4]
 8012c06:	4619      	mov	r1, r3
 8012c08:	68f8      	ldr	r0, [r7, #12]
 8012c0a:	f000 f92a 	bl	8012e62 <SCSI_ReadFormatCapacity>
      break;
 8012c0e:	e024      	b.n	8012c5a <SCSI_ProcessCmd+0x246>

    case SCSI_READ_CAPACITY10:
      SCSI_ReadCapacity10(pdev, lun, cmd);
 8012c10:	7afb      	ldrb	r3, [r7, #11]
 8012c12:	687a      	ldr	r2, [r7, #4]
 8012c14:	4619      	mov	r1, r3
 8012c16:	68f8      	ldr	r0, [r7, #12]
 8012c18:	f000 f8bc 	bl	8012d94 <SCSI_ReadCapacity10>
      break;
 8012c1c:	e01d      	b.n	8012c5a <SCSI_ProcessCmd+0x246>

    case SCSI_READ10:
      SCSI_Read10(pdev, lun, cmd);
 8012c1e:	7afb      	ldrb	r3, [r7, #11]
 8012c20:	687a      	ldr	r2, [r7, #4]
 8012c22:	4619      	mov	r1, r3
 8012c24:	68f8      	ldr	r0, [r7, #12]
 8012c26:	f000 fa88 	bl	801313a <SCSI_Read10>
      break;
 8012c2a:	e016      	b.n	8012c5a <SCSI_ProcessCmd+0x246>

    case SCSI_WRITE10:
      SCSI_Write10(pdev, lun, cmd);
 8012c2c:	7afb      	ldrb	r3, [r7, #11]
 8012c2e:	687a      	ldr	r2, [r7, #4]
 8012c30:	4619      	mov	r1, r3
 8012c32:	68f8      	ldr	r0, [r7, #12]
 8012c34:	f000 fb0d 	bl	8013252 <SCSI_Write10>
      break;
 8012c38:	e00f      	b.n	8012c5a <SCSI_ProcessCmd+0x246>

    case SCSI_VERIFY10:
      SCSI_Verify10(pdev, lun, cmd);
 8012c3a:	7afb      	ldrb	r3, [r7, #11]
 8012c3c:	687a      	ldr	r2, [r7, #4]
 8012c3e:	4619      	mov	r1, r3
 8012c40:	68f8      	ldr	r0, [r7, #12]
 8012c42:	f000 fbb6 	bl	80133b2 <SCSI_Verify10>
      break;
 8012c46:	e008      	b.n	8012c5a <SCSI_ProcessCmd+0x246>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8012c48:	7af9      	ldrb	r1, [r7, #11]
 8012c4a:	2320      	movs	r3, #32
 8012c4c:	2205      	movs	r2, #5
 8012c4e:	68f8      	ldr	r0, [r7, #12]
 8012c50:	f000 fa26 	bl	80130a0 <SCSI_SenseCode>
      return -1;
 8012c54:	f04f 33ff 	mov.w	r3, #4294967295
 8012c58:	e000      	b.n	8012c5c <SCSI_ProcessCmd+0x248>
  }

  return 0;
 8012c5a:	2300      	movs	r3, #0
}
 8012c5c:	4618      	mov	r0, r3
 8012c5e:	3710      	adds	r7, #16
 8012c60:	46bd      	mov	sp, r7
 8012c62:	bd80      	pop	{r7, pc}

08012c64 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8012c64:	b580      	push	{r7, lr}
 8012c66:	b086      	sub	sp, #24
 8012c68:	af00      	add	r7, sp, #0
 8012c6a:	60f8      	str	r0, [r7, #12]
 8012c6c:	460b      	mov	r3, r1
 8012c6e:	607a      	str	r2, [r7, #4]
 8012c70:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012c78:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8012c7a:	697b      	ldr	r3, [r7, #20]
 8012c7c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d00a      	beq.n	8012c9a <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012c84:	697b      	ldr	r3, [r7, #20]
 8012c86:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8012c8a:	2320      	movs	r3, #32
 8012c8c:	2205      	movs	r2, #5
 8012c8e:	68f8      	ldr	r0, [r7, #12]
 8012c90:	f000 fa06 	bl	80130a0 <SCSI_SenseCode>

    return -1;
 8012c94:	f04f 33ff 	mov.w	r3, #4294967295
 8012c98:	e019      	b.n	8012cce <SCSI_TestUnitReady+0x6a>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012ca0:	689b      	ldr	r3, [r3, #8]
 8012ca2:	7afa      	ldrb	r2, [r7, #11]
 8012ca4:	4610      	mov	r0, r2
 8012ca6:	4798      	blx	r3
 8012ca8:	4603      	mov	r3, r0
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d00b      	beq.n	8012cc6 <SCSI_TestUnitReady+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012cae:	7af9      	ldrb	r1, [r7, #11]
 8012cb0:	233a      	movs	r3, #58	; 0x3a
 8012cb2:	2202      	movs	r2, #2
 8012cb4:	68f8      	ldr	r0, [r7, #12]
 8012cb6:	f000 f9f3 	bl	80130a0 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8012cba:	697b      	ldr	r3, [r7, #20]
 8012cbc:	2205      	movs	r2, #5
 8012cbe:	721a      	strb	r2, [r3, #8]

    return -1;
 8012cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8012cc4:	e003      	b.n	8012cce <SCSI_TestUnitReady+0x6a>
  }
  hmsc->bot_data_length = 0U;
 8012cc6:	697b      	ldr	r3, [r7, #20]
 8012cc8:	2200      	movs	r2, #0
 8012cca:	815a      	strh	r2, [r3, #10]

  return 0;
 8012ccc:	2300      	movs	r3, #0
}
 8012cce:	4618      	mov	r0, r3
 8012cd0:	3718      	adds	r7, #24
 8012cd2:	46bd      	mov	sp, r7
 8012cd4:	bd80      	pop	{r7, pc}
	...

08012cd8 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8012cd8:	b480      	push	{r7}
 8012cda:	b089      	sub	sp, #36	; 0x24
 8012cdc:	af00      	add	r7, sp, #0
 8012cde:	60f8      	str	r0, [r7, #12]
 8012ce0:	460b      	mov	r3, r1
 8012ce2:	607a      	str	r2, [r7, #4]
 8012ce4:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012ce6:	68fb      	ldr	r3, [r7, #12]
 8012ce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012cec:	61bb      	str	r3, [r7, #24]

  if (params[1] & 0x01U)/*Evpd is set*/
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	3301      	adds	r3, #1
 8012cf2:	781b      	ldrb	r3, [r3, #0]
 8012cf4:	f003 0301 	and.w	r3, r3, #1
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d014      	beq.n	8012d26 <SCSI_Inquiry+0x4e>
  {
    len = LENGTH_INQUIRY_PAGE00;
 8012cfc:	2307      	movs	r3, #7
 8012cfe:	83fb      	strh	r3, [r7, #30]
    hmsc->bot_data_length = len;
 8012d00:	69bb      	ldr	r3, [r7, #24]
 8012d02:	8bfa      	ldrh	r2, [r7, #30]
 8012d04:	815a      	strh	r2, [r3, #10]

    while (len)
 8012d06:	e00a      	b.n	8012d1e <SCSI_Inquiry+0x46>
    {
      len--;
 8012d08:	8bfb      	ldrh	r3, [r7, #30]
 8012d0a:	3b01      	subs	r3, #1
 8012d0c:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = MSC_Page00_Inquiry_Data[len];
 8012d0e:	8bfa      	ldrh	r2, [r7, #30]
 8012d10:	8bfb      	ldrh	r3, [r7, #30]
 8012d12:	491f      	ldr	r1, [pc, #124]	; (8012d90 <SCSI_Inquiry+0xb8>)
 8012d14:	5c89      	ldrb	r1, [r1, r2]
 8012d16:	69ba      	ldr	r2, [r7, #24]
 8012d18:	4413      	add	r3, r2
 8012d1a:	460a      	mov	r2, r1
 8012d1c:	731a      	strb	r2, [r3, #12]
    while (len)
 8012d1e:	8bfb      	ldrh	r3, [r7, #30]
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d1f1      	bne.n	8012d08 <SCSI_Inquiry+0x30>
 8012d24:	e02e      	b.n	8012d84 <SCSI_Inquiry+0xac>
    }
  }
  else
  {
    pPage = (uint8_t *)(void *) & ((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012d2c:	69d9      	ldr	r1, [r3, #28]
 8012d2e:	7afa      	ldrb	r2, [r7, #11]
 8012d30:	4613      	mov	r3, r2
 8012d32:	00db      	lsls	r3, r3, #3
 8012d34:	4413      	add	r3, r2
 8012d36:	009b      	lsls	r3, r3, #2
 8012d38:	440b      	add	r3, r1
 8012d3a:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8012d3c:	697b      	ldr	r3, [r7, #20]
 8012d3e:	3304      	adds	r3, #4
 8012d40:	781b      	ldrb	r3, [r3, #0]
 8012d42:	b29b      	uxth	r3, r3
 8012d44:	3305      	adds	r3, #5
 8012d46:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	3304      	adds	r3, #4
 8012d4c:	781b      	ldrb	r3, [r3, #0]
 8012d4e:	b29b      	uxth	r3, r3
 8012d50:	8bfa      	ldrh	r2, [r7, #30]
 8012d52:	429a      	cmp	r2, r3
 8012d54:	d303      	bcc.n	8012d5e <SCSI_Inquiry+0x86>
    {
      len = params[4];
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	3304      	adds	r3, #4
 8012d5a:	781b      	ldrb	r3, [r3, #0]
 8012d5c:	83fb      	strh	r3, [r7, #30]
    }
    hmsc->bot_data_length = len;
 8012d5e:	69bb      	ldr	r3, [r7, #24]
 8012d60:	8bfa      	ldrh	r2, [r7, #30]
 8012d62:	815a      	strh	r2, [r3, #10]

    while (len)
 8012d64:	e00b      	b.n	8012d7e <SCSI_Inquiry+0xa6>
    {
      len--;
 8012d66:	8bfb      	ldrh	r3, [r7, #30]
 8012d68:	3b01      	subs	r3, #1
 8012d6a:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = pPage[len];
 8012d6c:	8bfb      	ldrh	r3, [r7, #30]
 8012d6e:	697a      	ldr	r2, [r7, #20]
 8012d70:	441a      	add	r2, r3
 8012d72:	8bfb      	ldrh	r3, [r7, #30]
 8012d74:	7811      	ldrb	r1, [r2, #0]
 8012d76:	69ba      	ldr	r2, [r7, #24]
 8012d78:	4413      	add	r3, r2
 8012d7a:	460a      	mov	r2, r1
 8012d7c:	731a      	strb	r2, [r3, #12]
    while (len)
 8012d7e:	8bfb      	ldrh	r3, [r7, #30]
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d1f0      	bne.n	8012d66 <SCSI_Inquiry+0x8e>
    }
  }

  return 0;
 8012d84:	2300      	movs	r3, #0
}
 8012d86:	4618      	mov	r0, r3
 8012d88:	3724      	adds	r7, #36	; 0x24
 8012d8a:	46bd      	mov	sp, r7
 8012d8c:	bc80      	pop	{r7}
 8012d8e:	4770      	bx	lr
 8012d90:	080150d0 	.word	0x080150d0

08012d94 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8012d94:	b580      	push	{r7, lr}
 8012d96:	b086      	sub	sp, #24
 8012d98:	af00      	add	r7, sp, #0
 8012d9a:	60f8      	str	r0, [r7, #12]
 8012d9c:	460b      	mov	r3, r1
 8012d9e:	607a      	str	r2, [r7, #4]
 8012da0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012da8:	617b      	str	r3, [r7, #20]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 8012daa:	68fb      	ldr	r3, [r7, #12]
 8012dac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012db0:	685b      	ldr	r3, [r3, #4]
 8012db2:	697a      	ldr	r2, [r7, #20]
 8012db4:	f502 7118 	add.w	r1, r2, #608	; 0x260
 8012db8:	697a      	ldr	r2, [r7, #20]
 8012dba:	f202 225e 	addw	r2, r2, #606	; 0x25e
 8012dbe:	7af8      	ldrb	r0, [r7, #11]
 8012dc0:	4798      	blx	r3
 8012dc2:	4603      	mov	r3, r0
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d008      	beq.n	8012dda <SCSI_ReadCapacity10+0x46>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012dc8:	7af9      	ldrb	r1, [r7, #11]
 8012dca:	233a      	movs	r3, #58	; 0x3a
 8012dcc:	2202      	movs	r2, #2
 8012dce:	68f8      	ldr	r0, [r7, #12]
 8012dd0:	f000 f966 	bl	80130a0 <SCSI_SenseCode>
    return -1;
 8012dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8012dd8:	e03f      	b.n	8012e5a <SCSI_ReadCapacity10+0xc6>
  }
  else
  {

    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8012dda:	697b      	ldr	r3, [r7, #20]
 8012ddc:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8012de0:	3b01      	subs	r3, #1
 8012de2:	0e1b      	lsrs	r3, r3, #24
 8012de4:	b2da      	uxtb	r2, r3
 8012de6:	697b      	ldr	r3, [r7, #20]
 8012de8:	731a      	strb	r2, [r3, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8012dea:	697b      	ldr	r3, [r7, #20]
 8012dec:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8012df0:	3b01      	subs	r3, #1
 8012df2:	0c1b      	lsrs	r3, r3, #16
 8012df4:	b2da      	uxtb	r2, r3
 8012df6:	697b      	ldr	r3, [r7, #20]
 8012df8:	735a      	strb	r2, [r3, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8012dfa:	697b      	ldr	r3, [r7, #20]
 8012dfc:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8012e00:	3b01      	subs	r3, #1
 8012e02:	0a1b      	lsrs	r3, r3, #8
 8012e04:	b2da      	uxtb	r2, r3
 8012e06:	697b      	ldr	r3, [r7, #20]
 8012e08:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8012e0a:	697b      	ldr	r3, [r7, #20]
 8012e0c:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8012e10:	b2db      	uxtb	r3, r3
 8012e12:	3b01      	subs	r3, #1
 8012e14:	b2da      	uxtb	r2, r3
 8012e16:	697b      	ldr	r3, [r7, #20]
 8012e18:	73da      	strb	r2, [r3, #15]

    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8012e1a:	697b      	ldr	r3, [r7, #20]
 8012e1c:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8012e20:	161b      	asrs	r3, r3, #24
 8012e22:	b2da      	uxtb	r2, r3
 8012e24:	697b      	ldr	r3, [r7, #20]
 8012e26:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8012e28:	697b      	ldr	r3, [r7, #20]
 8012e2a:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8012e2e:	141b      	asrs	r3, r3, #16
 8012e30:	b2da      	uxtb	r2, r3
 8012e32:	697b      	ldr	r3, [r7, #20]
 8012e34:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8012e36:	697b      	ldr	r3, [r7, #20]
 8012e38:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8012e3c:	0a1b      	lsrs	r3, r3, #8
 8012e3e:	b29b      	uxth	r3, r3
 8012e40:	b2da      	uxtb	r2, r3
 8012e42:	697b      	ldr	r3, [r7, #20]
 8012e44:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8012e46:	697b      	ldr	r3, [r7, #20]
 8012e48:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8012e4c:	b2da      	uxtb	r2, r3
 8012e4e:	697b      	ldr	r3, [r7, #20]
 8012e50:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data_length = 8U;
 8012e52:	697b      	ldr	r3, [r7, #20]
 8012e54:	2208      	movs	r2, #8
 8012e56:	815a      	strh	r2, [r3, #10]
    return 0;
 8012e58:	2300      	movs	r3, #0
  }
}
 8012e5a:	4618      	mov	r0, r3
 8012e5c:	3718      	adds	r7, #24
 8012e5e:	46bd      	mov	sp, r7
 8012e60:	bd80      	pop	{r7, pc}

08012e62 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8012e62:	b580      	push	{r7, lr}
 8012e64:	b088      	sub	sp, #32
 8012e66:	af00      	add	r7, sp, #0
 8012e68:	60f8      	str	r0, [r7, #12]
 8012e6a:	460b      	mov	r3, r1
 8012e6c:	607a      	str	r2, [r7, #4]
 8012e6e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012e76:	61bb      	str	r3, [r7, #24]

  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;

  for (i = 0U; i < 12U ; i++)
 8012e78:	2300      	movs	r3, #0
 8012e7a:	83fb      	strh	r3, [r7, #30]
 8012e7c:	e007      	b.n	8012e8e <SCSI_ReadFormatCapacity+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 8012e7e:	8bfb      	ldrh	r3, [r7, #30]
 8012e80:	69ba      	ldr	r2, [r7, #24]
 8012e82:	4413      	add	r3, r2
 8012e84:	2200      	movs	r2, #0
 8012e86:	731a      	strb	r2, [r3, #12]
  for (i = 0U; i < 12U ; i++)
 8012e88:	8bfb      	ldrh	r3, [r7, #30]
 8012e8a:	3301      	adds	r3, #1
 8012e8c:	83fb      	strh	r3, [r7, #30]
 8012e8e:	8bfb      	ldrh	r3, [r7, #30]
 8012e90:	2b0b      	cmp	r3, #11
 8012e92:	d9f4      	bls.n	8012e7e <SCSI_ReadFormatCapacity+0x1c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0U)
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012e9a:	685b      	ldr	r3, [r3, #4]
 8012e9c:	f107 0216 	add.w	r2, r7, #22
 8012ea0:	f107 0110 	add.w	r1, r7, #16
 8012ea4:	7af8      	ldrb	r0, [r7, #11]
 8012ea6:	4798      	blx	r3
 8012ea8:	4603      	mov	r3, r0
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d008      	beq.n	8012ec0 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012eae:	7af9      	ldrb	r1, [r7, #11]
 8012eb0:	233a      	movs	r3, #58	; 0x3a
 8012eb2:	2202      	movs	r2, #2
 8012eb4:	68f8      	ldr	r0, [r7, #12]
 8012eb6:	f000 f8f3 	bl	80130a0 <SCSI_SenseCode>
    return -1;
 8012eba:	f04f 33ff 	mov.w	r3, #4294967295
 8012ebe:	e030      	b.n	8012f22 <SCSI_ReadFormatCapacity+0xc0>
  }
  else
  {
    hmsc->bot_data[3] = 0x08U;
 8012ec0:	69bb      	ldr	r3, [r7, #24]
 8012ec2:	2208      	movs	r2, #8
 8012ec4:	73da      	strb	r2, [r3, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8012ec6:	693b      	ldr	r3, [r7, #16]
 8012ec8:	3b01      	subs	r3, #1
 8012eca:	0e1b      	lsrs	r3, r3, #24
 8012ecc:	b2da      	uxtb	r2, r3
 8012ece:	69bb      	ldr	r3, [r7, #24]
 8012ed0:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8012ed2:	693b      	ldr	r3, [r7, #16]
 8012ed4:	3b01      	subs	r3, #1
 8012ed6:	0c1b      	lsrs	r3, r3, #16
 8012ed8:	b2da      	uxtb	r2, r3
 8012eda:	69bb      	ldr	r3, [r7, #24]
 8012edc:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8012ede:	693b      	ldr	r3, [r7, #16]
 8012ee0:	3b01      	subs	r3, #1
 8012ee2:	0a1b      	lsrs	r3, r3, #8
 8012ee4:	b2da      	uxtb	r2, r3
 8012ee6:	69bb      	ldr	r3, [r7, #24]
 8012ee8:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8012eea:	693b      	ldr	r3, [r7, #16]
 8012eec:	b2db      	uxtb	r3, r3
 8012eee:	3b01      	subs	r3, #1
 8012ef0:	b2da      	uxtb	r2, r3
 8012ef2:	69bb      	ldr	r3, [r7, #24]
 8012ef4:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data[8] = 0x02U;
 8012ef6:	69bb      	ldr	r3, [r7, #24]
 8012ef8:	2202      	movs	r2, #2
 8012efa:	751a      	strb	r2, [r3, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8012efc:	8afb      	ldrh	r3, [r7, #22]
 8012efe:	141b      	asrs	r3, r3, #16
 8012f00:	b2da      	uxtb	r2, r3
 8012f02:	69bb      	ldr	r3, [r7, #24]
 8012f04:	755a      	strb	r2, [r3, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8012f06:	8afb      	ldrh	r3, [r7, #22]
 8012f08:	0a1b      	lsrs	r3, r3, #8
 8012f0a:	b29b      	uxth	r3, r3
 8012f0c:	b2da      	uxtb	r2, r3
 8012f0e:	69bb      	ldr	r3, [r7, #24]
 8012f10:	759a      	strb	r2, [r3, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 8012f12:	8afb      	ldrh	r3, [r7, #22]
 8012f14:	b2da      	uxtb	r2, r3
 8012f16:	69bb      	ldr	r3, [r7, #24]
 8012f18:	75da      	strb	r2, [r3, #23]

    hmsc->bot_data_length = 12U;
 8012f1a:	69bb      	ldr	r3, [r7, #24]
 8012f1c:	220c      	movs	r2, #12
 8012f1e:	815a      	strh	r2, [r3, #10]
    return 0;
 8012f20:	2300      	movs	r3, #0
  }
}
 8012f22:	4618      	mov	r0, r3
 8012f24:	3720      	adds	r7, #32
 8012f26:	46bd      	mov	sp, r7
 8012f28:	bd80      	pop	{r7, pc}
	...

08012f2c <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8012f2c:	b480      	push	{r7}
 8012f2e:	b087      	sub	sp, #28
 8012f30:	af00      	add	r7, sp, #0
 8012f32:	60f8      	str	r0, [r7, #12]
 8012f34:	460b      	mov	r3, r1
 8012f36:	607a      	str	r2, [r7, #4]
 8012f38:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012f40:	613b      	str	r3, [r7, #16]
  uint16_t len = 8U;
 8012f42:	2308      	movs	r3, #8
 8012f44:	82fb      	strh	r3, [r7, #22]
  hmsc->bot_data_length = len;
 8012f46:	693b      	ldr	r3, [r7, #16]
 8012f48:	8afa      	ldrh	r2, [r7, #22]
 8012f4a:	815a      	strh	r2, [r3, #10]

  while (len)
 8012f4c:	e00a      	b.n	8012f64 <SCSI_ModeSense6+0x38>
  {
    len--;
 8012f4e:	8afb      	ldrh	r3, [r7, #22]
 8012f50:	3b01      	subs	r3, #1
 8012f52:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 8012f54:	8afa      	ldrh	r2, [r7, #22]
 8012f56:	8afb      	ldrh	r3, [r7, #22]
 8012f58:	4907      	ldr	r1, [pc, #28]	; (8012f78 <SCSI_ModeSense6+0x4c>)
 8012f5a:	5c89      	ldrb	r1, [r1, r2]
 8012f5c:	693a      	ldr	r2, [r7, #16]
 8012f5e:	4413      	add	r3, r2
 8012f60:	460a      	mov	r2, r1
 8012f62:	731a      	strb	r2, [r3, #12]
  while (len)
 8012f64:	8afb      	ldrh	r3, [r7, #22]
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d1f1      	bne.n	8012f4e <SCSI_ModeSense6+0x22>
  }
  return 0;
 8012f6a:	2300      	movs	r3, #0
}
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	371c      	adds	r7, #28
 8012f70:	46bd      	mov	sp, r7
 8012f72:	bc80      	pop	{r7}
 8012f74:	4770      	bx	lr
 8012f76:	bf00      	nop
 8012f78:	080150d8 	.word	0x080150d8

08012f7c <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8012f7c:	b480      	push	{r7}
 8012f7e:	b087      	sub	sp, #28
 8012f80:	af00      	add	r7, sp, #0
 8012f82:	60f8      	str	r0, [r7, #12]
 8012f84:	460b      	mov	r3, r1
 8012f86:	607a      	str	r2, [r7, #4]
 8012f88:	72fb      	strb	r3, [r7, #11]
  uint16_t len = 8U;
 8012f8a:	2308      	movs	r3, #8
 8012f8c:	82fb      	strh	r3, [r7, #22]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012f94:	613b      	str	r3, [r7, #16]

  hmsc->bot_data_length = len;
 8012f96:	693b      	ldr	r3, [r7, #16]
 8012f98:	8afa      	ldrh	r2, [r7, #22]
 8012f9a:	815a      	strh	r2, [r3, #10]

  while (len)
 8012f9c:	e00a      	b.n	8012fb4 <SCSI_ModeSense10+0x38>
  {
    len--;
 8012f9e:	8afb      	ldrh	r3, [r7, #22]
 8012fa0:	3b01      	subs	r3, #1
 8012fa2:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 8012fa4:	8afa      	ldrh	r2, [r7, #22]
 8012fa6:	8afb      	ldrh	r3, [r7, #22]
 8012fa8:	4907      	ldr	r1, [pc, #28]	; (8012fc8 <SCSI_ModeSense10+0x4c>)
 8012faa:	5c89      	ldrb	r1, [r1, r2]
 8012fac:	693a      	ldr	r2, [r7, #16]
 8012fae:	4413      	add	r3, r2
 8012fb0:	460a      	mov	r2, r1
 8012fb2:	731a      	strb	r2, [r3, #12]
  while (len)
 8012fb4:	8afb      	ldrh	r3, [r7, #22]
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d1f1      	bne.n	8012f9e <SCSI_ModeSense10+0x22>
  }

  return 0;
 8012fba:	2300      	movs	r3, #0
}
 8012fbc:	4618      	mov	r0, r3
 8012fbe:	371c      	adds	r7, #28
 8012fc0:	46bd      	mov	sp, r7
 8012fc2:	bc80      	pop	{r7}
 8012fc4:	4770      	bx	lr
 8012fc6:	bf00      	nop
 8012fc8:	080150e0 	.word	0x080150e0

08012fcc <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8012fcc:	b480      	push	{r7}
 8012fce:	b087      	sub	sp, #28
 8012fd0:	af00      	add	r7, sp, #0
 8012fd2:	60f8      	str	r0, [r7, #12]
 8012fd4:	460b      	mov	r3, r1
 8012fd6:	607a      	str	r2, [r7, #4]
 8012fd8:	72fb      	strb	r3, [r7, #11]
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012fda:	68fb      	ldr	r3, [r7, #12]
 8012fdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012fe0:	613b      	str	r3, [r7, #16]

  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	75fb      	strb	r3, [r7, #23]
 8012fe6:	e007      	b.n	8012ff8 <SCSI_RequestSense+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 8012fe8:	7dfb      	ldrb	r3, [r7, #23]
 8012fea:	693a      	ldr	r2, [r7, #16]
 8012fec:	4413      	add	r3, r2
 8012fee:	2200      	movs	r2, #0
 8012ff0:	731a      	strb	r2, [r3, #12]
  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 8012ff2:	7dfb      	ldrb	r3, [r7, #23]
 8012ff4:	3301      	adds	r3, #1
 8012ff6:	75fb      	strb	r3, [r7, #23]
 8012ff8:	7dfb      	ldrb	r3, [r7, #23]
 8012ffa:	2b11      	cmp	r3, #17
 8012ffc:	d9f4      	bls.n	8012fe8 <SCSI_RequestSense+0x1c>
  }

  hmsc->bot_data[0] = 0x70U;
 8012ffe:	693b      	ldr	r3, [r7, #16]
 8013000:	2270      	movs	r2, #112	; 0x70
 8013002:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8013004:	693b      	ldr	r3, [r7, #16]
 8013006:	220c      	movs	r2, #12
 8013008:	74da      	strb	r2, [r3, #19]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 801300a:	693b      	ldr	r3, [r7, #16]
 801300c:	f893 225c 	ldrb.w	r2, [r3, #604]	; 0x25c
 8013010:	693b      	ldr	r3, [r7, #16]
 8013012:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8013016:	429a      	cmp	r2, r3
 8013018:	d02e      	beq.n	8013078 <SCSI_RequestSense+0xac>
  {

    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 801301a:	693b      	ldr	r3, [r7, #16]
 801301c:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8013020:	693a      	ldr	r2, [r7, #16]
 8013022:	3347      	adds	r3, #71	; 0x47
 8013024:	00db      	lsls	r3, r3, #3
 8013026:	4413      	add	r3, r2
 8013028:	791a      	ldrb	r2, [r3, #4]
 801302a:	693b      	ldr	r3, [r7, #16]
 801302c:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 801302e:	693b      	ldr	r3, [r7, #16]
 8013030:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8013034:	693a      	ldr	r2, [r7, #16]
 8013036:	3347      	adds	r3, #71	; 0x47
 8013038:	00db      	lsls	r3, r3, #3
 801303a:	4413      	add	r3, r2
 801303c:	7a5a      	ldrb	r2, [r3, #9]
 801303e:	693b      	ldr	r3, [r7, #16]
 8013040:	761a      	strb	r2, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8013042:	693b      	ldr	r3, [r7, #16]
 8013044:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8013048:	693a      	ldr	r2, [r7, #16]
 801304a:	3347      	adds	r3, #71	; 0x47
 801304c:	00db      	lsls	r3, r3, #3
 801304e:	4413      	add	r3, r2
 8013050:	7a1a      	ldrb	r2, [r3, #8]
 8013052:	693b      	ldr	r3, [r7, #16]
 8013054:	765a      	strb	r2, [r3, #25]
    hmsc->scsi_sense_head++;
 8013056:	693b      	ldr	r3, [r7, #16]
 8013058:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 801305c:	3301      	adds	r3, #1
 801305e:	b2da      	uxtb	r2, r3
 8013060:	693b      	ldr	r3, [r7, #16]
 8013062:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8013066:	693b      	ldr	r3, [r7, #16]
 8013068:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 801306c:	2b04      	cmp	r3, #4
 801306e:	d103      	bne.n	8013078 <SCSI_RequestSense+0xac>
    {
      hmsc->scsi_sense_head = 0U;
 8013070:	693b      	ldr	r3, [r7, #16]
 8013072:	2200      	movs	r2, #0
 8013074:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8013078:	693b      	ldr	r3, [r7, #16]
 801307a:	2212      	movs	r2, #18
 801307c:	815a      	strh	r2, [r3, #10]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	3304      	adds	r3, #4
 8013082:	781b      	ldrb	r3, [r3, #0]
 8013084:	2b12      	cmp	r3, #18
 8013086:	d805      	bhi.n	8013094 <SCSI_RequestSense+0xc8>
  {
    hmsc->bot_data_length = params[4];
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	3304      	adds	r3, #4
 801308c:	781b      	ldrb	r3, [r3, #0]
 801308e:	b29a      	uxth	r2, r3
 8013090:	693b      	ldr	r3, [r7, #16]
 8013092:	815a      	strh	r2, [r3, #10]
  }
  return 0;
 8013094:	2300      	movs	r3, #0
}
 8013096:	4618      	mov	r0, r3
 8013098:	371c      	adds	r7, #28
 801309a:	46bd      	mov	sp, r7
 801309c:	bc80      	pop	{r7}
 801309e:	4770      	bx	lr

080130a0 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80130a0:	b480      	push	{r7}
 80130a2:	b085      	sub	sp, #20
 80130a4:	af00      	add	r7, sp, #0
 80130a6:	6078      	str	r0, [r7, #4]
 80130a8:	4608      	mov	r0, r1
 80130aa:	4611      	mov	r1, r2
 80130ac:	461a      	mov	r2, r3
 80130ae:	4603      	mov	r3, r0
 80130b0:	70fb      	strb	r3, [r7, #3]
 80130b2:	460b      	mov	r3, r1
 80130b4:	70bb      	strb	r3, [r7, #2]
 80130b6:	4613      	mov	r3, r2
 80130b8:	707b      	strb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80130c0:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 80130c8:	68fa      	ldr	r2, [r7, #12]
 80130ca:	3347      	adds	r3, #71	; 0x47
 80130cc:	00db      	lsls	r3, r3, #3
 80130ce:	4413      	add	r3, r2
 80130d0:	78ba      	ldrb	r2, [r7, #2]
 80130d2:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 80130d4:	68fb      	ldr	r3, [r7, #12]
 80130d6:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 80130da:	68fa      	ldr	r2, [r7, #12]
 80130dc:	3347      	adds	r3, #71	; 0x47
 80130de:	00db      	lsls	r3, r3, #3
 80130e0:	4413      	add	r3, r2
 80130e2:	2200      	movs	r2, #0
 80130e4:	721a      	strb	r2, [r3, #8]
  hmsc->scsi_sense_tail++;
 80130e6:	68fb      	ldr	r3, [r7, #12]
 80130e8:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 80130ec:	3301      	adds	r3, #1
 80130ee:	b2da      	uxtb	r2, r3
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 80130fc:	2b04      	cmp	r3, #4
 80130fe:	d103      	bne.n	8013108 <SCSI_SenseCode+0x68>
  {
    hmsc->scsi_sense_tail = 0U;
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	2200      	movs	r2, #0
 8013104:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  }
}
 8013108:	bf00      	nop
 801310a:	3714      	adds	r7, #20
 801310c:	46bd      	mov	sp, r7
 801310e:	bc80      	pop	{r7}
 8013110:	4770      	bx	lr

08013112 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8013112:	b480      	push	{r7}
 8013114:	b087      	sub	sp, #28
 8013116:	af00      	add	r7, sp, #0
 8013118:	60f8      	str	r0, [r7, #12]
 801311a:	460b      	mov	r3, r1
 801311c:	607a      	str	r2, [r7, #4]
 801311e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013126:	617b      	str	r3, [r7, #20]
  hmsc->bot_data_length = 0U;
 8013128:	697b      	ldr	r3, [r7, #20]
 801312a:	2200      	movs	r2, #0
 801312c:	815a      	strh	r2, [r3, #10]
  return 0;
 801312e:	2300      	movs	r3, #0
}
 8013130:	4618      	mov	r0, r3
 8013132:	371c      	adds	r7, #28
 8013134:	46bd      	mov	sp, r7
 8013136:	bc80      	pop	{r7}
 8013138:	4770      	bx	lr

0801313a <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801313a:	b580      	push	{r7, lr}
 801313c:	b086      	sub	sp, #24
 801313e:	af00      	add	r7, sp, #0
 8013140:	60f8      	str	r0, [r7, #12]
 8013142:	460b      	mov	r3, r1
 8013144:	607a      	str	r2, [r7, #4]
 8013146:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801314e:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8013150:	697b      	ldr	r3, [r7, #20]
 8013152:	7a1b      	ldrb	r3, [r3, #8]
 8013154:	2b00      	cmp	r3, #0
 8013156:	d16e      	bne.n	8013236 <SCSI_Read10+0xfc>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8013158:	697b      	ldr	r3, [r7, #20]
 801315a:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 801315e:	b25b      	sxtb	r3, r3
 8013160:	2b00      	cmp	r3, #0
 8013162:	db0a      	blt.n	801317a <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013164:	697b      	ldr	r3, [r7, #20]
 8013166:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 801316a:	2320      	movs	r3, #32
 801316c:	2205      	movs	r2, #5
 801316e:	68f8      	ldr	r0, [r7, #12]
 8013170:	f7ff ff96 	bl	80130a0 <SCSI_SenseCode>
      return -1;
 8013174:	f04f 33ff 	mov.w	r3, #4294967295
 8013178:	e067      	b.n	801324a <SCSI_Read10+0x110>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013180:	689b      	ldr	r3, [r3, #8]
 8013182:	7afa      	ldrb	r2, [r7, #11]
 8013184:	4610      	mov	r0, r2
 8013186:	4798      	blx	r3
 8013188:	4603      	mov	r3, r0
 801318a:	2b00      	cmp	r3, #0
 801318c:	d008      	beq.n	80131a0 <SCSI_Read10+0x66>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801318e:	7af9      	ldrb	r1, [r7, #11]
 8013190:	233a      	movs	r3, #58	; 0x3a
 8013192:	2202      	movs	r2, #2
 8013194:	68f8      	ldr	r0, [r7, #12]
 8013196:	f7ff ff83 	bl	80130a0 <SCSI_SenseCode>
      return -1;
 801319a:	f04f 33ff 	mov.w	r3, #4294967295
 801319e:	e054      	b.n	801324a <SCSI_Read10+0x110>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	3302      	adds	r3, #2
 80131a4:	781b      	ldrb	r3, [r3, #0]
 80131a6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	3303      	adds	r3, #3
 80131ac:	781b      	ldrb	r3, [r3, #0]
 80131ae:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80131b0:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	3304      	adds	r3, #4
 80131b6:	781b      	ldrb	r3, [r3, #0]
 80131b8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80131ba:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80131bc:	687a      	ldr	r2, [r7, #4]
 80131be:	3205      	adds	r2, #5
 80131c0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80131c2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80131c4:	697b      	ldr	r3, [r7, #20]
 80131c6:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	3307      	adds	r3, #7
 80131ce:	781b      	ldrb	r3, [r3, #0]
 80131d0:	021b      	lsls	r3, r3, #8
 80131d2:	687a      	ldr	r2, [r7, #4]
 80131d4:	3208      	adds	r2, #8
 80131d6:	7812      	ldrb	r2, [r2, #0]
 80131d8:	431a      	orrs	r2, r3
 80131da:	697b      	ldr	r3, [r7, #20]
 80131dc:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80131e0:	697b      	ldr	r3, [r7, #20]
 80131e2:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 80131e6:	697b      	ldr	r3, [r7, #20]
 80131e8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80131ec:	7af9      	ldrb	r1, [r7, #11]
 80131ee:	68f8      	ldr	r0, [r7, #12]
 80131f0:	f000 f912 	bl	8013418 <SCSI_CheckAddressRange>
 80131f4:	4603      	mov	r3, r0
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	da02      	bge.n	8013200 <SCSI_Read10+0xc6>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80131fa:	f04f 33ff 	mov.w	r3, #4294967295
 80131fe:	e024      	b.n	801324a <SCSI_Read10+0x110>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8013200:	697b      	ldr	r3, [r7, #20]
 8013202:	2202      	movs	r2, #2
 8013204:	721a      	strb	r2, [r3, #8]

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8013206:	697b      	ldr	r3, [r7, #20]
 8013208:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 801320c:	697b      	ldr	r3, [r7, #20]
 801320e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8013212:	6979      	ldr	r1, [r7, #20]
 8013214:	f8b1 125e 	ldrh.w	r1, [r1, #606]	; 0x25e
 8013218:	fb01 f303 	mul.w	r3, r1, r3
 801321c:	429a      	cmp	r2, r3
 801321e:	d00a      	beq.n	8013236 <SCSI_Read10+0xfc>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013220:	697b      	ldr	r3, [r7, #20]
 8013222:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8013226:	2320      	movs	r3, #32
 8013228:	2205      	movs	r2, #5
 801322a:	68f8      	ldr	r0, [r7, #12]
 801322c:	f7ff ff38 	bl	80130a0 <SCSI_SenseCode>
      return -1;
 8013230:	f04f 33ff 	mov.w	r3, #4294967295
 8013234:	e009      	b.n	801324a <SCSI_Read10+0x110>
    }
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8013236:	697b      	ldr	r3, [r7, #20]
 8013238:	f44f 7200 	mov.w	r2, #512	; 0x200
 801323c:	815a      	strh	r2, [r3, #10]

  return SCSI_ProcessRead(pdev, lun);
 801323e:	7afb      	ldrb	r3, [r7, #11]
 8013240:	4619      	mov	r1, r3
 8013242:	68f8      	ldr	r0, [r7, #12]
 8013244:	f000 f90a 	bl	801345c <SCSI_ProcessRead>
 8013248:	4603      	mov	r3, r0
}
 801324a:	4618      	mov	r0, r3
 801324c:	3718      	adds	r7, #24
 801324e:	46bd      	mov	sp, r7
 8013250:	bd80      	pop	{r7, pc}

08013252 <SCSI_Write10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Write10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8013252:	b580      	push	{r7, lr}
 8013254:	b086      	sub	sp, #24
 8013256:	af00      	add	r7, sp, #0
 8013258:	60f8      	str	r0, [r7, #12]
 801325a:	460b      	mov	r3, r1
 801325c:	607a      	str	r2, [r7, #4]
 801325e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013266:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8013268:	697b      	ldr	r3, [r7, #20]
 801326a:	7a1b      	ldrb	r3, [r3, #8]
 801326c:	2b00      	cmp	r3, #0
 801326e:	f040 8096 	bne.w	801339e <SCSI_Write10+0x14c>
  {
    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8013272:	697b      	ldr	r3, [r7, #20]
 8013274:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8013278:	b25b      	sxtb	r3, r3
 801327a:	2b00      	cmp	r3, #0
 801327c:	da0a      	bge.n	8013294 <SCSI_Write10+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801327e:	697b      	ldr	r3, [r7, #20]
 8013280:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8013284:	2320      	movs	r3, #32
 8013286:	2205      	movs	r2, #5
 8013288:	68f8      	ldr	r0, [r7, #12]
 801328a:	f7ff ff09 	bl	80130a0 <SCSI_SenseCode>
      return -1;
 801328e:	f04f 33ff 	mov.w	r3, #4294967295
 8013292:	e08a      	b.n	80133aa <SCSI_Write10+0x158>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801329a:	689b      	ldr	r3, [r3, #8]
 801329c:	7afa      	ldrb	r2, [r7, #11]
 801329e:	4610      	mov	r0, r2
 80132a0:	4798      	blx	r3
 80132a2:	4603      	mov	r3, r0
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d008      	beq.n	80132ba <SCSI_Write10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80132a8:	7af9      	ldrb	r1, [r7, #11]
 80132aa:	233a      	movs	r3, #58	; 0x3a
 80132ac:	2202      	movs	r2, #2
 80132ae:	68f8      	ldr	r0, [r7, #12]
 80132b0:	f7ff fef6 	bl	80130a0 <SCSI_SenseCode>
      return -1;
 80132b4:	f04f 33ff 	mov.w	r3, #4294967295
 80132b8:	e077      	b.n	80133aa <SCSI_Write10+0x158>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 80132ba:	68fb      	ldr	r3, [r7, #12]
 80132bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80132c0:	68db      	ldr	r3, [r3, #12]
 80132c2:	7afa      	ldrb	r2, [r7, #11]
 80132c4:	4610      	mov	r0, r2
 80132c6:	4798      	blx	r3
 80132c8:	4603      	mov	r3, r0
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d008      	beq.n	80132e0 <SCSI_Write10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80132ce:	7af9      	ldrb	r1, [r7, #11]
 80132d0:	2327      	movs	r3, #39	; 0x27
 80132d2:	2202      	movs	r2, #2
 80132d4:	68f8      	ldr	r0, [r7, #12]
 80132d6:	f7ff fee3 	bl	80130a0 <SCSI_SenseCode>
      return -1;
 80132da:	f04f 33ff 	mov.w	r3, #4294967295
 80132de:	e064      	b.n	80133aa <SCSI_Write10+0x158>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	3302      	adds	r3, #2
 80132e4:	781b      	ldrb	r3, [r3, #0]
 80132e6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	3303      	adds	r3, #3
 80132ec:	781b      	ldrb	r3, [r3, #0]
 80132ee:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80132f0:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	3304      	adds	r3, #4
 80132f6:	781b      	ldrb	r3, [r3, #0]
 80132f8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80132fa:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80132fc:	687a      	ldr	r2, [r7, #4]
 80132fe:	3205      	adds	r2, #5
 8013300:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8013302:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013304:	697b      	ldr	r3, [r7, #20]
 8013306:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	3307      	adds	r3, #7
 801330e:	781b      	ldrb	r3, [r3, #0]
 8013310:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8013312:	687a      	ldr	r2, [r7, #4]
 8013314:	3208      	adds	r2, #8
 8013316:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8013318:	431a      	orrs	r2, r3
 801331a:	697b      	ldr	r3, [r7, #20]
 801331c:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8013320:	697b      	ldr	r3, [r7, #20]
 8013322:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8013326:	697b      	ldr	r3, [r7, #20]
 8013328:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801332c:	7af9      	ldrb	r1, [r7, #11]
 801332e:	68f8      	ldr	r0, [r7, #12]
 8013330:	f000 f872 	bl	8013418 <SCSI_CheckAddressRange>
 8013334:	4603      	mov	r3, r0
 8013336:	2b00      	cmp	r3, #0
 8013338:	da02      	bge.n	8013340 <SCSI_Write10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801333a:	f04f 33ff 	mov.w	r3, #4294967295
 801333e:	e034      	b.n	80133aa <SCSI_Write10+0x158>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8013340:	697b      	ldr	r3, [r7, #20]
 8013342:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8013346:	697a      	ldr	r2, [r7, #20]
 8013348:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 801334c:	fb02 f303 	mul.w	r3, r2, r3
 8013350:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8013352:	697b      	ldr	r3, [r7, #20]
 8013354:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013358:	693a      	ldr	r2, [r7, #16]
 801335a:	429a      	cmp	r2, r3
 801335c:	d00a      	beq.n	8013374 <SCSI_Write10+0x122>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801335e:	697b      	ldr	r3, [r7, #20]
 8013360:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8013364:	2320      	movs	r3, #32
 8013366:	2205      	movs	r2, #5
 8013368:	68f8      	ldr	r0, [r7, #12]
 801336a:	f7ff fe99 	bl	80130a0 <SCSI_SenseCode>
      return -1;
 801336e:	f04f 33ff 	mov.w	r3, #4294967295
 8013372:	e01a      	b.n	80133aa <SCSI_Write10+0x158>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8013374:	693b      	ldr	r3, [r7, #16]
 8013376:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801337a:	bf28      	it	cs
 801337c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8013380:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8013382:	697b      	ldr	r3, [r7, #20]
 8013384:	2201      	movs	r2, #1
 8013386:	721a      	strb	r2, [r3, #8]
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8013388:	697b      	ldr	r3, [r7, #20]
 801338a:	f103 020c 	add.w	r2, r3, #12
 801338e:	693b      	ldr	r3, [r7, #16]
 8013390:	b29b      	uxth	r3, r3
 8013392:	2101      	movs	r1, #1
 8013394:	68f8      	ldr	r0, [r7, #12]
 8013396:	f001 fdae 	bl	8014ef6 <USBD_LL_PrepareReceive>
  }
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }
  return 0;
 801339a:	2300      	movs	r3, #0
 801339c:	e005      	b.n	80133aa <SCSI_Write10+0x158>
    return SCSI_ProcessWrite(pdev, lun);
 801339e:	7afb      	ldrb	r3, [r7, #11]
 80133a0:	4619      	mov	r1, r3
 80133a2:	68f8      	ldr	r0, [r7, #12]
 80133a4:	f000 f8ce 	bl	8013544 <SCSI_ProcessWrite>
 80133a8:	4603      	mov	r3, r0
}
 80133aa:	4618      	mov	r0, r3
 80133ac:	3718      	adds	r7, #24
 80133ae:	46bd      	mov	sp, r7
 80133b0:	bd80      	pop	{r7, pc}

080133b2 <SCSI_Verify10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Verify10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80133b2:	b580      	push	{r7, lr}
 80133b4:	b086      	sub	sp, #24
 80133b6:	af00      	add	r7, sp, #0
 80133b8:	60f8      	str	r0, [r7, #12]
 80133ba:	460b      	mov	r3, r1
 80133bc:	607a      	str	r2, [r7, #4]
 80133be:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80133c0:	68fb      	ldr	r3, [r7, #12]
 80133c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80133c6:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	3301      	adds	r3, #1
 80133cc:	781b      	ldrb	r3, [r3, #0]
 80133ce:	f003 0302 	and.w	r3, r3, #2
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d008      	beq.n	80133e8 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80133d6:	7af9      	ldrb	r1, [r7, #11]
 80133d8:	2324      	movs	r3, #36	; 0x24
 80133da:	2205      	movs	r2, #5
 80133dc:	68f8      	ldr	r0, [r7, #12]
 80133de:	f7ff fe5f 	bl	80130a0 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 80133e2:	f04f 33ff 	mov.w	r3, #4294967295
 80133e6:	e013      	b.n	8013410 <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80133e8:	697b      	ldr	r3, [r7, #20]
 80133ea:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 80133ee:	697b      	ldr	r3, [r7, #20]
 80133f0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80133f4:	7af9      	ldrb	r1, [r7, #11]
 80133f6:	68f8      	ldr	r0, [r7, #12]
 80133f8:	f000 f80e 	bl	8013418 <SCSI_CheckAddressRange>
 80133fc:	4603      	mov	r3, r0
 80133fe:	2b00      	cmp	r3, #0
 8013400:	da02      	bge.n	8013408 <SCSI_Verify10+0x56>
                             hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */
 8013402:	f04f 33ff 	mov.w	r3, #4294967295
 8013406:	e003      	b.n	8013410 <SCSI_Verify10+0x5e>
  }
  hmsc->bot_data_length = 0U;
 8013408:	697b      	ldr	r3, [r7, #20]
 801340a:	2200      	movs	r2, #0
 801340c:	815a      	strh	r2, [r3, #10]
  return 0;
 801340e:	2300      	movs	r3, #0
}
 8013410:	4618      	mov	r0, r3
 8013412:	3718      	adds	r7, #24
 8013414:	46bd      	mov	sp, r7
 8013416:	bd80      	pop	{r7, pc}

08013418 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8013418:	b580      	push	{r7, lr}
 801341a:	b086      	sub	sp, #24
 801341c:	af00      	add	r7, sp, #0
 801341e:	60f8      	str	r0, [r7, #12]
 8013420:	607a      	str	r2, [r7, #4]
 8013422:	603b      	str	r3, [r7, #0]
 8013424:	460b      	mov	r3, r1
 8013426:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8013428:	68fb      	ldr	r3, [r7, #12]
 801342a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801342e:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8013430:	687a      	ldr	r2, [r7, #4]
 8013432:	683b      	ldr	r3, [r7, #0]
 8013434:	441a      	add	r2, r3
 8013436:	697b      	ldr	r3, [r7, #20]
 8013438:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 801343c:	429a      	cmp	r2, r3
 801343e:	d908      	bls.n	8013452 <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8013440:	7af9      	ldrb	r1, [r7, #11]
 8013442:	2321      	movs	r3, #33	; 0x21
 8013444:	2205      	movs	r2, #5
 8013446:	68f8      	ldr	r0, [r7, #12]
 8013448:	f7ff fe2a 	bl	80130a0 <SCSI_SenseCode>
    return -1;
 801344c:	f04f 33ff 	mov.w	r3, #4294967295
 8013450:	e000      	b.n	8013454 <SCSI_CheckAddressRange+0x3c>
  }
  return 0;
 8013452:	2300      	movs	r3, #0
}
 8013454:	4618      	mov	r0, r3
 8013456:	3718      	adds	r7, #24
 8013458:	46bd      	mov	sp, r7
 801345a:	bd80      	pop	{r7, pc}

0801345c <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 801345c:	b590      	push	{r4, r7, lr}
 801345e:	b085      	sub	sp, #20
 8013460:	af00      	add	r7, sp, #0
 8013462:	6078      	str	r0, [r7, #4]
 8013464:	460b      	mov	r3, r1
 8013466:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801346e:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8013476:	68fa      	ldr	r2, [r7, #12]
 8013478:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 801347c:	fb02 f303 	mul.w	r3, r2, r3
 8013480:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8013482:	68bb      	ldr	r3, [r7, #8]
 8013484:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013488:	bf28      	it	cs
 801348a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 801348e:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013496:	691c      	ldr	r4, [r3, #16]
                                                     hmsc->bot_data,
 8013498:	68fb      	ldr	r3, [r7, #12]
 801349a:	f103 010c 	add.w	r1, r3, #12
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80134aa:	4618      	mov	r0, r3
 80134ac:	68bb      	ldr	r3, [r7, #8]
 80134ae:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 80134b2:	b29b      	uxth	r3, r3
 80134b4:	78f8      	ldrb	r0, [r7, #3]
 80134b6:	47a0      	blx	r4
 80134b8:	4603      	mov	r3, r0
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	da08      	bge.n	80134d0 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 80134be:	78f9      	ldrb	r1, [r7, #3]
 80134c0:	2311      	movs	r3, #17
 80134c2:	2204      	movs	r2, #4
 80134c4:	6878      	ldr	r0, [r7, #4]
 80134c6:	f7ff fdeb 	bl	80130a0 <SCSI_SenseCode>
    return -1;
 80134ca:	f04f 33ff 	mov.w	r3, #4294967295
 80134ce:	e035      	b.n	801353c <SCSI_ProcessRead+0xe0>
  }

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	f103 020c 	add.w	r2, r3, #12
 80134d6:	68bb      	ldr	r3, [r7, #8]
 80134d8:	b29b      	uxth	r3, r3
 80134da:	2181      	movs	r1, #129	; 0x81
 80134dc:	6878      	ldr	r0, [r7, #4]
 80134de:	f001 fce7 	bl	8014eb0 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 80134e8:	68fb      	ldr	r3, [r7, #12]
 80134ea:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80134ee:	4619      	mov	r1, r3
 80134f0:	68bb      	ldr	r3, [r7, #8]
 80134f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80134f6:	441a      	add	r2, r3
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 801350a:	4619      	mov	r1, r3
 801350c:	68bb      	ldr	r3, [r7, #8]
 801350e:	fbb3 f3f1 	udiv	r3, r3, r1
 8013512:	1ad2      	subs	r2, r2, r3
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 801351a:	68fb      	ldr	r3, [r7, #12]
 801351c:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 8013520:	68bb      	ldr	r3, [r7, #8]
 8013522:	1ad2      	subs	r2, r2, r3
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8013530:	2b00      	cmp	r3, #0
 8013532:	d102      	bne.n	801353a <SCSI_ProcessRead+0xde>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	2203      	movs	r2, #3
 8013538:	721a      	strb	r2, [r3, #8]
  }
  return 0;
 801353a:	2300      	movs	r3, #0
}
 801353c:	4618      	mov	r0, r3
 801353e:	3714      	adds	r7, #20
 8013540:	46bd      	mov	sp, r7
 8013542:	bd90      	pop	{r4, r7, pc}

08013544 <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8013544:	b590      	push	{r4, r7, lr}
 8013546:	b085      	sub	sp, #20
 8013548:	af00      	add	r7, sp, #0
 801354a:	6078      	str	r0, [r7, #4]
 801354c:	460b      	mov	r3, r1
 801354e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013556:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801355e:	68fa      	ldr	r2, [r7, #12]
 8013560:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8013564:	fb02 f303 	mul.w	r3, r2, r3
 8013568:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 801356a:	68bb      	ldr	r3, [r7, #8]
 801356c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013570:	bf28      	it	cs
 8013572:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8013576:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801357e:	695c      	ldr	r4, [r3, #20]
 8013580:	68fb      	ldr	r3, [r7, #12]
 8013582:	f103 010c 	add.w	r1, r3, #12
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8013592:	4618      	mov	r0, r3
 8013594:	68bb      	ldr	r3, [r7, #8]
 8013596:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 801359a:	b29b      	uxth	r3, r3
 801359c:	78f8      	ldrb	r0, [r7, #3]
 801359e:	47a0      	blx	r4
 80135a0:	4603      	mov	r3, r0
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	da08      	bge.n	80135b8 <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 80135a6:	78f9      	ldrb	r1, [r7, #3]
 80135a8:	2303      	movs	r3, #3
 80135aa:	2204      	movs	r2, #4
 80135ac:	6878      	ldr	r0, [r7, #4]
 80135ae:	f7ff fd77 	bl	80130a0 <SCSI_SenseCode>

    return -1;
 80135b2:	f04f 33ff 	mov.w	r3, #4294967295
 80135b6:	e045      	b.n	8013644 <SCSI_ProcessWrite+0x100>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80135c4:	4619      	mov	r1, r3
 80135c6:	68bb      	ldr	r3, [r7, #8]
 80135c8:	fbb3 f3f1 	udiv	r3, r3, r1
 80135cc:	441a      	add	r2, r3
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80135e0:	4619      	mov	r1, r3
 80135e2:	68bb      	ldr	r3, [r7, #8]
 80135e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80135e8:	1ad2      	subs	r2, r2, r3
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 80135f6:	68bb      	ldr	r3, [r7, #8]
 80135f8:	1ad2      	subs	r2, r2, r3
 80135fa:	68fb      	ldr	r3, [r7, #12]
 80135fc:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 8013600:	68fb      	ldr	r3, [r7, #12]
 8013602:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8013606:	2b00      	cmp	r3, #0
 8013608:	d104      	bne.n	8013614 <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801360a:	2100      	movs	r1, #0
 801360c:	6878      	ldr	r0, [r7, #4]
 801360e:	f7ff f97f 	bl	8012910 <MSC_BOT_SendCSW>
 8013612:	e016      	b.n	8013642 <SCSI_ProcessWrite+0xfe>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801361a:	68fa      	ldr	r2, [r7, #12]
 801361c:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8013620:	fb02 f303 	mul.w	r3, r2, r3
 8013624:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013628:	bf28      	it	cs
 801362a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 801362e:	60bb      	str	r3, [r7, #8]
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8013630:	68fb      	ldr	r3, [r7, #12]
 8013632:	f103 020c 	add.w	r2, r3, #12
 8013636:	68bb      	ldr	r3, [r7, #8]
 8013638:	b29b      	uxth	r3, r3
 801363a:	2101      	movs	r1, #1
 801363c:	6878      	ldr	r0, [r7, #4]
 801363e:	f001 fc5a 	bl	8014ef6 <USBD_LL_PrepareReceive>
  }

  return 0;
 8013642:	2300      	movs	r3, #0
}
 8013644:	4618      	mov	r0, r3
 8013646:	3714      	adds	r7, #20
 8013648:	46bd      	mov	sp, r7
 801364a:	bd90      	pop	{r4, r7, pc}

0801364c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801364c:	b580      	push	{r7, lr}
 801364e:	b084      	sub	sp, #16
 8013650:	af00      	add	r7, sp, #0
 8013652:	60f8      	str	r0, [r7, #12]
 8013654:	60b9      	str	r1, [r7, #8]
 8013656:	4613      	mov	r3, r2
 8013658:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801365a:	68fb      	ldr	r3, [r7, #12]
 801365c:	2b00      	cmp	r3, #0
 801365e:	d101      	bne.n	8013664 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8013660:	2302      	movs	r3, #2
 8013662:	e01a      	b.n	801369a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8013664:	68fb      	ldr	r3, [r7, #12]
 8013666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801366a:	2b00      	cmp	r3, #0
 801366c:	d003      	beq.n	8013676 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 801366e:	68fb      	ldr	r3, [r7, #12]
 8013670:	2200      	movs	r2, #0
 8013672:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013676:	68bb      	ldr	r3, [r7, #8]
 8013678:	2b00      	cmp	r3, #0
 801367a:	d003      	beq.n	8013684 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	68ba      	ldr	r2, [r7, #8]
 8013680:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	2201      	movs	r2, #1
 8013688:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	79fa      	ldrb	r2, [r7, #7]
 8013690:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8013692:	68f8      	ldr	r0, [r7, #12]
 8013694:	f001 fab4 	bl	8014c00 <USBD_LL_Init>

  return USBD_OK;
 8013698:	2300      	movs	r3, #0
}
 801369a:	4618      	mov	r0, r3
 801369c:	3710      	adds	r7, #16
 801369e:	46bd      	mov	sp, r7
 80136a0:	bd80      	pop	{r7, pc}

080136a2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80136a2:	b480      	push	{r7}
 80136a4:	b085      	sub	sp, #20
 80136a6:	af00      	add	r7, sp, #0
 80136a8:	6078      	str	r0, [r7, #4]
 80136aa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80136ac:	2300      	movs	r3, #0
 80136ae:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80136b0:	683b      	ldr	r3, [r7, #0]
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d006      	beq.n	80136c4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	683a      	ldr	r2, [r7, #0]
 80136ba:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80136be:	2300      	movs	r3, #0
 80136c0:	73fb      	strb	r3, [r7, #15]
 80136c2:	e001      	b.n	80136c8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80136c4:	2302      	movs	r3, #2
 80136c6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80136c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80136ca:	4618      	mov	r0, r3
 80136cc:	3714      	adds	r7, #20
 80136ce:	46bd      	mov	sp, r7
 80136d0:	bc80      	pop	{r7}
 80136d2:	4770      	bx	lr

080136d4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80136d4:	b580      	push	{r7, lr}
 80136d6:	b082      	sub	sp, #8
 80136d8:	af00      	add	r7, sp, #0
 80136da:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80136dc:	6878      	ldr	r0, [r7, #4]
 80136de:	f001 fadf 	bl	8014ca0 <USBD_LL_Start>

  return USBD_OK;
 80136e2:	2300      	movs	r3, #0
}
 80136e4:	4618      	mov	r0, r3
 80136e6:	3708      	adds	r7, #8
 80136e8:	46bd      	mov	sp, r7
 80136ea:	bd80      	pop	{r7, pc}

080136ec <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80136ec:	b480      	push	{r7}
 80136ee:	b083      	sub	sp, #12
 80136f0:	af00      	add	r7, sp, #0
 80136f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80136f4:	2300      	movs	r3, #0
}
 80136f6:	4618      	mov	r0, r3
 80136f8:	370c      	adds	r7, #12
 80136fa:	46bd      	mov	sp, r7
 80136fc:	bc80      	pop	{r7}
 80136fe:	4770      	bx	lr

08013700 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8013700:	b580      	push	{r7, lr}
 8013702:	b084      	sub	sp, #16
 8013704:	af00      	add	r7, sp, #0
 8013706:	6078      	str	r0, [r7, #4]
 8013708:	460b      	mov	r3, r1
 801370a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801370c:	2302      	movs	r3, #2
 801370e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013716:	2b00      	cmp	r3, #0
 8013718:	d00c      	beq.n	8013734 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	78fa      	ldrb	r2, [r7, #3]
 8013724:	4611      	mov	r1, r2
 8013726:	6878      	ldr	r0, [r7, #4]
 8013728:	4798      	blx	r3
 801372a:	4603      	mov	r3, r0
 801372c:	2b00      	cmp	r3, #0
 801372e:	d101      	bne.n	8013734 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8013730:	2300      	movs	r3, #0
 8013732:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8013734:	7bfb      	ldrb	r3, [r7, #15]
}
 8013736:	4618      	mov	r0, r3
 8013738:	3710      	adds	r7, #16
 801373a:	46bd      	mov	sp, r7
 801373c:	bd80      	pop	{r7, pc}

0801373e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801373e:	b580      	push	{r7, lr}
 8013740:	b082      	sub	sp, #8
 8013742:	af00      	add	r7, sp, #0
 8013744:	6078      	str	r0, [r7, #4]
 8013746:	460b      	mov	r3, r1
 8013748:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013750:	685b      	ldr	r3, [r3, #4]
 8013752:	78fa      	ldrb	r2, [r7, #3]
 8013754:	4611      	mov	r1, r2
 8013756:	6878      	ldr	r0, [r7, #4]
 8013758:	4798      	blx	r3

  return USBD_OK;
 801375a:	2300      	movs	r3, #0
}
 801375c:	4618      	mov	r0, r3
 801375e:	3708      	adds	r7, #8
 8013760:	46bd      	mov	sp, r7
 8013762:	bd80      	pop	{r7, pc}

08013764 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8013764:	b580      	push	{r7, lr}
 8013766:	b082      	sub	sp, #8
 8013768:	af00      	add	r7, sp, #0
 801376a:	6078      	str	r0, [r7, #4]
 801376c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8013774:	6839      	ldr	r1, [r7, #0]
 8013776:	4618      	mov	r0, r3
 8013778:	f000 fed7 	bl	801452a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	2201      	movs	r2, #1
 8013780:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801378a:	461a      	mov	r2, r3
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8013798:	f003 031f 	and.w	r3, r3, #31
 801379c:	2b02      	cmp	r3, #2
 801379e:	d016      	beq.n	80137ce <USBD_LL_SetupStage+0x6a>
 80137a0:	2b02      	cmp	r3, #2
 80137a2:	d81c      	bhi.n	80137de <USBD_LL_SetupStage+0x7a>
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d002      	beq.n	80137ae <USBD_LL_SetupStage+0x4a>
 80137a8:	2b01      	cmp	r3, #1
 80137aa:	d008      	beq.n	80137be <USBD_LL_SetupStage+0x5a>
 80137ac:	e017      	b.n	80137de <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80137b4:	4619      	mov	r1, r3
 80137b6:	6878      	ldr	r0, [r7, #4]
 80137b8:	f000 f9ca 	bl	8013b50 <USBD_StdDevReq>
      break;
 80137bc:	e01a      	b.n	80137f4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80137c4:	4619      	mov	r1, r3
 80137c6:	6878      	ldr	r0, [r7, #4]
 80137c8:	f000 fa2c 	bl	8013c24 <USBD_StdItfReq>
      break;
 80137cc:	e012      	b.n	80137f4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80137d4:	4619      	mov	r1, r3
 80137d6:	6878      	ldr	r0, [r7, #4]
 80137d8:	f000 fa6c 	bl	8013cb4 <USBD_StdEPReq>
      break;
 80137dc:	e00a      	b.n	80137f4 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80137e4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80137e8:	b2db      	uxtb	r3, r3
 80137ea:	4619      	mov	r1, r3
 80137ec:	6878      	ldr	r0, [r7, #4]
 80137ee:	f001 fad6 	bl	8014d9e <USBD_LL_StallEP>
      break;
 80137f2:	bf00      	nop
  }

  return USBD_OK;
 80137f4:	2300      	movs	r3, #0
}
 80137f6:	4618      	mov	r0, r3
 80137f8:	3708      	adds	r7, #8
 80137fa:	46bd      	mov	sp, r7
 80137fc:	bd80      	pop	{r7, pc}

080137fe <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80137fe:	b580      	push	{r7, lr}
 8013800:	b086      	sub	sp, #24
 8013802:	af00      	add	r7, sp, #0
 8013804:	60f8      	str	r0, [r7, #12]
 8013806:	460b      	mov	r3, r1
 8013808:	607a      	str	r2, [r7, #4]
 801380a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801380c:	7afb      	ldrb	r3, [r7, #11]
 801380e:	2b00      	cmp	r3, #0
 8013810:	d14b      	bne.n	80138aa <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8013818:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013820:	2b03      	cmp	r3, #3
 8013822:	d134      	bne.n	801388e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8013824:	697b      	ldr	r3, [r7, #20]
 8013826:	68da      	ldr	r2, [r3, #12]
 8013828:	697b      	ldr	r3, [r7, #20]
 801382a:	691b      	ldr	r3, [r3, #16]
 801382c:	429a      	cmp	r2, r3
 801382e:	d919      	bls.n	8013864 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8013830:	697b      	ldr	r3, [r7, #20]
 8013832:	68da      	ldr	r2, [r3, #12]
 8013834:	697b      	ldr	r3, [r7, #20]
 8013836:	691b      	ldr	r3, [r3, #16]
 8013838:	1ad2      	subs	r2, r2, r3
 801383a:	697b      	ldr	r3, [r7, #20]
 801383c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801383e:	697b      	ldr	r3, [r7, #20]
 8013840:	68da      	ldr	r2, [r3, #12]
 8013842:	697b      	ldr	r3, [r7, #20]
 8013844:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8013846:	429a      	cmp	r2, r3
 8013848:	d203      	bcs.n	8013852 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801384a:	697b      	ldr	r3, [r7, #20]
 801384c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 801384e:	b29b      	uxth	r3, r3
 8013850:	e002      	b.n	8013858 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8013852:	697b      	ldr	r3, [r7, #20]
 8013854:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8013856:	b29b      	uxth	r3, r3
 8013858:	461a      	mov	r2, r3
 801385a:	6879      	ldr	r1, [r7, #4]
 801385c:	68f8      	ldr	r0, [r7, #12]
 801385e:	f000 ff38 	bl	80146d2 <USBD_CtlContinueRx>
 8013862:	e038      	b.n	80138d6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8013864:	68fb      	ldr	r3, [r7, #12]
 8013866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801386a:	691b      	ldr	r3, [r3, #16]
 801386c:	2b00      	cmp	r3, #0
 801386e:	d00a      	beq.n	8013886 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8013870:	68fb      	ldr	r3, [r7, #12]
 8013872:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8013876:	2b03      	cmp	r3, #3
 8013878:	d105      	bne.n	8013886 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801387a:	68fb      	ldr	r3, [r7, #12]
 801387c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013880:	691b      	ldr	r3, [r3, #16]
 8013882:	68f8      	ldr	r0, [r7, #12]
 8013884:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8013886:	68f8      	ldr	r0, [r7, #12]
 8013888:	f000 ff35 	bl	80146f6 <USBD_CtlSendStatus>
 801388c:	e023      	b.n	80138d6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013894:	2b05      	cmp	r3, #5
 8013896:	d11e      	bne.n	80138d6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8013898:	68fb      	ldr	r3, [r7, #12]
 801389a:	2200      	movs	r2, #0
 801389c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80138a0:	2100      	movs	r1, #0
 80138a2:	68f8      	ldr	r0, [r7, #12]
 80138a4:	f001 fa7b 	bl	8014d9e <USBD_LL_StallEP>
 80138a8:	e015      	b.n	80138d6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80138b0:	699b      	ldr	r3, [r3, #24]
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d00d      	beq.n	80138d2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80138bc:	2b03      	cmp	r3, #3
 80138be:	d108      	bne.n	80138d2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80138c6:	699b      	ldr	r3, [r3, #24]
 80138c8:	7afa      	ldrb	r2, [r7, #11]
 80138ca:	4611      	mov	r1, r2
 80138cc:	68f8      	ldr	r0, [r7, #12]
 80138ce:	4798      	blx	r3
 80138d0:	e001      	b.n	80138d6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80138d2:	2302      	movs	r3, #2
 80138d4:	e000      	b.n	80138d8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80138d6:	2300      	movs	r3, #0
}
 80138d8:	4618      	mov	r0, r3
 80138da:	3718      	adds	r7, #24
 80138dc:	46bd      	mov	sp, r7
 80138de:	bd80      	pop	{r7, pc}

080138e0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80138e0:	b580      	push	{r7, lr}
 80138e2:	b086      	sub	sp, #24
 80138e4:	af00      	add	r7, sp, #0
 80138e6:	60f8      	str	r0, [r7, #12]
 80138e8:	460b      	mov	r3, r1
 80138ea:	607a      	str	r2, [r7, #4]
 80138ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80138ee:	7afb      	ldrb	r3, [r7, #11]
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d17f      	bne.n	80139f4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	3314      	adds	r3, #20
 80138f8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013900:	2b02      	cmp	r3, #2
 8013902:	d15c      	bne.n	80139be <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8013904:	697b      	ldr	r3, [r7, #20]
 8013906:	68da      	ldr	r2, [r3, #12]
 8013908:	697b      	ldr	r3, [r7, #20]
 801390a:	691b      	ldr	r3, [r3, #16]
 801390c:	429a      	cmp	r2, r3
 801390e:	d915      	bls.n	801393c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8013910:	697b      	ldr	r3, [r7, #20]
 8013912:	68da      	ldr	r2, [r3, #12]
 8013914:	697b      	ldr	r3, [r7, #20]
 8013916:	691b      	ldr	r3, [r3, #16]
 8013918:	1ad2      	subs	r2, r2, r3
 801391a:	697b      	ldr	r3, [r7, #20]
 801391c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 801391e:	697b      	ldr	r3, [r7, #20]
 8013920:	68db      	ldr	r3, [r3, #12]
 8013922:	b29b      	uxth	r3, r3
 8013924:	461a      	mov	r2, r3
 8013926:	6879      	ldr	r1, [r7, #4]
 8013928:	68f8      	ldr	r0, [r7, #12]
 801392a:	f000 fec0 	bl	80146ae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801392e:	2300      	movs	r3, #0
 8013930:	2200      	movs	r2, #0
 8013932:	2100      	movs	r1, #0
 8013934:	68f8      	ldr	r0, [r7, #12]
 8013936:	f001 fade 	bl	8014ef6 <USBD_LL_PrepareReceive>
 801393a:	e04e      	b.n	80139da <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801393c:	697b      	ldr	r3, [r7, #20]
 801393e:	689b      	ldr	r3, [r3, #8]
 8013940:	697a      	ldr	r2, [r7, #20]
 8013942:	6912      	ldr	r2, [r2, #16]
 8013944:	fbb3 f1f2 	udiv	r1, r3, r2
 8013948:	fb01 f202 	mul.w	r2, r1, r2
 801394c:	1a9b      	subs	r3, r3, r2
 801394e:	2b00      	cmp	r3, #0
 8013950:	d11c      	bne.n	801398c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8013952:	697b      	ldr	r3, [r7, #20]
 8013954:	689a      	ldr	r2, [r3, #8]
 8013956:	697b      	ldr	r3, [r7, #20]
 8013958:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801395a:	429a      	cmp	r2, r3
 801395c:	d316      	bcc.n	801398c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 801395e:	697b      	ldr	r3, [r7, #20]
 8013960:	689a      	ldr	r2, [r3, #8]
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013968:	429a      	cmp	r2, r3
 801396a:	d20f      	bcs.n	801398c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801396c:	2200      	movs	r2, #0
 801396e:	2100      	movs	r1, #0
 8013970:	68f8      	ldr	r0, [r7, #12]
 8013972:	f000 fe9c 	bl	80146ae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	2200      	movs	r2, #0
 801397a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801397e:	2300      	movs	r3, #0
 8013980:	2200      	movs	r2, #0
 8013982:	2100      	movs	r1, #0
 8013984:	68f8      	ldr	r0, [r7, #12]
 8013986:	f001 fab6 	bl	8014ef6 <USBD_LL_PrepareReceive>
 801398a:	e026      	b.n	80139da <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801398c:	68fb      	ldr	r3, [r7, #12]
 801398e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013992:	68db      	ldr	r3, [r3, #12]
 8013994:	2b00      	cmp	r3, #0
 8013996:	d00a      	beq.n	80139ae <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8013998:	68fb      	ldr	r3, [r7, #12]
 801399a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801399e:	2b03      	cmp	r3, #3
 80139a0:	d105      	bne.n	80139ae <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80139a8:	68db      	ldr	r3, [r3, #12]
 80139aa:	68f8      	ldr	r0, [r7, #12]
 80139ac:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80139ae:	2180      	movs	r1, #128	; 0x80
 80139b0:	68f8      	ldr	r0, [r7, #12]
 80139b2:	f001 f9f4 	bl	8014d9e <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80139b6:	68f8      	ldr	r0, [r7, #12]
 80139b8:	f000 feb0 	bl	801471c <USBD_CtlReceiveStatus>
 80139bc:	e00d      	b.n	80139da <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80139be:	68fb      	ldr	r3, [r7, #12]
 80139c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80139c4:	2b04      	cmp	r3, #4
 80139c6:	d004      	beq.n	80139d2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80139c8:	68fb      	ldr	r3, [r7, #12]
 80139ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d103      	bne.n	80139da <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80139d2:	2180      	movs	r1, #128	; 0x80
 80139d4:	68f8      	ldr	r0, [r7, #12]
 80139d6:	f001 f9e2 	bl	8014d9e <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80139da:	68fb      	ldr	r3, [r7, #12]
 80139dc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80139e0:	2b01      	cmp	r3, #1
 80139e2:	d11d      	bne.n	8013a20 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80139e4:	68f8      	ldr	r0, [r7, #12]
 80139e6:	f7ff fe81 	bl	80136ec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	2200      	movs	r2, #0
 80139ee:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80139f2:	e015      	b.n	8013a20 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80139f4:	68fb      	ldr	r3, [r7, #12]
 80139f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80139fa:	695b      	ldr	r3, [r3, #20]
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	d00d      	beq.n	8013a1c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8013a06:	2b03      	cmp	r3, #3
 8013a08:	d108      	bne.n	8013a1c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8013a0a:	68fb      	ldr	r3, [r7, #12]
 8013a0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013a10:	695b      	ldr	r3, [r3, #20]
 8013a12:	7afa      	ldrb	r2, [r7, #11]
 8013a14:	4611      	mov	r1, r2
 8013a16:	68f8      	ldr	r0, [r7, #12]
 8013a18:	4798      	blx	r3
 8013a1a:	e001      	b.n	8013a20 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8013a1c:	2302      	movs	r3, #2
 8013a1e:	e000      	b.n	8013a22 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8013a20:	2300      	movs	r3, #0
}
 8013a22:	4618      	mov	r0, r3
 8013a24:	3718      	adds	r7, #24
 8013a26:	46bd      	mov	sp, r7
 8013a28:	bd80      	pop	{r7, pc}

08013a2a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8013a2a:	b580      	push	{r7, lr}
 8013a2c:	b082      	sub	sp, #8
 8013a2e:	af00      	add	r7, sp, #0
 8013a30:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013a32:	2340      	movs	r3, #64	; 0x40
 8013a34:	2200      	movs	r2, #0
 8013a36:	2100      	movs	r1, #0
 8013a38:	6878      	ldr	r0, [r7, #4]
 8013a3a:	f001 f94c 	bl	8014cd6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	2201      	movs	r2, #1
 8013a42:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	2240      	movs	r2, #64	; 0x40
 8013a4a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013a4e:	2340      	movs	r3, #64	; 0x40
 8013a50:	2200      	movs	r2, #0
 8013a52:	2180      	movs	r1, #128	; 0x80
 8013a54:	6878      	ldr	r0, [r7, #4]
 8013a56:	f001 f93e 	bl	8014cd6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	2201      	movs	r2, #1
 8013a5e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	2240      	movs	r2, #64	; 0x40
 8013a64:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	2201      	movs	r2, #1
 8013a6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	2200      	movs	r2, #0
 8013a72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	2200      	movs	r2, #0
 8013a7a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	2200      	movs	r2, #0
 8013a80:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d009      	beq.n	8013aa2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013a94:	685b      	ldr	r3, [r3, #4]
 8013a96:	687a      	ldr	r2, [r7, #4]
 8013a98:	6852      	ldr	r2, [r2, #4]
 8013a9a:	b2d2      	uxtb	r2, r2
 8013a9c:	4611      	mov	r1, r2
 8013a9e:	6878      	ldr	r0, [r7, #4]
 8013aa0:	4798      	blx	r3
  }

  return USBD_OK;
 8013aa2:	2300      	movs	r3, #0
}
 8013aa4:	4618      	mov	r0, r3
 8013aa6:	3708      	adds	r7, #8
 8013aa8:	46bd      	mov	sp, r7
 8013aaa:	bd80      	pop	{r7, pc}

08013aac <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8013aac:	b480      	push	{r7}
 8013aae:	b083      	sub	sp, #12
 8013ab0:	af00      	add	r7, sp, #0
 8013ab2:	6078      	str	r0, [r7, #4]
 8013ab4:	460b      	mov	r3, r1
 8013ab6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	78fa      	ldrb	r2, [r7, #3]
 8013abc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8013abe:	2300      	movs	r3, #0
}
 8013ac0:	4618      	mov	r0, r3
 8013ac2:	370c      	adds	r7, #12
 8013ac4:	46bd      	mov	sp, r7
 8013ac6:	bc80      	pop	{r7}
 8013ac8:	4770      	bx	lr

08013aca <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013aca:	b480      	push	{r7}
 8013acc:	b083      	sub	sp, #12
 8013ace:	af00      	add	r7, sp, #0
 8013ad0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	2204      	movs	r2, #4
 8013ae2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8013ae6:	2300      	movs	r3, #0
}
 8013ae8:	4618      	mov	r0, r3
 8013aea:	370c      	adds	r7, #12
 8013aec:	46bd      	mov	sp, r7
 8013aee:	bc80      	pop	{r7}
 8013af0:	4770      	bx	lr

08013af2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8013af2:	b480      	push	{r7}
 8013af4:	b083      	sub	sp, #12
 8013af6:	af00      	add	r7, sp, #0
 8013af8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013b00:	2b04      	cmp	r3, #4
 8013b02:	d105      	bne.n	8013b10 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8013b10:	2300      	movs	r3, #0
}
 8013b12:	4618      	mov	r0, r3
 8013b14:	370c      	adds	r7, #12
 8013b16:	46bd      	mov	sp, r7
 8013b18:	bc80      	pop	{r7}
 8013b1a:	4770      	bx	lr

08013b1c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8013b1c:	b580      	push	{r7, lr}
 8013b1e:	b082      	sub	sp, #8
 8013b20:	af00      	add	r7, sp, #0
 8013b22:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013b2a:	2b03      	cmp	r3, #3
 8013b2c:	d10b      	bne.n	8013b46 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013b34:	69db      	ldr	r3, [r3, #28]
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d005      	beq.n	8013b46 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013b40:	69db      	ldr	r3, [r3, #28]
 8013b42:	6878      	ldr	r0, [r7, #4]
 8013b44:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013b46:	2300      	movs	r3, #0
}
 8013b48:	4618      	mov	r0, r3
 8013b4a:	3708      	adds	r7, #8
 8013b4c:	46bd      	mov	sp, r7
 8013b4e:	bd80      	pop	{r7, pc}

08013b50 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8013b50:	b580      	push	{r7, lr}
 8013b52:	b084      	sub	sp, #16
 8013b54:	af00      	add	r7, sp, #0
 8013b56:	6078      	str	r0, [r7, #4]
 8013b58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013b5a:	2300      	movs	r3, #0
 8013b5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013b5e:	683b      	ldr	r3, [r7, #0]
 8013b60:	781b      	ldrb	r3, [r3, #0]
 8013b62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013b66:	2b40      	cmp	r3, #64	; 0x40
 8013b68:	d005      	beq.n	8013b76 <USBD_StdDevReq+0x26>
 8013b6a:	2b40      	cmp	r3, #64	; 0x40
 8013b6c:	d84f      	bhi.n	8013c0e <USBD_StdDevReq+0xbe>
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d009      	beq.n	8013b86 <USBD_StdDevReq+0x36>
 8013b72:	2b20      	cmp	r3, #32
 8013b74:	d14b      	bne.n	8013c0e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013b7c:	689b      	ldr	r3, [r3, #8]
 8013b7e:	6839      	ldr	r1, [r7, #0]
 8013b80:	6878      	ldr	r0, [r7, #4]
 8013b82:	4798      	blx	r3
      break;
 8013b84:	e048      	b.n	8013c18 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013b86:	683b      	ldr	r3, [r7, #0]
 8013b88:	785b      	ldrb	r3, [r3, #1]
 8013b8a:	2b09      	cmp	r3, #9
 8013b8c:	d839      	bhi.n	8013c02 <USBD_StdDevReq+0xb2>
 8013b8e:	a201      	add	r2, pc, #4	; (adr r2, 8013b94 <USBD_StdDevReq+0x44>)
 8013b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b94:	08013be5 	.word	0x08013be5
 8013b98:	08013bf9 	.word	0x08013bf9
 8013b9c:	08013c03 	.word	0x08013c03
 8013ba0:	08013bef 	.word	0x08013bef
 8013ba4:	08013c03 	.word	0x08013c03
 8013ba8:	08013bc7 	.word	0x08013bc7
 8013bac:	08013bbd 	.word	0x08013bbd
 8013bb0:	08013c03 	.word	0x08013c03
 8013bb4:	08013bdb 	.word	0x08013bdb
 8013bb8:	08013bd1 	.word	0x08013bd1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8013bbc:	6839      	ldr	r1, [r7, #0]
 8013bbe:	6878      	ldr	r0, [r7, #4]
 8013bc0:	f000 f9dc 	bl	8013f7c <USBD_GetDescriptor>
          break;
 8013bc4:	e022      	b.n	8013c0c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8013bc6:	6839      	ldr	r1, [r7, #0]
 8013bc8:	6878      	ldr	r0, [r7, #4]
 8013bca:	f000 fb3f 	bl	801424c <USBD_SetAddress>
          break;
 8013bce:	e01d      	b.n	8013c0c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8013bd0:	6839      	ldr	r1, [r7, #0]
 8013bd2:	6878      	ldr	r0, [r7, #4]
 8013bd4:	f000 fb7e 	bl	80142d4 <USBD_SetConfig>
          break;
 8013bd8:	e018      	b.n	8013c0c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8013bda:	6839      	ldr	r1, [r7, #0]
 8013bdc:	6878      	ldr	r0, [r7, #4]
 8013bde:	f000 fc07 	bl	80143f0 <USBD_GetConfig>
          break;
 8013be2:	e013      	b.n	8013c0c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8013be4:	6839      	ldr	r1, [r7, #0]
 8013be6:	6878      	ldr	r0, [r7, #4]
 8013be8:	f000 fc37 	bl	801445a <USBD_GetStatus>
          break;
 8013bec:	e00e      	b.n	8013c0c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8013bee:	6839      	ldr	r1, [r7, #0]
 8013bf0:	6878      	ldr	r0, [r7, #4]
 8013bf2:	f000 fc65 	bl	80144c0 <USBD_SetFeature>
          break;
 8013bf6:	e009      	b.n	8013c0c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8013bf8:	6839      	ldr	r1, [r7, #0]
 8013bfa:	6878      	ldr	r0, [r7, #4]
 8013bfc:	f000 fc74 	bl	80144e8 <USBD_ClrFeature>
          break;
 8013c00:	e004      	b.n	8013c0c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8013c02:	6839      	ldr	r1, [r7, #0]
 8013c04:	6878      	ldr	r0, [r7, #4]
 8013c06:	f000 fccc 	bl	80145a2 <USBD_CtlError>
          break;
 8013c0a:	bf00      	nop
      }
      break;
 8013c0c:	e004      	b.n	8013c18 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8013c0e:	6839      	ldr	r1, [r7, #0]
 8013c10:	6878      	ldr	r0, [r7, #4]
 8013c12:	f000 fcc6 	bl	80145a2 <USBD_CtlError>
      break;
 8013c16:	bf00      	nop
  }

  return ret;
 8013c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c1a:	4618      	mov	r0, r3
 8013c1c:	3710      	adds	r7, #16
 8013c1e:	46bd      	mov	sp, r7
 8013c20:	bd80      	pop	{r7, pc}
 8013c22:	bf00      	nop

08013c24 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8013c24:	b580      	push	{r7, lr}
 8013c26:	b084      	sub	sp, #16
 8013c28:	af00      	add	r7, sp, #0
 8013c2a:	6078      	str	r0, [r7, #4]
 8013c2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013c2e:	2300      	movs	r3, #0
 8013c30:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013c32:	683b      	ldr	r3, [r7, #0]
 8013c34:	781b      	ldrb	r3, [r3, #0]
 8013c36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013c3a:	2b40      	cmp	r3, #64	; 0x40
 8013c3c:	d005      	beq.n	8013c4a <USBD_StdItfReq+0x26>
 8013c3e:	2b40      	cmp	r3, #64	; 0x40
 8013c40:	d82e      	bhi.n	8013ca0 <USBD_StdItfReq+0x7c>
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	d001      	beq.n	8013c4a <USBD_StdItfReq+0x26>
 8013c46:	2b20      	cmp	r3, #32
 8013c48:	d12a      	bne.n	8013ca0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013c50:	3b01      	subs	r3, #1
 8013c52:	2b02      	cmp	r3, #2
 8013c54:	d81d      	bhi.n	8013c92 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8013c56:	683b      	ldr	r3, [r7, #0]
 8013c58:	889b      	ldrh	r3, [r3, #4]
 8013c5a:	b2db      	uxtb	r3, r3
 8013c5c:	2b01      	cmp	r3, #1
 8013c5e:	d813      	bhi.n	8013c88 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013c66:	689b      	ldr	r3, [r3, #8]
 8013c68:	6839      	ldr	r1, [r7, #0]
 8013c6a:	6878      	ldr	r0, [r7, #4]
 8013c6c:	4798      	blx	r3
 8013c6e:	4603      	mov	r3, r0
 8013c70:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8013c72:	683b      	ldr	r3, [r7, #0]
 8013c74:	88db      	ldrh	r3, [r3, #6]
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d110      	bne.n	8013c9c <USBD_StdItfReq+0x78>
 8013c7a:	7bfb      	ldrb	r3, [r7, #15]
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d10d      	bne.n	8013c9c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8013c80:	6878      	ldr	r0, [r7, #4]
 8013c82:	f000 fd38 	bl	80146f6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8013c86:	e009      	b.n	8013c9c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8013c88:	6839      	ldr	r1, [r7, #0]
 8013c8a:	6878      	ldr	r0, [r7, #4]
 8013c8c:	f000 fc89 	bl	80145a2 <USBD_CtlError>
          break;
 8013c90:	e004      	b.n	8013c9c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8013c92:	6839      	ldr	r1, [r7, #0]
 8013c94:	6878      	ldr	r0, [r7, #4]
 8013c96:	f000 fc84 	bl	80145a2 <USBD_CtlError>
          break;
 8013c9a:	e000      	b.n	8013c9e <USBD_StdItfReq+0x7a>
          break;
 8013c9c:	bf00      	nop
      }
      break;
 8013c9e:	e004      	b.n	8013caa <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8013ca0:	6839      	ldr	r1, [r7, #0]
 8013ca2:	6878      	ldr	r0, [r7, #4]
 8013ca4:	f000 fc7d 	bl	80145a2 <USBD_CtlError>
      break;
 8013ca8:	bf00      	nop
  }

  return USBD_OK;
 8013caa:	2300      	movs	r3, #0
}
 8013cac:	4618      	mov	r0, r3
 8013cae:	3710      	adds	r7, #16
 8013cb0:	46bd      	mov	sp, r7
 8013cb2:	bd80      	pop	{r7, pc}

08013cb4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8013cb4:	b580      	push	{r7, lr}
 8013cb6:	b084      	sub	sp, #16
 8013cb8:	af00      	add	r7, sp, #0
 8013cba:	6078      	str	r0, [r7, #4]
 8013cbc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8013cbe:	2300      	movs	r3, #0
 8013cc0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8013cc2:	683b      	ldr	r3, [r7, #0]
 8013cc4:	889b      	ldrh	r3, [r3, #4]
 8013cc6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013cc8:	683b      	ldr	r3, [r7, #0]
 8013cca:	781b      	ldrb	r3, [r3, #0]
 8013ccc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013cd0:	2b40      	cmp	r3, #64	; 0x40
 8013cd2:	d007      	beq.n	8013ce4 <USBD_StdEPReq+0x30>
 8013cd4:	2b40      	cmp	r3, #64	; 0x40
 8013cd6:	f200 8146 	bhi.w	8013f66 <USBD_StdEPReq+0x2b2>
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d00a      	beq.n	8013cf4 <USBD_StdEPReq+0x40>
 8013cde:	2b20      	cmp	r3, #32
 8013ce0:	f040 8141 	bne.w	8013f66 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013cea:	689b      	ldr	r3, [r3, #8]
 8013cec:	6839      	ldr	r1, [r7, #0]
 8013cee:	6878      	ldr	r0, [r7, #4]
 8013cf0:	4798      	blx	r3
      break;
 8013cf2:	e13d      	b.n	8013f70 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8013cf4:	683b      	ldr	r3, [r7, #0]
 8013cf6:	781b      	ldrb	r3, [r3, #0]
 8013cf8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013cfc:	2b20      	cmp	r3, #32
 8013cfe:	d10a      	bne.n	8013d16 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013d06:	689b      	ldr	r3, [r3, #8]
 8013d08:	6839      	ldr	r1, [r7, #0]
 8013d0a:	6878      	ldr	r0, [r7, #4]
 8013d0c:	4798      	blx	r3
 8013d0e:	4603      	mov	r3, r0
 8013d10:	73fb      	strb	r3, [r7, #15]

        return ret;
 8013d12:	7bfb      	ldrb	r3, [r7, #15]
 8013d14:	e12d      	b.n	8013f72 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8013d16:	683b      	ldr	r3, [r7, #0]
 8013d18:	785b      	ldrb	r3, [r3, #1]
 8013d1a:	2b03      	cmp	r3, #3
 8013d1c:	d007      	beq.n	8013d2e <USBD_StdEPReq+0x7a>
 8013d1e:	2b03      	cmp	r3, #3
 8013d20:	f300 811b 	bgt.w	8013f5a <USBD_StdEPReq+0x2a6>
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d072      	beq.n	8013e0e <USBD_StdEPReq+0x15a>
 8013d28:	2b01      	cmp	r3, #1
 8013d2a:	d03a      	beq.n	8013da2 <USBD_StdEPReq+0xee>
 8013d2c:	e115      	b.n	8013f5a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013d34:	2b02      	cmp	r3, #2
 8013d36:	d002      	beq.n	8013d3e <USBD_StdEPReq+0x8a>
 8013d38:	2b03      	cmp	r3, #3
 8013d3a:	d015      	beq.n	8013d68 <USBD_StdEPReq+0xb4>
 8013d3c:	e02b      	b.n	8013d96 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013d3e:	7bbb      	ldrb	r3, [r7, #14]
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d00c      	beq.n	8013d5e <USBD_StdEPReq+0xaa>
 8013d44:	7bbb      	ldrb	r3, [r7, #14]
 8013d46:	2b80      	cmp	r3, #128	; 0x80
 8013d48:	d009      	beq.n	8013d5e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8013d4a:	7bbb      	ldrb	r3, [r7, #14]
 8013d4c:	4619      	mov	r1, r3
 8013d4e:	6878      	ldr	r0, [r7, #4]
 8013d50:	f001 f825 	bl	8014d9e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8013d54:	2180      	movs	r1, #128	; 0x80
 8013d56:	6878      	ldr	r0, [r7, #4]
 8013d58:	f001 f821 	bl	8014d9e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013d5c:	e020      	b.n	8013da0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8013d5e:	6839      	ldr	r1, [r7, #0]
 8013d60:	6878      	ldr	r0, [r7, #4]
 8013d62:	f000 fc1e 	bl	80145a2 <USBD_CtlError>
              break;
 8013d66:	e01b      	b.n	8013da0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013d68:	683b      	ldr	r3, [r7, #0]
 8013d6a:	885b      	ldrh	r3, [r3, #2]
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d10e      	bne.n	8013d8e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8013d70:	7bbb      	ldrb	r3, [r7, #14]
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d00b      	beq.n	8013d8e <USBD_StdEPReq+0xda>
 8013d76:	7bbb      	ldrb	r3, [r7, #14]
 8013d78:	2b80      	cmp	r3, #128	; 0x80
 8013d7a:	d008      	beq.n	8013d8e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8013d7c:	683b      	ldr	r3, [r7, #0]
 8013d7e:	88db      	ldrh	r3, [r3, #6]
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d104      	bne.n	8013d8e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8013d84:	7bbb      	ldrb	r3, [r7, #14]
 8013d86:	4619      	mov	r1, r3
 8013d88:	6878      	ldr	r0, [r7, #4]
 8013d8a:	f001 f808 	bl	8014d9e <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8013d8e:	6878      	ldr	r0, [r7, #4]
 8013d90:	f000 fcb1 	bl	80146f6 <USBD_CtlSendStatus>

              break;
 8013d94:	e004      	b.n	8013da0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8013d96:	6839      	ldr	r1, [r7, #0]
 8013d98:	6878      	ldr	r0, [r7, #4]
 8013d9a:	f000 fc02 	bl	80145a2 <USBD_CtlError>
              break;
 8013d9e:	bf00      	nop
          }
          break;
 8013da0:	e0e0      	b.n	8013f64 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013da8:	2b02      	cmp	r3, #2
 8013daa:	d002      	beq.n	8013db2 <USBD_StdEPReq+0xfe>
 8013dac:	2b03      	cmp	r3, #3
 8013dae:	d015      	beq.n	8013ddc <USBD_StdEPReq+0x128>
 8013db0:	e026      	b.n	8013e00 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013db2:	7bbb      	ldrb	r3, [r7, #14]
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d00c      	beq.n	8013dd2 <USBD_StdEPReq+0x11e>
 8013db8:	7bbb      	ldrb	r3, [r7, #14]
 8013dba:	2b80      	cmp	r3, #128	; 0x80
 8013dbc:	d009      	beq.n	8013dd2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8013dbe:	7bbb      	ldrb	r3, [r7, #14]
 8013dc0:	4619      	mov	r1, r3
 8013dc2:	6878      	ldr	r0, [r7, #4]
 8013dc4:	f000 ffeb 	bl	8014d9e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8013dc8:	2180      	movs	r1, #128	; 0x80
 8013dca:	6878      	ldr	r0, [r7, #4]
 8013dcc:	f000 ffe7 	bl	8014d9e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013dd0:	e01c      	b.n	8013e0c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8013dd2:	6839      	ldr	r1, [r7, #0]
 8013dd4:	6878      	ldr	r0, [r7, #4]
 8013dd6:	f000 fbe4 	bl	80145a2 <USBD_CtlError>
              break;
 8013dda:	e017      	b.n	8013e0c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013ddc:	683b      	ldr	r3, [r7, #0]
 8013dde:	885b      	ldrh	r3, [r3, #2]
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d112      	bne.n	8013e0a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8013de4:	7bbb      	ldrb	r3, [r7, #14]
 8013de6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	d004      	beq.n	8013df8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8013dee:	7bbb      	ldrb	r3, [r7, #14]
 8013df0:	4619      	mov	r1, r3
 8013df2:	6878      	ldr	r0, [r7, #4]
 8013df4:	f000 fff2 	bl	8014ddc <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8013df8:	6878      	ldr	r0, [r7, #4]
 8013dfa:	f000 fc7c 	bl	80146f6 <USBD_CtlSendStatus>
              }
              break;
 8013dfe:	e004      	b.n	8013e0a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8013e00:	6839      	ldr	r1, [r7, #0]
 8013e02:	6878      	ldr	r0, [r7, #4]
 8013e04:	f000 fbcd 	bl	80145a2 <USBD_CtlError>
              break;
 8013e08:	e000      	b.n	8013e0c <USBD_StdEPReq+0x158>
              break;
 8013e0a:	bf00      	nop
          }
          break;
 8013e0c:	e0aa      	b.n	8013f64 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013e14:	2b02      	cmp	r3, #2
 8013e16:	d002      	beq.n	8013e1e <USBD_StdEPReq+0x16a>
 8013e18:	2b03      	cmp	r3, #3
 8013e1a:	d032      	beq.n	8013e82 <USBD_StdEPReq+0x1ce>
 8013e1c:	e097      	b.n	8013f4e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013e1e:	7bbb      	ldrb	r3, [r7, #14]
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d007      	beq.n	8013e34 <USBD_StdEPReq+0x180>
 8013e24:	7bbb      	ldrb	r3, [r7, #14]
 8013e26:	2b80      	cmp	r3, #128	; 0x80
 8013e28:	d004      	beq.n	8013e34 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8013e2a:	6839      	ldr	r1, [r7, #0]
 8013e2c:	6878      	ldr	r0, [r7, #4]
 8013e2e:	f000 fbb8 	bl	80145a2 <USBD_CtlError>
                break;
 8013e32:	e091      	b.n	8013f58 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013e34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	da0b      	bge.n	8013e54 <USBD_StdEPReq+0x1a0>
 8013e3c:	7bbb      	ldrb	r3, [r7, #14]
 8013e3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013e42:	4613      	mov	r3, r2
 8013e44:	009b      	lsls	r3, r3, #2
 8013e46:	4413      	add	r3, r2
 8013e48:	009b      	lsls	r3, r3, #2
 8013e4a:	3310      	adds	r3, #16
 8013e4c:	687a      	ldr	r2, [r7, #4]
 8013e4e:	4413      	add	r3, r2
 8013e50:	3304      	adds	r3, #4
 8013e52:	e00b      	b.n	8013e6c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013e54:	7bbb      	ldrb	r3, [r7, #14]
 8013e56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013e5a:	4613      	mov	r3, r2
 8013e5c:	009b      	lsls	r3, r3, #2
 8013e5e:	4413      	add	r3, r2
 8013e60:	009b      	lsls	r3, r3, #2
 8013e62:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8013e66:	687a      	ldr	r2, [r7, #4]
 8013e68:	4413      	add	r3, r2
 8013e6a:	3304      	adds	r3, #4
 8013e6c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8013e6e:	68bb      	ldr	r3, [r7, #8]
 8013e70:	2200      	movs	r2, #0
 8013e72:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8013e74:	68bb      	ldr	r3, [r7, #8]
 8013e76:	2202      	movs	r2, #2
 8013e78:	4619      	mov	r1, r3
 8013e7a:	6878      	ldr	r0, [r7, #4]
 8013e7c:	f000 fbfb 	bl	8014676 <USBD_CtlSendData>
              break;
 8013e80:	e06a      	b.n	8013f58 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8013e82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	da11      	bge.n	8013eae <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8013e8a:	7bbb      	ldrb	r3, [r7, #14]
 8013e8c:	f003 020f 	and.w	r2, r3, #15
 8013e90:	6879      	ldr	r1, [r7, #4]
 8013e92:	4613      	mov	r3, r2
 8013e94:	009b      	lsls	r3, r3, #2
 8013e96:	4413      	add	r3, r2
 8013e98:	009b      	lsls	r3, r3, #2
 8013e9a:	440b      	add	r3, r1
 8013e9c:	3318      	adds	r3, #24
 8013e9e:	681b      	ldr	r3, [r3, #0]
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d117      	bne.n	8013ed4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8013ea4:	6839      	ldr	r1, [r7, #0]
 8013ea6:	6878      	ldr	r0, [r7, #4]
 8013ea8:	f000 fb7b 	bl	80145a2 <USBD_CtlError>
                  break;
 8013eac:	e054      	b.n	8013f58 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8013eae:	7bbb      	ldrb	r3, [r7, #14]
 8013eb0:	f003 020f 	and.w	r2, r3, #15
 8013eb4:	6879      	ldr	r1, [r7, #4]
 8013eb6:	4613      	mov	r3, r2
 8013eb8:	009b      	lsls	r3, r3, #2
 8013eba:	4413      	add	r3, r2
 8013ebc:	009b      	lsls	r3, r3, #2
 8013ebe:	440b      	add	r3, r1
 8013ec0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8013ec4:	681b      	ldr	r3, [r3, #0]
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d104      	bne.n	8013ed4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8013eca:	6839      	ldr	r1, [r7, #0]
 8013ecc:	6878      	ldr	r0, [r7, #4]
 8013ece:	f000 fb68 	bl	80145a2 <USBD_CtlError>
                  break;
 8013ed2:	e041      	b.n	8013f58 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013ed4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	da0b      	bge.n	8013ef4 <USBD_StdEPReq+0x240>
 8013edc:	7bbb      	ldrb	r3, [r7, #14]
 8013ede:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013ee2:	4613      	mov	r3, r2
 8013ee4:	009b      	lsls	r3, r3, #2
 8013ee6:	4413      	add	r3, r2
 8013ee8:	009b      	lsls	r3, r3, #2
 8013eea:	3310      	adds	r3, #16
 8013eec:	687a      	ldr	r2, [r7, #4]
 8013eee:	4413      	add	r3, r2
 8013ef0:	3304      	adds	r3, #4
 8013ef2:	e00b      	b.n	8013f0c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013ef4:	7bbb      	ldrb	r3, [r7, #14]
 8013ef6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013efa:	4613      	mov	r3, r2
 8013efc:	009b      	lsls	r3, r3, #2
 8013efe:	4413      	add	r3, r2
 8013f00:	009b      	lsls	r3, r3, #2
 8013f02:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8013f06:	687a      	ldr	r2, [r7, #4]
 8013f08:	4413      	add	r3, r2
 8013f0a:	3304      	adds	r3, #4
 8013f0c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8013f0e:	7bbb      	ldrb	r3, [r7, #14]
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d002      	beq.n	8013f1a <USBD_StdEPReq+0x266>
 8013f14:	7bbb      	ldrb	r3, [r7, #14]
 8013f16:	2b80      	cmp	r3, #128	; 0x80
 8013f18:	d103      	bne.n	8013f22 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8013f1a:	68bb      	ldr	r3, [r7, #8]
 8013f1c:	2200      	movs	r2, #0
 8013f1e:	601a      	str	r2, [r3, #0]
 8013f20:	e00e      	b.n	8013f40 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8013f22:	7bbb      	ldrb	r3, [r7, #14]
 8013f24:	4619      	mov	r1, r3
 8013f26:	6878      	ldr	r0, [r7, #4]
 8013f28:	f000 ff77 	bl	8014e1a <USBD_LL_IsStallEP>
 8013f2c:	4603      	mov	r3, r0
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d003      	beq.n	8013f3a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8013f32:	68bb      	ldr	r3, [r7, #8]
 8013f34:	2201      	movs	r2, #1
 8013f36:	601a      	str	r2, [r3, #0]
 8013f38:	e002      	b.n	8013f40 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8013f3a:	68bb      	ldr	r3, [r7, #8]
 8013f3c:	2200      	movs	r2, #0
 8013f3e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8013f40:	68bb      	ldr	r3, [r7, #8]
 8013f42:	2202      	movs	r2, #2
 8013f44:	4619      	mov	r1, r3
 8013f46:	6878      	ldr	r0, [r7, #4]
 8013f48:	f000 fb95 	bl	8014676 <USBD_CtlSendData>
              break;
 8013f4c:	e004      	b.n	8013f58 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8013f4e:	6839      	ldr	r1, [r7, #0]
 8013f50:	6878      	ldr	r0, [r7, #4]
 8013f52:	f000 fb26 	bl	80145a2 <USBD_CtlError>
              break;
 8013f56:	bf00      	nop
          }
          break;
 8013f58:	e004      	b.n	8013f64 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8013f5a:	6839      	ldr	r1, [r7, #0]
 8013f5c:	6878      	ldr	r0, [r7, #4]
 8013f5e:	f000 fb20 	bl	80145a2 <USBD_CtlError>
          break;
 8013f62:	bf00      	nop
      }
      break;
 8013f64:	e004      	b.n	8013f70 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8013f66:	6839      	ldr	r1, [r7, #0]
 8013f68:	6878      	ldr	r0, [r7, #4]
 8013f6a:	f000 fb1a 	bl	80145a2 <USBD_CtlError>
      break;
 8013f6e:	bf00      	nop
  }

  return ret;
 8013f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f72:	4618      	mov	r0, r3
 8013f74:	3710      	adds	r7, #16
 8013f76:	46bd      	mov	sp, r7
 8013f78:	bd80      	pop	{r7, pc}
	...

08013f7c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8013f7c:	b580      	push	{r7, lr}
 8013f7e:	b084      	sub	sp, #16
 8013f80:	af00      	add	r7, sp, #0
 8013f82:	6078      	str	r0, [r7, #4]
 8013f84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013f86:	2300      	movs	r3, #0
 8013f88:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8013f8a:	2300      	movs	r3, #0
 8013f8c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8013f8e:	2300      	movs	r3, #0
 8013f90:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8013f92:	683b      	ldr	r3, [r7, #0]
 8013f94:	885b      	ldrh	r3, [r3, #2]
 8013f96:	0a1b      	lsrs	r3, r3, #8
 8013f98:	b29b      	uxth	r3, r3
 8013f9a:	3b01      	subs	r3, #1
 8013f9c:	2b06      	cmp	r3, #6
 8013f9e:	f200 8128 	bhi.w	80141f2 <USBD_GetDescriptor+0x276>
 8013fa2:	a201      	add	r2, pc, #4	; (adr r2, 8013fa8 <USBD_GetDescriptor+0x2c>)
 8013fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013fa8:	08013fc5 	.word	0x08013fc5
 8013fac:	08013fdd 	.word	0x08013fdd
 8013fb0:	0801401d 	.word	0x0801401d
 8013fb4:	080141f3 	.word	0x080141f3
 8013fb8:	080141f3 	.word	0x080141f3
 8013fbc:	08014193 	.word	0x08014193
 8013fc0:	080141bf 	.word	0x080141bf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	687a      	ldr	r2, [r7, #4]
 8013fce:	7c12      	ldrb	r2, [r2, #16]
 8013fd0:	f107 0108 	add.w	r1, r7, #8
 8013fd4:	4610      	mov	r0, r2
 8013fd6:	4798      	blx	r3
 8013fd8:	60f8      	str	r0, [r7, #12]
      break;
 8013fda:	e112      	b.n	8014202 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	7c1b      	ldrb	r3, [r3, #16]
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d10d      	bne.n	8014000 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013fec:	f107 0208 	add.w	r2, r7, #8
 8013ff0:	4610      	mov	r0, r2
 8013ff2:	4798      	blx	r3
 8013ff4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013ff6:	68fb      	ldr	r3, [r7, #12]
 8013ff8:	3301      	adds	r3, #1
 8013ffa:	2202      	movs	r2, #2
 8013ffc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8013ffe:	e100      	b.n	8014202 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014008:	f107 0208 	add.w	r2, r7, #8
 801400c:	4610      	mov	r0, r2
 801400e:	4798      	blx	r3
 8014010:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014012:	68fb      	ldr	r3, [r7, #12]
 8014014:	3301      	adds	r3, #1
 8014016:	2202      	movs	r2, #2
 8014018:	701a      	strb	r2, [r3, #0]
      break;
 801401a:	e0f2      	b.n	8014202 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801401c:	683b      	ldr	r3, [r7, #0]
 801401e:	885b      	ldrh	r3, [r3, #2]
 8014020:	b2db      	uxtb	r3, r3
 8014022:	2b05      	cmp	r3, #5
 8014024:	f200 80ac 	bhi.w	8014180 <USBD_GetDescriptor+0x204>
 8014028:	a201      	add	r2, pc, #4	; (adr r2, 8014030 <USBD_GetDescriptor+0xb4>)
 801402a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801402e:	bf00      	nop
 8014030:	08014049 	.word	0x08014049
 8014034:	0801407d 	.word	0x0801407d
 8014038:	080140b1 	.word	0x080140b1
 801403c:	080140e5 	.word	0x080140e5
 8014040:	08014119 	.word	0x08014119
 8014044:	0801414d 	.word	0x0801414d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801404e:	685b      	ldr	r3, [r3, #4]
 8014050:	2b00      	cmp	r3, #0
 8014052:	d00b      	beq.n	801406c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801405a:	685b      	ldr	r3, [r3, #4]
 801405c:	687a      	ldr	r2, [r7, #4]
 801405e:	7c12      	ldrb	r2, [r2, #16]
 8014060:	f107 0108 	add.w	r1, r7, #8
 8014064:	4610      	mov	r0, r2
 8014066:	4798      	blx	r3
 8014068:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801406a:	e091      	b.n	8014190 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801406c:	6839      	ldr	r1, [r7, #0]
 801406e:	6878      	ldr	r0, [r7, #4]
 8014070:	f000 fa97 	bl	80145a2 <USBD_CtlError>
            err++;
 8014074:	7afb      	ldrb	r3, [r7, #11]
 8014076:	3301      	adds	r3, #1
 8014078:	72fb      	strb	r3, [r7, #11]
          break;
 801407a:	e089      	b.n	8014190 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014082:	689b      	ldr	r3, [r3, #8]
 8014084:	2b00      	cmp	r3, #0
 8014086:	d00b      	beq.n	80140a0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801408e:	689b      	ldr	r3, [r3, #8]
 8014090:	687a      	ldr	r2, [r7, #4]
 8014092:	7c12      	ldrb	r2, [r2, #16]
 8014094:	f107 0108 	add.w	r1, r7, #8
 8014098:	4610      	mov	r0, r2
 801409a:	4798      	blx	r3
 801409c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801409e:	e077      	b.n	8014190 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80140a0:	6839      	ldr	r1, [r7, #0]
 80140a2:	6878      	ldr	r0, [r7, #4]
 80140a4:	f000 fa7d 	bl	80145a2 <USBD_CtlError>
            err++;
 80140a8:	7afb      	ldrb	r3, [r7, #11]
 80140aa:	3301      	adds	r3, #1
 80140ac:	72fb      	strb	r3, [r7, #11]
          break;
 80140ae:	e06f      	b.n	8014190 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80140b6:	68db      	ldr	r3, [r3, #12]
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d00b      	beq.n	80140d4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80140c2:	68db      	ldr	r3, [r3, #12]
 80140c4:	687a      	ldr	r2, [r7, #4]
 80140c6:	7c12      	ldrb	r2, [r2, #16]
 80140c8:	f107 0108 	add.w	r1, r7, #8
 80140cc:	4610      	mov	r0, r2
 80140ce:	4798      	blx	r3
 80140d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80140d2:	e05d      	b.n	8014190 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80140d4:	6839      	ldr	r1, [r7, #0]
 80140d6:	6878      	ldr	r0, [r7, #4]
 80140d8:	f000 fa63 	bl	80145a2 <USBD_CtlError>
            err++;
 80140dc:	7afb      	ldrb	r3, [r7, #11]
 80140de:	3301      	adds	r3, #1
 80140e0:	72fb      	strb	r3, [r7, #11]
          break;
 80140e2:	e055      	b.n	8014190 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80140ea:	691b      	ldr	r3, [r3, #16]
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d00b      	beq.n	8014108 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80140f6:	691b      	ldr	r3, [r3, #16]
 80140f8:	687a      	ldr	r2, [r7, #4]
 80140fa:	7c12      	ldrb	r2, [r2, #16]
 80140fc:	f107 0108 	add.w	r1, r7, #8
 8014100:	4610      	mov	r0, r2
 8014102:	4798      	blx	r3
 8014104:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014106:	e043      	b.n	8014190 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014108:	6839      	ldr	r1, [r7, #0]
 801410a:	6878      	ldr	r0, [r7, #4]
 801410c:	f000 fa49 	bl	80145a2 <USBD_CtlError>
            err++;
 8014110:	7afb      	ldrb	r3, [r7, #11]
 8014112:	3301      	adds	r3, #1
 8014114:	72fb      	strb	r3, [r7, #11]
          break;
 8014116:	e03b      	b.n	8014190 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801411e:	695b      	ldr	r3, [r3, #20]
 8014120:	2b00      	cmp	r3, #0
 8014122:	d00b      	beq.n	801413c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801412a:	695b      	ldr	r3, [r3, #20]
 801412c:	687a      	ldr	r2, [r7, #4]
 801412e:	7c12      	ldrb	r2, [r2, #16]
 8014130:	f107 0108 	add.w	r1, r7, #8
 8014134:	4610      	mov	r0, r2
 8014136:	4798      	blx	r3
 8014138:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801413a:	e029      	b.n	8014190 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801413c:	6839      	ldr	r1, [r7, #0]
 801413e:	6878      	ldr	r0, [r7, #4]
 8014140:	f000 fa2f 	bl	80145a2 <USBD_CtlError>
            err++;
 8014144:	7afb      	ldrb	r3, [r7, #11]
 8014146:	3301      	adds	r3, #1
 8014148:	72fb      	strb	r3, [r7, #11]
          break;
 801414a:	e021      	b.n	8014190 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014152:	699b      	ldr	r3, [r3, #24]
 8014154:	2b00      	cmp	r3, #0
 8014156:	d00b      	beq.n	8014170 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801415e:	699b      	ldr	r3, [r3, #24]
 8014160:	687a      	ldr	r2, [r7, #4]
 8014162:	7c12      	ldrb	r2, [r2, #16]
 8014164:	f107 0108 	add.w	r1, r7, #8
 8014168:	4610      	mov	r0, r2
 801416a:	4798      	blx	r3
 801416c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801416e:	e00f      	b.n	8014190 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014170:	6839      	ldr	r1, [r7, #0]
 8014172:	6878      	ldr	r0, [r7, #4]
 8014174:	f000 fa15 	bl	80145a2 <USBD_CtlError>
            err++;
 8014178:	7afb      	ldrb	r3, [r7, #11]
 801417a:	3301      	adds	r3, #1
 801417c:	72fb      	strb	r3, [r7, #11]
          break;
 801417e:	e007      	b.n	8014190 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8014180:	6839      	ldr	r1, [r7, #0]
 8014182:	6878      	ldr	r0, [r7, #4]
 8014184:	f000 fa0d 	bl	80145a2 <USBD_CtlError>
          err++;
 8014188:	7afb      	ldrb	r3, [r7, #11]
 801418a:	3301      	adds	r3, #1
 801418c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 801418e:	e038      	b.n	8014202 <USBD_GetDescriptor+0x286>
 8014190:	e037      	b.n	8014202 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	7c1b      	ldrb	r3, [r3, #16]
 8014196:	2b00      	cmp	r3, #0
 8014198:	d109      	bne.n	80141ae <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80141a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80141a2:	f107 0208 	add.w	r2, r7, #8
 80141a6:	4610      	mov	r0, r2
 80141a8:	4798      	blx	r3
 80141aa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80141ac:	e029      	b.n	8014202 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80141ae:	6839      	ldr	r1, [r7, #0]
 80141b0:	6878      	ldr	r0, [r7, #4]
 80141b2:	f000 f9f6 	bl	80145a2 <USBD_CtlError>
        err++;
 80141b6:	7afb      	ldrb	r3, [r7, #11]
 80141b8:	3301      	adds	r3, #1
 80141ba:	72fb      	strb	r3, [r7, #11]
      break;
 80141bc:	e021      	b.n	8014202 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	7c1b      	ldrb	r3, [r3, #16]
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d10d      	bne.n	80141e2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80141cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80141ce:	f107 0208 	add.w	r2, r7, #8
 80141d2:	4610      	mov	r0, r2
 80141d4:	4798      	blx	r3
 80141d6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	3301      	adds	r3, #1
 80141dc:	2207      	movs	r2, #7
 80141de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80141e0:	e00f      	b.n	8014202 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80141e2:	6839      	ldr	r1, [r7, #0]
 80141e4:	6878      	ldr	r0, [r7, #4]
 80141e6:	f000 f9dc 	bl	80145a2 <USBD_CtlError>
        err++;
 80141ea:	7afb      	ldrb	r3, [r7, #11]
 80141ec:	3301      	adds	r3, #1
 80141ee:	72fb      	strb	r3, [r7, #11]
      break;
 80141f0:	e007      	b.n	8014202 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80141f2:	6839      	ldr	r1, [r7, #0]
 80141f4:	6878      	ldr	r0, [r7, #4]
 80141f6:	f000 f9d4 	bl	80145a2 <USBD_CtlError>
      err++;
 80141fa:	7afb      	ldrb	r3, [r7, #11]
 80141fc:	3301      	adds	r3, #1
 80141fe:	72fb      	strb	r3, [r7, #11]
      break;
 8014200:	bf00      	nop
  }

  if (err != 0U)
 8014202:	7afb      	ldrb	r3, [r7, #11]
 8014204:	2b00      	cmp	r3, #0
 8014206:	d11c      	bne.n	8014242 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8014208:	893b      	ldrh	r3, [r7, #8]
 801420a:	2b00      	cmp	r3, #0
 801420c:	d011      	beq.n	8014232 <USBD_GetDescriptor+0x2b6>
 801420e:	683b      	ldr	r3, [r7, #0]
 8014210:	88db      	ldrh	r3, [r3, #6]
 8014212:	2b00      	cmp	r3, #0
 8014214:	d00d      	beq.n	8014232 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8014216:	683b      	ldr	r3, [r7, #0]
 8014218:	88da      	ldrh	r2, [r3, #6]
 801421a:	893b      	ldrh	r3, [r7, #8]
 801421c:	4293      	cmp	r3, r2
 801421e:	bf28      	it	cs
 8014220:	4613      	movcs	r3, r2
 8014222:	b29b      	uxth	r3, r3
 8014224:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8014226:	893b      	ldrh	r3, [r7, #8]
 8014228:	461a      	mov	r2, r3
 801422a:	68f9      	ldr	r1, [r7, #12]
 801422c:	6878      	ldr	r0, [r7, #4]
 801422e:	f000 fa22 	bl	8014676 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8014232:	683b      	ldr	r3, [r7, #0]
 8014234:	88db      	ldrh	r3, [r3, #6]
 8014236:	2b00      	cmp	r3, #0
 8014238:	d104      	bne.n	8014244 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 801423a:	6878      	ldr	r0, [r7, #4]
 801423c:	f000 fa5b 	bl	80146f6 <USBD_CtlSendStatus>
 8014240:	e000      	b.n	8014244 <USBD_GetDescriptor+0x2c8>
    return;
 8014242:	bf00      	nop
    }
  }
}
 8014244:	3710      	adds	r7, #16
 8014246:	46bd      	mov	sp, r7
 8014248:	bd80      	pop	{r7, pc}
 801424a:	bf00      	nop

0801424c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801424c:	b580      	push	{r7, lr}
 801424e:	b084      	sub	sp, #16
 8014250:	af00      	add	r7, sp, #0
 8014252:	6078      	str	r0, [r7, #4]
 8014254:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8014256:	683b      	ldr	r3, [r7, #0]
 8014258:	889b      	ldrh	r3, [r3, #4]
 801425a:	2b00      	cmp	r3, #0
 801425c:	d130      	bne.n	80142c0 <USBD_SetAddress+0x74>
 801425e:	683b      	ldr	r3, [r7, #0]
 8014260:	88db      	ldrh	r3, [r3, #6]
 8014262:	2b00      	cmp	r3, #0
 8014264:	d12c      	bne.n	80142c0 <USBD_SetAddress+0x74>
 8014266:	683b      	ldr	r3, [r7, #0]
 8014268:	885b      	ldrh	r3, [r3, #2]
 801426a:	2b7f      	cmp	r3, #127	; 0x7f
 801426c:	d828      	bhi.n	80142c0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801426e:	683b      	ldr	r3, [r7, #0]
 8014270:	885b      	ldrh	r3, [r3, #2]
 8014272:	b2db      	uxtb	r3, r3
 8014274:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014278:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014280:	2b03      	cmp	r3, #3
 8014282:	d104      	bne.n	801428e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8014284:	6839      	ldr	r1, [r7, #0]
 8014286:	6878      	ldr	r0, [r7, #4]
 8014288:	f000 f98b 	bl	80145a2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801428c:	e01d      	b.n	80142ca <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	7bfa      	ldrb	r2, [r7, #15]
 8014292:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014296:	7bfb      	ldrb	r3, [r7, #15]
 8014298:	4619      	mov	r1, r3
 801429a:	6878      	ldr	r0, [r7, #4]
 801429c:	f000 fde9 	bl	8014e72 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80142a0:	6878      	ldr	r0, [r7, #4]
 80142a2:	f000 fa28 	bl	80146f6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80142a6:	7bfb      	ldrb	r3, [r7, #15]
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d004      	beq.n	80142b6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	2202      	movs	r2, #2
 80142b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80142b4:	e009      	b.n	80142ca <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	2201      	movs	r2, #1
 80142ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80142be:	e004      	b.n	80142ca <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80142c0:	6839      	ldr	r1, [r7, #0]
 80142c2:	6878      	ldr	r0, [r7, #4]
 80142c4:	f000 f96d 	bl	80145a2 <USBD_CtlError>
  }
}
 80142c8:	bf00      	nop
 80142ca:	bf00      	nop
 80142cc:	3710      	adds	r7, #16
 80142ce:	46bd      	mov	sp, r7
 80142d0:	bd80      	pop	{r7, pc}
	...

080142d4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80142d4:	b580      	push	{r7, lr}
 80142d6:	b082      	sub	sp, #8
 80142d8:	af00      	add	r7, sp, #0
 80142da:	6078      	str	r0, [r7, #4]
 80142dc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80142de:	683b      	ldr	r3, [r7, #0]
 80142e0:	885b      	ldrh	r3, [r3, #2]
 80142e2:	b2da      	uxtb	r2, r3
 80142e4:	4b41      	ldr	r3, [pc, #260]	; (80143ec <USBD_SetConfig+0x118>)
 80142e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80142e8:	4b40      	ldr	r3, [pc, #256]	; (80143ec <USBD_SetConfig+0x118>)
 80142ea:	781b      	ldrb	r3, [r3, #0]
 80142ec:	2b01      	cmp	r3, #1
 80142ee:	d904      	bls.n	80142fa <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80142f0:	6839      	ldr	r1, [r7, #0]
 80142f2:	6878      	ldr	r0, [r7, #4]
 80142f4:	f000 f955 	bl	80145a2 <USBD_CtlError>
 80142f8:	e075      	b.n	80143e6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014300:	2b02      	cmp	r3, #2
 8014302:	d002      	beq.n	801430a <USBD_SetConfig+0x36>
 8014304:	2b03      	cmp	r3, #3
 8014306:	d023      	beq.n	8014350 <USBD_SetConfig+0x7c>
 8014308:	e062      	b.n	80143d0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 801430a:	4b38      	ldr	r3, [pc, #224]	; (80143ec <USBD_SetConfig+0x118>)
 801430c:	781b      	ldrb	r3, [r3, #0]
 801430e:	2b00      	cmp	r3, #0
 8014310:	d01a      	beq.n	8014348 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8014312:	4b36      	ldr	r3, [pc, #216]	; (80143ec <USBD_SetConfig+0x118>)
 8014314:	781b      	ldrb	r3, [r3, #0]
 8014316:	461a      	mov	r2, r3
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	2203      	movs	r2, #3
 8014320:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8014324:	4b31      	ldr	r3, [pc, #196]	; (80143ec <USBD_SetConfig+0x118>)
 8014326:	781b      	ldrb	r3, [r3, #0]
 8014328:	4619      	mov	r1, r3
 801432a:	6878      	ldr	r0, [r7, #4]
 801432c:	f7ff f9e8 	bl	8013700 <USBD_SetClassConfig>
 8014330:	4603      	mov	r3, r0
 8014332:	2b02      	cmp	r3, #2
 8014334:	d104      	bne.n	8014340 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8014336:	6839      	ldr	r1, [r7, #0]
 8014338:	6878      	ldr	r0, [r7, #4]
 801433a:	f000 f932 	bl	80145a2 <USBD_CtlError>
            return;
 801433e:	e052      	b.n	80143e6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8014340:	6878      	ldr	r0, [r7, #4]
 8014342:	f000 f9d8 	bl	80146f6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8014346:	e04e      	b.n	80143e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8014348:	6878      	ldr	r0, [r7, #4]
 801434a:	f000 f9d4 	bl	80146f6 <USBD_CtlSendStatus>
        break;
 801434e:	e04a      	b.n	80143e6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8014350:	4b26      	ldr	r3, [pc, #152]	; (80143ec <USBD_SetConfig+0x118>)
 8014352:	781b      	ldrb	r3, [r3, #0]
 8014354:	2b00      	cmp	r3, #0
 8014356:	d112      	bne.n	801437e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	2202      	movs	r2, #2
 801435c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8014360:	4b22      	ldr	r3, [pc, #136]	; (80143ec <USBD_SetConfig+0x118>)
 8014362:	781b      	ldrb	r3, [r3, #0]
 8014364:	461a      	mov	r2, r3
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801436a:	4b20      	ldr	r3, [pc, #128]	; (80143ec <USBD_SetConfig+0x118>)
 801436c:	781b      	ldrb	r3, [r3, #0]
 801436e:	4619      	mov	r1, r3
 8014370:	6878      	ldr	r0, [r7, #4]
 8014372:	f7ff f9e4 	bl	801373e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8014376:	6878      	ldr	r0, [r7, #4]
 8014378:	f000 f9bd 	bl	80146f6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801437c:	e033      	b.n	80143e6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 801437e:	4b1b      	ldr	r3, [pc, #108]	; (80143ec <USBD_SetConfig+0x118>)
 8014380:	781b      	ldrb	r3, [r3, #0]
 8014382:	461a      	mov	r2, r3
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	685b      	ldr	r3, [r3, #4]
 8014388:	429a      	cmp	r2, r3
 801438a:	d01d      	beq.n	80143c8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	685b      	ldr	r3, [r3, #4]
 8014390:	b2db      	uxtb	r3, r3
 8014392:	4619      	mov	r1, r3
 8014394:	6878      	ldr	r0, [r7, #4]
 8014396:	f7ff f9d2 	bl	801373e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 801439a:	4b14      	ldr	r3, [pc, #80]	; (80143ec <USBD_SetConfig+0x118>)
 801439c:	781b      	ldrb	r3, [r3, #0]
 801439e:	461a      	mov	r2, r3
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80143a4:	4b11      	ldr	r3, [pc, #68]	; (80143ec <USBD_SetConfig+0x118>)
 80143a6:	781b      	ldrb	r3, [r3, #0]
 80143a8:	4619      	mov	r1, r3
 80143aa:	6878      	ldr	r0, [r7, #4]
 80143ac:	f7ff f9a8 	bl	8013700 <USBD_SetClassConfig>
 80143b0:	4603      	mov	r3, r0
 80143b2:	2b02      	cmp	r3, #2
 80143b4:	d104      	bne.n	80143c0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80143b6:	6839      	ldr	r1, [r7, #0]
 80143b8:	6878      	ldr	r0, [r7, #4]
 80143ba:	f000 f8f2 	bl	80145a2 <USBD_CtlError>
            return;
 80143be:	e012      	b.n	80143e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80143c0:	6878      	ldr	r0, [r7, #4]
 80143c2:	f000 f998 	bl	80146f6 <USBD_CtlSendStatus>
        break;
 80143c6:	e00e      	b.n	80143e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80143c8:	6878      	ldr	r0, [r7, #4]
 80143ca:	f000 f994 	bl	80146f6 <USBD_CtlSendStatus>
        break;
 80143ce:	e00a      	b.n	80143e6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80143d0:	6839      	ldr	r1, [r7, #0]
 80143d2:	6878      	ldr	r0, [r7, #4]
 80143d4:	f000 f8e5 	bl	80145a2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80143d8:	4b04      	ldr	r3, [pc, #16]	; (80143ec <USBD_SetConfig+0x118>)
 80143da:	781b      	ldrb	r3, [r3, #0]
 80143dc:	4619      	mov	r1, r3
 80143de:	6878      	ldr	r0, [r7, #4]
 80143e0:	f7ff f9ad 	bl	801373e <USBD_ClrClassConfig>
        break;
 80143e4:	bf00      	nop
    }
  }
}
 80143e6:	3708      	adds	r7, #8
 80143e8:	46bd      	mov	sp, r7
 80143ea:	bd80      	pop	{r7, pc}
 80143ec:	200001c4 	.word	0x200001c4

080143f0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80143f0:	b580      	push	{r7, lr}
 80143f2:	b082      	sub	sp, #8
 80143f4:	af00      	add	r7, sp, #0
 80143f6:	6078      	str	r0, [r7, #4]
 80143f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80143fa:	683b      	ldr	r3, [r7, #0]
 80143fc:	88db      	ldrh	r3, [r3, #6]
 80143fe:	2b01      	cmp	r3, #1
 8014400:	d004      	beq.n	801440c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8014402:	6839      	ldr	r1, [r7, #0]
 8014404:	6878      	ldr	r0, [r7, #4]
 8014406:	f000 f8cc 	bl	80145a2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801440a:	e022      	b.n	8014452 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014412:	2b02      	cmp	r3, #2
 8014414:	dc02      	bgt.n	801441c <USBD_GetConfig+0x2c>
 8014416:	2b00      	cmp	r3, #0
 8014418:	dc03      	bgt.n	8014422 <USBD_GetConfig+0x32>
 801441a:	e015      	b.n	8014448 <USBD_GetConfig+0x58>
 801441c:	2b03      	cmp	r3, #3
 801441e:	d00b      	beq.n	8014438 <USBD_GetConfig+0x48>
 8014420:	e012      	b.n	8014448 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	2200      	movs	r2, #0
 8014426:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	3308      	adds	r3, #8
 801442c:	2201      	movs	r2, #1
 801442e:	4619      	mov	r1, r3
 8014430:	6878      	ldr	r0, [r7, #4]
 8014432:	f000 f920 	bl	8014676 <USBD_CtlSendData>
        break;
 8014436:	e00c      	b.n	8014452 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	3304      	adds	r3, #4
 801443c:	2201      	movs	r2, #1
 801443e:	4619      	mov	r1, r3
 8014440:	6878      	ldr	r0, [r7, #4]
 8014442:	f000 f918 	bl	8014676 <USBD_CtlSendData>
        break;
 8014446:	e004      	b.n	8014452 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8014448:	6839      	ldr	r1, [r7, #0]
 801444a:	6878      	ldr	r0, [r7, #4]
 801444c:	f000 f8a9 	bl	80145a2 <USBD_CtlError>
        break;
 8014450:	bf00      	nop
}
 8014452:	bf00      	nop
 8014454:	3708      	adds	r7, #8
 8014456:	46bd      	mov	sp, r7
 8014458:	bd80      	pop	{r7, pc}

0801445a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801445a:	b580      	push	{r7, lr}
 801445c:	b082      	sub	sp, #8
 801445e:	af00      	add	r7, sp, #0
 8014460:	6078      	str	r0, [r7, #4]
 8014462:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801446a:	3b01      	subs	r3, #1
 801446c:	2b02      	cmp	r3, #2
 801446e:	d81e      	bhi.n	80144ae <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014470:	683b      	ldr	r3, [r7, #0]
 8014472:	88db      	ldrh	r3, [r3, #6]
 8014474:	2b02      	cmp	r3, #2
 8014476:	d004      	beq.n	8014482 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8014478:	6839      	ldr	r1, [r7, #0]
 801447a:	6878      	ldr	r0, [r7, #4]
 801447c:	f000 f891 	bl	80145a2 <USBD_CtlError>
        break;
 8014480:	e01a      	b.n	80144b8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	2201      	movs	r2, #1
 8014486:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801448e:	2b00      	cmp	r3, #0
 8014490:	d005      	beq.n	801449e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	68db      	ldr	r3, [r3, #12]
 8014496:	f043 0202 	orr.w	r2, r3, #2
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	330c      	adds	r3, #12
 80144a2:	2202      	movs	r2, #2
 80144a4:	4619      	mov	r1, r3
 80144a6:	6878      	ldr	r0, [r7, #4]
 80144a8:	f000 f8e5 	bl	8014676 <USBD_CtlSendData>
      break;
 80144ac:	e004      	b.n	80144b8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80144ae:	6839      	ldr	r1, [r7, #0]
 80144b0:	6878      	ldr	r0, [r7, #4]
 80144b2:	f000 f876 	bl	80145a2 <USBD_CtlError>
      break;
 80144b6:	bf00      	nop
  }
}
 80144b8:	bf00      	nop
 80144ba:	3708      	adds	r7, #8
 80144bc:	46bd      	mov	sp, r7
 80144be:	bd80      	pop	{r7, pc}

080144c0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80144c0:	b580      	push	{r7, lr}
 80144c2:	b082      	sub	sp, #8
 80144c4:	af00      	add	r7, sp, #0
 80144c6:	6078      	str	r0, [r7, #4]
 80144c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80144ca:	683b      	ldr	r3, [r7, #0]
 80144cc:	885b      	ldrh	r3, [r3, #2]
 80144ce:	2b01      	cmp	r3, #1
 80144d0:	d106      	bne.n	80144e0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	2201      	movs	r2, #1
 80144d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80144da:	6878      	ldr	r0, [r7, #4]
 80144dc:	f000 f90b 	bl	80146f6 <USBD_CtlSendStatus>
  }
}
 80144e0:	bf00      	nop
 80144e2:	3708      	adds	r7, #8
 80144e4:	46bd      	mov	sp, r7
 80144e6:	bd80      	pop	{r7, pc}

080144e8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80144e8:	b580      	push	{r7, lr}
 80144ea:	b082      	sub	sp, #8
 80144ec:	af00      	add	r7, sp, #0
 80144ee:	6078      	str	r0, [r7, #4]
 80144f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80144f8:	3b01      	subs	r3, #1
 80144fa:	2b02      	cmp	r3, #2
 80144fc:	d80b      	bhi.n	8014516 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80144fe:	683b      	ldr	r3, [r7, #0]
 8014500:	885b      	ldrh	r3, [r3, #2]
 8014502:	2b01      	cmp	r3, #1
 8014504:	d10c      	bne.n	8014520 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	2200      	movs	r2, #0
 801450a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 801450e:	6878      	ldr	r0, [r7, #4]
 8014510:	f000 f8f1 	bl	80146f6 <USBD_CtlSendStatus>
      }
      break;
 8014514:	e004      	b.n	8014520 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8014516:	6839      	ldr	r1, [r7, #0]
 8014518:	6878      	ldr	r0, [r7, #4]
 801451a:	f000 f842 	bl	80145a2 <USBD_CtlError>
      break;
 801451e:	e000      	b.n	8014522 <USBD_ClrFeature+0x3a>
      break;
 8014520:	bf00      	nop
  }
}
 8014522:	bf00      	nop
 8014524:	3708      	adds	r7, #8
 8014526:	46bd      	mov	sp, r7
 8014528:	bd80      	pop	{r7, pc}

0801452a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801452a:	b480      	push	{r7}
 801452c:	b083      	sub	sp, #12
 801452e:	af00      	add	r7, sp, #0
 8014530:	6078      	str	r0, [r7, #4]
 8014532:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8014534:	683b      	ldr	r3, [r7, #0]
 8014536:	781a      	ldrb	r2, [r3, #0]
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 801453c:	683b      	ldr	r3, [r7, #0]
 801453e:	785a      	ldrb	r2, [r3, #1]
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8014544:	683b      	ldr	r3, [r7, #0]
 8014546:	3302      	adds	r3, #2
 8014548:	781b      	ldrb	r3, [r3, #0]
 801454a:	b29a      	uxth	r2, r3
 801454c:	683b      	ldr	r3, [r7, #0]
 801454e:	3303      	adds	r3, #3
 8014550:	781b      	ldrb	r3, [r3, #0]
 8014552:	b29b      	uxth	r3, r3
 8014554:	021b      	lsls	r3, r3, #8
 8014556:	b29b      	uxth	r3, r3
 8014558:	4413      	add	r3, r2
 801455a:	b29a      	uxth	r2, r3
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8014560:	683b      	ldr	r3, [r7, #0]
 8014562:	3304      	adds	r3, #4
 8014564:	781b      	ldrb	r3, [r3, #0]
 8014566:	b29a      	uxth	r2, r3
 8014568:	683b      	ldr	r3, [r7, #0]
 801456a:	3305      	adds	r3, #5
 801456c:	781b      	ldrb	r3, [r3, #0]
 801456e:	b29b      	uxth	r3, r3
 8014570:	021b      	lsls	r3, r3, #8
 8014572:	b29b      	uxth	r3, r3
 8014574:	4413      	add	r3, r2
 8014576:	b29a      	uxth	r2, r3
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 801457c:	683b      	ldr	r3, [r7, #0]
 801457e:	3306      	adds	r3, #6
 8014580:	781b      	ldrb	r3, [r3, #0]
 8014582:	b29a      	uxth	r2, r3
 8014584:	683b      	ldr	r3, [r7, #0]
 8014586:	3307      	adds	r3, #7
 8014588:	781b      	ldrb	r3, [r3, #0]
 801458a:	b29b      	uxth	r3, r3
 801458c:	021b      	lsls	r3, r3, #8
 801458e:	b29b      	uxth	r3, r3
 8014590:	4413      	add	r3, r2
 8014592:	b29a      	uxth	r2, r3
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	80da      	strh	r2, [r3, #6]

}
 8014598:	bf00      	nop
 801459a:	370c      	adds	r7, #12
 801459c:	46bd      	mov	sp, r7
 801459e:	bc80      	pop	{r7}
 80145a0:	4770      	bx	lr

080145a2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80145a2:	b580      	push	{r7, lr}
 80145a4:	b082      	sub	sp, #8
 80145a6:	af00      	add	r7, sp, #0
 80145a8:	6078      	str	r0, [r7, #4]
 80145aa:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80145ac:	2180      	movs	r1, #128	; 0x80
 80145ae:	6878      	ldr	r0, [r7, #4]
 80145b0:	f000 fbf5 	bl	8014d9e <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80145b4:	2100      	movs	r1, #0
 80145b6:	6878      	ldr	r0, [r7, #4]
 80145b8:	f000 fbf1 	bl	8014d9e <USBD_LL_StallEP>
}
 80145bc:	bf00      	nop
 80145be:	3708      	adds	r7, #8
 80145c0:	46bd      	mov	sp, r7
 80145c2:	bd80      	pop	{r7, pc}

080145c4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80145c4:	b580      	push	{r7, lr}
 80145c6:	b086      	sub	sp, #24
 80145c8:	af00      	add	r7, sp, #0
 80145ca:	60f8      	str	r0, [r7, #12]
 80145cc:	60b9      	str	r1, [r7, #8]
 80145ce:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80145d0:	2300      	movs	r3, #0
 80145d2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80145d4:	68fb      	ldr	r3, [r7, #12]
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d032      	beq.n	8014640 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80145da:	68f8      	ldr	r0, [r7, #12]
 80145dc:	f000 f834 	bl	8014648 <USBD_GetLen>
 80145e0:	4603      	mov	r3, r0
 80145e2:	3301      	adds	r3, #1
 80145e4:	b29b      	uxth	r3, r3
 80145e6:	005b      	lsls	r3, r3, #1
 80145e8:	b29a      	uxth	r2, r3
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80145ee:	7dfb      	ldrb	r3, [r7, #23]
 80145f0:	1c5a      	adds	r2, r3, #1
 80145f2:	75fa      	strb	r2, [r7, #23]
 80145f4:	461a      	mov	r2, r3
 80145f6:	68bb      	ldr	r3, [r7, #8]
 80145f8:	4413      	add	r3, r2
 80145fa:	687a      	ldr	r2, [r7, #4]
 80145fc:	7812      	ldrb	r2, [r2, #0]
 80145fe:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8014600:	7dfb      	ldrb	r3, [r7, #23]
 8014602:	1c5a      	adds	r2, r3, #1
 8014604:	75fa      	strb	r2, [r7, #23]
 8014606:	461a      	mov	r2, r3
 8014608:	68bb      	ldr	r3, [r7, #8]
 801460a:	4413      	add	r3, r2
 801460c:	2203      	movs	r2, #3
 801460e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8014610:	e012      	b.n	8014638 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8014612:	68fb      	ldr	r3, [r7, #12]
 8014614:	1c5a      	adds	r2, r3, #1
 8014616:	60fa      	str	r2, [r7, #12]
 8014618:	7dfa      	ldrb	r2, [r7, #23]
 801461a:	1c51      	adds	r1, r2, #1
 801461c:	75f9      	strb	r1, [r7, #23]
 801461e:	4611      	mov	r1, r2
 8014620:	68ba      	ldr	r2, [r7, #8]
 8014622:	440a      	add	r2, r1
 8014624:	781b      	ldrb	r3, [r3, #0]
 8014626:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8014628:	7dfb      	ldrb	r3, [r7, #23]
 801462a:	1c5a      	adds	r2, r3, #1
 801462c:	75fa      	strb	r2, [r7, #23]
 801462e:	461a      	mov	r2, r3
 8014630:	68bb      	ldr	r3, [r7, #8]
 8014632:	4413      	add	r3, r2
 8014634:	2200      	movs	r2, #0
 8014636:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8014638:	68fb      	ldr	r3, [r7, #12]
 801463a:	781b      	ldrb	r3, [r3, #0]
 801463c:	2b00      	cmp	r3, #0
 801463e:	d1e8      	bne.n	8014612 <USBD_GetString+0x4e>
    }
  }
}
 8014640:	bf00      	nop
 8014642:	3718      	adds	r7, #24
 8014644:	46bd      	mov	sp, r7
 8014646:	bd80      	pop	{r7, pc}

08014648 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8014648:	b480      	push	{r7}
 801464a:	b085      	sub	sp, #20
 801464c:	af00      	add	r7, sp, #0
 801464e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8014650:	2300      	movs	r3, #0
 8014652:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8014654:	e005      	b.n	8014662 <USBD_GetLen+0x1a>
  {
    len++;
 8014656:	7bfb      	ldrb	r3, [r7, #15]
 8014658:	3301      	adds	r3, #1
 801465a:	73fb      	strb	r3, [r7, #15]
    buf++;
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	3301      	adds	r3, #1
 8014660:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	781b      	ldrb	r3, [r3, #0]
 8014666:	2b00      	cmp	r3, #0
 8014668:	d1f5      	bne.n	8014656 <USBD_GetLen+0xe>
  }

  return len;
 801466a:	7bfb      	ldrb	r3, [r7, #15]
}
 801466c:	4618      	mov	r0, r3
 801466e:	3714      	adds	r7, #20
 8014670:	46bd      	mov	sp, r7
 8014672:	bc80      	pop	{r7}
 8014674:	4770      	bx	lr

08014676 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8014676:	b580      	push	{r7, lr}
 8014678:	b084      	sub	sp, #16
 801467a:	af00      	add	r7, sp, #0
 801467c:	60f8      	str	r0, [r7, #12]
 801467e:	60b9      	str	r1, [r7, #8]
 8014680:	4613      	mov	r3, r2
 8014682:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014684:	68fb      	ldr	r3, [r7, #12]
 8014686:	2202      	movs	r2, #2
 8014688:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801468c:	88fa      	ldrh	r2, [r7, #6]
 801468e:	68fb      	ldr	r3, [r7, #12]
 8014690:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8014692:	88fa      	ldrh	r2, [r7, #6]
 8014694:	68fb      	ldr	r3, [r7, #12]
 8014696:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014698:	88fb      	ldrh	r3, [r7, #6]
 801469a:	68ba      	ldr	r2, [r7, #8]
 801469c:	2100      	movs	r1, #0
 801469e:	68f8      	ldr	r0, [r7, #12]
 80146a0:	f000 fc06 	bl	8014eb0 <USBD_LL_Transmit>

  return USBD_OK;
 80146a4:	2300      	movs	r3, #0
}
 80146a6:	4618      	mov	r0, r3
 80146a8:	3710      	adds	r7, #16
 80146aa:	46bd      	mov	sp, r7
 80146ac:	bd80      	pop	{r7, pc}

080146ae <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80146ae:	b580      	push	{r7, lr}
 80146b0:	b084      	sub	sp, #16
 80146b2:	af00      	add	r7, sp, #0
 80146b4:	60f8      	str	r0, [r7, #12]
 80146b6:	60b9      	str	r1, [r7, #8]
 80146b8:	4613      	mov	r3, r2
 80146ba:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80146bc:	88fb      	ldrh	r3, [r7, #6]
 80146be:	68ba      	ldr	r2, [r7, #8]
 80146c0:	2100      	movs	r1, #0
 80146c2:	68f8      	ldr	r0, [r7, #12]
 80146c4:	f000 fbf4 	bl	8014eb0 <USBD_LL_Transmit>

  return USBD_OK;
 80146c8:	2300      	movs	r3, #0
}
 80146ca:	4618      	mov	r0, r3
 80146cc:	3710      	adds	r7, #16
 80146ce:	46bd      	mov	sp, r7
 80146d0:	bd80      	pop	{r7, pc}

080146d2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80146d2:	b580      	push	{r7, lr}
 80146d4:	b084      	sub	sp, #16
 80146d6:	af00      	add	r7, sp, #0
 80146d8:	60f8      	str	r0, [r7, #12]
 80146da:	60b9      	str	r1, [r7, #8]
 80146dc:	4613      	mov	r3, r2
 80146de:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80146e0:	88fb      	ldrh	r3, [r7, #6]
 80146e2:	68ba      	ldr	r2, [r7, #8]
 80146e4:	2100      	movs	r1, #0
 80146e6:	68f8      	ldr	r0, [r7, #12]
 80146e8:	f000 fc05 	bl	8014ef6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80146ec:	2300      	movs	r3, #0
}
 80146ee:	4618      	mov	r0, r3
 80146f0:	3710      	adds	r7, #16
 80146f2:	46bd      	mov	sp, r7
 80146f4:	bd80      	pop	{r7, pc}

080146f6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80146f6:	b580      	push	{r7, lr}
 80146f8:	b082      	sub	sp, #8
 80146fa:	af00      	add	r7, sp, #0
 80146fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	2204      	movs	r2, #4
 8014702:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014706:	2300      	movs	r3, #0
 8014708:	2200      	movs	r2, #0
 801470a:	2100      	movs	r1, #0
 801470c:	6878      	ldr	r0, [r7, #4]
 801470e:	f000 fbcf 	bl	8014eb0 <USBD_LL_Transmit>

  return USBD_OK;
 8014712:	2300      	movs	r3, #0
}
 8014714:	4618      	mov	r0, r3
 8014716:	3708      	adds	r7, #8
 8014718:	46bd      	mov	sp, r7
 801471a:	bd80      	pop	{r7, pc}

0801471c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801471c:	b580      	push	{r7, lr}
 801471e:	b082      	sub	sp, #8
 8014720:	af00      	add	r7, sp, #0
 8014722:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	2205      	movs	r2, #5
 8014728:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801472c:	2300      	movs	r3, #0
 801472e:	2200      	movs	r2, #0
 8014730:	2100      	movs	r1, #0
 8014732:	6878      	ldr	r0, [r7, #4]
 8014734:	f000 fbdf 	bl	8014ef6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014738:	2300      	movs	r3, #0
}
 801473a:	4618      	mov	r0, r3
 801473c:	3708      	adds	r7, #8
 801473e:	46bd      	mov	sp, r7
 8014740:	bd80      	pop	{r7, pc}
	...

08014744 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8014744:	b580      	push	{r7, lr}
 8014746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8014748:	2200      	movs	r2, #0
 801474a:	4912      	ldr	r1, [pc, #72]	; (8014794 <MX_USB_DEVICE_Init+0x50>)
 801474c:	4812      	ldr	r0, [pc, #72]	; (8014798 <MX_USB_DEVICE_Init+0x54>)
 801474e:	f7fe ff7d 	bl	801364c <USBD_Init>
 8014752:	4603      	mov	r3, r0
 8014754:	2b00      	cmp	r3, #0
 8014756:	d001      	beq.n	801475c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8014758:	f7f8 fbda 	bl	800cf10 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 801475c:	490f      	ldr	r1, [pc, #60]	; (801479c <MX_USB_DEVICE_Init+0x58>)
 801475e:	480e      	ldr	r0, [pc, #56]	; (8014798 <MX_USB_DEVICE_Init+0x54>)
 8014760:	f7fe ff9f 	bl	80136a2 <USBD_RegisterClass>
 8014764:	4603      	mov	r3, r0
 8014766:	2b00      	cmp	r3, #0
 8014768:	d001      	beq.n	801476e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801476a:	f7f8 fbd1 	bl	800cf10 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 801476e:	490c      	ldr	r1, [pc, #48]	; (80147a0 <MX_USB_DEVICE_Init+0x5c>)
 8014770:	4809      	ldr	r0, [pc, #36]	; (8014798 <MX_USB_DEVICE_Init+0x54>)
 8014772:	f7fd ff4b 	bl	801260c <USBD_MSC_RegisterStorage>
 8014776:	4603      	mov	r3, r0
 8014778:	2b00      	cmp	r3, #0
 801477a:	d001      	beq.n	8014780 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801477c:	f7f8 fbc8 	bl	800cf10 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8014780:	4805      	ldr	r0, [pc, #20]	; (8014798 <MX_USB_DEVICE_Init+0x54>)
 8014782:	f7fe ffa7 	bl	80136d4 <USBD_Start>
 8014786:	4603      	mov	r3, r0
 8014788:	2b00      	cmp	r3, #0
 801478a:	d001      	beq.n	8014790 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801478c:	f7f8 fbc0 	bl	800cf10 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8014790:	bf00      	nop
 8014792:	bd80      	pop	{r7, pc}
 8014794:	200000f0 	.word	0x200000f0
 8014798:	200001c8 	.word	0x200001c8
 801479c:	2000004c 	.word	0x2000004c
 80147a0:	20000140 	.word	0x20000140

080147a4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80147a4:	b480      	push	{r7}
 80147a6:	b083      	sub	sp, #12
 80147a8:	af00      	add	r7, sp, #0
 80147aa:	4603      	mov	r3, r0
 80147ac:	6039      	str	r1, [r7, #0]
 80147ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80147b0:	683b      	ldr	r3, [r7, #0]
 80147b2:	2212      	movs	r2, #18
 80147b4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80147b6:	4b03      	ldr	r3, [pc, #12]	; (80147c4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80147b8:	4618      	mov	r0, r3
 80147ba:	370c      	adds	r7, #12
 80147bc:	46bd      	mov	sp, r7
 80147be:	bc80      	pop	{r7}
 80147c0:	4770      	bx	lr
 80147c2:	bf00      	nop
 80147c4:	2000010c 	.word	0x2000010c

080147c8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80147c8:	b480      	push	{r7}
 80147ca:	b083      	sub	sp, #12
 80147cc:	af00      	add	r7, sp, #0
 80147ce:	4603      	mov	r3, r0
 80147d0:	6039      	str	r1, [r7, #0]
 80147d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80147d4:	683b      	ldr	r3, [r7, #0]
 80147d6:	2204      	movs	r2, #4
 80147d8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80147da:	4b03      	ldr	r3, [pc, #12]	; (80147e8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80147dc:	4618      	mov	r0, r3
 80147de:	370c      	adds	r7, #12
 80147e0:	46bd      	mov	sp, r7
 80147e2:	bc80      	pop	{r7}
 80147e4:	4770      	bx	lr
 80147e6:	bf00      	nop
 80147e8:	20000120 	.word	0x20000120

080147ec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80147ec:	b580      	push	{r7, lr}
 80147ee:	b082      	sub	sp, #8
 80147f0:	af00      	add	r7, sp, #0
 80147f2:	4603      	mov	r3, r0
 80147f4:	6039      	str	r1, [r7, #0]
 80147f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80147f8:	79fb      	ldrb	r3, [r7, #7]
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	d105      	bne.n	801480a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80147fe:	683a      	ldr	r2, [r7, #0]
 8014800:	4907      	ldr	r1, [pc, #28]	; (8014820 <USBD_FS_ProductStrDescriptor+0x34>)
 8014802:	4808      	ldr	r0, [pc, #32]	; (8014824 <USBD_FS_ProductStrDescriptor+0x38>)
 8014804:	f7ff fede 	bl	80145c4 <USBD_GetString>
 8014808:	e004      	b.n	8014814 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801480a:	683a      	ldr	r2, [r7, #0]
 801480c:	4904      	ldr	r1, [pc, #16]	; (8014820 <USBD_FS_ProductStrDescriptor+0x34>)
 801480e:	4805      	ldr	r0, [pc, #20]	; (8014824 <USBD_FS_ProductStrDescriptor+0x38>)
 8014810:	f7ff fed8 	bl	80145c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014814:	4b02      	ldr	r3, [pc, #8]	; (8014820 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8014816:	4618      	mov	r0, r3
 8014818:	3708      	adds	r7, #8
 801481a:	46bd      	mov	sp, r7
 801481c:	bd80      	pop	{r7, pc}
 801481e:	bf00      	nop
 8014820:	2000048c 	.word	0x2000048c
 8014824:	0801506c 	.word	0x0801506c

08014828 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014828:	b580      	push	{r7, lr}
 801482a:	b082      	sub	sp, #8
 801482c:	af00      	add	r7, sp, #0
 801482e:	4603      	mov	r3, r0
 8014830:	6039      	str	r1, [r7, #0]
 8014832:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8014834:	683a      	ldr	r2, [r7, #0]
 8014836:	4904      	ldr	r1, [pc, #16]	; (8014848 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8014838:	4804      	ldr	r0, [pc, #16]	; (801484c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801483a:	f7ff fec3 	bl	80145c4 <USBD_GetString>
  return USBD_StrDesc;
 801483e:	4b02      	ldr	r3, [pc, #8]	; (8014848 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8014840:	4618      	mov	r0, r3
 8014842:	3708      	adds	r7, #8
 8014844:	46bd      	mov	sp, r7
 8014846:	bd80      	pop	{r7, pc}
 8014848:	2000048c 	.word	0x2000048c
 801484c:	08015080 	.word	0x08015080

08014850 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014850:	b580      	push	{r7, lr}
 8014852:	b082      	sub	sp, #8
 8014854:	af00      	add	r7, sp, #0
 8014856:	4603      	mov	r3, r0
 8014858:	6039      	str	r1, [r7, #0]
 801485a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801485c:	683b      	ldr	r3, [r7, #0]
 801485e:	221a      	movs	r2, #26
 8014860:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8014862:	f000 f843 	bl	80148ec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8014866:	4b02      	ldr	r3, [pc, #8]	; (8014870 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8014868:	4618      	mov	r0, r3
 801486a:	3708      	adds	r7, #8
 801486c:	46bd      	mov	sp, r7
 801486e:	bd80      	pop	{r7, pc}
 8014870:	20000124 	.word	0x20000124

08014874 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014874:	b580      	push	{r7, lr}
 8014876:	b082      	sub	sp, #8
 8014878:	af00      	add	r7, sp, #0
 801487a:	4603      	mov	r3, r0
 801487c:	6039      	str	r1, [r7, #0]
 801487e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8014880:	79fb      	ldrb	r3, [r7, #7]
 8014882:	2b00      	cmp	r3, #0
 8014884:	d105      	bne.n	8014892 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8014886:	683a      	ldr	r2, [r7, #0]
 8014888:	4907      	ldr	r1, [pc, #28]	; (80148a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 801488a:	4808      	ldr	r0, [pc, #32]	; (80148ac <USBD_FS_ConfigStrDescriptor+0x38>)
 801488c:	f7ff fe9a 	bl	80145c4 <USBD_GetString>
 8014890:	e004      	b.n	801489c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8014892:	683a      	ldr	r2, [r7, #0]
 8014894:	4904      	ldr	r1, [pc, #16]	; (80148a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8014896:	4805      	ldr	r0, [pc, #20]	; (80148ac <USBD_FS_ConfigStrDescriptor+0x38>)
 8014898:	f7ff fe94 	bl	80145c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 801489c:	4b02      	ldr	r3, [pc, #8]	; (80148a8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801489e:	4618      	mov	r0, r3
 80148a0:	3708      	adds	r7, #8
 80148a2:	46bd      	mov	sp, r7
 80148a4:	bd80      	pop	{r7, pc}
 80148a6:	bf00      	nop
 80148a8:	2000048c 	.word	0x2000048c
 80148ac:	08015094 	.word	0x08015094

080148b0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80148b0:	b580      	push	{r7, lr}
 80148b2:	b082      	sub	sp, #8
 80148b4:	af00      	add	r7, sp, #0
 80148b6:	4603      	mov	r3, r0
 80148b8:	6039      	str	r1, [r7, #0]
 80148ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80148bc:	79fb      	ldrb	r3, [r7, #7]
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d105      	bne.n	80148ce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80148c2:	683a      	ldr	r2, [r7, #0]
 80148c4:	4907      	ldr	r1, [pc, #28]	; (80148e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80148c6:	4808      	ldr	r0, [pc, #32]	; (80148e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80148c8:	f7ff fe7c 	bl	80145c4 <USBD_GetString>
 80148cc:	e004      	b.n	80148d8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80148ce:	683a      	ldr	r2, [r7, #0]
 80148d0:	4904      	ldr	r1, [pc, #16]	; (80148e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80148d2:	4805      	ldr	r0, [pc, #20]	; (80148e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80148d4:	f7ff fe76 	bl	80145c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80148d8:	4b02      	ldr	r3, [pc, #8]	; (80148e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80148da:	4618      	mov	r0, r3
 80148dc:	3708      	adds	r7, #8
 80148de:	46bd      	mov	sp, r7
 80148e0:	bd80      	pop	{r7, pc}
 80148e2:	bf00      	nop
 80148e4:	2000048c 	.word	0x2000048c
 80148e8:	080150a0 	.word	0x080150a0

080148ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80148ec:	b580      	push	{r7, lr}
 80148ee:	b084      	sub	sp, #16
 80148f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80148f2:	4b0f      	ldr	r3, [pc, #60]	; (8014930 <Get_SerialNum+0x44>)
 80148f4:	681b      	ldr	r3, [r3, #0]
 80148f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80148f8:	4b0e      	ldr	r3, [pc, #56]	; (8014934 <Get_SerialNum+0x48>)
 80148fa:	681b      	ldr	r3, [r3, #0]
 80148fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80148fe:	4b0e      	ldr	r3, [pc, #56]	; (8014938 <Get_SerialNum+0x4c>)
 8014900:	681b      	ldr	r3, [r3, #0]
 8014902:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8014904:	68fa      	ldr	r2, [r7, #12]
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	4413      	add	r3, r2
 801490a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801490c:	68fb      	ldr	r3, [r7, #12]
 801490e:	2b00      	cmp	r3, #0
 8014910:	d009      	beq.n	8014926 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8014912:	2208      	movs	r2, #8
 8014914:	4909      	ldr	r1, [pc, #36]	; (801493c <Get_SerialNum+0x50>)
 8014916:	68f8      	ldr	r0, [r7, #12]
 8014918:	f000 f814 	bl	8014944 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801491c:	2204      	movs	r2, #4
 801491e:	4908      	ldr	r1, [pc, #32]	; (8014940 <Get_SerialNum+0x54>)
 8014920:	68b8      	ldr	r0, [r7, #8]
 8014922:	f000 f80f 	bl	8014944 <IntToUnicode>
  }
}
 8014926:	bf00      	nop
 8014928:	3710      	adds	r7, #16
 801492a:	46bd      	mov	sp, r7
 801492c:	bd80      	pop	{r7, pc}
 801492e:	bf00      	nop
 8014930:	1ffff7e8 	.word	0x1ffff7e8
 8014934:	1ffff7ec 	.word	0x1ffff7ec
 8014938:	1ffff7f0 	.word	0x1ffff7f0
 801493c:	20000126 	.word	0x20000126
 8014940:	20000136 	.word	0x20000136

08014944 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8014944:	b480      	push	{r7}
 8014946:	b087      	sub	sp, #28
 8014948:	af00      	add	r7, sp, #0
 801494a:	60f8      	str	r0, [r7, #12]
 801494c:	60b9      	str	r1, [r7, #8]
 801494e:	4613      	mov	r3, r2
 8014950:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8014952:	2300      	movs	r3, #0
 8014954:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8014956:	2300      	movs	r3, #0
 8014958:	75fb      	strb	r3, [r7, #23]
 801495a:	e027      	b.n	80149ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	0f1b      	lsrs	r3, r3, #28
 8014960:	2b09      	cmp	r3, #9
 8014962:	d80b      	bhi.n	801497c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	0f1b      	lsrs	r3, r3, #28
 8014968:	b2da      	uxtb	r2, r3
 801496a:	7dfb      	ldrb	r3, [r7, #23]
 801496c:	005b      	lsls	r3, r3, #1
 801496e:	4619      	mov	r1, r3
 8014970:	68bb      	ldr	r3, [r7, #8]
 8014972:	440b      	add	r3, r1
 8014974:	3230      	adds	r2, #48	; 0x30
 8014976:	b2d2      	uxtb	r2, r2
 8014978:	701a      	strb	r2, [r3, #0]
 801497a:	e00a      	b.n	8014992 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801497c:	68fb      	ldr	r3, [r7, #12]
 801497e:	0f1b      	lsrs	r3, r3, #28
 8014980:	b2da      	uxtb	r2, r3
 8014982:	7dfb      	ldrb	r3, [r7, #23]
 8014984:	005b      	lsls	r3, r3, #1
 8014986:	4619      	mov	r1, r3
 8014988:	68bb      	ldr	r3, [r7, #8]
 801498a:	440b      	add	r3, r1
 801498c:	3237      	adds	r2, #55	; 0x37
 801498e:	b2d2      	uxtb	r2, r2
 8014990:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8014992:	68fb      	ldr	r3, [r7, #12]
 8014994:	011b      	lsls	r3, r3, #4
 8014996:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8014998:	7dfb      	ldrb	r3, [r7, #23]
 801499a:	005b      	lsls	r3, r3, #1
 801499c:	3301      	adds	r3, #1
 801499e:	68ba      	ldr	r2, [r7, #8]
 80149a0:	4413      	add	r3, r2
 80149a2:	2200      	movs	r2, #0
 80149a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80149a6:	7dfb      	ldrb	r3, [r7, #23]
 80149a8:	3301      	adds	r3, #1
 80149aa:	75fb      	strb	r3, [r7, #23]
 80149ac:	7dfa      	ldrb	r2, [r7, #23]
 80149ae:	79fb      	ldrb	r3, [r7, #7]
 80149b0:	429a      	cmp	r2, r3
 80149b2:	d3d3      	bcc.n	801495c <IntToUnicode+0x18>
  }
}
 80149b4:	bf00      	nop
 80149b6:	bf00      	nop
 80149b8:	371c      	adds	r7, #28
 80149ba:	46bd      	mov	sp, r7
 80149bc:	bc80      	pop	{r7}
 80149be:	4770      	bx	lr

080149c0 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 80149c0:	b480      	push	{r7}
 80149c2:	b083      	sub	sp, #12
 80149c4:	af00      	add	r7, sp, #0
 80149c6:	4603      	mov	r3, r0
 80149c8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 80149ca:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 80149cc:	4618      	mov	r0, r3
 80149ce:	370c      	adds	r7, #12
 80149d0:	46bd      	mov	sp, r7
 80149d2:	bc80      	pop	{r7}
 80149d4:	4770      	bx	lr

080149d6 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 80149d6:	b480      	push	{r7}
 80149d8:	b085      	sub	sp, #20
 80149da:	af00      	add	r7, sp, #0
 80149dc:	4603      	mov	r3, r0
 80149de:	60b9      	str	r1, [r7, #8]
 80149e0:	607a      	str	r2, [r7, #4]
 80149e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 80149e4:	68bb      	ldr	r3, [r7, #8]
 80149e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80149ea:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80149f2:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 80149f4:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80149f6:	4618      	mov	r0, r3
 80149f8:	3714      	adds	r7, #20
 80149fa:	46bd      	mov	sp, r7
 80149fc:	bc80      	pop	{r7}
 80149fe:	4770      	bx	lr

08014a00 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8014a00:	b480      	push	{r7}
 8014a02:	b083      	sub	sp, #12
 8014a04:	af00      	add	r7, sp, #0
 8014a06:	4603      	mov	r3, r0
 8014a08:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8014a0a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8014a0c:	4618      	mov	r0, r3
 8014a0e:	370c      	adds	r7, #12
 8014a10:	46bd      	mov	sp, r7
 8014a12:	bc80      	pop	{r7}
 8014a14:	4770      	bx	lr

08014a16 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8014a16:	b480      	push	{r7}
 8014a18:	b083      	sub	sp, #12
 8014a1a:	af00      	add	r7, sp, #0
 8014a1c:	4603      	mov	r3, r0
 8014a1e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8014a20:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8014a22:	4618      	mov	r0, r3
 8014a24:	370c      	adds	r7, #12
 8014a26:	46bd      	mov	sp, r7
 8014a28:	bc80      	pop	{r7}
 8014a2a:	4770      	bx	lr

08014a2c <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8014a2c:	b480      	push	{r7}
 8014a2e:	b085      	sub	sp, #20
 8014a30:	af00      	add	r7, sp, #0
 8014a32:	60b9      	str	r1, [r7, #8]
 8014a34:	607a      	str	r2, [r7, #4]
 8014a36:	461a      	mov	r2, r3
 8014a38:	4603      	mov	r3, r0
 8014a3a:	73fb      	strb	r3, [r7, #15]
 8014a3c:	4613      	mov	r3, r2
 8014a3e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8014a40:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8014a42:	4618      	mov	r0, r3
 8014a44:	3714      	adds	r7, #20
 8014a46:	46bd      	mov	sp, r7
 8014a48:	bc80      	pop	{r7}
 8014a4a:	4770      	bx	lr

08014a4c <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8014a4c:	b480      	push	{r7}
 8014a4e:	b085      	sub	sp, #20
 8014a50:	af00      	add	r7, sp, #0
 8014a52:	60b9      	str	r1, [r7, #8]
 8014a54:	607a      	str	r2, [r7, #4]
 8014a56:	461a      	mov	r2, r3
 8014a58:	4603      	mov	r3, r0
 8014a5a:	73fb      	strb	r3, [r7, #15]
 8014a5c:	4613      	mov	r3, r2
 8014a5e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
 8014a60:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 8014a62:	4618      	mov	r0, r3
 8014a64:	3714      	adds	r7, #20
 8014a66:	46bd      	mov	sp, r7
 8014a68:	bc80      	pop	{r7}
 8014a6a:	4770      	bx	lr

08014a6c <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8014a6c:	b480      	push	{r7}
 8014a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8014a70:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8014a72:	4618      	mov	r0, r3
 8014a74:	46bd      	mov	sp, r7
 8014a76:	bc80      	pop	{r7}
 8014a78:	4770      	bx	lr
	...

08014a7c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8014a7c:	b580      	push	{r7, lr}
 8014a7e:	b084      	sub	sp, #16
 8014a80:	af00      	add	r7, sp, #0
 8014a82:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	681b      	ldr	r3, [r3, #0]
 8014a88:	4a0d      	ldr	r2, [pc, #52]	; (8014ac0 <HAL_PCD_MspInit+0x44>)
 8014a8a:	4293      	cmp	r3, r2
 8014a8c:	d113      	bne.n	8014ab6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8014a8e:	4b0d      	ldr	r3, [pc, #52]	; (8014ac4 <HAL_PCD_MspInit+0x48>)
 8014a90:	69db      	ldr	r3, [r3, #28]
 8014a92:	4a0c      	ldr	r2, [pc, #48]	; (8014ac4 <HAL_PCD_MspInit+0x48>)
 8014a94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8014a98:	61d3      	str	r3, [r2, #28]
 8014a9a:	4b0a      	ldr	r3, [pc, #40]	; (8014ac4 <HAL_PCD_MspInit+0x48>)
 8014a9c:	69db      	ldr	r3, [r3, #28]
 8014a9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014aa2:	60fb      	str	r3, [r7, #12]
 8014aa4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 1, 0);
 8014aa6:	2200      	movs	r2, #0
 8014aa8:	2101      	movs	r1, #1
 8014aaa:	2014      	movs	r0, #20
 8014aac:	f7f8 fdb9 	bl	800d622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8014ab0:	2014      	movs	r0, #20
 8014ab2:	f7f8 fdd2 	bl	800d65a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8014ab6:	bf00      	nop
 8014ab8:	3710      	adds	r7, #16
 8014aba:	46bd      	mov	sp, r7
 8014abc:	bd80      	pop	{r7, pc}
 8014abe:	bf00      	nop
 8014ac0:	40005c00 	.word	0x40005c00
 8014ac4:	40021000 	.word	0x40021000

08014ac8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014ac8:	b580      	push	{r7, lr}
 8014aca:	b082      	sub	sp, #8
 8014acc:	af00      	add	r7, sp, #0
 8014ace:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8014adc:	4619      	mov	r1, r3
 8014ade:	4610      	mov	r0, r2
 8014ae0:	f7fe fe40 	bl	8013764 <USBD_LL_SetupStage>
}
 8014ae4:	bf00      	nop
 8014ae6:	3708      	adds	r7, #8
 8014ae8:	46bd      	mov	sp, r7
 8014aea:	bd80      	pop	{r7, pc}

08014aec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014aec:	b580      	push	{r7, lr}
 8014aee:	b082      	sub	sp, #8
 8014af0:	af00      	add	r7, sp, #0
 8014af2:	6078      	str	r0, [r7, #4]
 8014af4:	460b      	mov	r3, r1
 8014af6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8014afe:	78fa      	ldrb	r2, [r7, #3]
 8014b00:	6879      	ldr	r1, [r7, #4]
 8014b02:	4613      	mov	r3, r2
 8014b04:	009b      	lsls	r3, r3, #2
 8014b06:	4413      	add	r3, r2
 8014b08:	00db      	lsls	r3, r3, #3
 8014b0a:	440b      	add	r3, r1
 8014b0c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8014b10:	681a      	ldr	r2, [r3, #0]
 8014b12:	78fb      	ldrb	r3, [r7, #3]
 8014b14:	4619      	mov	r1, r3
 8014b16:	f7fe fe72 	bl	80137fe <USBD_LL_DataOutStage>
}
 8014b1a:	bf00      	nop
 8014b1c:	3708      	adds	r7, #8
 8014b1e:	46bd      	mov	sp, r7
 8014b20:	bd80      	pop	{r7, pc}

08014b22 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014b22:	b580      	push	{r7, lr}
 8014b24:	b082      	sub	sp, #8
 8014b26:	af00      	add	r7, sp, #0
 8014b28:	6078      	str	r0, [r7, #4]
 8014b2a:	460b      	mov	r3, r1
 8014b2c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8014b34:	78fa      	ldrb	r2, [r7, #3]
 8014b36:	6879      	ldr	r1, [r7, #4]
 8014b38:	4613      	mov	r3, r2
 8014b3a:	009b      	lsls	r3, r3, #2
 8014b3c:	4413      	add	r3, r2
 8014b3e:	00db      	lsls	r3, r3, #3
 8014b40:	440b      	add	r3, r1
 8014b42:	333c      	adds	r3, #60	; 0x3c
 8014b44:	681a      	ldr	r2, [r3, #0]
 8014b46:	78fb      	ldrb	r3, [r7, #3]
 8014b48:	4619      	mov	r1, r3
 8014b4a:	f7fe fec9 	bl	80138e0 <USBD_LL_DataInStage>
}
 8014b4e:	bf00      	nop
 8014b50:	3708      	adds	r7, #8
 8014b52:	46bd      	mov	sp, r7
 8014b54:	bd80      	pop	{r7, pc}

08014b56 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014b56:	b580      	push	{r7, lr}
 8014b58:	b082      	sub	sp, #8
 8014b5a:	af00      	add	r7, sp, #0
 8014b5c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8014b64:	4618      	mov	r0, r3
 8014b66:	f7fe ffd9 	bl	8013b1c <USBD_LL_SOF>
}
 8014b6a:	bf00      	nop
 8014b6c:	3708      	adds	r7, #8
 8014b6e:	46bd      	mov	sp, r7
 8014b70:	bd80      	pop	{r7, pc}

08014b72 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014b72:	b580      	push	{r7, lr}
 8014b74:	b084      	sub	sp, #16
 8014b76:	af00      	add	r7, sp, #0
 8014b78:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8014b7a:	2301      	movs	r3, #1
 8014b7c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	689b      	ldr	r3, [r3, #8]
 8014b82:	2b02      	cmp	r3, #2
 8014b84:	d001      	beq.n	8014b8a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8014b86:	f7f8 f9c3 	bl	800cf10 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8014b90:	7bfa      	ldrb	r2, [r7, #15]
 8014b92:	4611      	mov	r1, r2
 8014b94:	4618      	mov	r0, r3
 8014b96:	f7fe ff89 	bl	8013aac <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8014ba0:	4618      	mov	r0, r3
 8014ba2:	f7fe ff42 	bl	8013a2a <USBD_LL_Reset>
}
 8014ba6:	bf00      	nop
 8014ba8:	3710      	adds	r7, #16
 8014baa:	46bd      	mov	sp, r7
 8014bac:	bd80      	pop	{r7, pc}
	...

08014bb0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014bb0:	b580      	push	{r7, lr}
 8014bb2:	b082      	sub	sp, #8
 8014bb4:	af00      	add	r7, sp, #0
 8014bb6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8014bbe:	4618      	mov	r0, r3
 8014bc0:	f7fe ff83 	bl	8013aca <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	699b      	ldr	r3, [r3, #24]
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d005      	beq.n	8014bd8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014bcc:	4b04      	ldr	r3, [pc, #16]	; (8014be0 <HAL_PCD_SuspendCallback+0x30>)
 8014bce:	691b      	ldr	r3, [r3, #16]
 8014bd0:	4a03      	ldr	r2, [pc, #12]	; (8014be0 <HAL_PCD_SuspendCallback+0x30>)
 8014bd2:	f043 0306 	orr.w	r3, r3, #6
 8014bd6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8014bd8:	bf00      	nop
 8014bda:	3708      	adds	r7, #8
 8014bdc:	46bd      	mov	sp, r7
 8014bde:	bd80      	pop	{r7, pc}
 8014be0:	e000ed00 	.word	0xe000ed00

08014be4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014be4:	b580      	push	{r7, lr}
 8014be6:	b082      	sub	sp, #8
 8014be8:	af00      	add	r7, sp, #0
 8014bea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8014bf2:	4618      	mov	r0, r3
 8014bf4:	f7fe ff7d 	bl	8013af2 <USBD_LL_Resume>
}
 8014bf8:	bf00      	nop
 8014bfa:	3708      	adds	r7, #8
 8014bfc:	46bd      	mov	sp, r7
 8014bfe:	bd80      	pop	{r7, pc}

08014c00 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8014c00:	b580      	push	{r7, lr}
 8014c02:	b082      	sub	sp, #8
 8014c04:	af00      	add	r7, sp, #0
 8014c06:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8014c08:	4a23      	ldr	r2, [pc, #140]	; (8014c98 <USBD_LL_Init+0x98>)
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	4a21      	ldr	r2, [pc, #132]	; (8014c98 <USBD_LL_Init+0x98>)
 8014c14:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8014c18:	4b1f      	ldr	r3, [pc, #124]	; (8014c98 <USBD_LL_Init+0x98>)
 8014c1a:	4a20      	ldr	r2, [pc, #128]	; (8014c9c <USBD_LL_Init+0x9c>)
 8014c1c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8014c1e:	4b1e      	ldr	r3, [pc, #120]	; (8014c98 <USBD_LL_Init+0x98>)
 8014c20:	2208      	movs	r2, #8
 8014c22:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8014c24:	4b1c      	ldr	r3, [pc, #112]	; (8014c98 <USBD_LL_Init+0x98>)
 8014c26:	2202      	movs	r2, #2
 8014c28:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8014c2a:	4b1b      	ldr	r3, [pc, #108]	; (8014c98 <USBD_LL_Init+0x98>)
 8014c2c:	2200      	movs	r2, #0
 8014c2e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8014c30:	4b19      	ldr	r3, [pc, #100]	; (8014c98 <USBD_LL_Init+0x98>)
 8014c32:	2200      	movs	r2, #0
 8014c34:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8014c36:	4b18      	ldr	r3, [pc, #96]	; (8014c98 <USBD_LL_Init+0x98>)
 8014c38:	2200      	movs	r2, #0
 8014c3a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8014c3c:	4816      	ldr	r0, [pc, #88]	; (8014c98 <USBD_LL_Init+0x98>)
 8014c3e:	f7f8 fd26 	bl	800d68e <HAL_PCD_Init>
 8014c42:	4603      	mov	r3, r0
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	d001      	beq.n	8014c4c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8014c48:	f7f8 f962 	bl	800cf10 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8014c52:	2318      	movs	r3, #24
 8014c54:	2200      	movs	r2, #0
 8014c56:	2100      	movs	r1, #0
 8014c58:	f7fa fa72 	bl	800f140 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8014c62:	2358      	movs	r3, #88	; 0x58
 8014c64:	2200      	movs	r2, #0
 8014c66:	2180      	movs	r1, #128	; 0x80
 8014c68:	f7fa fa6a 	bl	800f140 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_MSC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x98);
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8014c72:	2398      	movs	r3, #152	; 0x98
 8014c74:	2200      	movs	r2, #0
 8014c76:	2181      	movs	r1, #129	; 0x81
 8014c78:	f7fa fa62 	bl	800f140 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0xD8);
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8014c82:	23d8      	movs	r3, #216	; 0xd8
 8014c84:	2200      	movs	r2, #0
 8014c86:	2101      	movs	r1, #1
 8014c88:	f7fa fa5a 	bl	800f140 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_MSC */
  return USBD_OK;
 8014c8c:	2300      	movs	r3, #0
}
 8014c8e:	4618      	mov	r0, r3
 8014c90:	3708      	adds	r7, #8
 8014c92:	46bd      	mov	sp, r7
 8014c94:	bd80      	pop	{r7, pc}
 8014c96:	bf00      	nop
 8014c98:	2000068c 	.word	0x2000068c
 8014c9c:	40005c00 	.word	0x40005c00

08014ca0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8014ca0:	b580      	push	{r7, lr}
 8014ca2:	b084      	sub	sp, #16
 8014ca4:	af00      	add	r7, sp, #0
 8014ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014ca8:	2300      	movs	r3, #0
 8014caa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014cac:	2300      	movs	r3, #0
 8014cae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014cb6:	4618      	mov	r0, r3
 8014cb8:	f7f8 fde8 	bl	800d88c <HAL_PCD_Start>
 8014cbc:	4603      	mov	r3, r0
 8014cbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014cc0:	7bfb      	ldrb	r3, [r7, #15]
 8014cc2:	4618      	mov	r0, r3
 8014cc4:	f000 f96e 	bl	8014fa4 <USBD_Get_USB_Status>
 8014cc8:	4603      	mov	r3, r0
 8014cca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014ccc:	7bbb      	ldrb	r3, [r7, #14]
}
 8014cce:	4618      	mov	r0, r3
 8014cd0:	3710      	adds	r7, #16
 8014cd2:	46bd      	mov	sp, r7
 8014cd4:	bd80      	pop	{r7, pc}

08014cd6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8014cd6:	b580      	push	{r7, lr}
 8014cd8:	b084      	sub	sp, #16
 8014cda:	af00      	add	r7, sp, #0
 8014cdc:	6078      	str	r0, [r7, #4]
 8014cde:	4608      	mov	r0, r1
 8014ce0:	4611      	mov	r1, r2
 8014ce2:	461a      	mov	r2, r3
 8014ce4:	4603      	mov	r3, r0
 8014ce6:	70fb      	strb	r3, [r7, #3]
 8014ce8:	460b      	mov	r3, r1
 8014cea:	70bb      	strb	r3, [r7, #2]
 8014cec:	4613      	mov	r3, r2
 8014cee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014cf0:	2300      	movs	r3, #0
 8014cf2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014cf4:	2300      	movs	r3, #0
 8014cf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8014cfe:	78bb      	ldrb	r3, [r7, #2]
 8014d00:	883a      	ldrh	r2, [r7, #0]
 8014d02:	78f9      	ldrb	r1, [r7, #3]
 8014d04:	f7f8 ff3d 	bl	800db82 <HAL_PCD_EP_Open>
 8014d08:	4603      	mov	r3, r0
 8014d0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014d0c:	7bfb      	ldrb	r3, [r7, #15]
 8014d0e:	4618      	mov	r0, r3
 8014d10:	f000 f948 	bl	8014fa4 <USBD_Get_USB_Status>
 8014d14:	4603      	mov	r3, r0
 8014d16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014d18:	7bbb      	ldrb	r3, [r7, #14]
}
 8014d1a:	4618      	mov	r0, r3
 8014d1c:	3710      	adds	r7, #16
 8014d1e:	46bd      	mov	sp, r7
 8014d20:	bd80      	pop	{r7, pc}

08014d22 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014d22:	b580      	push	{r7, lr}
 8014d24:	b084      	sub	sp, #16
 8014d26:	af00      	add	r7, sp, #0
 8014d28:	6078      	str	r0, [r7, #4]
 8014d2a:	460b      	mov	r3, r1
 8014d2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014d2e:	2300      	movs	r3, #0
 8014d30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014d32:	2300      	movs	r3, #0
 8014d34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014d3c:	78fa      	ldrb	r2, [r7, #3]
 8014d3e:	4611      	mov	r1, r2
 8014d40:	4618      	mov	r0, r3
 8014d42:	f7f8 ff7b 	bl	800dc3c <HAL_PCD_EP_Close>
 8014d46:	4603      	mov	r3, r0
 8014d48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014d4a:	7bfb      	ldrb	r3, [r7, #15]
 8014d4c:	4618      	mov	r0, r3
 8014d4e:	f000 f929 	bl	8014fa4 <USBD_Get_USB_Status>
 8014d52:	4603      	mov	r3, r0
 8014d54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014d56:	7bbb      	ldrb	r3, [r7, #14]
}
 8014d58:	4618      	mov	r0, r3
 8014d5a:	3710      	adds	r7, #16
 8014d5c:	46bd      	mov	sp, r7
 8014d5e:	bd80      	pop	{r7, pc}

08014d60 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014d60:	b580      	push	{r7, lr}
 8014d62:	b084      	sub	sp, #16
 8014d64:	af00      	add	r7, sp, #0
 8014d66:	6078      	str	r0, [r7, #4]
 8014d68:	460b      	mov	r3, r1
 8014d6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014d6c:	2300      	movs	r3, #0
 8014d6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014d70:	2300      	movs	r3, #0
 8014d72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014d7a:	78fa      	ldrb	r2, [r7, #3]
 8014d7c:	4611      	mov	r1, r2
 8014d7e:	4618      	mov	r0, r3
 8014d80:	f7f9 f8d7 	bl	800df32 <HAL_PCD_EP_Flush>
 8014d84:	4603      	mov	r3, r0
 8014d86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014d88:	7bfb      	ldrb	r3, [r7, #15]
 8014d8a:	4618      	mov	r0, r3
 8014d8c:	f000 f90a 	bl	8014fa4 <USBD_Get_USB_Status>
 8014d90:	4603      	mov	r3, r0
 8014d92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014d94:	7bbb      	ldrb	r3, [r7, #14]
}
 8014d96:	4618      	mov	r0, r3
 8014d98:	3710      	adds	r7, #16
 8014d9a:	46bd      	mov	sp, r7
 8014d9c:	bd80      	pop	{r7, pc}

08014d9e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014d9e:	b580      	push	{r7, lr}
 8014da0:	b084      	sub	sp, #16
 8014da2:	af00      	add	r7, sp, #0
 8014da4:	6078      	str	r0, [r7, #4]
 8014da6:	460b      	mov	r3, r1
 8014da8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014daa:	2300      	movs	r3, #0
 8014dac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014dae:	2300      	movs	r3, #0
 8014db0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014db8:	78fa      	ldrb	r2, [r7, #3]
 8014dba:	4611      	mov	r1, r2
 8014dbc:	4618      	mov	r0, r3
 8014dbe:	f7f9 f804 	bl	800ddca <HAL_PCD_EP_SetStall>
 8014dc2:	4603      	mov	r3, r0
 8014dc4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014dc6:	7bfb      	ldrb	r3, [r7, #15]
 8014dc8:	4618      	mov	r0, r3
 8014dca:	f000 f8eb 	bl	8014fa4 <USBD_Get_USB_Status>
 8014dce:	4603      	mov	r3, r0
 8014dd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014dd2:	7bbb      	ldrb	r3, [r7, #14]
}
 8014dd4:	4618      	mov	r0, r3
 8014dd6:	3710      	adds	r7, #16
 8014dd8:	46bd      	mov	sp, r7
 8014dda:	bd80      	pop	{r7, pc}

08014ddc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014ddc:	b580      	push	{r7, lr}
 8014dde:	b084      	sub	sp, #16
 8014de0:	af00      	add	r7, sp, #0
 8014de2:	6078      	str	r0, [r7, #4]
 8014de4:	460b      	mov	r3, r1
 8014de6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014de8:	2300      	movs	r3, #0
 8014dea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014dec:	2300      	movs	r3, #0
 8014dee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014df6:	78fa      	ldrb	r2, [r7, #3]
 8014df8:	4611      	mov	r1, r2
 8014dfa:	4618      	mov	r0, r3
 8014dfc:	f7f9 f845 	bl	800de8a <HAL_PCD_EP_ClrStall>
 8014e00:	4603      	mov	r3, r0
 8014e02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014e04:	7bfb      	ldrb	r3, [r7, #15]
 8014e06:	4618      	mov	r0, r3
 8014e08:	f000 f8cc 	bl	8014fa4 <USBD_Get_USB_Status>
 8014e0c:	4603      	mov	r3, r0
 8014e0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014e10:	7bbb      	ldrb	r3, [r7, #14]
}
 8014e12:	4618      	mov	r0, r3
 8014e14:	3710      	adds	r7, #16
 8014e16:	46bd      	mov	sp, r7
 8014e18:	bd80      	pop	{r7, pc}

08014e1a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014e1a:	b480      	push	{r7}
 8014e1c:	b085      	sub	sp, #20
 8014e1e:	af00      	add	r7, sp, #0
 8014e20:	6078      	str	r0, [r7, #4]
 8014e22:	460b      	mov	r3, r1
 8014e24:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014e2c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8014e2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	da0c      	bge.n	8014e50 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8014e36:	78fb      	ldrb	r3, [r7, #3]
 8014e38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014e3c:	68f9      	ldr	r1, [r7, #12]
 8014e3e:	1c5a      	adds	r2, r3, #1
 8014e40:	4613      	mov	r3, r2
 8014e42:	009b      	lsls	r3, r3, #2
 8014e44:	4413      	add	r3, r2
 8014e46:	00db      	lsls	r3, r3, #3
 8014e48:	440b      	add	r3, r1
 8014e4a:	3302      	adds	r3, #2
 8014e4c:	781b      	ldrb	r3, [r3, #0]
 8014e4e:	e00b      	b.n	8014e68 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8014e50:	78fb      	ldrb	r3, [r7, #3]
 8014e52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014e56:	68f9      	ldr	r1, [r7, #12]
 8014e58:	4613      	mov	r3, r2
 8014e5a:	009b      	lsls	r3, r3, #2
 8014e5c:	4413      	add	r3, r2
 8014e5e:	00db      	lsls	r3, r3, #3
 8014e60:	440b      	add	r3, r1
 8014e62:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8014e66:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014e68:	4618      	mov	r0, r3
 8014e6a:	3714      	adds	r7, #20
 8014e6c:	46bd      	mov	sp, r7
 8014e6e:	bc80      	pop	{r7}
 8014e70:	4770      	bx	lr

08014e72 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8014e72:	b580      	push	{r7, lr}
 8014e74:	b084      	sub	sp, #16
 8014e76:	af00      	add	r7, sp, #0
 8014e78:	6078      	str	r0, [r7, #4]
 8014e7a:	460b      	mov	r3, r1
 8014e7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014e7e:	2300      	movs	r3, #0
 8014e80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014e82:	2300      	movs	r3, #0
 8014e84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014e8c:	78fa      	ldrb	r2, [r7, #3]
 8014e8e:	4611      	mov	r1, r2
 8014e90:	4618      	mov	r0, r3
 8014e92:	f7f8 fe51 	bl	800db38 <HAL_PCD_SetAddress>
 8014e96:	4603      	mov	r3, r0
 8014e98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014e9a:	7bfb      	ldrb	r3, [r7, #15]
 8014e9c:	4618      	mov	r0, r3
 8014e9e:	f000 f881 	bl	8014fa4 <USBD_Get_USB_Status>
 8014ea2:	4603      	mov	r3, r0
 8014ea4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014ea6:	7bbb      	ldrb	r3, [r7, #14]
}
 8014ea8:	4618      	mov	r0, r3
 8014eaa:	3710      	adds	r7, #16
 8014eac:	46bd      	mov	sp, r7
 8014eae:	bd80      	pop	{r7, pc}

08014eb0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8014eb0:	b580      	push	{r7, lr}
 8014eb2:	b086      	sub	sp, #24
 8014eb4:	af00      	add	r7, sp, #0
 8014eb6:	60f8      	str	r0, [r7, #12]
 8014eb8:	607a      	str	r2, [r7, #4]
 8014eba:	461a      	mov	r2, r3
 8014ebc:	460b      	mov	r3, r1
 8014ebe:	72fb      	strb	r3, [r7, #11]
 8014ec0:	4613      	mov	r3, r2
 8014ec2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014ec4:	2300      	movs	r3, #0
 8014ec6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014ec8:	2300      	movs	r3, #0
 8014eca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8014ecc:	68fb      	ldr	r3, [r7, #12]
 8014ece:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8014ed2:	893b      	ldrh	r3, [r7, #8]
 8014ed4:	7af9      	ldrb	r1, [r7, #11]
 8014ed6:	687a      	ldr	r2, [r7, #4]
 8014ed8:	f7f8 ff40 	bl	800dd5c <HAL_PCD_EP_Transmit>
 8014edc:	4603      	mov	r3, r0
 8014ede:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014ee0:	7dfb      	ldrb	r3, [r7, #23]
 8014ee2:	4618      	mov	r0, r3
 8014ee4:	f000 f85e 	bl	8014fa4 <USBD_Get_USB_Status>
 8014ee8:	4603      	mov	r3, r0
 8014eea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8014eec:	7dbb      	ldrb	r3, [r7, #22]
}
 8014eee:	4618      	mov	r0, r3
 8014ef0:	3718      	adds	r7, #24
 8014ef2:	46bd      	mov	sp, r7
 8014ef4:	bd80      	pop	{r7, pc}

08014ef6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8014ef6:	b580      	push	{r7, lr}
 8014ef8:	b086      	sub	sp, #24
 8014efa:	af00      	add	r7, sp, #0
 8014efc:	60f8      	str	r0, [r7, #12]
 8014efe:	607a      	str	r2, [r7, #4]
 8014f00:	461a      	mov	r2, r3
 8014f02:	460b      	mov	r3, r1
 8014f04:	72fb      	strb	r3, [r7, #11]
 8014f06:	4613      	mov	r3, r2
 8014f08:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014f0a:	2300      	movs	r3, #0
 8014f0c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014f0e:	2300      	movs	r3, #0
 8014f10:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8014f12:	68fb      	ldr	r3, [r7, #12]
 8014f14:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8014f18:	893b      	ldrh	r3, [r7, #8]
 8014f1a:	7af9      	ldrb	r1, [r7, #11]
 8014f1c:	687a      	ldr	r2, [r7, #4]
 8014f1e:	f7f8 fed5 	bl	800dccc <HAL_PCD_EP_Receive>
 8014f22:	4603      	mov	r3, r0
 8014f24:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014f26:	7dfb      	ldrb	r3, [r7, #23]
 8014f28:	4618      	mov	r0, r3
 8014f2a:	f000 f83b 	bl	8014fa4 <USBD_Get_USB_Status>
 8014f2e:	4603      	mov	r3, r0
 8014f30:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8014f32:	7dbb      	ldrb	r3, [r7, #22]
}
 8014f34:	4618      	mov	r0, r3
 8014f36:	3718      	adds	r7, #24
 8014f38:	46bd      	mov	sp, r7
 8014f3a:	bd80      	pop	{r7, pc}

08014f3c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014f3c:	b580      	push	{r7, lr}
 8014f3e:	b082      	sub	sp, #8
 8014f40:	af00      	add	r7, sp, #0
 8014f42:	6078      	str	r0, [r7, #4]
 8014f44:	460b      	mov	r3, r1
 8014f46:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014f4e:	78fa      	ldrb	r2, [r7, #3]
 8014f50:	4611      	mov	r1, r2
 8014f52:	4618      	mov	r0, r3
 8014f54:	f7f8 feeb 	bl	800dd2e <HAL_PCD_EP_GetRxCount>
 8014f58:	4603      	mov	r3, r0
}
 8014f5a:	4618      	mov	r0, r3
 8014f5c:	3708      	adds	r7, #8
 8014f5e:	46bd      	mov	sp, r7
 8014f60:	bd80      	pop	{r7, pc}
	...

08014f64 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8014f64:	b480      	push	{r7}
 8014f66:	b083      	sub	sp, #12
 8014f68:	af00      	add	r7, sp, #0
 8014f6a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8014f6c:	4b02      	ldr	r3, [pc, #8]	; (8014f78 <USBD_static_malloc+0x14>)
}
 8014f6e:	4618      	mov	r0, r3
 8014f70:	370c      	adds	r7, #12
 8014f72:	46bd      	mov	sp, r7
 8014f74:	bc80      	pop	{r7}
 8014f76:	4770      	bx	lr
 8014f78:	2000097c 	.word	0x2000097c

08014f7c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8014f7c:	b480      	push	{r7}
 8014f7e:	b083      	sub	sp, #12
 8014f80:	af00      	add	r7, sp, #0
 8014f82:	6078      	str	r0, [r7, #4]

}
 8014f84:	bf00      	nop
 8014f86:	370c      	adds	r7, #12
 8014f88:	46bd      	mov	sp, r7
 8014f8a:	bc80      	pop	{r7}
 8014f8c:	4770      	bx	lr

08014f8e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014f8e:	b480      	push	{r7}
 8014f90:	b083      	sub	sp, #12
 8014f92:	af00      	add	r7, sp, #0
 8014f94:	6078      	str	r0, [r7, #4]
 8014f96:	460b      	mov	r3, r1
 8014f98:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8014f9a:	bf00      	nop
 8014f9c:	370c      	adds	r7, #12
 8014f9e:	46bd      	mov	sp, r7
 8014fa0:	bc80      	pop	{r7}
 8014fa2:	4770      	bx	lr

08014fa4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8014fa4:	b480      	push	{r7}
 8014fa6:	b085      	sub	sp, #20
 8014fa8:	af00      	add	r7, sp, #0
 8014faa:	4603      	mov	r3, r0
 8014fac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014fae:	2300      	movs	r3, #0
 8014fb0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8014fb2:	79fb      	ldrb	r3, [r7, #7]
 8014fb4:	2b03      	cmp	r3, #3
 8014fb6:	d817      	bhi.n	8014fe8 <USBD_Get_USB_Status+0x44>
 8014fb8:	a201      	add	r2, pc, #4	; (adr r2, 8014fc0 <USBD_Get_USB_Status+0x1c>)
 8014fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014fbe:	bf00      	nop
 8014fc0:	08014fd1 	.word	0x08014fd1
 8014fc4:	08014fd7 	.word	0x08014fd7
 8014fc8:	08014fdd 	.word	0x08014fdd
 8014fcc:	08014fe3 	.word	0x08014fe3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8014fd0:	2300      	movs	r3, #0
 8014fd2:	73fb      	strb	r3, [r7, #15]
    break;
 8014fd4:	e00b      	b.n	8014fee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014fd6:	2302      	movs	r3, #2
 8014fd8:	73fb      	strb	r3, [r7, #15]
    break;
 8014fda:	e008      	b.n	8014fee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014fdc:	2301      	movs	r3, #1
 8014fde:	73fb      	strb	r3, [r7, #15]
    break;
 8014fe0:	e005      	b.n	8014fee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014fe2:	2302      	movs	r3, #2
 8014fe4:	73fb      	strb	r3, [r7, #15]
    break;
 8014fe6:	e002      	b.n	8014fee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8014fe8:	2302      	movs	r3, #2
 8014fea:	73fb      	strb	r3, [r7, #15]
    break;
 8014fec:	bf00      	nop
  }
  return usb_status;
 8014fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8014ff0:	4618      	mov	r0, r3
 8014ff2:	3714      	adds	r7, #20
 8014ff4:	46bd      	mov	sp, r7
 8014ff6:	bc80      	pop	{r7}
 8014ff8:	4770      	bx	lr
 8014ffa:	bf00      	nop

08014ffc <memset>:
 8014ffc:	4603      	mov	r3, r0
 8014ffe:	4402      	add	r2, r0
 8015000:	4293      	cmp	r3, r2
 8015002:	d100      	bne.n	8015006 <memset+0xa>
 8015004:	4770      	bx	lr
 8015006:	f803 1b01 	strb.w	r1, [r3], #1
 801500a:	e7f9      	b.n	8015000 <memset+0x4>

0801500c <__libc_init_array>:
 801500c:	b570      	push	{r4, r5, r6, lr}
 801500e:	2600      	movs	r6, #0
 8015010:	4d0c      	ldr	r5, [pc, #48]	; (8015044 <__libc_init_array+0x38>)
 8015012:	4c0d      	ldr	r4, [pc, #52]	; (8015048 <__libc_init_array+0x3c>)
 8015014:	1b64      	subs	r4, r4, r5
 8015016:	10a4      	asrs	r4, r4, #2
 8015018:	42a6      	cmp	r6, r4
 801501a:	d109      	bne.n	8015030 <__libc_init_array+0x24>
 801501c:	f000 f81a 	bl	8015054 <_init>
 8015020:	2600      	movs	r6, #0
 8015022:	4d0a      	ldr	r5, [pc, #40]	; (801504c <__libc_init_array+0x40>)
 8015024:	4c0a      	ldr	r4, [pc, #40]	; (8015050 <__libc_init_array+0x44>)
 8015026:	1b64      	subs	r4, r4, r5
 8015028:	10a4      	asrs	r4, r4, #2
 801502a:	42a6      	cmp	r6, r4
 801502c:	d105      	bne.n	801503a <__libc_init_array+0x2e>
 801502e:	bd70      	pop	{r4, r5, r6, pc}
 8015030:	f855 3b04 	ldr.w	r3, [r5], #4
 8015034:	4798      	blx	r3
 8015036:	3601      	adds	r6, #1
 8015038:	e7ee      	b.n	8015018 <__libc_init_array+0xc>
 801503a:	f855 3b04 	ldr.w	r3, [r5], #4
 801503e:	4798      	blx	r3
 8015040:	3601      	adds	r6, #1
 8015042:	e7f2      	b.n	801502a <__libc_init_array+0x1e>
 8015044:	0801510c 	.word	0x0801510c
 8015048:	0801510c 	.word	0x0801510c
 801504c:	0801510c 	.word	0x0801510c
 8015050:	08015110 	.word	0x08015110

08015054 <_init>:
 8015054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015056:	bf00      	nop
 8015058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801505a:	bc08      	pop	{r3}
 801505c:	469e      	mov	lr, r3
 801505e:	4770      	bx	lr

08015060 <_fini>:
 8015060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015062:	bf00      	nop
 8015064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015066:	bc08      	pop	{r3}
 8015068:	469e      	mov	lr, r3
 801506a:	4770      	bx	lr
