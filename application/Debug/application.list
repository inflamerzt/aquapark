
application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  0800c000  0800c000  0000c000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d90  0800c1e4  0800c1e4  0000c1e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08015f74  08015f74  00015f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016174  08016174  00020138  2**0
                  CONTENTS
  4 .ARM          00000000  08016174  08016174  00020138  2**0
                  CONTENTS
  5 .preinit_array 00000000  08016174  08016174  00020138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016174  08016174  00016174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016178  08016178  00016178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000138  20000000  0801617c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ad0  20000138  080162b4  00020138  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c08  080162b4  00020c08  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020161  2**0
                  CONTENTS, READONLY
 13 .debug_info   000127de  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b41  00000000  00000000  00032982  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001260  00000000  00000000  000364c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ee4c  00000000  00000000  00037728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001570b  00000000  00000000  00056574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a023a  00000000  00000000  0006bc7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000d58  00000000  00000000  0010beb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000049d8  00000000  00000000  0010cc14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  001115ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800c1e4 <__do_global_dtors_aux>:
 800c1e4:	b510      	push	{r4, lr}
 800c1e6:	4c05      	ldr	r4, [pc, #20]	; (800c1fc <__do_global_dtors_aux+0x18>)
 800c1e8:	7823      	ldrb	r3, [r4, #0]
 800c1ea:	b933      	cbnz	r3, 800c1fa <__do_global_dtors_aux+0x16>
 800c1ec:	4b04      	ldr	r3, [pc, #16]	; (800c200 <__do_global_dtors_aux+0x1c>)
 800c1ee:	b113      	cbz	r3, 800c1f6 <__do_global_dtors_aux+0x12>
 800c1f0:	4804      	ldr	r0, [pc, #16]	; (800c204 <__do_global_dtors_aux+0x20>)
 800c1f2:	f3af 8000 	nop.w
 800c1f6:	2301      	movs	r3, #1
 800c1f8:	7023      	strb	r3, [r4, #0]
 800c1fa:	bd10      	pop	{r4, pc}
 800c1fc:	20000138 	.word	0x20000138
 800c200:	00000000 	.word	0x00000000
 800c204:	08015f5c 	.word	0x08015f5c

0800c208 <frame_dummy>:
 800c208:	b508      	push	{r3, lr}
 800c20a:	4b03      	ldr	r3, [pc, #12]	; (800c218 <frame_dummy+0x10>)
 800c20c:	b11b      	cbz	r3, 800c216 <frame_dummy+0xe>
 800c20e:	4903      	ldr	r1, [pc, #12]	; (800c21c <frame_dummy+0x14>)
 800c210:	4803      	ldr	r0, [pc, #12]	; (800c220 <frame_dummy+0x18>)
 800c212:	f3af 8000 	nop.w
 800c216:	bd08      	pop	{r3, pc}
 800c218:	00000000 	.word	0x00000000
 800c21c:	2000013c 	.word	0x2000013c
 800c220:	08015f5c 	.word	0x08015f5c

0800c224 <strlen>:
 800c224:	4603      	mov	r3, r0
 800c226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c22a:	2a00      	cmp	r2, #0
 800c22c:	d1fb      	bne.n	800c226 <strlen+0x2>
 800c22e:	1a18      	subs	r0, r3, r0
 800c230:	3801      	subs	r0, #1
 800c232:	4770      	bx	lr

0800c234 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800c234:	b480      	push	{r7}
 800c236:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c238:	4b04      	ldr	r3, [pc, #16]	; (800c24c <__NVIC_GetPriorityGrouping+0x18>)
 800c23a:	68db      	ldr	r3, [r3, #12]
 800c23c:	0a1b      	lsrs	r3, r3, #8
 800c23e:	f003 0307 	and.w	r3, r3, #7
}
 800c242:	4618      	mov	r0, r3
 800c244:	46bd      	mov	sp, r7
 800c246:	bc80      	pop	{r7}
 800c248:	4770      	bx	lr
 800c24a:	bf00      	nop
 800c24c:	e000ed00 	.word	0xe000ed00

0800c250 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c250:	b480      	push	{r7}
 800c252:	b083      	sub	sp, #12
 800c254:	af00      	add	r7, sp, #0
 800c256:	4603      	mov	r3, r0
 800c258:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c25a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	db0b      	blt.n	800c27a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c262:	79fb      	ldrb	r3, [r7, #7]
 800c264:	f003 021f 	and.w	r2, r3, #31
 800c268:	4906      	ldr	r1, [pc, #24]	; (800c284 <__NVIC_EnableIRQ+0x34>)
 800c26a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c26e:	095b      	lsrs	r3, r3, #5
 800c270:	2001      	movs	r0, #1
 800c272:	fa00 f202 	lsl.w	r2, r0, r2
 800c276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800c27a:	bf00      	nop
 800c27c:	370c      	adds	r7, #12
 800c27e:	46bd      	mov	sp, r7
 800c280:	bc80      	pop	{r7}
 800c282:	4770      	bx	lr
 800c284:	e000e100 	.word	0xe000e100

0800c288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c288:	b480      	push	{r7}
 800c28a:	b083      	sub	sp, #12
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	4603      	mov	r3, r0
 800c290:	6039      	str	r1, [r7, #0]
 800c292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	db0a      	blt.n	800c2b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	b2da      	uxtb	r2, r3
 800c2a0:	490c      	ldr	r1, [pc, #48]	; (800c2d4 <__NVIC_SetPriority+0x4c>)
 800c2a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c2a6:	0112      	lsls	r2, r2, #4
 800c2a8:	b2d2      	uxtb	r2, r2
 800c2aa:	440b      	add	r3, r1
 800c2ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800c2b0:	e00a      	b.n	800c2c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	b2da      	uxtb	r2, r3
 800c2b6:	4908      	ldr	r1, [pc, #32]	; (800c2d8 <__NVIC_SetPriority+0x50>)
 800c2b8:	79fb      	ldrb	r3, [r7, #7]
 800c2ba:	f003 030f 	and.w	r3, r3, #15
 800c2be:	3b04      	subs	r3, #4
 800c2c0:	0112      	lsls	r2, r2, #4
 800c2c2:	b2d2      	uxtb	r2, r2
 800c2c4:	440b      	add	r3, r1
 800c2c6:	761a      	strb	r2, [r3, #24]
}
 800c2c8:	bf00      	nop
 800c2ca:	370c      	adds	r7, #12
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bc80      	pop	{r7}
 800c2d0:	4770      	bx	lr
 800c2d2:	bf00      	nop
 800c2d4:	e000e100 	.word	0xe000e100
 800c2d8:	e000ed00 	.word	0xe000ed00

0800c2dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c2dc:	b480      	push	{r7}
 800c2de:	b089      	sub	sp, #36	; 0x24
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	60f8      	str	r0, [r7, #12]
 800c2e4:	60b9      	str	r1, [r7, #8]
 800c2e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	f003 0307 	and.w	r3, r3, #7
 800c2ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c2f0:	69fb      	ldr	r3, [r7, #28]
 800c2f2:	f1c3 0307 	rsb	r3, r3, #7
 800c2f6:	2b04      	cmp	r3, #4
 800c2f8:	bf28      	it	cs
 800c2fa:	2304      	movcs	r3, #4
 800c2fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c2fe:	69fb      	ldr	r3, [r7, #28]
 800c300:	3304      	adds	r3, #4
 800c302:	2b06      	cmp	r3, #6
 800c304:	d902      	bls.n	800c30c <NVIC_EncodePriority+0x30>
 800c306:	69fb      	ldr	r3, [r7, #28]
 800c308:	3b03      	subs	r3, #3
 800c30a:	e000      	b.n	800c30e <NVIC_EncodePriority+0x32>
 800c30c:	2300      	movs	r3, #0
 800c30e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c310:	f04f 32ff 	mov.w	r2, #4294967295
 800c314:	69bb      	ldr	r3, [r7, #24]
 800c316:	fa02 f303 	lsl.w	r3, r2, r3
 800c31a:	43da      	mvns	r2, r3
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	401a      	ands	r2, r3
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c324:	f04f 31ff 	mov.w	r1, #4294967295
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	fa01 f303 	lsl.w	r3, r1, r3
 800c32e:	43d9      	mvns	r1, r3
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c334:	4313      	orrs	r3, r2
         );
}
 800c336:	4618      	mov	r0, r3
 800c338:	3724      	adds	r7, #36	; 0x24
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bc80      	pop	{r7}
 800c33e:	4770      	bx	lr

0800c340 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 800c340:	b480      	push	{r7}
 800c342:	b085      	sub	sp, #20
 800c344:	af00      	add	r7, sp, #0
 800c346:	60f8      	str	r0, [r7, #12]
 800c348:	60b9      	str	r1, [r7, #8]
 800c34a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	3b01      	subs	r3, #1
 800c350:	4a0c      	ldr	r2, [pc, #48]	; (800c384 <LL_DMA_SetDataTransferDirection+0x44>)
 800c352:	5cd3      	ldrb	r3, [r2, r3]
 800c354:	461a      	mov	r2, r3
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	4413      	add	r3, r2
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c360:	f023 0310 	bic.w	r3, r3, #16
 800c364:	68ba      	ldr	r2, [r7, #8]
 800c366:	3a01      	subs	r2, #1
 800c368:	4906      	ldr	r1, [pc, #24]	; (800c384 <LL_DMA_SetDataTransferDirection+0x44>)
 800c36a:	5c8a      	ldrb	r2, [r1, r2]
 800c36c:	4611      	mov	r1, r2
 800c36e:	68fa      	ldr	r2, [r7, #12]
 800c370:	440a      	add	r2, r1
 800c372:	4611      	mov	r1, r2
 800c374:	687a      	ldr	r2, [r7, #4]
 800c376:	4313      	orrs	r3, r2
 800c378:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 800c37a:	bf00      	nop
 800c37c:	3714      	adds	r7, #20
 800c37e:	46bd      	mov	sp, r7
 800c380:	bc80      	pop	{r7}
 800c382:	4770      	bx	lr
 800c384:	08016108 	.word	0x08016108

0800c388 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 800c388:	b480      	push	{r7}
 800c38a:	b085      	sub	sp, #20
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	60f8      	str	r0, [r7, #12]
 800c390:	60b9      	str	r1, [r7, #8]
 800c392:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	3b01      	subs	r3, #1
 800c398:	4a0b      	ldr	r2, [pc, #44]	; (800c3c8 <LL_DMA_SetMode+0x40>)
 800c39a:	5cd3      	ldrb	r3, [r2, r3]
 800c39c:	461a      	mov	r2, r3
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	4413      	add	r3, r2
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	f023 0220 	bic.w	r2, r3, #32
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	3b01      	subs	r3, #1
 800c3ac:	4906      	ldr	r1, [pc, #24]	; (800c3c8 <LL_DMA_SetMode+0x40>)
 800c3ae:	5ccb      	ldrb	r3, [r1, r3]
 800c3b0:	4619      	mov	r1, r3
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	440b      	add	r3, r1
 800c3b6:	4619      	mov	r1, r3
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	4313      	orrs	r3, r2
 800c3bc:	600b      	str	r3, [r1, #0]
             Mode);
}
 800c3be:	bf00      	nop
 800c3c0:	3714      	adds	r7, #20
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bc80      	pop	{r7}
 800c3c6:	4770      	bx	lr
 800c3c8:	08016108 	.word	0x08016108

0800c3cc <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b085      	sub	sp, #20
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	60f8      	str	r0, [r7, #12]
 800c3d4:	60b9      	str	r1, [r7, #8]
 800c3d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	3b01      	subs	r3, #1
 800c3dc:	4a0b      	ldr	r2, [pc, #44]	; (800c40c <LL_DMA_SetPeriphIncMode+0x40>)
 800c3de:	5cd3      	ldrb	r3, [r2, r3]
 800c3e0:	461a      	mov	r2, r3
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	4413      	add	r3, r2
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	3b01      	subs	r3, #1
 800c3f0:	4906      	ldr	r1, [pc, #24]	; (800c40c <LL_DMA_SetPeriphIncMode+0x40>)
 800c3f2:	5ccb      	ldrb	r3, [r1, r3]
 800c3f4:	4619      	mov	r1, r3
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	440b      	add	r3, r1
 800c3fa:	4619      	mov	r1, r3
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	4313      	orrs	r3, r2
 800c400:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 800c402:	bf00      	nop
 800c404:	3714      	adds	r7, #20
 800c406:	46bd      	mov	sp, r7
 800c408:	bc80      	pop	{r7}
 800c40a:	4770      	bx	lr
 800c40c:	08016108 	.word	0x08016108

0800c410 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 800c410:	b480      	push	{r7}
 800c412:	b085      	sub	sp, #20
 800c414:	af00      	add	r7, sp, #0
 800c416:	60f8      	str	r0, [r7, #12]
 800c418:	60b9      	str	r1, [r7, #8]
 800c41a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 800c41c:	68bb      	ldr	r3, [r7, #8]
 800c41e:	3b01      	subs	r3, #1
 800c420:	4a0b      	ldr	r2, [pc, #44]	; (800c450 <LL_DMA_SetMemoryIncMode+0x40>)
 800c422:	5cd3      	ldrb	r3, [r2, r3]
 800c424:	461a      	mov	r2, r3
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	4413      	add	r3, r2
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c430:	68bb      	ldr	r3, [r7, #8]
 800c432:	3b01      	subs	r3, #1
 800c434:	4906      	ldr	r1, [pc, #24]	; (800c450 <LL_DMA_SetMemoryIncMode+0x40>)
 800c436:	5ccb      	ldrb	r3, [r1, r3]
 800c438:	4619      	mov	r1, r3
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	440b      	add	r3, r1
 800c43e:	4619      	mov	r1, r3
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	4313      	orrs	r3, r2
 800c444:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 800c446:	bf00      	nop
 800c448:	3714      	adds	r7, #20
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bc80      	pop	{r7}
 800c44e:	4770      	bx	lr
 800c450:	08016108 	.word	0x08016108

0800c454 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 800c454:	b480      	push	{r7}
 800c456:	b085      	sub	sp, #20
 800c458:	af00      	add	r7, sp, #0
 800c45a:	60f8      	str	r0, [r7, #12]
 800c45c:	60b9      	str	r1, [r7, #8]
 800c45e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	3b01      	subs	r3, #1
 800c464:	4a0b      	ldr	r2, [pc, #44]	; (800c494 <LL_DMA_SetPeriphSize+0x40>)
 800c466:	5cd3      	ldrb	r3, [r2, r3]
 800c468:	461a      	mov	r2, r3
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	4413      	add	r3, r2
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	3b01      	subs	r3, #1
 800c478:	4906      	ldr	r1, [pc, #24]	; (800c494 <LL_DMA_SetPeriphSize+0x40>)
 800c47a:	5ccb      	ldrb	r3, [r1, r3]
 800c47c:	4619      	mov	r1, r3
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	440b      	add	r3, r1
 800c482:	4619      	mov	r1, r3
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	4313      	orrs	r3, r2
 800c488:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 800c48a:	bf00      	nop
 800c48c:	3714      	adds	r7, #20
 800c48e:	46bd      	mov	sp, r7
 800c490:	bc80      	pop	{r7}
 800c492:	4770      	bx	lr
 800c494:	08016108 	.word	0x08016108

0800c498 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 800c498:	b480      	push	{r7}
 800c49a:	b085      	sub	sp, #20
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	60f8      	str	r0, [r7, #12]
 800c4a0:	60b9      	str	r1, [r7, #8]
 800c4a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	3b01      	subs	r3, #1
 800c4a8:	4a0b      	ldr	r2, [pc, #44]	; (800c4d8 <LL_DMA_SetMemorySize+0x40>)
 800c4aa:	5cd3      	ldrb	r3, [r2, r3]
 800c4ac:	461a      	mov	r2, r3
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	4413      	add	r3, r2
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	3b01      	subs	r3, #1
 800c4bc:	4906      	ldr	r1, [pc, #24]	; (800c4d8 <LL_DMA_SetMemorySize+0x40>)
 800c4be:	5ccb      	ldrb	r3, [r1, r3]
 800c4c0:	4619      	mov	r1, r3
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	440b      	add	r3, r1
 800c4c6:	4619      	mov	r1, r3
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	4313      	orrs	r3, r2
 800c4cc:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 800c4ce:	bf00      	nop
 800c4d0:	3714      	adds	r7, #20
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bc80      	pop	{r7}
 800c4d6:	4770      	bx	lr
 800c4d8:	08016108 	.word	0x08016108

0800c4dc <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 800c4dc:	b480      	push	{r7}
 800c4de:	b085      	sub	sp, #20
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	60f8      	str	r0, [r7, #12]
 800c4e4:	60b9      	str	r1, [r7, #8]
 800c4e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 800c4e8:	68bb      	ldr	r3, [r7, #8]
 800c4ea:	3b01      	subs	r3, #1
 800c4ec:	4a0b      	ldr	r2, [pc, #44]	; (800c51c <LL_DMA_SetChannelPriorityLevel+0x40>)
 800c4ee:	5cd3      	ldrb	r3, [r2, r3]
 800c4f0:	461a      	mov	r2, r3
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	4413      	add	r3, r2
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	3b01      	subs	r3, #1
 800c500:	4906      	ldr	r1, [pc, #24]	; (800c51c <LL_DMA_SetChannelPriorityLevel+0x40>)
 800c502:	5ccb      	ldrb	r3, [r1, r3]
 800c504:	4619      	mov	r1, r3
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	440b      	add	r3, r1
 800c50a:	4619      	mov	r1, r3
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	4313      	orrs	r3, r2
 800c510:	600b      	str	r3, [r1, #0]
             Priority);
}
 800c512:	bf00      	nop
 800c514:	3714      	adds	r7, #20
 800c516:	46bd      	mov	sp, r7
 800c518:	bc80      	pop	{r7}
 800c51a:	4770      	bx	lr
 800c51c:	08016108 	.word	0x08016108

0800c520 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 800c520:	b480      	push	{r7}
 800c522:	b085      	sub	sp, #20
 800c524:	af00      	add	r7, sp, #0
 800c526:	60f8      	str	r0, [r7, #12]
 800c528:	60b9      	str	r1, [r7, #8]
 800c52a:	607a      	str	r2, [r7, #4]
 800c52c:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 800c52e:	69bb      	ldr	r3, [r7, #24]
 800c530:	2b10      	cmp	r3, #16
 800c532:	d114      	bne.n	800c55e <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 800c534:	68bb      	ldr	r3, [r7, #8]
 800c536:	3b01      	subs	r3, #1
 800c538:	4a15      	ldr	r2, [pc, #84]	; (800c590 <LL_DMA_ConfigAddresses+0x70>)
 800c53a:	5cd3      	ldrb	r3, [r2, r3]
 800c53c:	461a      	mov	r2, r3
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	4413      	add	r3, r2
 800c542:	461a      	mov	r2, r3
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	3b01      	subs	r3, #1
 800c54c:	4a10      	ldr	r2, [pc, #64]	; (800c590 <LL_DMA_ConfigAddresses+0x70>)
 800c54e:	5cd3      	ldrb	r3, [r2, r3]
 800c550:	461a      	mov	r2, r3
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	4413      	add	r3, r2
 800c556:	461a      	mov	r2, r3
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
  }
}
 800c55c:	e013      	b.n	800c586 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	3b01      	subs	r3, #1
 800c562:	4a0b      	ldr	r2, [pc, #44]	; (800c590 <LL_DMA_ConfigAddresses+0x70>)
 800c564:	5cd3      	ldrb	r3, [r2, r3]
 800c566:	461a      	mov	r2, r3
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	4413      	add	r3, r2
 800c56c:	461a      	mov	r2, r3
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 800c572:	68bb      	ldr	r3, [r7, #8]
 800c574:	3b01      	subs	r3, #1
 800c576:	4a06      	ldr	r2, [pc, #24]	; (800c590 <LL_DMA_ConfigAddresses+0x70>)
 800c578:	5cd3      	ldrb	r3, [r2, r3]
 800c57a:	461a      	mov	r2, r3
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	4413      	add	r3, r2
 800c580:	461a      	mov	r2, r3
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	60d3      	str	r3, [r2, #12]
}
 800c586:	bf00      	nop
 800c588:	3714      	adds	r7, #20
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bc80      	pop	{r7}
 800c58e:	4770      	bx	lr
 800c590:	08016108 	.word	0x08016108

0800c594 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800c594:	b480      	push	{r7}
 800c596:	b083      	sub	sp, #12
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
 800c59c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	3b01      	subs	r3, #1
 800c5a2:	4a0a      	ldr	r2, [pc, #40]	; (800c5cc <LL_DMA_EnableIT_TC+0x38>)
 800c5a4:	5cd3      	ldrb	r3, [r2, r3]
 800c5a6:	461a      	mov	r2, r3
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	4413      	add	r3, r2
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	683a      	ldr	r2, [r7, #0]
 800c5b0:	3a01      	subs	r2, #1
 800c5b2:	4906      	ldr	r1, [pc, #24]	; (800c5cc <LL_DMA_EnableIT_TC+0x38>)
 800c5b4:	5c8a      	ldrb	r2, [r1, r2]
 800c5b6:	4611      	mov	r1, r2
 800c5b8:	687a      	ldr	r2, [r7, #4]
 800c5ba:	440a      	add	r2, r1
 800c5bc:	f043 0302 	orr.w	r3, r3, #2
 800c5c0:	6013      	str	r3, [r2, #0]
}
 800c5c2:	bf00      	nop
 800c5c4:	370c      	adds	r7, #12
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bc80      	pop	{r7}
 800c5ca:	4770      	bx	lr
 800c5cc:	08016108 	.word	0x08016108

0800c5d0 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800c5d0:	b480      	push	{r7}
 800c5d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800c5d4:	4b04      	ldr	r3, [pc, #16]	; (800c5e8 <LL_RCC_HSE_Enable+0x18>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	4a03      	ldr	r2, [pc, #12]	; (800c5e8 <LL_RCC_HSE_Enable+0x18>)
 800c5da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c5de:	6013      	str	r3, [r2, #0]
}
 800c5e0:	bf00      	nop
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bc80      	pop	{r7}
 800c5e6:	4770      	bx	lr
 800c5e8:	40021000 	.word	0x40021000

0800c5ec <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 800c5f0:	4b06      	ldr	r3, [pc, #24]	; (800c60c <LL_RCC_HSE_IsReady+0x20>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c5fc:	bf0c      	ite	eq
 800c5fe:	2301      	moveq	r3, #1
 800c600:	2300      	movne	r3, #0
 800c602:	b2db      	uxtb	r3, r3
}
 800c604:	4618      	mov	r0, r3
 800c606:	46bd      	mov	sp, r7
 800c608:	bc80      	pop	{r7}
 800c60a:	4770      	bx	lr
 800c60c:	40021000 	.word	0x40021000

0800c610 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 800c610:	b480      	push	{r7}
 800c612:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800c614:	4b04      	ldr	r3, [pc, #16]	; (800c628 <LL_RCC_LSI_Enable+0x18>)
 800c616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c618:	4a03      	ldr	r2, [pc, #12]	; (800c628 <LL_RCC_LSI_Enable+0x18>)
 800c61a:	f043 0301 	orr.w	r3, r3, #1
 800c61e:	6253      	str	r3, [r2, #36]	; 0x24
}
 800c620:	bf00      	nop
 800c622:	46bd      	mov	sp, r7
 800c624:	bc80      	pop	{r7}
 800c626:	4770      	bx	lr
 800c628:	40021000 	.word	0x40021000

0800c62c <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 800c62c:	b480      	push	{r7}
 800c62e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY));
 800c630:	4b06      	ldr	r3, [pc, #24]	; (800c64c <LL_RCC_LSI_IsReady+0x20>)
 800c632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c634:	f003 0302 	and.w	r3, r3, #2
 800c638:	2b02      	cmp	r3, #2
 800c63a:	bf0c      	ite	eq
 800c63c:	2301      	moveq	r3, #1
 800c63e:	2300      	movne	r3, #0
 800c640:	b2db      	uxtb	r3, r3
}
 800c642:	4618      	mov	r0, r3
 800c644:	46bd      	mov	sp, r7
 800c646:	bc80      	pop	{r7}
 800c648:	4770      	bx	lr
 800c64a:	bf00      	nop
 800c64c:	40021000 	.word	0x40021000

0800c650 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800c650:	b480      	push	{r7}
 800c652:	b083      	sub	sp, #12
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800c658:	4b06      	ldr	r3, [pc, #24]	; (800c674 <LL_RCC_SetSysClkSource+0x24>)
 800c65a:	685b      	ldr	r3, [r3, #4]
 800c65c:	f023 0203 	bic.w	r2, r3, #3
 800c660:	4904      	ldr	r1, [pc, #16]	; (800c674 <LL_RCC_SetSysClkSource+0x24>)
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	4313      	orrs	r3, r2
 800c666:	604b      	str	r3, [r1, #4]
}
 800c668:	bf00      	nop
 800c66a:	370c      	adds	r7, #12
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bc80      	pop	{r7}
 800c670:	4770      	bx	lr
 800c672:	bf00      	nop
 800c674:	40021000 	.word	0x40021000

0800c678 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800c678:	b480      	push	{r7}
 800c67a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800c67c:	4b03      	ldr	r3, [pc, #12]	; (800c68c <LL_RCC_GetSysClkSource+0x14>)
 800c67e:	685b      	ldr	r3, [r3, #4]
 800c680:	f003 030c 	and.w	r3, r3, #12
}
 800c684:	4618      	mov	r0, r3
 800c686:	46bd      	mov	sp, r7
 800c688:	bc80      	pop	{r7}
 800c68a:	4770      	bx	lr
 800c68c:	40021000 	.word	0x40021000

0800c690 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800c690:	b480      	push	{r7}
 800c692:	b083      	sub	sp, #12
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800c698:	4b06      	ldr	r3, [pc, #24]	; (800c6b4 <LL_RCC_SetAHBPrescaler+0x24>)
 800c69a:	685b      	ldr	r3, [r3, #4]
 800c69c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c6a0:	4904      	ldr	r1, [pc, #16]	; (800c6b4 <LL_RCC_SetAHBPrescaler+0x24>)
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	4313      	orrs	r3, r2
 800c6a6:	604b      	str	r3, [r1, #4]
}
 800c6a8:	bf00      	nop
 800c6aa:	370c      	adds	r7, #12
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bc80      	pop	{r7}
 800c6b0:	4770      	bx	lr
 800c6b2:	bf00      	nop
 800c6b4:	40021000 	.word	0x40021000

0800c6b8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800c6b8:	b480      	push	{r7}
 800c6ba:	b083      	sub	sp, #12
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800c6c0:	4b06      	ldr	r3, [pc, #24]	; (800c6dc <LL_RCC_SetAPB1Prescaler+0x24>)
 800c6c2:	685b      	ldr	r3, [r3, #4]
 800c6c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c6c8:	4904      	ldr	r1, [pc, #16]	; (800c6dc <LL_RCC_SetAPB1Prescaler+0x24>)
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	4313      	orrs	r3, r2
 800c6ce:	604b      	str	r3, [r1, #4]
}
 800c6d0:	bf00      	nop
 800c6d2:	370c      	adds	r7, #12
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bc80      	pop	{r7}
 800c6d8:	4770      	bx	lr
 800c6da:	bf00      	nop
 800c6dc:	40021000 	.word	0x40021000

0800c6e0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	b083      	sub	sp, #12
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800c6e8:	4b06      	ldr	r3, [pc, #24]	; (800c704 <LL_RCC_SetAPB2Prescaler+0x24>)
 800c6ea:	685b      	ldr	r3, [r3, #4]
 800c6ec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800c6f0:	4904      	ldr	r1, [pc, #16]	; (800c704 <LL_RCC_SetAPB2Prescaler+0x24>)
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	4313      	orrs	r3, r2
 800c6f6:	604b      	str	r3, [r1, #4]
}
 800c6f8:	bf00      	nop
 800c6fa:	370c      	adds	r7, #12
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bc80      	pop	{r7}
 800c700:	4770      	bx	lr
 800c702:	bf00      	nop
 800c704:	40021000 	.word	0x40021000

0800c708 <LL_RCC_SetUSBClockSource>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSBClockSource(uint32_t USBxSource)
{
 800c708:	b480      	push	{r7}
 800c70a:	b083      	sub	sp, #12
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
#if defined(RCC_CFGR_USBPRE)
  MODIFY_REG(RCC->CFGR, RCC_CFGR_USBPRE, USBxSource);
 800c710:	4b06      	ldr	r3, [pc, #24]	; (800c72c <LL_RCC_SetUSBClockSource+0x24>)
 800c712:	685b      	ldr	r3, [r3, #4]
 800c714:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800c718:	4904      	ldr	r1, [pc, #16]	; (800c72c <LL_RCC_SetUSBClockSource+0x24>)
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	4313      	orrs	r3, r2
 800c71e:	604b      	str	r3, [r1, #4]
#else /*RCC_CFGR_OTGFSPRE*/
  MODIFY_REG(RCC->CFGR, RCC_CFGR_OTGFSPRE, USBxSource);
#endif /*RCC_CFGR_USBPRE*/
}
 800c720:	bf00      	nop
 800c722:	370c      	adds	r7, #12
 800c724:	46bd      	mov	sp, r7
 800c726:	bc80      	pop	{r7}
 800c728:	4770      	bx	lr
 800c72a:	bf00      	nop
 800c72c:	40021000 	.word	0x40021000

0800c730 <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV128
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 800c730:	b480      	push	{r7}
 800c732:	b083      	sub	sp, #12
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800c738:	4b06      	ldr	r3, [pc, #24]	; (800c754 <LL_RCC_SetRTCClockSource+0x24>)
 800c73a:	6a1b      	ldr	r3, [r3, #32]
 800c73c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c740:	4904      	ldr	r1, [pc, #16]	; (800c754 <LL_RCC_SetRTCClockSource+0x24>)
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	4313      	orrs	r3, r2
 800c746:	620b      	str	r3, [r1, #32]
}
 800c748:	bf00      	nop
 800c74a:	370c      	adds	r7, #12
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bc80      	pop	{r7}
 800c750:	4770      	bx	lr
 800c752:	bf00      	nop
 800c754:	40021000 	.word	0x40021000

0800c758 <LL_RCC_GetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSE
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV128
  */
__STATIC_INLINE uint32_t LL_RCC_GetRTCClockSource(void)
{
 800c758:	b480      	push	{r7}
 800c75a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800c75c:	4b03      	ldr	r3, [pc, #12]	; (800c76c <LL_RCC_GetRTCClockSource+0x14>)
 800c75e:	6a1b      	ldr	r3, [r3, #32]
 800c760:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800c764:	4618      	mov	r0, r3
 800c766:	46bd      	mov	sp, r7
 800c768:	bc80      	pop	{r7}
 800c76a:	4770      	bx	lr
 800c76c:	40021000 	.word	0x40021000

0800c770 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800c770:	b480      	push	{r7}
 800c772:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800c774:	4b04      	ldr	r3, [pc, #16]	; (800c788 <LL_RCC_EnableRTC+0x18>)
 800c776:	6a1b      	ldr	r3, [r3, #32]
 800c778:	4a03      	ldr	r2, [pc, #12]	; (800c788 <LL_RCC_EnableRTC+0x18>)
 800c77a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c77e:	6213      	str	r3, [r2, #32]
}
 800c780:	bf00      	nop
 800c782:	46bd      	mov	sp, r7
 800c784:	bc80      	pop	{r7}
 800c786:	4770      	bx	lr
 800c788:	40021000 	.word	0x40021000

0800c78c <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 800c78c:	b480      	push	{r7}
 800c78e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800c790:	4b04      	ldr	r3, [pc, #16]	; (800c7a4 <LL_RCC_ForceBackupDomainReset+0x18>)
 800c792:	6a1b      	ldr	r3, [r3, #32]
 800c794:	4a03      	ldr	r2, [pc, #12]	; (800c7a4 <LL_RCC_ForceBackupDomainReset+0x18>)
 800c796:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c79a:	6213      	str	r3, [r2, #32]
}
 800c79c:	bf00      	nop
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bc80      	pop	{r7}
 800c7a2:	4770      	bx	lr
 800c7a4:	40021000 	.word	0x40021000

0800c7a8 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 800c7a8:	b480      	push	{r7}
 800c7aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800c7ac:	4b04      	ldr	r3, [pc, #16]	; (800c7c0 <LL_RCC_ReleaseBackupDomainReset+0x18>)
 800c7ae:	6a1b      	ldr	r3, [r3, #32]
 800c7b0:	4a03      	ldr	r2, [pc, #12]	; (800c7c0 <LL_RCC_ReleaseBackupDomainReset+0x18>)
 800c7b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c7b6:	6213      	str	r3, [r2, #32]
}
 800c7b8:	bf00      	nop
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bc80      	pop	{r7}
 800c7be:	4770      	bx	lr
 800c7c0:	40021000 	.word	0x40021000

0800c7c4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800c7c4:	b480      	push	{r7}
 800c7c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800c7c8:	4b04      	ldr	r3, [pc, #16]	; (800c7dc <LL_RCC_PLL_Enable+0x18>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	4a03      	ldr	r2, [pc, #12]	; (800c7dc <LL_RCC_PLL_Enable+0x18>)
 800c7ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c7d2:	6013      	str	r3, [r2, #0]
}
 800c7d4:	bf00      	nop
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	bc80      	pop	{r7}
 800c7da:	4770      	bx	lr
 800c7dc:	40021000 	.word	0x40021000

0800c7e0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800c7e0:	b480      	push	{r7}
 800c7e2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800c7e4:	4b06      	ldr	r3, [pc, #24]	; (800c800 <LL_RCC_PLL_IsReady+0x20>)
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c7f0:	bf0c      	ite	eq
 800c7f2:	2301      	moveq	r3, #1
 800c7f4:	2300      	movne	r3, #0
 800c7f6:	b2db      	uxtb	r3, r3
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	bc80      	pop	{r7}
 800c7fe:	4770      	bx	lr
 800c800:	40021000 	.word	0x40021000

0800c804 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 800c804:	b480      	push	{r7}
 800c806:	b083      	sub	sp, #12
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
 800c80c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 800c80e:	4b08      	ldr	r3, [pc, #32]	; (800c830 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 800c810:	685b      	ldr	r3, [r3, #4]
 800c812:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800c81c:	683b      	ldr	r3, [r7, #0]
 800c81e:	430b      	orrs	r3, r1
 800c820:	4903      	ldr	r1, [pc, #12]	; (800c830 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 800c822:	4313      	orrs	r3, r2
 800c824:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 800c826:	bf00      	nop
 800c828:	370c      	adds	r7, #12
 800c82a:	46bd      	mov	sp, r7
 800c82c:	bc80      	pop	{r7}
 800c82e:	4770      	bx	lr
 800c830:	40021000 	.word	0x40021000

0800c834 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800c834:	b480      	push	{r7}
 800c836:	b085      	sub	sp, #20
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 800c83c:	4b08      	ldr	r3, [pc, #32]	; (800c860 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800c83e:	695a      	ldr	r2, [r3, #20]
 800c840:	4907      	ldr	r1, [pc, #28]	; (800c860 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	4313      	orrs	r3, r2
 800c846:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800c848:	4b05      	ldr	r3, [pc, #20]	; (800c860 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800c84a:	695a      	ldr	r2, [r3, #20]
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	4013      	ands	r3, r2
 800c850:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c852:	68fb      	ldr	r3, [r7, #12]
}
 800c854:	bf00      	nop
 800c856:	3714      	adds	r7, #20
 800c858:	46bd      	mov	sp, r7
 800c85a:	bc80      	pop	{r7}
 800c85c:	4770      	bx	lr
 800c85e:	bf00      	nop
 800c860:	40021000 	.word	0x40021000

0800c864 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800c864:	b480      	push	{r7}
 800c866:	b085      	sub	sp, #20
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800c86c:	4b08      	ldr	r3, [pc, #32]	; (800c890 <LL_APB1_GRP1_EnableClock+0x2c>)
 800c86e:	69da      	ldr	r2, [r3, #28]
 800c870:	4907      	ldr	r1, [pc, #28]	; (800c890 <LL_APB1_GRP1_EnableClock+0x2c>)
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	4313      	orrs	r3, r2
 800c876:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800c878:	4b05      	ldr	r3, [pc, #20]	; (800c890 <LL_APB1_GRP1_EnableClock+0x2c>)
 800c87a:	69da      	ldr	r2, [r3, #28]
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	4013      	ands	r3, r2
 800c880:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c882:	68fb      	ldr	r3, [r7, #12]
}
 800c884:	bf00      	nop
 800c886:	3714      	adds	r7, #20
 800c888:	46bd      	mov	sp, r7
 800c88a:	bc80      	pop	{r7}
 800c88c:	4770      	bx	lr
 800c88e:	bf00      	nop
 800c890:	40021000 	.word	0x40021000

0800c894 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800c894:	b480      	push	{r7}
 800c896:	b085      	sub	sp, #20
 800c898:	af00      	add	r7, sp, #0
 800c89a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800c89c:	4b08      	ldr	r3, [pc, #32]	; (800c8c0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800c89e:	699a      	ldr	r2, [r3, #24]
 800c8a0:	4907      	ldr	r1, [pc, #28]	; (800c8c0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	4313      	orrs	r3, r2
 800c8a6:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800c8a8:	4b05      	ldr	r3, [pc, #20]	; (800c8c0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800c8aa:	699a      	ldr	r2, [r3, #24]
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	4013      	ands	r3, r2
 800c8b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
}
 800c8b4:	bf00      	nop
 800c8b6:	3714      	adds	r7, #20
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bc80      	pop	{r7}
 800c8bc:	4770      	bx	lr
 800c8be:	bf00      	nop
 800c8c0:	40021000 	.word	0x40021000

0800c8c4 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 800c8c4:	b480      	push	{r7}
 800c8c6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800c8c8:	4b04      	ldr	r3, [pc, #16]	; (800c8dc <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 800c8ca:	685b      	ldr	r3, [r3, #4]
 800c8cc:	4a03      	ldr	r2, [pc, #12]	; (800c8dc <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 800c8ce:	f043 0301 	orr.w	r3, r3, #1
 800c8d2:	6053      	str	r3, [r2, #4]
}
 800c8d4:	bf00      	nop
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	bc80      	pop	{r7}
 800c8da:	4770      	bx	lr
 800c8dc:	e0042000 	.word	0xe0042000

0800c8e0 <LL_DBGMCU_APB1_GRP1_FreezePeriph>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB1_GRP1_FreezePeriph(uint32_t Periphs)
{
 800c8e0:	b480      	push	{r7}
 800c8e2:	b083      	sub	sp, #12
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
  SET_BIT(DBGMCU->CR, Periphs);
 800c8e8:	4b05      	ldr	r3, [pc, #20]	; (800c900 <LL_DBGMCU_APB1_GRP1_FreezePeriph+0x20>)
 800c8ea:	685a      	ldr	r2, [r3, #4]
 800c8ec:	4904      	ldr	r1, [pc, #16]	; (800c900 <LL_DBGMCU_APB1_GRP1_FreezePeriph+0x20>)
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	4313      	orrs	r3, r2
 800c8f2:	604b      	str	r3, [r1, #4]
}
 800c8f4:	bf00      	nop
 800c8f6:	370c      	adds	r7, #12
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	bc80      	pop	{r7}
 800c8fc:	4770      	bx	lr
 800c8fe:	bf00      	nop
 800c900:	e0042000 	.word	0xe0042000

0800c904 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800c904:	b480      	push	{r7}
 800c906:	b083      	sub	sp, #12
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800c90c:	4b06      	ldr	r3, [pc, #24]	; (800c928 <LL_FLASH_SetLatency+0x24>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	f023 0207 	bic.w	r2, r3, #7
 800c914:	4904      	ldr	r1, [pc, #16]	; (800c928 <LL_FLASH_SetLatency+0x24>)
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	4313      	orrs	r3, r2
 800c91a:	600b      	str	r3, [r1, #0]
}
 800c91c:	bf00      	nop
 800c91e:	370c      	adds	r7, #12
 800c920:	46bd      	mov	sp, r7
 800c922:	bc80      	pop	{r7}
 800c924:	4770      	bx	lr
 800c926:	bf00      	nop
 800c928:	40022000 	.word	0x40022000

0800c92c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800c92c:	b480      	push	{r7}
 800c92e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800c930:	4b03      	ldr	r3, [pc, #12]	; (800c940 <LL_FLASH_GetLatency+0x14>)
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	f003 0307 	and.w	r3, r3, #7
}
 800c938:	4618      	mov	r0, r3
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bc80      	pop	{r7}
 800c93e:	4770      	bx	lr
 800c940:	40022000 	.word	0x40022000

0800c944 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 800c944:	b480      	push	{r7}
 800c946:	b083      	sub	sp, #12
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 800c94c:	4b05      	ldr	r3, [pc, #20]	; (800c964 <LL_EXTI_DisableIT_0_31+0x20>)
 800c94e:	681a      	ldr	r2, [r3, #0]
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	43db      	mvns	r3, r3
 800c954:	4903      	ldr	r1, [pc, #12]	; (800c964 <LL_EXTI_DisableIT_0_31+0x20>)
 800c956:	4013      	ands	r3, r2
 800c958:	600b      	str	r3, [r1, #0]
}
 800c95a:	bf00      	nop
 800c95c:	370c      	adds	r7, #12
 800c95e:	46bd      	mov	sp, r7
 800c960:	bc80      	pop	{r7}
 800c962:	4770      	bx	lr
 800c964:	40010400 	.word	0x40010400

0800c968 <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR    DBP       LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 800c968:	b480      	push	{r7}
 800c96a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);
 800c96c:	4b04      	ldr	r3, [pc, #16]	; (800c980 <LL_PWR_EnableBkUpAccess+0x18>)
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	4a03      	ldr	r2, [pc, #12]	; (800c980 <LL_PWR_EnableBkUpAccess+0x18>)
 800c972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c976:	6013      	str	r3, [r2, #0]
}
 800c978:	bf00      	nop
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bc80      	pop	{r7}
 800c97e:	4770      	bx	lr
 800c980:	40007000 	.word	0x40007000

0800c984 <LL_RTC_SetAsynchPrescaler>:
  * @param  RTCx RTC Instance
  * @param  AsynchPrescaler Value between Min_Data = 0 and Max_Data = 0xFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetAsynchPrescaler(RTC_TypeDef *RTCx, uint32_t AsynchPrescaler)
{
 800c984:	b480      	push	{r7}
 800c986:	b083      	sub	sp, #12
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
 800c98c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRLH, RTC_PRLH_PRL, (AsynchPrescaler >> 16));
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	689b      	ldr	r3, [r3, #8]
 800c992:	f023 020f 	bic.w	r2, r3, #15
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	0c1b      	lsrs	r3, r3, #16
 800c99a:	431a      	orrs	r2, r3
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RTCx->PRLL, RTC_PRLL_PRL, (AsynchPrescaler & RTC_PRLL_PRL));
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	68db      	ldr	r3, [r3, #12]
 800c9a4:	0c1b      	lsrs	r3, r3, #16
 800c9a6:	041b      	lsls	r3, r3, #16
 800c9a8:	683a      	ldr	r2, [r7, #0]
 800c9aa:	b292      	uxth	r2, r2
 800c9ac:	431a      	orrs	r2, r3
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	60da      	str	r2, [r3, #12]
}
 800c9b2:	bf00      	nop
 800c9b4:	370c      	adds	r7, #12
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bc80      	pop	{r7}
 800c9ba:	4770      	bx	lr

0800c9bc <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 800c9bc:	b480      	push	{r7}
 800c9be:	b083      	sub	sp, #12
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	601a      	str	r2, [r3, #0]
}
 800c9d0:	bf00      	nop
 800c9d2:	370c      	adds	r7, #12
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bc80      	pop	{r7}
 800c9d8:	4770      	bx	lr

0800c9da <LL_SPI_EnableDMAReq_TX>:
  * @rmtoll CR2          TXDMAEN       LL_SPI_EnableDMAReq_TX
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableDMAReq_TX(SPI_TypeDef *SPIx)
{
 800c9da:	b480      	push	{r7}
 800c9dc:	b083      	sub	sp, #12
 800c9de:	af00      	add	r7, sp, #0
 800c9e0:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	685b      	ldr	r3, [r3, #4]
 800c9e6:	f043 0202 	orr.w	r2, r3, #2
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	605a      	str	r2, [r3, #4]
}
 800c9ee:	bf00      	nop
 800c9f0:	370c      	adds	r7, #12
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	bc80      	pop	{r7}
 800c9f6:	4770      	bx	lr

0800c9f8 <LL_SPI_DMA_GetRegAddr>:
  * @rmtoll DR           DR            LL_SPI_DMA_GetRegAddr
  * @param  SPIx SPI Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_SPI_DMA_GetRegAddr(SPI_TypeDef *SPIx)
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	b083      	sub	sp, #12
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
  return (uint32_t) &(SPIx->DR);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	330c      	adds	r3, #12
}
 800ca04:	4618      	mov	r0, r3
 800ca06:	370c      	adds	r7, #12
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	bc80      	pop	{r7}
 800ca0c:	4770      	bx	lr

0800ca0e <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 800ca0e:	b480      	push	{r7}
 800ca10:	b083      	sub	sp, #12
 800ca12:	af00      	add	r7, sp, #0
 800ca14:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	f043 0201 	orr.w	r2, r3, #1
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	601a      	str	r2, [r3, #0]
}
 800ca22:	bf00      	nop
 800ca24:	370c      	adds	r7, #12
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bc80      	pop	{r7}
 800ca2a:	4770      	bx	lr

0800ca2c <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 800ca2c:	b480      	push	{r7}
 800ca2e:	b083      	sub	sp, #12
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	601a      	str	r2, [r3, #0]
}
 800ca40:	bf00      	nop
 800ca42:	370c      	adds	r7, #12
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bc80      	pop	{r7}
 800ca48:	4770      	bx	lr

0800ca4a <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 800ca4a:	b480      	push	{r7}
 800ca4c:	b083      	sub	sp, #12
 800ca4e:	af00      	add	r7, sp, #0
 800ca50:	6078      	str	r0, [r7, #4]
 800ca52:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	6a1a      	ldr	r2, [r3, #32]
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	431a      	orrs	r2, r3
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	621a      	str	r2, [r3, #32]
}
 800ca60:	bf00      	nop
 800ca62:	370c      	adds	r7, #12
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bc80      	pop	{r7}
 800ca68:	4770      	bx	lr
	...

0800ca6c <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 800ca6c:	b480      	push	{r7}
 800ca6e:	b085      	sub	sp, #20
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
 800ca74:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	2b01      	cmp	r3, #1
 800ca7a:	d01c      	beq.n	800cab6 <LL_TIM_OC_DisableFast+0x4a>
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	2b04      	cmp	r3, #4
 800ca80:	d017      	beq.n	800cab2 <LL_TIM_OC_DisableFast+0x46>
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	2b10      	cmp	r3, #16
 800ca86:	d012      	beq.n	800caae <LL_TIM_OC_DisableFast+0x42>
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	2b40      	cmp	r3, #64	; 0x40
 800ca8c:	d00d      	beq.n	800caaa <LL_TIM_OC_DisableFast+0x3e>
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca94:	d007      	beq.n	800caa6 <LL_TIM_OC_DisableFast+0x3a>
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca9c:	d101      	bne.n	800caa2 <LL_TIM_OC_DisableFast+0x36>
 800ca9e:	2305      	movs	r3, #5
 800caa0:	e00a      	b.n	800cab8 <LL_TIM_OC_DisableFast+0x4c>
 800caa2:	2306      	movs	r3, #6
 800caa4:	e008      	b.n	800cab8 <LL_TIM_OC_DisableFast+0x4c>
 800caa6:	2304      	movs	r3, #4
 800caa8:	e006      	b.n	800cab8 <LL_TIM_OC_DisableFast+0x4c>
 800caaa:	2303      	movs	r3, #3
 800caac:	e004      	b.n	800cab8 <LL_TIM_OC_DisableFast+0x4c>
 800caae:	2302      	movs	r3, #2
 800cab0:	e002      	b.n	800cab8 <LL_TIM_OC_DisableFast+0x4c>
 800cab2:	2301      	movs	r3, #1
 800cab4:	e000      	b.n	800cab8 <LL_TIM_OC_DisableFast+0x4c>
 800cab6:	2300      	movs	r3, #0
 800cab8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	3318      	adds	r3, #24
 800cabe:	4619      	mov	r1, r3
 800cac0:	7bfb      	ldrb	r3, [r7, #15]
 800cac2:	4a0a      	ldr	r2, [pc, #40]	; (800caec <LL_TIM_OC_DisableFast+0x80>)
 800cac4:	5cd3      	ldrb	r3, [r2, r3]
 800cac6:	440b      	add	r3, r1
 800cac8:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800caca:	68bb      	ldr	r3, [r7, #8]
 800cacc:	681a      	ldr	r2, [r3, #0]
 800cace:	7bfb      	ldrb	r3, [r7, #15]
 800cad0:	4907      	ldr	r1, [pc, #28]	; (800caf0 <LL_TIM_OC_DisableFast+0x84>)
 800cad2:	5ccb      	ldrb	r3, [r1, r3]
 800cad4:	4619      	mov	r1, r3
 800cad6:	2304      	movs	r3, #4
 800cad8:	408b      	lsls	r3, r1
 800cada:	43db      	mvns	r3, r3
 800cadc:	401a      	ands	r2, r3
 800cade:	68bb      	ldr	r3, [r7, #8]
 800cae0:	601a      	str	r2, [r3, #0]

}
 800cae2:	bf00      	nop
 800cae4:	3714      	adds	r7, #20
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bc80      	pop	{r7}
 800caea:	4770      	bx	lr
 800caec:	08016110 	.word	0x08016110
 800caf0:	08016118 	.word	0x08016118

0800caf4 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 800caf4:	b480      	push	{r7}
 800caf6:	b085      	sub	sp, #20
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
 800cafc:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800cafe:	683b      	ldr	r3, [r7, #0]
 800cb00:	2b01      	cmp	r3, #1
 800cb02:	d01c      	beq.n	800cb3e <LL_TIM_OC_EnablePreload+0x4a>
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	2b04      	cmp	r3, #4
 800cb08:	d017      	beq.n	800cb3a <LL_TIM_OC_EnablePreload+0x46>
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	2b10      	cmp	r3, #16
 800cb0e:	d012      	beq.n	800cb36 <LL_TIM_OC_EnablePreload+0x42>
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	2b40      	cmp	r3, #64	; 0x40
 800cb14:	d00d      	beq.n	800cb32 <LL_TIM_OC_EnablePreload+0x3e>
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb1c:	d007      	beq.n	800cb2e <LL_TIM_OC_EnablePreload+0x3a>
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb24:	d101      	bne.n	800cb2a <LL_TIM_OC_EnablePreload+0x36>
 800cb26:	2305      	movs	r3, #5
 800cb28:	e00a      	b.n	800cb40 <LL_TIM_OC_EnablePreload+0x4c>
 800cb2a:	2306      	movs	r3, #6
 800cb2c:	e008      	b.n	800cb40 <LL_TIM_OC_EnablePreload+0x4c>
 800cb2e:	2304      	movs	r3, #4
 800cb30:	e006      	b.n	800cb40 <LL_TIM_OC_EnablePreload+0x4c>
 800cb32:	2303      	movs	r3, #3
 800cb34:	e004      	b.n	800cb40 <LL_TIM_OC_EnablePreload+0x4c>
 800cb36:	2302      	movs	r3, #2
 800cb38:	e002      	b.n	800cb40 <LL_TIM_OC_EnablePreload+0x4c>
 800cb3a:	2301      	movs	r3, #1
 800cb3c:	e000      	b.n	800cb40 <LL_TIM_OC_EnablePreload+0x4c>
 800cb3e:	2300      	movs	r3, #0
 800cb40:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	3318      	adds	r3, #24
 800cb46:	4619      	mov	r1, r3
 800cb48:	7bfb      	ldrb	r3, [r7, #15]
 800cb4a:	4a0a      	ldr	r2, [pc, #40]	; (800cb74 <LL_TIM_OC_EnablePreload+0x80>)
 800cb4c:	5cd3      	ldrb	r3, [r2, r3]
 800cb4e:	440b      	add	r3, r1
 800cb50:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800cb52:	68bb      	ldr	r3, [r7, #8]
 800cb54:	681a      	ldr	r2, [r3, #0]
 800cb56:	7bfb      	ldrb	r3, [r7, #15]
 800cb58:	4907      	ldr	r1, [pc, #28]	; (800cb78 <LL_TIM_OC_EnablePreload+0x84>)
 800cb5a:	5ccb      	ldrb	r3, [r1, r3]
 800cb5c:	4619      	mov	r1, r3
 800cb5e:	2308      	movs	r3, #8
 800cb60:	408b      	lsls	r3, r1
 800cb62:	431a      	orrs	r2, r3
 800cb64:	68bb      	ldr	r3, [r7, #8]
 800cb66:	601a      	str	r2, [r3, #0]
}
 800cb68:	bf00      	nop
 800cb6a:	3714      	adds	r7, #20
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bc80      	pop	{r7}
 800cb70:	4770      	bx	lr
 800cb72:	bf00      	nop
 800cb74:	08016110 	.word	0x08016110
 800cb78:	08016118 	.word	0x08016118

0800cb7c <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800cb7c:	b480      	push	{r7}
 800cb7e:	b083      	sub	sp, #12
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
 800cb84:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	683a      	ldr	r2, [r7, #0]
 800cb8a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800cb8c:	bf00      	nop
 800cb8e:	370c      	adds	r7, #12
 800cb90:	46bd      	mov	sp, r7
 800cb92:	bc80      	pop	{r7}
 800cb94:	4770      	bx	lr

0800cb96 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 800cb96:	b480      	push	{r7}
 800cb98:	b083      	sub	sp, #12
 800cb9a:	af00      	add	r7, sp, #0
 800cb9c:	6078      	str	r0, [r7, #4]
 800cb9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	689b      	ldr	r3, [r3, #8]
 800cba4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cba8:	f023 0307 	bic.w	r3, r3, #7
 800cbac:	683a      	ldr	r2, [r7, #0]
 800cbae:	431a      	orrs	r2, r3
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	609a      	str	r2, [r3, #8]
}
 800cbb4:	bf00      	nop
 800cbb6:	370c      	adds	r7, #12
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bc80      	pop	{r7}
 800cbbc:	4770      	bx	lr

0800cbbe <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 800cbbe:	b480      	push	{r7}
 800cbc0:	b083      	sub	sp, #12
 800cbc2:	af00      	add	r7, sp, #0
 800cbc4:	6078      	str	r0, [r7, #4]
 800cbc6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	685b      	ldr	r3, [r3, #4]
 800cbcc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	431a      	orrs	r2, r3
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	605a      	str	r2, [r3, #4]
}
 800cbd8:	bf00      	nop
 800cbda:	370c      	adds	r7, #12
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bc80      	pop	{r7}
 800cbe0:	4770      	bx	lr

0800cbe2 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 800cbe2:	b480      	push	{r7}
 800cbe4:	b083      	sub	sp, #12
 800cbe6:	af00      	add	r7, sp, #0
 800cbe8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	689b      	ldr	r3, [r3, #8]
 800cbee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	609a      	str	r2, [r3, #8]
}
 800cbf6:	bf00      	nop
 800cbf8:	370c      	adds	r7, #12
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bc80      	pop	{r7}
 800cbfe:	4770      	bx	lr

0800cc00 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 800cc00:	b480      	push	{r7}
 800cc02:	b083      	sub	sp, #12
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f06f 0201 	mvn.w	r2, #1
 800cc0e:	611a      	str	r2, [r3, #16]
}
 800cc10:	bf00      	nop
 800cc12:	370c      	adds	r7, #12
 800cc14:	46bd      	mov	sp, r7
 800cc16:	bc80      	pop	{r7}
 800cc18:	4770      	bx	lr

0800cc1a <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 800cc1a:	b480      	push	{r7}
 800cc1c:	b083      	sub	sp, #12
 800cc1e:	af00      	add	r7, sp, #0
 800cc20:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	68db      	ldr	r3, [r3, #12]
 800cc26:	f043 0201 	orr.w	r2, r3, #1
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	60da      	str	r2, [r3, #12]
}
 800cc2e:	bf00      	nop
 800cc30:	370c      	adds	r7, #12
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bc80      	pop	{r7}
 800cc36:	4770      	bx	lr

0800cc38 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800cc38:	b490      	push	{r4, r7}
 800cc3a:	b088      	sub	sp, #32
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	60f8      	str	r0, [r7, #12]
 800cc40:	60b9      	str	r1, [r7, #8]
 800cc42:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	461a      	mov	r2, r3
 800cc48:	68bb      	ldr	r3, [r7, #8]
 800cc4a:	0e1b      	lsrs	r3, r3, #24
 800cc4c:	4413      	add	r3, r2
 800cc4e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 800cc50:	6822      	ldr	r2, [r4, #0]
 800cc52:	68bb      	ldr	r3, [r7, #8]
 800cc54:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cc56:	697b      	ldr	r3, [r7, #20]
 800cc58:	fa93 f3a3 	rbit	r3, r3
 800cc5c:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800cc5e:	693b      	ldr	r3, [r7, #16]
 800cc60:	fab3 f383 	clz	r3, r3
 800cc64:	b2db      	uxtb	r3, r3
 800cc66:	009b      	lsls	r3, r3, #2
 800cc68:	210f      	movs	r1, #15
 800cc6a:	fa01 f303 	lsl.w	r3, r1, r3
 800cc6e:	43db      	mvns	r3, r3
 800cc70:	401a      	ands	r2, r3
 800cc72:	68bb      	ldr	r3, [r7, #8]
 800cc74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cc76:	69fb      	ldr	r3, [r7, #28]
 800cc78:	fa93 f3a3 	rbit	r3, r3
 800cc7c:	61bb      	str	r3, [r7, #24]
  return result;
 800cc7e:	69bb      	ldr	r3, [r7, #24]
 800cc80:	fab3 f383 	clz	r3, r3
 800cc84:	b2db      	uxtb	r3, r3
 800cc86:	009b      	lsls	r3, r3, #2
 800cc88:	6879      	ldr	r1, [r7, #4]
 800cc8a:	fa01 f303 	lsl.w	r3, r1, r3
 800cc8e:	4313      	orrs	r3, r2
 800cc90:	6023      	str	r3, [r4, #0]
}
 800cc92:	bf00      	nop
 800cc94:	3720      	adds	r7, #32
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bc90      	pop	{r4, r7}
 800cc9a:	4770      	bx	lr

0800cc9c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_DOWN
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800cc9c:	b480      	push	{r7}
 800cc9e:	b087      	sub	sp, #28
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	60f8      	str	r0, [r7, #12]
 800cca4:	60b9      	str	r1, [r7, #8]
 800cca6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	68da      	ldr	r2, [r3, #12]
 800ccac:	68bb      	ldr	r3, [r7, #8]
 800ccae:	0a1b      	lsrs	r3, r3, #8
 800ccb0:	43db      	mvns	r3, r3
 800ccb2:	401a      	ands	r2, r3
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	0a1b      	lsrs	r3, r3, #8
 800ccb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ccba:	697b      	ldr	r3, [r7, #20]
 800ccbc:	fa93 f3a3 	rbit	r3, r3
 800ccc0:	613b      	str	r3, [r7, #16]
  return result;
 800ccc2:	693b      	ldr	r3, [r7, #16]
 800ccc4:	fab3 f383 	clz	r3, r3
 800ccc8:	b2db      	uxtb	r3, r3
 800ccca:	4619      	mov	r1, r3
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	408b      	lsls	r3, r1
 800ccd0:	431a      	orrs	r2, r3
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	60da      	str	r2, [r3, #12]
}
 800ccd6:	bf00      	nop
 800ccd8:	371c      	adds	r7, #28
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bc80      	pop	{r7}
 800ccde:	4770      	bx	lr

0800cce0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800cce0:	b480      	push	{r7}
 800cce2:	b083      	sub	sp, #12
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
 800cce8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800ccea:	683b      	ldr	r3, [r7, #0]
 800ccec:	0a1b      	lsrs	r3, r3, #8
 800ccee:	b29a      	uxth	r2, r3
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	615a      	str	r2, [r3, #20]
}
 800ccf4:	bf00      	nop
 800ccf6:	370c      	adds	r7, #12
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	bc80      	pop	{r7}
 800ccfc:	4770      	bx	lr

0800ccfe <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800ccfe:	b480      	push	{r7}
 800cd00:	b085      	sub	sp, #20
 800cd02:	af00      	add	r7, sp, #0
 800cd04:	6078      	str	r0, [r7, #4]
 800cd06:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	68db      	ldr	r3, [r3, #12]
 800cd0c:	60fb      	str	r3, [r7, #12]
  uint32_t pinmask = ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	0a1b      	lsrs	r3, r3, #8
 800cd12:	b29b      	uxth	r3, r3
 800cd14:	60bb      	str	r3, [r7, #8]
  WRITE_REG(GPIOx->BSRR, ((odr & pinmask) << 16u) | (~odr & pinmask));
 800cd16:	68fa      	ldr	r2, [r7, #12]
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	4013      	ands	r3, r2
 800cd1c:	041a      	lsls	r2, r3, #16
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	43d9      	mvns	r1, r3
 800cd22:	68bb      	ldr	r3, [r7, #8]
 800cd24:	400b      	ands	r3, r1
 800cd26:	431a      	orrs	r2, r3
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	611a      	str	r2, [r3, #16]
}
 800cd2c:	bf00      	nop
 800cd2e:	3714      	adds	r7, #20
 800cd30:	46bd      	mov	sp, r7
 800cd32:	bc80      	pop	{r7}
 800cd34:	4770      	bx	lr
	...

0800cd38 <LL_GPIO_AF_SetEXTISource>:
  *         @arg @ref LL_GPIO_AF_EXTI_LINE14
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800cd38:	b480      	push	{r7}
 800cd3a:	b085      	sub	sp, #20
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
 800cd40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 800cd42:	4a13      	ldr	r2, [pc, #76]	; (800cd90 <LL_GPIO_AF_SetEXTISource+0x58>)
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	b2db      	uxtb	r3, r3
 800cd48:	3302      	adds	r3, #2
 800cd4a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	0c1b      	lsrs	r3, r3, #16
 800cd52:	43db      	mvns	r3, r3
 800cd54:	ea02 0103 	and.w	r1, r2, r3
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	0c1b      	lsrs	r3, r3, #16
 800cd5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	fa93 f3a3 	rbit	r3, r3
 800cd64:	60bb      	str	r3, [r7, #8]
  return result;
 800cd66:	68bb      	ldr	r3, [r7, #8]
 800cd68:	fab3 f383 	clz	r3, r3
 800cd6c:	b2db      	uxtb	r3, r3
 800cd6e:	461a      	mov	r2, r3
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	fa03 f202 	lsl.w	r2, r3, r2
 800cd76:	4806      	ldr	r0, [pc, #24]	; (800cd90 <LL_GPIO_AF_SetEXTISource+0x58>)
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	b2db      	uxtb	r3, r3
 800cd7c:	430a      	orrs	r2, r1
 800cd7e:	3302      	adds	r3, #2
 800cd80:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800cd84:	bf00      	nop
 800cd86:	3714      	adds	r7, #20
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	bc80      	pop	{r7}
 800cd8c:	4770      	bx	lr
 800cd8e:	bf00      	nop
 800cd90:	40010000 	.word	0x40010000

0800cd94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800cd94:	b590      	push	{r4, r7, lr}
 800cd96:	b08d      	sub	sp, #52	; 0x34
 800cd98:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800cd9a:	f000 ffd7 	bl	800dd4c <HAL_Init>

  /* USER CODE BEGIN Init */
  LL_DBGMCU_EnableDBGSleepMode();
 800cd9e:	f7ff fd91 	bl	800c8c4 <LL_DBGMCU_EnableDBGSleepMode>
  LL_DBGMCU_APB1_GRP1_FreezePeriph(LL_DBGMCU_APB1_GRP1_TIM3_STOP | LL_DBGMCU_APB1_GRP1_TIM4_STOP);
 800cda2:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 800cda6:	f7ff fd9b 	bl	800c8e0 <LL_DBGMCU_APB1_GRP1_FreezePeriph>
  LL_DBGMCU_APB1_GRP1_FreezePeriph(LL_DBGMCU_APB1_GRP1_TIM6_STOP);
 800cdaa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800cdae:	f7ff fd97 	bl	800c8e0 <LL_DBGMCU_APB1_GRP1_FreezePeriph>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800cdb2:	f000 f8e1 	bl	800cf78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800cdb6:	f000 faa5 	bl	800d304 <MX_GPIO_Init>
  MX_DMA_Init();
 800cdba:	f000 fa8b 	bl	800d2d4 <MX_DMA_Init>
  MX_SPI1_Init();
 800cdbe:	f000 f95d 	bl	800d07c <MX_SPI1_Init>
  MX_TIM3_Init();
 800cdc2:	f000 f9cd 	bl	800d160 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 800cdc6:	f008 fc41 	bl	801564c <MX_USB_DEVICE_Init>
  MX_TIM6_Init();
 800cdca:	f000 fa49 	bl	800d260 <MX_TIM6_Init>
  MX_RTC_Init();
 800cdce:	f000 f933 	bl	800d038 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  LL_EXTI_DisableIT_0_31(LL_EXTI_LINE_5 | LL_EXTI_LINE_6 | LL_EXTI_LINE_7);
 800cdd2:	20e0      	movs	r0, #224	; 0xe0
 800cdd4:	f7ff fdb6 	bl	800c944 <LL_EXTI_DisableIT_0_31>
  LL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800cdd8:	4958      	ldr	r1, [pc, #352]	; (800cf3c <main+0x1a8>)
 800cdda:	4859      	ldr	r0, [pc, #356]	; (800cf40 <main+0x1ac>)
 800cddc:	f7ff ff8f 	bl	800ccfe <LL_GPIO_TogglePin>


  LL_TIM_EnableCounter(TIM3);
 800cde0:	4858      	ldr	r0, [pc, #352]	; (800cf44 <main+0x1b0>)
 800cde2:	f7ff fe14 	bl	800ca0e <LL_TIM_EnableCounter>
  LL_TIM_ClearFlag_UPDATE(TIM3);
 800cde6:	4857      	ldr	r0, [pc, #348]	; (800cf44 <main+0x1b0>)
 800cde8:	f7ff ff0a 	bl	800cc00 <LL_TIM_ClearFlag_UPDATE>
  LL_TIM_EnableIT_UPDATE(TIM3);
 800cdec:	4855      	ldr	r0, [pc, #340]	; (800cf44 <main+0x1b0>)
 800cdee:	f7ff ff14 	bl	800cc1a <LL_TIM_EnableIT_UPDATE>
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800cdf2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800cdf6:	4853      	ldr	r0, [pc, #332]	; (800cf44 <main+0x1b0>)
 800cdf8:	f7ff fe27 	bl	800ca4a <LL_TIM_CC_EnableChannel>
  LL_TIM_OC_SetCompareCH4(TIM3, 29000);//170 - 30001);
 800cdfc:	f247 1148 	movw	r1, #29000	; 0x7148
 800ce00:	4850      	ldr	r0, [pc, #320]	; (800cf44 <main+0x1b0>)
 800ce02:	f7ff febb 	bl	800cb7c <LL_TIM_OC_SetCompareCH4>

  LL_TIM_EnableCounter(TIM6);
 800ce06:	4850      	ldr	r0, [pc, #320]	; (800cf48 <main+0x1b4>)
 800ce08:	f7ff fe01 	bl	800ca0e <LL_TIM_EnableCounter>

  LL_TIM_EnableIT_UPDATE(TIM6);
 800ce0c:	484e      	ldr	r0, [pc, #312]	; (800cf48 <main+0x1b4>)
 800ce0e:	f7ff ff04 	bl	800cc1a <LL_TIM_EnableIT_UPDATE>

	cpToLPBuffer();
 800ce12:	f000 fb15 	bl	800d440 <cpToLPBuffer>
	  LP_buffer [4*i+3] = display_buffer[i][1];
  };
*/

  //LL_DMA_ConfigTransfer(DMAx, Channel, Configuration)
  LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_3, (uint32_t)&LP_buffer[4],LL_SPI_DMA_GetRegAddr(SPI1) ,LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800ce16:	4c4d      	ldr	r4, [pc, #308]	; (800cf4c <main+0x1b8>)
 800ce18:	484d      	ldr	r0, [pc, #308]	; (800cf50 <main+0x1bc>)
 800ce1a:	f7ff fded 	bl	800c9f8 <LL_SPI_DMA_GetRegAddr>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	2210      	movs	r2, #16
 800ce22:	9200      	str	r2, [sp, #0]
 800ce24:	4622      	mov	r2, r4
 800ce26:	2103      	movs	r1, #3
 800ce28:	484a      	ldr	r0, [pc, #296]	; (800cf54 <main+0x1c0>)
 800ce2a:	f7ff fb79 	bl	800c520 <LL_DMA_ConfigAddresses>

  //LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_3, (uint32_t *)LP_buffer);
  //LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_3, 4);

  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_3);
 800ce2e:	2103      	movs	r1, #3
 800ce30:	4848      	ldr	r0, [pc, #288]	; (800cf54 <main+0x1c0>)
 800ce32:	f7ff fbaf 	bl	800c594 <LL_DMA_EnableIT_TC>
  LL_SPI_EnableDMAReq_TX(SPI1);
 800ce36:	4846      	ldr	r0, [pc, #280]	; (800cf50 <main+0x1bc>)
 800ce38:	f7ff fdcf 	bl	800c9da <LL_SPI_EnableDMAReq_TX>
  //LL_SPI_EnableIT_TXE(SPI1);

  LL_SPI_Enable(SPI1);
 800ce3c:	4844      	ldr	r0, [pc, #272]	; (800cf50 <main+0x1bc>)
 800ce3e:	f7ff fdbd 	bl	800c9bc <LL_SPI_Enable>


  __NOP();
 800ce42:	bf00      	nop
  //uint8_t pos = font_8ptChrsDescr[4]->position;
  //uint8_t siz = symb_8s_siz(4);

  volatile uint32_t test;
//  test = '0' - font_8pt_info.stchar;
  test = test123->x;
 800ce44:	4b44      	ldr	r3, [pc, #272]	; (800cf58 <main+0x1c4>)
 800ce46:	781b      	ldrb	r3, [r3, #0]
 800ce48:	b2db      	uxtb	r3, r3
 800ce4a:	607b      	str	r3, [r7, #4]
  __NOP();
 800ce4c:	bf00      	nop
//  test = font_8ptChrsDescr[4].position;
  test = font_8ptChrsDescr[4].size;
 800ce4e:	4b43      	ldr	r3, [pc, #268]	; (800cf5c <main+0x1c8>)
 800ce50:	7a1b      	ldrb	r3, [r3, #8]
 800ce52:	607b      	str	r3, [r7, #4]
  test = font_8ptChrsDescr[4].position;
 800ce54:	4b41      	ldr	r3, [pc, #260]	; (800cf5c <main+0x1c8>)
 800ce56:	7a5b      	ldrb	r3, [r3, #9]
 800ce58:	607b      	str	r3, [r7, #4]
  test = font_8pt_info.stchar;
 800ce5a:	4b41      	ldr	r3, [pc, #260]	; (800cf60 <main+0x1cc>)
 800ce5c:	785b      	ldrb	r3, [r3, #1]
 800ce5e:	607b      	str	r3, [r7, #4]
  test = font_8pt_info.endchar;
 800ce60:	4b3f      	ldr	r3, [pc, #252]	; (800cf60 <main+0x1cc>)
 800ce62:	789b      	ldrb	r3, [r3, #2]
 800ce64:	607b      	str	r3, [r7, #4]
  test = font_8pt_info.sp_width;
 800ce66:	4b3e      	ldr	r3, [pc, #248]	; (800cf60 <main+0x1cc>)
 800ce68:	78db      	ldrb	r3, [r3, #3]
 800ce6a:	607b      	str	r3, [r7, #4]
  test = font_8pt_info.height;
 800ce6c:	4b3c      	ldr	r3, [pc, #240]	; (800cf60 <main+0x1cc>)
 800ce6e:	781b      	ldrb	r3, [r3, #0]
 800ce70:	607b      	str	r3, [r7, #4]
  test = font_8ptBtmps[6];
 800ce72:	4b3c      	ldr	r3, [pc, #240]	; (800cf64 <main+0x1d0>)
 800ce74:	799b      	ldrb	r3, [r3, #6]
 800ce76:	607b      	str	r3, [r7, #4]

  bpos = bmpaddr('1');
*/


  test = strlen(str);
 800ce78:	483b      	ldr	r0, [pc, #236]	; (800cf68 <main+0x1d4>)
 800ce7a:	f7ff f9d3 	bl	800c224 <strlen>
 800ce7e:	4603      	mov	r3, r0
 800ce80:	607b      	str	r3, [r7, #4]



   //strcpy(str,str_templ);

   putStrToBuff(&str[0]);
 800ce82:	4839      	ldr	r0, [pc, #228]	; (800cf68 <main+0x1d4>)
 800ce84:	f000 fb1e 	bl	800d4c4 <putStrToBuff>

			  display_buffer[i][0] = (temp >> 16);
			  display_buffer[i][1] = (temp);
		  }
*/
		  __NOP();
 800ce88:	bf00      	nop
		  uint32_t testop1 = 10;
 800ce8a:	230a      	movs	r3, #10
 800ce8c:	627b      	str	r3, [r7, #36]	; 0x24
		  uint32_t testop2 = 2;
 800ce8e:	2302      	movs	r3, #2
 800ce90:	623b      	str	r3, [r7, #32]
		  uint32_t result;
		  asm("nop");
 800ce92:	bf00      	nop
 800ce94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce96:	60fb      	str	r3, [r7, #12]
 800ce98:	6a3b      	ldr	r3, [r7, #32]
 800ce9a:	60bb      	str	r3, [r7, #8]
  op2 %= 32U;
 800ce9c:	68bb      	ldr	r3, [r7, #8]
 800ce9e:	f003 031f 	and.w	r3, r3, #31
 800cea2:	60bb      	str	r3, [r7, #8]
  if (op2 == 0U)
 800cea4:	68bb      	ldr	r3, [r7, #8]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d101      	bne.n	800ceae <main+0x11a>
    return op1;
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	e003      	b.n	800ceb6 <main+0x122>
  return (op1 >> op2) | (op1 << (32U - op2));
 800ceae:	68fa      	ldr	r2, [r7, #12]
 800ceb0:	68bb      	ldr	r3, [r7, #8]
 800ceb2:	fa62 f303 	ror.w	r3, r2, r3
		  result = __ROR(testop1, testop2);
 800ceb6:	61fb      	str	r3, [r7, #28]
//  return (op1 >> op2) | (op1 << (32U - op2));
		  result = (testop1 >> testop2) | (testop1 << (32U -testop2));
 800ceb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ceba:	6a3b      	ldr	r3, [r7, #32]
 800cebc:	fa62 f303 	ror.w	r3, r2, r3
 800cec0:	61fb      	str	r3, [r7, #28]
 800cec2:	69fb      	ldr	r3, [r7, #28]
 800cec4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cec6:	697b      	ldr	r3, [r7, #20]
 800cec8:	fa93 f3a3 	rbit	r3, r3
 800cecc:	613b      	str	r3, [r7, #16]
  return result;
 800cece:	693b      	ldr	r3, [r7, #16]
		  result = __RBIT(result);
 800ced0:	61fb      	str	r3, [r7, #28]
		  uint32_t value = result;
 800ced2:	69fb      	ldr	r3, [r7, #28]
 800ced4:	61bb      	str	r3, [r7, #24]
    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ced6:	69bb      	ldr	r3, [r7, #24]
 800ced8:	fa93 f3a3 	rbit	r3, r3
 800cedc:	61fb      	str	r3, [r7, #28]

    __ASM volatile ("ror.w %0, %1" : "=r" (result) : "r" (testop2));
 800cede:	6a3b      	ldr	r3, [r7, #32]
 800cee0:	fa63 f303 	ror.w	r3, r3, r3
 800cee4:	61fb      	str	r3, [r7, #28]

    	//display

  cpToLPBuffer();
 800cee6:	f000 faab 	bl	800d440 <cpToLPBuffer>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  __WFI();
 800ceea:	bf30      	wfi
	  __NOP();
 800ceec:	bf00      	nop
	  __NOP();
 800ceee:	bf00      	nop

	  if (cntupd) {
 800cef0:	4b1e      	ldr	r3, [pc, #120]	; (800cf6c <main+0x1d8>)
 800cef2:	781b      	ldrb	r3, [r3, #0]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d0f8      	beq.n	800ceea <main+0x156>
	  mixstr[0] = '0' + cnt1.c3;
 800cef8:	4b1d      	ldr	r3, [pc, #116]	; (800cf70 <main+0x1dc>)
 800cefa:	781b      	ldrb	r3, [r3, #0]
 800cefc:	3330      	adds	r3, #48	; 0x30
 800cefe:	b2da      	uxtb	r2, r3
 800cf00:	4b1c      	ldr	r3, [pc, #112]	; (800cf74 <main+0x1e0>)
 800cf02:	701a      	strb	r2, [r3, #0]
	  mixstr[1] = '0' + cnt1.c2;
 800cf04:	4b1a      	ldr	r3, [pc, #104]	; (800cf70 <main+0x1dc>)
 800cf06:	785b      	ldrb	r3, [r3, #1]
 800cf08:	3330      	adds	r3, #48	; 0x30
 800cf0a:	b2da      	uxtb	r2, r3
 800cf0c:	4b19      	ldr	r3, [pc, #100]	; (800cf74 <main+0x1e0>)
 800cf0e:	705a      	strb	r2, [r3, #1]
	  mixstr[2] = '0' + cnt1.c1;
 800cf10:	4b17      	ldr	r3, [pc, #92]	; (800cf70 <main+0x1dc>)
 800cf12:	789b      	ldrb	r3, [r3, #2]
 800cf14:	3330      	adds	r3, #48	; 0x30
 800cf16:	b2da      	uxtb	r2, r3
 800cf18:	4b16      	ldr	r3, [pc, #88]	; (800cf74 <main+0x1e0>)
 800cf1a:	709a      	strb	r2, [r3, #2]
	  mixstr[3] = '0' + cnt1.c0;
 800cf1c:	4b14      	ldr	r3, [pc, #80]	; (800cf70 <main+0x1dc>)
 800cf1e:	78db      	ldrb	r3, [r3, #3]
 800cf20:	3330      	adds	r3, #48	; 0x30
 800cf22:	b2da      	uxtb	r2, r3
 800cf24:	4b13      	ldr	r3, [pc, #76]	; (800cf74 <main+0x1e0>)
 800cf26:	70da      	strb	r2, [r3, #3]

	  putStrToBuffMix(mixstr);
 800cf28:	4812      	ldr	r0, [pc, #72]	; (800cf74 <main+0x1e0>)
 800cf2a:	f000 fb29 	bl	800d580 <putStrToBuffMix>
	  cpToLPBuffer();
 800cf2e:	f000 fa87 	bl	800d440 <cpToLPBuffer>
	  cntupd = 0;
 800cf32:	4b0e      	ldr	r3, [pc, #56]	; (800cf6c <main+0x1d8>)
 800cf34:	2200      	movs	r2, #0
 800cf36:	701a      	strb	r2, [r3, #0]
	  __WFI();
 800cf38:	e7d7      	b.n	800ceea <main+0x156>
 800cf3a:	bf00      	nop
 800cf3c:	04020002 	.word	0x04020002
 800cf40:	40010c00 	.word	0x40010c00
 800cf44:	40000400 	.word	0x40000400
 800cf48:	40001000 	.word	0x40001000
 800cf4c:	20000164 	.word	0x20000164
 800cf50:	40013000 	.word	0x40013000
 800cf54:	40020000 	.word	0x40020000
 800cf58:	20000010 	.word	0x20000010
 800cf5c:	080160e4 	.word	0x080160e4
 800cf60:	08016104 	.word	0x08016104
 800cf64:	0801607c 	.word	0x0801607c
 800cf68:	20000000 	.word	0x20000000
 800cf6c:	20000158 	.word	0x20000158
 800cf70:	20000154 	.word	0x20000154
 800cf74:	20000008 	.word	0x20000008

0800cf78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 800cf7c:	2002      	movs	r0, #2
 800cf7e:	f7ff fcc1 	bl	800c904 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 800cf82:	bf00      	nop
 800cf84:	f7ff fcd2 	bl	800c92c <LL_FLASH_GetLatency>
 800cf88:	4603      	mov	r3, r0
 800cf8a:	2b02      	cmp	r3, #2
 800cf8c:	d1fa      	bne.n	800cf84 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 800cf8e:	f7ff fb1f 	bl	800c5d0 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 800cf92:	bf00      	nop
 800cf94:	f7ff fb2a 	bl	800c5ec <LL_RCC_HSE_IsReady>
 800cf98:	4603      	mov	r3, r0
 800cf9a:	2b01      	cmp	r3, #1
 800cf9c:	d1fa      	bne.n	800cf94 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_LSI_Enable();
 800cf9e:	f7ff fb37 	bl	800c610 <LL_RCC_LSI_Enable>

   /* Wait till LSI is ready */
  while(LL_RCC_LSI_IsReady() != 1)
 800cfa2:	bf00      	nop
 800cfa4:	f7ff fb42 	bl	800c62c <LL_RCC_LSI_IsReady>
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	2b01      	cmp	r3, #1
 800cfac:	d1fa      	bne.n	800cfa4 <SystemClock_Config+0x2c>
  {

  }
  LL_PWR_EnableBkUpAccess();
 800cfae:	f7ff fcdb 	bl	800c968 <LL_PWR_EnableBkUpAccess>
  if(LL_RCC_GetRTCClockSource() != LL_RCC_RTC_CLKSOURCE_LSI)
 800cfb2:	f7ff fbd1 	bl	800c758 <LL_RCC_GetRTCClockSource>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cfbc:	d007      	beq.n	800cfce <SystemClock_Config+0x56>
  {
    LL_RCC_ForceBackupDomainReset();
 800cfbe:	f7ff fbe5 	bl	800c78c <LL_RCC_ForceBackupDomainReset>
    LL_RCC_ReleaseBackupDomainReset();
 800cfc2:	f7ff fbf1 	bl	800c7a8 <LL_RCC_ReleaseBackupDomainReset>
    LL_RCC_SetRTCClockSource(LL_RCC_RTC_CLKSOURCE_LSI);
 800cfc6:	f44f 7000 	mov.w	r0, #512	; 0x200
 800cfca:	f7ff fbb1 	bl	800c730 <LL_RCC_SetRTCClockSource>
  }
  LL_RCC_EnableRTC();
 800cfce:	f7ff fbcf 	bl	800c770 <LL_RCC_EnableRTC>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 800cfd2:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 800cfd6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800cfda:	f7ff fc13 	bl	800c804 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 800cfde:	f7ff fbf1 	bl	800c7c4 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800cfe2:	bf00      	nop
 800cfe4:	f7ff fbfc 	bl	800c7e0 <LL_RCC_PLL_IsReady>
 800cfe8:	4603      	mov	r3, r0
 800cfea:	2b01      	cmp	r3, #1
 800cfec:	d1fa      	bne.n	800cfe4 <SystemClock_Config+0x6c>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800cfee:	2000      	movs	r0, #0
 800cff0:	f7ff fb4e 	bl	800c690 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 800cff4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800cff8:	f7ff fb5e 	bl	800c6b8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800cffc:	2000      	movs	r0, #0
 800cffe:	f7ff fb6f 	bl	800c6e0 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800d002:	2002      	movs	r0, #2
 800d004:	f7ff fb24 	bl	800c650 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800d008:	bf00      	nop
 800d00a:	f7ff fb35 	bl	800c678 <LL_RCC_GetSysClkSource>
 800d00e:	4603      	mov	r3, r0
 800d010:	2b08      	cmp	r3, #8
 800d012:	d1fa      	bne.n	800d00a <SystemClock_Config+0x92>
  {

  }
  LL_SetSystemCoreClock(72000000);
 800d014:	4807      	ldr	r0, [pc, #28]	; (800d034 <SystemClock_Config+0xbc>)
 800d016:	f006 f863 	bl	80130e0 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 800d01a:	200f      	movs	r0, #15
 800d01c:	f000 feac 	bl	800dd78 <HAL_InitTick>
 800d020:	4603      	mov	r3, r0
 800d022:	2b00      	cmp	r3, #0
 800d024:	d001      	beq.n	800d02a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800d026:	f000 fb73 	bl	800d710 <Error_Handler>
  }
  LL_RCC_SetUSBClockSource(LL_RCC_USB_CLKSOURCE_PLL_DIV_1_5);
 800d02a:	2000      	movs	r0, #0
 800d02c:	f7ff fb6c 	bl	800c708 <LL_RCC_SetUSBClockSource>
}
 800d030:	bf00      	nop
 800d032:	bd80      	pop	{r7, pc}
 800d034:	044aa200 	.word	0x044aa200

0800d038 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b082      	sub	sp, #8
 800d03c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  LL_RTC_InitTypeDef RTC_InitStruct = {0};
 800d03e:	463b      	mov	r3, r7
 800d040:	2200      	movs	r2, #0
 800d042:	601a      	str	r2, [r3, #0]
 800d044:	605a      	str	r2, [r3, #4]

    LL_PWR_EnableBkUpAccess();
 800d046:	f7ff fc8f 	bl	800c968 <LL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_BKP);
 800d04a:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800d04e:	f7ff fc09 	bl	800c864 <LL_APB1_GRP1_EnableClock>
  /* Peripheral clock enable */
  LL_RCC_EnableRTC();
 800d052:	f7ff fb8d 	bl	800c770 <LL_RCC_EnableRTC>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC and set the Time and Date
  */
  RTC_InitStruct.AsynchPrescaler = 0xFFFFFFFFU;
 800d056:	f04f 33ff 	mov.w	r3, #4294967295
 800d05a:	603b      	str	r3, [r7, #0]
  LL_RTC_Init(RTC, &RTC_InitStruct);
 800d05c:	463b      	mov	r3, r7
 800d05e:	4619      	mov	r1, r3
 800d060:	4805      	ldr	r0, [pc, #20]	; (800d078 <MX_RTC_Init+0x40>)
 800d062:	f003 f889 	bl	8010178 <LL_RTC_Init>
  LL_RTC_SetAsynchPrescaler(RTC, 0xFFFFFFFFU);
 800d066:	f04f 31ff 	mov.w	r1, #4294967295
 800d06a:	4803      	ldr	r0, [pc, #12]	; (800d078 <MX_RTC_Init+0x40>)
 800d06c:	f7ff fc8a 	bl	800c984 <LL_RTC_SetAsynchPrescaler>
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800d070:	bf00      	nop
 800d072:	3708      	adds	r7, #8
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}
 800d078:	40002800 	.word	0x40002800

0800d07c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b090      	sub	sp, #64	; 0x40
 800d080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800d082:	f107 0318 	add.w	r3, r7, #24
 800d086:	2228      	movs	r2, #40	; 0x28
 800d088:	2100      	movs	r1, #0
 800d08a:	4618      	mov	r0, r3
 800d08c:	f008 ff3a 	bl	8015f04 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d090:	1d3b      	adds	r3, r7, #4
 800d092:	2200      	movs	r2, #0
 800d094:	601a      	str	r2, [r3, #0]
 800d096:	605a      	str	r2, [r3, #4]
 800d098:	609a      	str	r2, [r3, #8]
 800d09a:	60da      	str	r2, [r3, #12]
 800d09c:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 800d09e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800d0a2:	f7ff fbf7 	bl	800c894 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800d0a6:	2004      	movs	r0, #4
 800d0a8:	f7ff fbf4 	bl	800c894 <LL_APB2_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_7;
 800d0ac:	f24a 03a0 	movw	r3, #41120	; 0xa0a0
 800d0b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800d0b2:	2309      	movs	r3, #9
 800d0b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800d0b6:	2303      	movs	r3, #3
 800d0b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d0be:	1d3b      	adds	r3, r7, #4
 800d0c0:	4619      	mov	r1, r3
 800d0c2:	4824      	ldr	r0, [pc, #144]	; (800d154 <MX_SPI1_Init+0xd8>)
 800d0c4:	f002 ff21 	bl	800ff0a <LL_GPIO_Init>

  /* SPI1 DMA Init */

  /* SPI1_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800d0c8:	2210      	movs	r2, #16
 800d0ca:	2103      	movs	r1, #3
 800d0cc:	4822      	ldr	r0, [pc, #136]	; (800d158 <MX_SPI1_Init+0xdc>)
 800d0ce:	f7ff f937 	bl	800c340 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PRIORITY_LOW);
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	2103      	movs	r1, #3
 800d0d6:	4820      	ldr	r0, [pc, #128]	; (800d158 <MX_SPI1_Init+0xdc>)
 800d0d8:	f7ff fa00 	bl	800c4dc <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MODE_NORMAL);
 800d0dc:	2200      	movs	r2, #0
 800d0de:	2103      	movs	r1, #3
 800d0e0:	481d      	ldr	r0, [pc, #116]	; (800d158 <MX_SPI1_Init+0xdc>)
 800d0e2:	f7ff f951 	bl	800c388 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PERIPH_NOINCREMENT);
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	2103      	movs	r1, #3
 800d0ea:	481b      	ldr	r0, [pc, #108]	; (800d158 <MX_SPI1_Init+0xdc>)
 800d0ec:	f7ff f96e 	bl	800c3cc <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MEMORY_INCREMENT);
 800d0f0:	2280      	movs	r2, #128	; 0x80
 800d0f2:	2103      	movs	r1, #3
 800d0f4:	4818      	ldr	r0, [pc, #96]	; (800d158 <MX_SPI1_Init+0xdc>)
 800d0f6:	f7ff f98b 	bl	800c410 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_HALFWORD);
 800d0fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d0fe:	2103      	movs	r1, #3
 800d100:	4815      	ldr	r0, [pc, #84]	; (800d158 <MX_SPI1_Init+0xdc>)
 800d102:	f7ff f9a7 	bl	800c454 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_HALFWORD);
 800d106:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d10a:	2103      	movs	r1, #3
 800d10c:	4812      	ldr	r0, [pc, #72]	; (800d158 <MX_SPI1_Init+0xdc>)
 800d10e:	f7ff f9c3 	bl	800c498 <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800d112:	2300      	movs	r3, #0
 800d114:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800d116:	f44f 7382 	mov.w	r3, #260	; 0x104
 800d11a:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_16BIT;
 800d11c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d120:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 800d122:	2300      	movs	r3, #0
 800d124:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 800d126:	2300      	movs	r3, #0
 800d128:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800d12a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d12e:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 800d130:	2310      	movs	r3, #16
 800d132:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800d134:	2300      	movs	r3, #0
 800d136:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800d138:	2300      	movs	r3, #0
 800d13a:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 800d13c:	230a      	movs	r3, #10
 800d13e:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 800d140:	f107 0318 	add.w	r3, r7, #24
 800d144:	4619      	mov	r1, r3
 800d146:	4805      	ldr	r0, [pc, #20]	; (800d15c <MX_SPI1_Init+0xe0>)
 800d148:	f003 f900 	bl	801034c <LL_SPI_Init>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800d14c:	bf00      	nop
 800d14e:	3740      	adds	r7, #64	; 0x40
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}
 800d154:	40010800 	.word	0x40010800
 800d158:	40020000 	.word	0x40020000
 800d15c:	40013000 	.word	0x40013000

0800d160 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b092      	sub	sp, #72	; 0x48
 800d164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800d166:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800d16a:	2200      	movs	r2, #0
 800d16c:	601a      	str	r2, [r3, #0]
 800d16e:	605a      	str	r2, [r3, #4]
 800d170:	609a      	str	r2, [r3, #8]
 800d172:	60da      	str	r2, [r3, #12]
 800d174:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800d176:	f107 0314 	add.w	r3, r7, #20
 800d17a:	2220      	movs	r2, #32
 800d17c:	2100      	movs	r1, #0
 800d17e:	4618      	mov	r0, r3
 800d180:	f008 fec0 	bl	8015f04 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d184:	463b      	mov	r3, r7
 800d186:	2200      	movs	r2, #0
 800d188:	601a      	str	r2, [r3, #0]
 800d18a:	605a      	str	r2, [r3, #4]
 800d18c:	609a      	str	r2, [r3, #8]
 800d18e:	60da      	str	r2, [r3, #12]
 800d190:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 800d192:	2002      	movs	r0, #2
 800d194:	f7ff fb66 	bl	800c864 <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800d198:	f7ff f84c 	bl	800c234 <__NVIC_GetPriorityGrouping>
 800d19c:	4603      	mov	r3, r0
 800d19e:	2200      	movs	r2, #0
 800d1a0:	2100      	movs	r1, #0
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	f7ff f89a 	bl	800c2dc <NVIC_EncodePriority>
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	4619      	mov	r1, r3
 800d1ac:	201d      	movs	r0, #29
 800d1ae:	f7ff f86b 	bl	800c288 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 800d1b2:	201d      	movs	r0, #29
 800d1b4:	f7ff f84c 	bl	800c250 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	86bb      	strh	r3, [r7, #52]	; 0x34
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800d1bc:	2300      	movs	r3, #0
 800d1be:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_InitStruct.Autoreload = 30000-LL_TIM_IC_FILTER_FDIV1_N2;
 800d1c0:	4b24      	ldr	r3, [pc, #144]	; (800d254 <MX_TIM3_Init+0xf4>)
 800d1c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	643b      	str	r3, [r7, #64]	; 0x40
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 800d1c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800d1cc:	4619      	mov	r1, r3
 800d1ce:	4822      	ldr	r0, [pc, #136]	; (800d258 <MX_TIM3_Init+0xf8>)
 800d1d0:	f003 f978 	bl	80104c4 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 800d1d4:	4820      	ldr	r0, [pc, #128]	; (800d258 <MX_TIM3_Init+0xf8>)
 800d1d6:	f7ff fc29 	bl	800ca2c <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 800d1da:	2100      	movs	r1, #0
 800d1dc:	481e      	ldr	r0, [pc, #120]	; (800d258 <MX_TIM3_Init+0xf8>)
 800d1de:	f7ff fcda 	bl	800cb96 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 800d1e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d1e6:	481c      	ldr	r0, [pc, #112]	; (800d258 <MX_TIM3_Init+0xf8>)
 800d1e8:	f7ff fc84 	bl	800caf4 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800d1ec:	2360      	movs	r3, #96	; 0x60
 800d1ee:	617b      	str	r3, [r7, #20]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	61bb      	str	r3, [r7, #24]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.CompareValue = 30001;
 800d1f8:	f247 5331 	movw	r3, #30001	; 0x7531
 800d1fc:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800d1fe:	2300      	movs	r3, #0
 800d200:	627b      	str	r3, [r7, #36]	; 0x24
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 800d202:	f107 0314 	add.w	r3, r7, #20
 800d206:	461a      	mov	r2, r3
 800d208:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d20c:	4812      	ldr	r0, [pc, #72]	; (800d258 <MX_TIM3_Init+0xf8>)
 800d20e:	f003 f9cf 	bl	80105b0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH4);
 800d212:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d216:	4810      	ldr	r0, [pc, #64]	; (800d258 <MX_TIM3_Init+0xf8>)
 800d218:	f7ff fc28 	bl	800ca6c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 800d21c:	2100      	movs	r1, #0
 800d21e:	480e      	ldr	r0, [pc, #56]	; (800d258 <MX_TIM3_Init+0xf8>)
 800d220:	f7ff fccd 	bl	800cbbe <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 800d224:	480c      	ldr	r0, [pc, #48]	; (800d258 <MX_TIM3_Init+0xf8>)
 800d226:	f7ff fcdc 	bl	800cbe2 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 800d22a:	2008      	movs	r0, #8
 800d22c:	f7ff fb32 	bl	800c894 <LL_APB2_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PB1   ------> TIM3_CH4
  */
  GPIO_InitStruct.Pin = LP_nOE_T3C4_Pin;
 800d230:	f240 2302 	movw	r3, #514	; 0x202
 800d234:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800d236:	2309      	movs	r3, #9
 800d238:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800d23a:	2302      	movs	r3, #2
 800d23c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800d23e:	2300      	movs	r3, #0
 800d240:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(LP_nOE_T3C4_GPIO_Port, &GPIO_InitStruct);
 800d242:	463b      	mov	r3, r7
 800d244:	4619      	mov	r1, r3
 800d246:	4805      	ldr	r0, [pc, #20]	; (800d25c <MX_TIM3_Init+0xfc>)
 800d248:	f002 fe5f 	bl	800ff0a <LL_GPIO_Init>

}
 800d24c:	bf00      	nop
 800d24e:	3748      	adds	r7, #72	; 0x48
 800d250:	46bd      	mov	sp, r7
 800d252:	bd80      	pop	{r7, pc}
 800d254:	fff07530 	.word	0xfff07530
 800d258:	40000400 	.word	0x40000400
 800d25c:	40010c00 	.word	0x40010c00

0800d260 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b086      	sub	sp, #24
 800d264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800d266:	1d3b      	adds	r3, r7, #4
 800d268:	2200      	movs	r2, #0
 800d26a:	601a      	str	r2, [r3, #0]
 800d26c:	605a      	str	r2, [r3, #4]
 800d26e:	609a      	str	r2, [r3, #8]
 800d270:	60da      	str	r2, [r3, #12]
 800d272:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 800d274:	2010      	movs	r0, #16
 800d276:	f7ff faf5 	bl	800c864 <LL_APB1_GRP1_EnableClock>

  /* TIM6 interrupt Init */
  NVIC_SetPriority(TIM6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 800d27a:	f7fe ffdb 	bl	800c234 <__NVIC_GetPriorityGrouping>
 800d27e:	4603      	mov	r3, r0
 800d280:	2200      	movs	r2, #0
 800d282:	2102      	movs	r1, #2
 800d284:	4618      	mov	r0, r3
 800d286:	f7ff f829 	bl	800c2dc <NVIC_EncodePriority>
 800d28a:	4603      	mov	r3, r0
 800d28c:	4619      	mov	r1, r3
 800d28e:	2036      	movs	r0, #54	; 0x36
 800d290:	f7fe fffa 	bl	800c288 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM6_IRQn);
 800d294:	2036      	movs	r0, #54	; 0x36
 800d296:	f7fe ffdb 	bl	800c250 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  TIM_InitStruct.Prescaler = 20;
 800d29a:	2314      	movs	r3, #20
 800d29c:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 36000;
 800d2a2:	f648 43a0 	movw	r3, #36000	; 0x8ca0
 800d2a6:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 800d2a8:	1d3b      	adds	r3, r7, #4
 800d2aa:	4619      	mov	r1, r3
 800d2ac:	4808      	ldr	r0, [pc, #32]	; (800d2d0 <MX_TIM6_Init+0x70>)
 800d2ae:	f003 f909 	bl	80104c4 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM6);
 800d2b2:	4807      	ldr	r0, [pc, #28]	; (800d2d0 <MX_TIM6_Init+0x70>)
 800d2b4:	f7ff fbba 	bl	800ca2c <LL_TIM_EnableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_RESET);
 800d2b8:	2100      	movs	r1, #0
 800d2ba:	4805      	ldr	r0, [pc, #20]	; (800d2d0 <MX_TIM6_Init+0x70>)
 800d2bc:	f7ff fc7f 	bl	800cbbe <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 800d2c0:	4803      	ldr	r0, [pc, #12]	; (800d2d0 <MX_TIM6_Init+0x70>)
 800d2c2:	f7ff fc8e 	bl	800cbe2 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800d2c6:	bf00      	nop
 800d2c8:	3718      	adds	r7, #24
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	bd80      	pop	{r7, pc}
 800d2ce:	bf00      	nop
 800d2d0:	40001000 	.word	0x40001000

0800d2d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 800d2d8:	2001      	movs	r0, #1
 800d2da:	f7ff faab 	bl	800c834 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800d2de:	f7fe ffa9 	bl	800c234 <__NVIC_GetPriorityGrouping>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	2100      	movs	r1, #0
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	f7fe fff7 	bl	800c2dc <NVIC_EncodePriority>
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	4619      	mov	r1, r3
 800d2f2:	200d      	movs	r0, #13
 800d2f4:	f7fe ffc8 	bl	800c288 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800d2f8:	200d      	movs	r0, #13
 800d2fa:	f7fe ffa9 	bl	800c250 <__NVIC_EnableIRQ>

}
 800d2fe:	bf00      	nop
 800d300:	bd80      	pop	{r7, pc}
	...

0800d304 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b088      	sub	sp, #32
 800d308:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800d30a:	f107 0318 	add.w	r3, r7, #24
 800d30e:	2200      	movs	r2, #0
 800d310:	601a      	str	r2, [r3, #0]
 800d312:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d314:	1d3b      	adds	r3, r7, #4
 800d316:	2200      	movs	r2, #0
 800d318:	601a      	str	r2, [r3, #0]
 800d31a:	605a      	str	r2, [r3, #4]
 800d31c:	609a      	str	r2, [r3, #8]
 800d31e:	60da      	str	r2, [r3, #12]
 800d320:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 800d322:	2020      	movs	r0, #32
 800d324:	f7ff fab6 	bl	800c894 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800d328:	2004      	movs	r0, #4
 800d32a:	f7ff fab3 	bl	800c894 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 800d32e:	2008      	movs	r0, #8
 800d330:	f7ff fab0 	bl	800c894 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LP_LE_Pin|LP_MUX_A_Pin|LP_MUX_B_Pin|LP_MUX_BB14_Pin
 800d334:	493d      	ldr	r1, [pc, #244]	; (800d42c <MX_GPIO_Init+0x128>)
 800d336:	483e      	ldr	r0, [pc, #248]	; (800d430 <MX_GPIO_Init+0x12c>)
 800d338:	f7ff fcd2 	bl	800cce0 <LL_GPIO_ResetOutputPin>
                          |LED_Pin);

  /**/
  GPIO_InitStruct.Pin = LP_LE_Pin|LP_MUX_A_Pin|LP_MUX_B_Pin|LP_MUX_BB14_Pin
 800d33c:	4b3b      	ldr	r3, [pc, #236]	; (800d42c <MX_GPIO_Init+0x128>)
 800d33e:	607b      	str	r3, [r7, #4]
                          |LED_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800d340:	2301      	movs	r3, #1
 800d342:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800d344:	2302      	movs	r3, #2
 800d346:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800d348:	2300      	movs	r3, #0
 800d34a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d34c:	1d3b      	adds	r3, r7, #4
 800d34e:	4619      	mov	r1, r3
 800d350:	4837      	ldr	r0, [pc, #220]	; (800d430 <MX_GPIO_Init+0x12c>)
 800d352:	f002 fdda 	bl	800ff0a <LL_GPIO_Init>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE5);
 800d356:	4937      	ldr	r1, [pc, #220]	; (800d434 <MX_GPIO_Init+0x130>)
 800d358:	2001      	movs	r0, #1
 800d35a:	f7ff fced 	bl	800cd38 <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE6);
 800d35e:	4936      	ldr	r1, [pc, #216]	; (800d438 <MX_GPIO_Init+0x134>)
 800d360:	2001      	movs	r0, #1
 800d362:	f7ff fce9 	bl	800cd38 <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE7);
 800d366:	4935      	ldr	r1, [pc, #212]	; (800d43c <MX_GPIO_Init+0x138>)
 800d368:	2001      	movs	r0, #1
 800d36a:	f7ff fce5 	bl	800cd38 <LL_GPIO_AF_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_5;
 800d36e:	2320      	movs	r3, #32
 800d370:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 800d372:	2301      	movs	r3, #1
 800d374:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800d376:	2300      	movs	r3, #0
 800d378:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 800d37a:	2303      	movs	r3, #3
 800d37c:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 800d37e:	f107 0318 	add.w	r3, r7, #24
 800d382:	4618      	mov	r0, r3
 800d384:	f002 fc8a 	bl	800fc9c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_6;
 800d388:	2340      	movs	r3, #64	; 0x40
 800d38a:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 800d38c:	2301      	movs	r3, #1
 800d38e:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800d390:	2300      	movs	r3, #0
 800d392:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 800d394:	2303      	movs	r3, #3
 800d396:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 800d398:	f107 0318 	add.w	r3, r7, #24
 800d39c:	4618      	mov	r0, r3
 800d39e:	f002 fc7d 	bl	800fc9c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_7;
 800d3a2:	2380      	movs	r3, #128	; 0x80
 800d3a4:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 800d3a6:	2301      	movs	r3, #1
 800d3a8:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 800d3ae:	2303      	movs	r3, #3
 800d3b0:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 800d3b2:	f107 0318 	add.w	r3, r7, #24
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	f002 fc70 	bl	800fc9c <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_5, LL_GPIO_PULL_DOWN);
 800d3bc:	2200      	movs	r2, #0
 800d3be:	f242 0120 	movw	r1, #8224	; 0x2020
 800d3c2:	481b      	ldr	r0, [pc, #108]	; (800d430 <MX_GPIO_Init+0x12c>)
 800d3c4:	f7ff fc6a 	bl	800cc9c <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_6, LL_GPIO_PULL_DOWN);
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	f244 0140 	movw	r1, #16448	; 0x4040
 800d3ce:	4818      	ldr	r0, [pc, #96]	; (800d430 <MX_GPIO_Init+0x12c>)
 800d3d0:	f7ff fc64 	bl	800cc9c <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_7, LL_GPIO_PULL_DOWN);
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	f248 0180 	movw	r1, #32896	; 0x8080
 800d3da:	4815      	ldr	r0, [pc, #84]	; (800d430 <MX_GPIO_Init+0x12c>)
 800d3dc:	f7ff fc5e 	bl	800cc9c <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_5, LL_GPIO_MODE_INPUT);
 800d3e0:	2208      	movs	r2, #8
 800d3e2:	f242 0120 	movw	r1, #8224	; 0x2020
 800d3e6:	4812      	ldr	r0, [pc, #72]	; (800d430 <MX_GPIO_Init+0x12c>)
 800d3e8:	f7ff fc26 	bl	800cc38 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_6, LL_GPIO_MODE_INPUT);
 800d3ec:	2208      	movs	r2, #8
 800d3ee:	f244 0140 	movw	r1, #16448	; 0x4040
 800d3f2:	480f      	ldr	r0, [pc, #60]	; (800d430 <MX_GPIO_Init+0x12c>)
 800d3f4:	f7ff fc20 	bl	800cc38 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_7, LL_GPIO_MODE_INPUT);
 800d3f8:	2208      	movs	r2, #8
 800d3fa:	f248 0180 	movw	r1, #32896	; 0x8080
 800d3fe:	480c      	ldr	r0, [pc, #48]	; (800d430 <MX_GPIO_Init+0x12c>)
 800d400:	f7ff fc1a 	bl	800cc38 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI9_5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),3, 0));
 800d404:	f7fe ff16 	bl	800c234 <__NVIC_GetPriorityGrouping>
 800d408:	4603      	mov	r3, r0
 800d40a:	2200      	movs	r2, #0
 800d40c:	2103      	movs	r1, #3
 800d40e:	4618      	mov	r0, r3
 800d410:	f7fe ff64 	bl	800c2dc <NVIC_EncodePriority>
 800d414:	4603      	mov	r3, r0
 800d416:	4619      	mov	r1, r3
 800d418:	2017      	movs	r0, #23
 800d41a:	f7fe ff35 	bl	800c288 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI9_5_IRQn);
 800d41e:	2017      	movs	r0, #23
 800d420:	f7fe ff16 	bl	800c250 <__NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800d424:	bf00      	nop
 800d426:	3720      	adds	r7, #32
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}
 800d42c:	04720173 	.word	0x04720173
 800d430:	40010c00 	.word	0x40010c00
 800d434:	00f00001 	.word	0x00f00001
 800d438:	0f000001 	.word	0x0f000001
 800d43c:	f0000001 	.word	0xf0000001

0800d440 <cpToLPBuffer>:

/* USER CODE BEGIN 4 */
void cpToLPBuffer(void){
 800d440:	b480      	push	{r7}
 800d442:	b083      	sub	sp, #12
 800d444:	af00      	add	r7, sp, #0
  //update LP buffer
  //nthStr - 2*16 + (nth+8)Str - 2*16
  	for (uint8_t i=0;i<8;i++){
 800d446:	2300      	movs	r3, #0
 800d448:	71fb      	strb	r3, [r7, #7]
 800d44a:	e02e      	b.n	800d4aa <cpToLPBuffer+0x6a>
	LP_buffer [4*i] = display_buffer[i+8][0];
 800d44c:	79fb      	ldrb	r3, [r7, #7]
 800d44e:	f103 0208 	add.w	r2, r3, #8
 800d452:	79fb      	ldrb	r3, [r7, #7]
 800d454:	009b      	lsls	r3, r3, #2
 800d456:	4919      	ldr	r1, [pc, #100]	; (800d4bc <cpToLPBuffer+0x7c>)
 800d458:	f831 1022 	ldrh.w	r1, [r1, r2, lsl #2]
 800d45c:	4a18      	ldr	r2, [pc, #96]	; (800d4c0 <cpToLPBuffer+0x80>)
 800d45e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	LP_buffer [4*i+1] = display_buffer[i+8][1];
 800d462:	79fb      	ldrb	r3, [r7, #7]
 800d464:	3308      	adds	r3, #8
 800d466:	79fa      	ldrb	r2, [r7, #7]
 800d468:	0092      	lsls	r2, r2, #2
 800d46a:	3201      	adds	r2, #1
 800d46c:	4913      	ldr	r1, [pc, #76]	; (800d4bc <cpToLPBuffer+0x7c>)
 800d46e:	009b      	lsls	r3, r3, #2
 800d470:	440b      	add	r3, r1
 800d472:	8859      	ldrh	r1, [r3, #2]
 800d474:	4b12      	ldr	r3, [pc, #72]	; (800d4c0 <cpToLPBuffer+0x80>)
 800d476:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	LP_buffer [4*i+2] = display_buffer[i][0];
 800d47a:	79fa      	ldrb	r2, [r7, #7]
 800d47c:	79fb      	ldrb	r3, [r7, #7]
 800d47e:	009b      	lsls	r3, r3, #2
 800d480:	3302      	adds	r3, #2
 800d482:	490e      	ldr	r1, [pc, #56]	; (800d4bc <cpToLPBuffer+0x7c>)
 800d484:	f831 1022 	ldrh.w	r1, [r1, r2, lsl #2]
 800d488:	4a0d      	ldr	r2, [pc, #52]	; (800d4c0 <cpToLPBuffer+0x80>)
 800d48a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	LP_buffer [4*i+3] = display_buffer[i][1];
 800d48e:	79fb      	ldrb	r3, [r7, #7]
 800d490:	79fa      	ldrb	r2, [r7, #7]
 800d492:	0092      	lsls	r2, r2, #2
 800d494:	3203      	adds	r2, #3
 800d496:	4909      	ldr	r1, [pc, #36]	; (800d4bc <cpToLPBuffer+0x7c>)
 800d498:	009b      	lsls	r3, r3, #2
 800d49a:	440b      	add	r3, r1
 800d49c:	8859      	ldrh	r1, [r3, #2]
 800d49e:	4b08      	ldr	r3, [pc, #32]	; (800d4c0 <cpToLPBuffer+0x80>)
 800d4a0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  	for (uint8_t i=0;i<8;i++){
 800d4a4:	79fb      	ldrb	r3, [r7, #7]
 800d4a6:	3301      	adds	r3, #1
 800d4a8:	71fb      	strb	r3, [r7, #7]
 800d4aa:	79fb      	ldrb	r3, [r7, #7]
 800d4ac:	2b07      	cmp	r3, #7
 800d4ae:	d9cd      	bls.n	800d44c <cpToLPBuffer+0xc>
  };
};
 800d4b0:	bf00      	nop
 800d4b2:	bf00      	nop
 800d4b4:	370c      	adds	r7, #12
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	bc80      	pop	{r7}
 800d4ba:	4770      	bx	lr
 800d4bc:	2000019c 	.word	0x2000019c
 800d4c0:	2000015c 	.word	0x2000015c

0800d4c4 <putStrToBuff>:

void putStrToBuff(char *string){
 800d4c4:	b480      	push	{r7}
 800d4c6:	b087      	sub	sp, #28
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
		char *s ;
	  uint8_t rpos, bpos, st_pos, w;
	  for (uint8_t i=0;i<8;i++){
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	74bb      	strb	r3, [r7, #18]
 800d4d0:	e044      	b.n	800d55c <putStrToBuff+0x98>
		  s=string;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	617b      	str	r3, [r7, #20]
		  st_pos = 32;
 800d4d6:	2320      	movs	r3, #32
 800d4d8:	74fb      	strb	r3, [r7, #19]
	  uint32_t tmp = 0;
 800d4da:	2300      	movs	r3, #0
 800d4dc:	60fb      	str	r3, [r7, #12]
	  while (*s != '\0'){
 800d4de:	e027      	b.n	800d530 <putStrToBuff+0x6c>
		  rpos = *s - font_8pt_info.stchar;
 800d4e0:	697b      	ldr	r3, [r7, #20]
 800d4e2:	781a      	ldrb	r2, [r3, #0]
 800d4e4:	4b22      	ldr	r3, [pc, #136]	; (800d570 <putStrToBuff+0xac>)
 800d4e6:	785b      	ldrb	r3, [r3, #1]
 800d4e8:	1ad3      	subs	r3, r2, r3
 800d4ea:	72fb      	strb	r3, [r7, #11]
		  w = font_8ptChrsDescr[rpos].size;
 800d4ec:	7afb      	ldrb	r3, [r7, #11]
 800d4ee:	4a21      	ldr	r2, [pc, #132]	; (800d574 <putStrToBuff+0xb0>)
 800d4f0:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d4f4:	72bb      	strb	r3, [r7, #10]
		  bpos = font_8ptChrsDescr[rpos].position;
 800d4f6:	7afb      	ldrb	r3, [r7, #11]
 800d4f8:	4a1e      	ldr	r2, [pc, #120]	; (800d574 <putStrToBuff+0xb0>)
 800d4fa:	005b      	lsls	r3, r3, #1
 800d4fc:	4413      	add	r3, r2
 800d4fe:	785b      	ldrb	r3, [r3, #1]
 800d500:	727b      	strb	r3, [r7, #9]
		  st_pos -= w;
 800d502:	7cfa      	ldrb	r2, [r7, #19]
 800d504:	7abb      	ldrb	r3, [r7, #10]
 800d506:	1ad3      	subs	r3, r2, r3
 800d508:	74fb      	strb	r3, [r7, #19]
		  tmp |= font_8ptBtmps[bpos + i] << st_pos;
 800d50a:	7a7a      	ldrb	r2, [r7, #9]
 800d50c:	7cbb      	ldrb	r3, [r7, #18]
 800d50e:	4413      	add	r3, r2
 800d510:	4a19      	ldr	r2, [pc, #100]	; (800d578 <putStrToBuff+0xb4>)
 800d512:	5cd3      	ldrb	r3, [r2, r3]
 800d514:	461a      	mov	r2, r3
 800d516:	7cfb      	ldrb	r3, [r7, #19]
 800d518:	fa02 f303 	lsl.w	r3, r2, r3
 800d51c:	461a      	mov	r2, r3
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	4313      	orrs	r3, r2
 800d522:	60fb      	str	r3, [r7, #12]
		  st_pos--;
 800d524:	7cfb      	ldrb	r3, [r7, #19]
 800d526:	3b01      	subs	r3, #1
 800d528:	74fb      	strb	r3, [r7, #19]

		  s++;
 800d52a:	697b      	ldr	r3, [r7, #20]
 800d52c:	3301      	adds	r3, #1
 800d52e:	617b      	str	r3, [r7, #20]
	  while (*s != '\0'){
 800d530:	697b      	ldr	r3, [r7, #20]
 800d532:	781b      	ldrb	r3, [r3, #0]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d1d3      	bne.n	800d4e0 <putStrToBuff+0x1c>

	  };

	  display_buffer[i][0] = (tmp >> 16);
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	0c1a      	lsrs	r2, r3, #16
 800d53c:	7cbb      	ldrb	r3, [r7, #18]
 800d53e:	b291      	uxth	r1, r2
 800d540:	4a0e      	ldr	r2, [pc, #56]	; (800d57c <putStrToBuff+0xb8>)
 800d542:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
	  display_buffer[i][1] = (tmp);
 800d546:	7cbb      	ldrb	r3, [r7, #18]
 800d548:	68fa      	ldr	r2, [r7, #12]
 800d54a:	b291      	uxth	r1, r2
 800d54c:	4a0b      	ldr	r2, [pc, #44]	; (800d57c <putStrToBuff+0xb8>)
 800d54e:	009b      	lsls	r3, r3, #2
 800d550:	4413      	add	r3, r2
 800d552:	460a      	mov	r2, r1
 800d554:	805a      	strh	r2, [r3, #2]
	  for (uint8_t i=0;i<8;i++){
 800d556:	7cbb      	ldrb	r3, [r7, #18]
 800d558:	3301      	adds	r3, #1
 800d55a:	74bb      	strb	r3, [r7, #18]
 800d55c:	7cbb      	ldrb	r3, [r7, #18]
 800d55e:	2b07      	cmp	r3, #7
 800d560:	d9b7      	bls.n	800d4d2 <putStrToBuff+0xe>

	  };


}
 800d562:	bf00      	nop
 800d564:	bf00      	nop
 800d566:	371c      	adds	r7, #28
 800d568:	46bd      	mov	sp, r7
 800d56a:	bc80      	pop	{r7}
 800d56c:	4770      	bx	lr
 800d56e:	bf00      	nop
 800d570:	08016104 	.word	0x08016104
 800d574:	080160e4 	.word	0x080160e4
 800d578:	0801607c 	.word	0x0801607c
 800d57c:	2000019c 	.word	0x2000019c

0800d580 <putStrToBuffMix>:

void putStrToBuffMix(char *string){
 800d580:	b480      	push	{r7}
 800d582:	b089      	sub	sp, #36	; 0x24
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
		char *s ;
		uint8_t count;
	  uint8_t rpos, bpos, st_pos, w;
	  for (uint8_t i=0;i<8;i++){
 800d588:	2300      	movs	r3, #0
 800d58a:	767b      	strb	r3, [r7, #25]
 800d58c:	e0a5      	b.n	800d6da <putStrToBuffMix+0x15a>
		  s=string;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	61fb      	str	r3, [r7, #28]
		  st_pos = 32;
 800d592:	2320      	movs	r3, #32
 800d594:	76bb      	strb	r3, [r7, #26]
		  count = 0;
 800d596:	2300      	movs	r3, #0
 800d598:	76fb      	strb	r3, [r7, #27]
	  uint32_t tmp = 0;
 800d59a:	2300      	movs	r3, #0
 800d59c:	617b      	str	r3, [r7, #20]
	  uint32_t tmp1 = 0;
 800d59e:	2300      	movs	r3, #0
 800d5a0:	613b      	str	r3, [r7, #16]
	  while (*s != '\0'){
 800d5a2:	e073      	b.n	800d68c <putStrToBuffMix+0x10c>
		  if (count <2){
 800d5a4:	7efb      	ldrb	r3, [r7, #27]
 800d5a6:	2b01      	cmp	r3, #1
 800d5a8:	d837      	bhi.n	800d61a <putStrToBuffMix+0x9a>
			  count++;
 800d5aa:	7efb      	ldrb	r3, [r7, #27]
 800d5ac:	3301      	adds	r3, #1
 800d5ae:	76fb      	strb	r3, [r7, #27]

			  rpos = *s - font_16pt_info.stchar;
 800d5b0:	69fb      	ldr	r3, [r7, #28]
 800d5b2:	781a      	ldrb	r2, [r3, #0]
 800d5b4:	4b4e      	ldr	r3, [pc, #312]	; (800d6f0 <putStrToBuffMix+0x170>)
 800d5b6:	785b      	ldrb	r3, [r3, #1]
 800d5b8:	1ad3      	subs	r3, r2, r3
 800d5ba:	73fb      	strb	r3, [r7, #15]
			  w = font_16ptChrsDescr[rpos].size;
 800d5bc:	7bfb      	ldrb	r3, [r7, #15]
 800d5be:	4a4d      	ldr	r2, [pc, #308]	; (800d6f4 <putStrToBuffMix+0x174>)
 800d5c0:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d5c4:	73bb      	strb	r3, [r7, #14]
			  bpos = font_16ptChrsDescr[rpos].position;
 800d5c6:	7bfb      	ldrb	r3, [r7, #15]
 800d5c8:	4a4a      	ldr	r2, [pc, #296]	; (800d6f4 <putStrToBuffMix+0x174>)
 800d5ca:	005b      	lsls	r3, r3, #1
 800d5cc:	4413      	add	r3, r2
 800d5ce:	785b      	ldrb	r3, [r3, #1]
 800d5d0:	737b      	strb	r3, [r7, #13]
			  st_pos -= w;
 800d5d2:	7eba      	ldrb	r2, [r7, #26]
 800d5d4:	7bbb      	ldrb	r3, [r7, #14]
 800d5d6:	1ad3      	subs	r3, r2, r3
 800d5d8:	76bb      	strb	r3, [r7, #26]
			  tmp |= font_16ptBtmps[bpos + i] << st_pos;
 800d5da:	7b7a      	ldrb	r2, [r7, #13]
 800d5dc:	7e7b      	ldrb	r3, [r7, #25]
 800d5de:	4413      	add	r3, r2
 800d5e0:	4a45      	ldr	r2, [pc, #276]	; (800d6f8 <putStrToBuffMix+0x178>)
 800d5e2:	5cd3      	ldrb	r3, [r2, r3]
 800d5e4:	461a      	mov	r2, r3
 800d5e6:	7ebb      	ldrb	r3, [r7, #26]
 800d5e8:	fa02 f303 	lsl.w	r3, r2, r3
 800d5ec:	461a      	mov	r2, r3
 800d5ee:	697b      	ldr	r3, [r7, #20]
 800d5f0:	4313      	orrs	r3, r2
 800d5f2:	617b      	str	r3, [r7, #20]
			  tmp1 |= font_16ptBtmps[bpos+8 + i] << st_pos;
 800d5f4:	7b7b      	ldrb	r3, [r7, #13]
 800d5f6:	f103 0208 	add.w	r2, r3, #8
 800d5fa:	7e7b      	ldrb	r3, [r7, #25]
 800d5fc:	4413      	add	r3, r2
 800d5fe:	4a3e      	ldr	r2, [pc, #248]	; (800d6f8 <putStrToBuffMix+0x178>)
 800d600:	5cd3      	ldrb	r3, [r2, r3]
 800d602:	461a      	mov	r2, r3
 800d604:	7ebb      	ldrb	r3, [r7, #26]
 800d606:	fa02 f303 	lsl.w	r3, r2, r3
 800d60a:	461a      	mov	r2, r3
 800d60c:	693b      	ldr	r3, [r7, #16]
 800d60e:	4313      	orrs	r3, r2
 800d610:	613b      	str	r3, [r7, #16]
			  st_pos--;
 800d612:	7ebb      	ldrb	r3, [r7, #26]
 800d614:	3b01      	subs	r3, #1
 800d616:	76bb      	strb	r3, [r7, #26]
 800d618:	e035      	b.n	800d686 <putStrToBuffMix+0x106>



		  }
		  else{
			  if (count == 2){st_pos -= 2;count++;};
 800d61a:	7efb      	ldrb	r3, [r7, #27]
 800d61c:	2b02      	cmp	r3, #2
 800d61e:	d105      	bne.n	800d62c <putStrToBuffMix+0xac>
 800d620:	7ebb      	ldrb	r3, [r7, #26]
 800d622:	3b02      	subs	r3, #2
 800d624:	76bb      	strb	r3, [r7, #26]
 800d626:	7efb      	ldrb	r3, [r7, #27]
 800d628:	3301      	adds	r3, #1
 800d62a:	76fb      	strb	r3, [r7, #27]
		  rpos = *s - font_8pt_info.stchar;
 800d62c:	69fb      	ldr	r3, [r7, #28]
 800d62e:	781a      	ldrb	r2, [r3, #0]
 800d630:	4b32      	ldr	r3, [pc, #200]	; (800d6fc <putStrToBuffMix+0x17c>)
 800d632:	785b      	ldrb	r3, [r3, #1]
 800d634:	1ad3      	subs	r3, r2, r3
 800d636:	73fb      	strb	r3, [r7, #15]
		  w = font_8ptChrsDescr[rpos].size;
 800d638:	7bfb      	ldrb	r3, [r7, #15]
 800d63a:	4a31      	ldr	r2, [pc, #196]	; (800d700 <putStrToBuffMix+0x180>)
 800d63c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d640:	73bb      	strb	r3, [r7, #14]
		  bpos = font_8ptChrsDescr[rpos].position;
 800d642:	7bfb      	ldrb	r3, [r7, #15]
 800d644:	4a2e      	ldr	r2, [pc, #184]	; (800d700 <putStrToBuffMix+0x180>)
 800d646:	005b      	lsls	r3, r3, #1
 800d648:	4413      	add	r3, r2
 800d64a:	785b      	ldrb	r3, [r3, #1]
 800d64c:	737b      	strb	r3, [r7, #13]
		  st_pos -= w;
 800d64e:	7eba      	ldrb	r2, [r7, #26]
 800d650:	7bbb      	ldrb	r3, [r7, #14]
 800d652:	1ad3      	subs	r3, r2, r3
 800d654:	76bb      	strb	r3, [r7, #26]
		  tmp |= font_8ptBtmps[bpos + i] << st_pos;
 800d656:	7b7a      	ldrb	r2, [r7, #13]
 800d658:	7e7b      	ldrb	r3, [r7, #25]
 800d65a:	4413      	add	r3, r2
 800d65c:	4a29      	ldr	r2, [pc, #164]	; (800d704 <putStrToBuffMix+0x184>)
 800d65e:	5cd3      	ldrb	r3, [r2, r3]
 800d660:	461a      	mov	r2, r3
 800d662:	7ebb      	ldrb	r3, [r7, #26]
 800d664:	fa02 f303 	lsl.w	r3, r2, r3
 800d668:	461a      	mov	r2, r3
 800d66a:	697b      	ldr	r3, [r7, #20]
 800d66c:	4313      	orrs	r3, r2
 800d66e:	617b      	str	r3, [r7, #20]
		  tmp1 |= st_text[i];
 800d670:	7e7b      	ldrb	r3, [r7, #25]
 800d672:	4a25      	ldr	r2, [pc, #148]	; (800d708 <putStrToBuffMix+0x188>)
 800d674:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d678:	461a      	mov	r2, r3
 800d67a:	693b      	ldr	r3, [r7, #16]
 800d67c:	4313      	orrs	r3, r2
 800d67e:	613b      	str	r3, [r7, #16]
		  st_pos--;
 800d680:	7ebb      	ldrb	r3, [r7, #26]
 800d682:	3b01      	subs	r3, #1
 800d684:	76bb      	strb	r3, [r7, #26]
		  }
		  s++;
 800d686:	69fb      	ldr	r3, [r7, #28]
 800d688:	3301      	adds	r3, #1
 800d68a:	61fb      	str	r3, [r7, #28]
	  while (*s != '\0'){
 800d68c:	69fb      	ldr	r3, [r7, #28]
 800d68e:	781b      	ldrb	r3, [r3, #0]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d187      	bne.n	800d5a4 <putStrToBuffMix+0x24>

	  };

	  display_buffer[i][0] = (tmp >> 16);
 800d694:	697b      	ldr	r3, [r7, #20]
 800d696:	0c1a      	lsrs	r2, r3, #16
 800d698:	7e7b      	ldrb	r3, [r7, #25]
 800d69a:	b291      	uxth	r1, r2
 800d69c:	4a1b      	ldr	r2, [pc, #108]	; (800d70c <putStrToBuffMix+0x18c>)
 800d69e:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
	  display_buffer[i][1] = (tmp);
 800d6a2:	7e7b      	ldrb	r3, [r7, #25]
 800d6a4:	697a      	ldr	r2, [r7, #20]
 800d6a6:	b291      	uxth	r1, r2
 800d6a8:	4a18      	ldr	r2, [pc, #96]	; (800d70c <putStrToBuffMix+0x18c>)
 800d6aa:	009b      	lsls	r3, r3, #2
 800d6ac:	4413      	add	r3, r2
 800d6ae:	460a      	mov	r2, r1
 800d6b0:	805a      	strh	r2, [r3, #2]

	  display_buffer[i+8][0] = (tmp1 >> 16);
 800d6b2:	693b      	ldr	r3, [r7, #16]
 800d6b4:	0c1a      	lsrs	r2, r3, #16
 800d6b6:	7e7b      	ldrb	r3, [r7, #25]
 800d6b8:	3308      	adds	r3, #8
 800d6ba:	b291      	uxth	r1, r2
 800d6bc:	4a13      	ldr	r2, [pc, #76]	; (800d70c <putStrToBuffMix+0x18c>)
 800d6be:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
	  display_buffer[i+8][1] = (tmp1);
 800d6c2:	7e7b      	ldrb	r3, [r7, #25]
 800d6c4:	3308      	adds	r3, #8
 800d6c6:	693a      	ldr	r2, [r7, #16]
 800d6c8:	b291      	uxth	r1, r2
 800d6ca:	4a10      	ldr	r2, [pc, #64]	; (800d70c <putStrToBuffMix+0x18c>)
 800d6cc:	009b      	lsls	r3, r3, #2
 800d6ce:	4413      	add	r3, r2
 800d6d0:	460a      	mov	r2, r1
 800d6d2:	805a      	strh	r2, [r3, #2]
	  for (uint8_t i=0;i<8;i++){
 800d6d4:	7e7b      	ldrb	r3, [r7, #25]
 800d6d6:	3301      	adds	r3, #1
 800d6d8:	767b      	strb	r3, [r7, #25]
 800d6da:	7e7b      	ldrb	r3, [r7, #25]
 800d6dc:	2b07      	cmp	r3, #7
 800d6de:	f67f af56 	bls.w	800d58e <putStrToBuffMix+0xe>

	  };


}
 800d6e2:	bf00      	nop
 800d6e4:	bf00      	nop
 800d6e6:	3724      	adds	r7, #36	; 0x24
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bc80      	pop	{r7}
 800d6ec:	4770      	bx	lr
 800d6ee:	bf00      	nop
 800d6f0:	08016078 	.word	0x08016078
 800d6f4:	08016058 	.word	0x08016058
 800d6f8:	08015fb8 	.word	0x08015fb8
 800d6fc:	08016104 	.word	0x08016104
 800d700:	080160e4 	.word	0x080160e4
 800d704:	0801607c 	.word	0x0801607c
 800d708:	08016120 	.word	0x08016120
 800d70c:	2000019c 	.word	0x2000019c

0800d710 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800d710:	b480      	push	{r7}
 800d712:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800d714:	b672      	cpsid	i
}
 800d716:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800d718:	e7fe      	b.n	800d718 <Error_Handler+0x8>
	...

0800d71c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b084      	sub	sp, #16
 800d720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800d722:	4b19      	ldr	r3, [pc, #100]	; (800d788 <HAL_MspInit+0x6c>)
 800d724:	699b      	ldr	r3, [r3, #24]
 800d726:	4a18      	ldr	r2, [pc, #96]	; (800d788 <HAL_MspInit+0x6c>)
 800d728:	f043 0301 	orr.w	r3, r3, #1
 800d72c:	6193      	str	r3, [r2, #24]
 800d72e:	4b16      	ldr	r3, [pc, #88]	; (800d788 <HAL_MspInit+0x6c>)
 800d730:	699b      	ldr	r3, [r3, #24]
 800d732:	f003 0301 	and.w	r3, r3, #1
 800d736:	60bb      	str	r3, [r7, #8]
 800d738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800d73a:	4b13      	ldr	r3, [pc, #76]	; (800d788 <HAL_MspInit+0x6c>)
 800d73c:	69db      	ldr	r3, [r3, #28]
 800d73e:	4a12      	ldr	r2, [pc, #72]	; (800d788 <HAL_MspInit+0x6c>)
 800d740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d744:	61d3      	str	r3, [r2, #28]
 800d746:	4b10      	ldr	r3, [pc, #64]	; (800d788 <HAL_MspInit+0x6c>)
 800d748:	69db      	ldr	r3, [r3, #28]
 800d74a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d74e:	607b      	str	r3, [r7, #4]
 800d750:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 7, 0);
 800d752:	2200      	movs	r2, #0
 800d754:	2107      	movs	r1, #7
 800d756:	2001      	movs	r0, #1
 800d758:	f000 fc27 	bl	800dfaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 800d75c:	2001      	movs	r0, #1
 800d75e:	f000 fc40 	bl	800dfe2 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800d762:	4b0a      	ldr	r3, [pc, #40]	; (800d78c <HAL_MspInit+0x70>)
 800d764:	685b      	ldr	r3, [r3, #4]
 800d766:	60fb      	str	r3, [r7, #12]
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800d76e:	60fb      	str	r3, [r7, #12]
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800d776:	60fb      	str	r3, [r7, #12]
 800d778:	4a04      	ldr	r2, [pc, #16]	; (800d78c <HAL_MspInit+0x70>)
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d77e:	bf00      	nop
 800d780:	3710      	adds	r7, #16
 800d782:	46bd      	mov	sp, r7
 800d784:	bd80      	pop	{r7, pc}
 800d786:	bf00      	nop
 800d788:	40021000 	.word	0x40021000
 800d78c:	40010000 	.word	0x40010000

0800d790 <LL_DMA_EnableChannel>:
{
 800d790:	b480      	push	{r7}
 800d792:	b083      	sub	sp, #12
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
 800d798:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800d79a:	683b      	ldr	r3, [r7, #0]
 800d79c:	3b01      	subs	r3, #1
 800d79e:	4a0a      	ldr	r2, [pc, #40]	; (800d7c8 <LL_DMA_EnableChannel+0x38>)
 800d7a0:	5cd3      	ldrb	r3, [r2, r3]
 800d7a2:	461a      	mov	r2, r3
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	4413      	add	r3, r2
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	683a      	ldr	r2, [r7, #0]
 800d7ac:	3a01      	subs	r2, #1
 800d7ae:	4906      	ldr	r1, [pc, #24]	; (800d7c8 <LL_DMA_EnableChannel+0x38>)
 800d7b0:	5c8a      	ldrb	r2, [r1, r2]
 800d7b2:	4611      	mov	r1, r2
 800d7b4:	687a      	ldr	r2, [r7, #4]
 800d7b6:	440a      	add	r2, r1
 800d7b8:	f043 0301 	orr.w	r3, r3, #1
 800d7bc:	6013      	str	r3, [r2, #0]
}
 800d7be:	bf00      	nop
 800d7c0:	370c      	adds	r7, #12
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	bc80      	pop	{r7}
 800d7c6:	4770      	bx	lr
 800d7c8:	08016130 	.word	0x08016130

0800d7cc <LL_DMA_DisableChannel>:
{
 800d7cc:	b480      	push	{r7}
 800d7ce:	b083      	sub	sp, #12
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
 800d7d4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	3b01      	subs	r3, #1
 800d7da:	4a0a      	ldr	r2, [pc, #40]	; (800d804 <LL_DMA_DisableChannel+0x38>)
 800d7dc:	5cd3      	ldrb	r3, [r2, r3]
 800d7de:	461a      	mov	r2, r3
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	4413      	add	r3, r2
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	683a      	ldr	r2, [r7, #0]
 800d7e8:	3a01      	subs	r2, #1
 800d7ea:	4906      	ldr	r1, [pc, #24]	; (800d804 <LL_DMA_DisableChannel+0x38>)
 800d7ec:	5c8a      	ldrb	r2, [r1, r2]
 800d7ee:	4611      	mov	r1, r2
 800d7f0:	687a      	ldr	r2, [r7, #4]
 800d7f2:	440a      	add	r2, r1
 800d7f4:	f023 0301 	bic.w	r3, r3, #1
 800d7f8:	6013      	str	r3, [r2, #0]
}
 800d7fa:	bf00      	nop
 800d7fc:	370c      	adds	r7, #12
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bc80      	pop	{r7}
 800d802:	4770      	bx	lr
 800d804:	08016130 	.word	0x08016130

0800d808 <LL_DMA_SetDataLength>:
{
 800d808:	b480      	push	{r7}
 800d80a:	b085      	sub	sp, #20
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	60f8      	str	r0, [r7, #12]
 800d810:	60b9      	str	r1, [r7, #8]
 800d812:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 800d814:	68bb      	ldr	r3, [r7, #8]
 800d816:	3b01      	subs	r3, #1
 800d818:	4a0b      	ldr	r2, [pc, #44]	; (800d848 <LL_DMA_SetDataLength+0x40>)
 800d81a:	5cd3      	ldrb	r3, [r2, r3]
 800d81c:	461a      	mov	r2, r3
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	4413      	add	r3, r2
 800d822:	685b      	ldr	r3, [r3, #4]
 800d824:	0c1b      	lsrs	r3, r3, #16
 800d826:	041b      	lsls	r3, r3, #16
 800d828:	68ba      	ldr	r2, [r7, #8]
 800d82a:	3a01      	subs	r2, #1
 800d82c:	4906      	ldr	r1, [pc, #24]	; (800d848 <LL_DMA_SetDataLength+0x40>)
 800d82e:	5c8a      	ldrb	r2, [r1, r2]
 800d830:	4611      	mov	r1, r2
 800d832:	68fa      	ldr	r2, [r7, #12]
 800d834:	440a      	add	r2, r1
 800d836:	4611      	mov	r1, r2
 800d838:	687a      	ldr	r2, [r7, #4]
 800d83a:	4313      	orrs	r3, r2
 800d83c:	604b      	str	r3, [r1, #4]
}
 800d83e:	bf00      	nop
 800d840:	3714      	adds	r7, #20
 800d842:	46bd      	mov	sp, r7
 800d844:	bc80      	pop	{r7}
 800d846:	4770      	bx	lr
 800d848:	08016130 	.word	0x08016130

0800d84c <LL_DMA_ConfigAddresses>:
{
 800d84c:	b480      	push	{r7}
 800d84e:	b085      	sub	sp, #20
 800d850:	af00      	add	r7, sp, #0
 800d852:	60f8      	str	r0, [r7, #12]
 800d854:	60b9      	str	r1, [r7, #8]
 800d856:	607a      	str	r2, [r7, #4]
 800d858:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 800d85a:	69bb      	ldr	r3, [r7, #24]
 800d85c:	2b10      	cmp	r3, #16
 800d85e:	d114      	bne.n	800d88a <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 800d860:	68bb      	ldr	r3, [r7, #8]
 800d862:	3b01      	subs	r3, #1
 800d864:	4a15      	ldr	r2, [pc, #84]	; (800d8bc <LL_DMA_ConfigAddresses+0x70>)
 800d866:	5cd3      	ldrb	r3, [r2, r3]
 800d868:	461a      	mov	r2, r3
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	4413      	add	r3, r2
 800d86e:	461a      	mov	r2, r3
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 800d874:	68bb      	ldr	r3, [r7, #8]
 800d876:	3b01      	subs	r3, #1
 800d878:	4a10      	ldr	r2, [pc, #64]	; (800d8bc <LL_DMA_ConfigAddresses+0x70>)
 800d87a:	5cd3      	ldrb	r3, [r2, r3]
 800d87c:	461a      	mov	r2, r3
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	4413      	add	r3, r2
 800d882:	461a      	mov	r2, r3
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	6093      	str	r3, [r2, #8]
}
 800d888:	e013      	b.n	800d8b2 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 800d88a:	68bb      	ldr	r3, [r7, #8]
 800d88c:	3b01      	subs	r3, #1
 800d88e:	4a0b      	ldr	r2, [pc, #44]	; (800d8bc <LL_DMA_ConfigAddresses+0x70>)
 800d890:	5cd3      	ldrb	r3, [r2, r3]
 800d892:	461a      	mov	r2, r3
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	4413      	add	r3, r2
 800d898:	461a      	mov	r2, r3
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	3b01      	subs	r3, #1
 800d8a2:	4a06      	ldr	r2, [pc, #24]	; (800d8bc <LL_DMA_ConfigAddresses+0x70>)
 800d8a4:	5cd3      	ldrb	r3, [r2, r3]
 800d8a6:	461a      	mov	r2, r3
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	4413      	add	r3, r2
 800d8ac:	461a      	mov	r2, r3
 800d8ae:	683b      	ldr	r3, [r7, #0]
 800d8b0:	60d3      	str	r3, [r2, #12]
}
 800d8b2:	bf00      	nop
 800d8b4:	3714      	adds	r7, #20
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bc80      	pop	{r7}
 800d8ba:	4770      	bx	lr
 800d8bc:	08016130 	.word	0x08016130

0800d8c0 <LL_DMA_IsActiveFlag_TC3>:
{
 800d8c0:	b480      	push	{r7}
 800d8c2:	b083      	sub	sp, #12
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF3) == (DMA_ISR_TCIF3));
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d8d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d8d4:	bf0c      	ite	eq
 800d8d6:	2301      	moveq	r3, #1
 800d8d8:	2300      	movne	r3, #0
 800d8da:	b2db      	uxtb	r3, r3
}
 800d8dc:	4618      	mov	r0, r3
 800d8de:	370c      	adds	r7, #12
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bc80      	pop	{r7}
 800d8e4:	4770      	bx	lr

0800d8e6 <LL_DMA_ClearFlag_TC3>:
{
 800d8e6:	b480      	push	{r7}
 800d8e8:	b083      	sub	sp, #12
 800d8ea:	af00      	add	r7, sp, #0
 800d8ec:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF3);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d8f4:	605a      	str	r2, [r3, #4]
}
 800d8f6:	bf00      	nop
 800d8f8:	370c      	adds	r7, #12
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	bc80      	pop	{r7}
 800d8fe:	4770      	bx	lr

0800d900 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 800d900:	b480      	push	{r7}
 800d902:	b083      	sub	sp, #12
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 800d908:	4b07      	ldr	r3, [pc, #28]	; (800d928 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800d90a:	695a      	ldr	r2, [r3, #20]
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	4013      	ands	r3, r2
 800d910:	687a      	ldr	r2, [r7, #4]
 800d912:	429a      	cmp	r2, r3
 800d914:	bf0c      	ite	eq
 800d916:	2301      	moveq	r3, #1
 800d918:	2300      	movne	r3, #0
 800d91a:	b2db      	uxtb	r3, r3
}
 800d91c:	4618      	mov	r0, r3
 800d91e:	370c      	adds	r7, #12
 800d920:	46bd      	mov	sp, r7
 800d922:	bc80      	pop	{r7}
 800d924:	4770      	bx	lr
 800d926:	bf00      	nop
 800d928:	40010400 	.word	0x40010400

0800d92c <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800d92c:	b480      	push	{r7}
 800d92e:	b083      	sub	sp, #12
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 800d934:	4a03      	ldr	r2, [pc, #12]	; (800d944 <LL_EXTI_ClearFlag_0_31+0x18>)
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	6153      	str	r3, [r2, #20]
}
 800d93a:	bf00      	nop
 800d93c:	370c      	adds	r7, #12
 800d93e:	46bd      	mov	sp, r7
 800d940:	bc80      	pop	{r7}
 800d942:	4770      	bx	lr
 800d944:	40010400 	.word	0x40010400

0800d948 <LL_SPI_IsActiveFlag_BSY>:
{
 800d948:	b480      	push	{r7}
 800d94a:	b083      	sub	sp, #12
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	689b      	ldr	r3, [r3, #8]
 800d954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d958:	2b80      	cmp	r3, #128	; 0x80
 800d95a:	d101      	bne.n	800d960 <LL_SPI_IsActiveFlag_BSY+0x18>
 800d95c:	2301      	movs	r3, #1
 800d95e:	e000      	b.n	800d962 <LL_SPI_IsActiveFlag_BSY+0x1a>
 800d960:	2300      	movs	r3, #0
}
 800d962:	4618      	mov	r0, r3
 800d964:	370c      	adds	r7, #12
 800d966:	46bd      	mov	sp, r7
 800d968:	bc80      	pop	{r7}
 800d96a:	4770      	bx	lr

0800d96c <LL_SPI_DMA_GetRegAddr>:
{
 800d96c:	b480      	push	{r7}
 800d96e:	b083      	sub	sp, #12
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
  return (uint32_t) &(SPIx->DR);
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	330c      	adds	r3, #12
}
 800d978:	4618      	mov	r0, r3
 800d97a:	370c      	adds	r7, #12
 800d97c:	46bd      	mov	sp, r7
 800d97e:	bc80      	pop	{r7}
 800d980:	4770      	bx	lr

0800d982 <LL_TIM_ClearFlag_UPDATE>:
{
 800d982:	b480      	push	{r7}
 800d984:	b083      	sub	sp, #12
 800d986:	af00      	add	r7, sp, #0
 800d988:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	f06f 0201 	mvn.w	r2, #1
 800d990:	611a      	str	r2, [r3, #16]
}
 800d992:	bf00      	nop
 800d994:	370c      	adds	r7, #12
 800d996:	46bd      	mov	sp, r7
 800d998:	bc80      	pop	{r7}
 800d99a:	4770      	bx	lr

0800d99c <LL_TIM_IsActiveFlag_UPDATE>:
{
 800d99c:	b480      	push	{r7}
 800d99e:	b083      	sub	sp, #12
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	691b      	ldr	r3, [r3, #16]
 800d9a8:	f003 0301 	and.w	r3, r3, #1
 800d9ac:	2b01      	cmp	r3, #1
 800d9ae:	d101      	bne.n	800d9b4 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800d9b0:	2301      	movs	r3, #1
 800d9b2:	e000      	b.n	800d9b6 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 800d9b4:	2300      	movs	r3, #0
}
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	370c      	adds	r7, #12
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	bc80      	pop	{r7}
 800d9be:	4770      	bx	lr

0800d9c0 <LL_TIM_ClearFlag_CC4>:
{
 800d9c0:	b480      	push	{r7}
 800d9c2:	b083      	sub	sp, #12
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC4IF));
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	f06f 0210 	mvn.w	r2, #16
 800d9ce:	611a      	str	r2, [r3, #16]
}
 800d9d0:	bf00      	nop
 800d9d2:	370c      	adds	r7, #12
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	bc80      	pop	{r7}
 800d9d8:	4770      	bx	lr

0800d9da <LL_TIM_IsActiveFlag_CC4>:
{
 800d9da:	b480      	push	{r7}
 800d9dc:	b083      	sub	sp, #12
 800d9de:	af00      	add	r7, sp, #0
 800d9e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC4IF) == (TIM_SR_CC4IF)) ? 1UL : 0UL);
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	691b      	ldr	r3, [r3, #16]
 800d9e6:	f003 0310 	and.w	r3, r3, #16
 800d9ea:	2b10      	cmp	r3, #16
 800d9ec:	d101      	bne.n	800d9f2 <LL_TIM_IsActiveFlag_CC4+0x18>
 800d9ee:	2301      	movs	r3, #1
 800d9f0:	e000      	b.n	800d9f4 <LL_TIM_IsActiveFlag_CC4+0x1a>
 800d9f2:	2300      	movs	r3, #0
}
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	370c      	adds	r7, #12
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bc80      	pop	{r7}
 800d9fc:	4770      	bx	lr

0800d9fe <LL_GPIO_SetOutputPin>:
{
 800d9fe:	b480      	push	{r7}
 800da00:	b083      	sub	sp, #12
 800da02:	af00      	add	r7, sp, #0
 800da04:	6078      	str	r0, [r7, #4]
 800da06:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800da08:	683b      	ldr	r3, [r7, #0]
 800da0a:	0a1b      	lsrs	r3, r3, #8
 800da0c:	b29a      	uxth	r2, r3
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	611a      	str	r2, [r3, #16]
}
 800da12:	bf00      	nop
 800da14:	370c      	adds	r7, #12
 800da16:	46bd      	mov	sp, r7
 800da18:	bc80      	pop	{r7}
 800da1a:	4770      	bx	lr

0800da1c <LL_GPIO_ResetOutputPin>:
{
 800da1c:	b480      	push	{r7}
 800da1e:	b083      	sub	sp, #12
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
 800da24:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800da26:	683b      	ldr	r3, [r7, #0]
 800da28:	0a1b      	lsrs	r3, r3, #8
 800da2a:	b29a      	uxth	r2, r3
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	615a      	str	r2, [r3, #20]
}
 800da30:	bf00      	nop
 800da32:	370c      	adds	r7, #12
 800da34:	46bd      	mov	sp, r7
 800da36:	bc80      	pop	{r7}
 800da38:	4770      	bx	lr

0800da3a <LL_GPIO_TogglePin>:
{
 800da3a:	b480      	push	{r7}
 800da3c:	b085      	sub	sp, #20
 800da3e:	af00      	add	r7, sp, #0
 800da40:	6078      	str	r0, [r7, #4]
 800da42:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	68db      	ldr	r3, [r3, #12]
 800da48:	60fb      	str	r3, [r7, #12]
  uint32_t pinmask = ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	0a1b      	lsrs	r3, r3, #8
 800da4e:	b29b      	uxth	r3, r3
 800da50:	60bb      	str	r3, [r7, #8]
  WRITE_REG(GPIOx->BSRR, ((odr & pinmask) << 16u) | (~odr & pinmask));
 800da52:	68fa      	ldr	r2, [r7, #12]
 800da54:	68bb      	ldr	r3, [r7, #8]
 800da56:	4013      	ands	r3, r2
 800da58:	041a      	lsls	r2, r3, #16
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	43d9      	mvns	r1, r3
 800da5e:	68bb      	ldr	r3, [r7, #8]
 800da60:	400b      	ands	r3, r1
 800da62:	431a      	orrs	r2, r3
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	611a      	str	r2, [r3, #16]
}
 800da68:	bf00      	nop
 800da6a:	3714      	adds	r7, #20
 800da6c:	46bd      	mov	sp, r7
 800da6e:	bc80      	pop	{r7}
 800da70:	4770      	bx	lr

0800da72 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800da72:	b480      	push	{r7}
 800da74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800da76:	e7fe      	b.n	800da76 <NMI_Handler+0x4>

0800da78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800da78:	b480      	push	{r7}
 800da7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800da7c:	e7fe      	b.n	800da7c <HardFault_Handler+0x4>

0800da7e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800da7e:	b480      	push	{r7}
 800da80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800da82:	e7fe      	b.n	800da82 <MemManage_Handler+0x4>

0800da84 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800da84:	b480      	push	{r7}
 800da86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800da88:	e7fe      	b.n	800da88 <BusFault_Handler+0x4>

0800da8a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800da8a:	b480      	push	{r7}
 800da8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800da8e:	e7fe      	b.n	800da8e <UsageFault_Handler+0x4>

0800da90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800da90:	b480      	push	{r7}
 800da92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800da94:	bf00      	nop
 800da96:	46bd      	mov	sp, r7
 800da98:	bc80      	pop	{r7}
 800da9a:	4770      	bx	lr

0800da9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800da9c:	b480      	push	{r7}
 800da9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800daa0:	bf00      	nop
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bc80      	pop	{r7}
 800daa6:	4770      	bx	lr

0800daa8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800daa8:	b480      	push	{r7}
 800daaa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800daac:	bf00      	nop
 800daae:	46bd      	mov	sp, r7
 800dab0:	bc80      	pop	{r7}
 800dab2:	4770      	bx	lr

0800dab4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800dab8:	f000 f98e 	bl	800ddd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800dabc:	bf00      	nop
 800dabe:	bd80      	pop	{r7, pc}

0800dac0 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 800dac4:	f002 f842 	bl	800fb4c <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 800dac8:	bf00      	nop
 800daca:	bd80      	pop	{r7, pc}

0800dacc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC3(DMA1)){
 800dad0:	480a      	ldr	r0, [pc, #40]	; (800dafc <DMA1_Channel3_IRQHandler+0x30>)
 800dad2:	f7ff fef5 	bl	800d8c0 <LL_DMA_IsActiveFlag_TC3>
 800dad6:	4603      	mov	r3, r0
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d00c      	beq.n	800daf6 <DMA1_Channel3_IRQHandler+0x2a>
		LL_DMA_ClearFlag_TC3(DMA1);
 800dadc:	4807      	ldr	r0, [pc, #28]	; (800dafc <DMA1_Channel3_IRQHandler+0x30>)
 800dade:	f7ff ff02 	bl	800d8e6 <LL_DMA_ClearFlag_TC3>
		  while(LL_SPI_IsActiveFlag_BSY(SPI1));
 800dae2:	bf00      	nop
 800dae4:	4806      	ldr	r0, [pc, #24]	; (800db00 <DMA1_Channel3_IRQHandler+0x34>)
 800dae6:	f7ff ff2f 	bl	800d948 <LL_SPI_IsActiveFlag_BSY>
 800daea:	4603      	mov	r3, r0
 800daec:	2b00      	cmp	r3, #0
 800daee:	d1f9      	bne.n	800dae4 <DMA1_Channel3_IRQHandler+0x18>
		  LP_lock = 0;
 800daf0:	4b04      	ldr	r3, [pc, #16]	; (800db04 <DMA1_Channel3_IRQHandler+0x38>)
 800daf2:	2200      	movs	r2, #0
 800daf4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA1_Channel3_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800daf6:	bf00      	nop
 800daf8:	bd80      	pop	{r7, pc}
 800dafa:	bf00      	nop
 800dafc:	40020000 	.word	0x40020000
 800db00:	40013000 	.word	0x40013000
 800db04:	2000015a 	.word	0x2000015a

0800db08 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800db0c:	4802      	ldr	r0, [pc, #8]	; (800db18 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800db0e:	f000 fba7 	bl	800e260 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800db12:	bf00      	nop
 800db14:	bd80      	pop	{r7, pc}
 800db16:	bf00      	nop
 800db18:	200006a8 	.word	0x200006a8

0800db1c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_5) != RESET)
 800db20:	2020      	movs	r0, #32
 800db22:	f7ff feed 	bl	800d900 <LL_EXTI_IsActiveFlag_0_31>
 800db26:	4603      	mov	r3, r0
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d002      	beq.n	800db32 <EXTI9_5_IRQHandler+0x16>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_5);
 800db2c:	2020      	movs	r0, #32
 800db2e:	f7ff fefd 	bl	800d92c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_5 */

    /* USER CODE END LL_EXTI_LINE_5 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_6) != RESET)
 800db32:	2040      	movs	r0, #64	; 0x40
 800db34:	f7ff fee4 	bl	800d900 <LL_EXTI_IsActiveFlag_0_31>
 800db38:	4603      	mov	r3, r0
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d002      	beq.n	800db44 <EXTI9_5_IRQHandler+0x28>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_6);
 800db3e:	2040      	movs	r0, #64	; 0x40
 800db40:	f7ff fef4 	bl	800d92c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_6 */

    /* USER CODE END LL_EXTI_LINE_6 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_7) != RESET)
 800db44:	2080      	movs	r0, #128	; 0x80
 800db46:	f7ff fedb 	bl	800d900 <LL_EXTI_IsActiveFlag_0_31>
 800db4a:	4603      	mov	r3, r0
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d002      	beq.n	800db56 <EXTI9_5_IRQHandler+0x3a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_7);
 800db50:	2080      	movs	r0, #128	; 0x80
 800db52:	f7ff feeb 	bl	800d92c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_7 */
  }
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800db56:	bf00      	nop
 800db58:	bd80      	pop	{r7, pc}
	...

0800db5c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800db5c:	b590      	push	{r4, r7, lr}
 800db5e:	b083      	sub	sp, #12
 800db60:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM3)){
 800db62:	482d      	ldr	r0, [pc, #180]	; (800dc18 <TIM3_IRQHandler+0xbc>)
 800db64:	f7ff ff1a 	bl	800d99c <LL_TIM_IsActiveFlag_UPDATE>
 800db68:	4603      	mov	r3, r0
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d046      	beq.n	800dbfc <TIM3_IRQHandler+0xa0>

		LL_GPIO_SetOutputPin(LP_LE_GPIO_Port, LP_LE_Pin);
 800db6e:	f240 1101 	movw	r1, #257	; 0x101
 800db72:	482a      	ldr	r0, [pc, #168]	; (800dc1c <TIM3_IRQHandler+0xc0>)
 800db74:	f7ff ff43 	bl	800d9fe <LL_GPIO_SetOutputPin>

		//LL_TIM_OC_SetMode(TIM3, LL_TIM_CHANNEL_CH4, LL_TIM_OCMODE_INACTIVE);
		GPIOB->BSRR = (str_cnt << 12u) | ((0x7-str_cnt) << (12u+16u));
 800db78:	4b29      	ldr	r3, [pc, #164]	; (800dc20 <TIM3_IRQHandler+0xc4>)
 800db7a:	781b      	ldrb	r3, [r3, #0]
 800db7c:	031a      	lsls	r2, r3, #12
 800db7e:	4b28      	ldr	r3, [pc, #160]	; (800dc20 <TIM3_IRQHandler+0xc4>)
 800db80:	781b      	ldrb	r3, [r3, #0]
 800db82:	f1c3 0307 	rsb	r3, r3, #7
 800db86:	071b      	lsls	r3, r3, #28
 800db88:	431a      	orrs	r2, r3
 800db8a:	4b24      	ldr	r3, [pc, #144]	; (800dc1c <TIM3_IRQHandler+0xc0>)
 800db8c:	611a      	str	r2, [r3, #16]

		LL_TIM_ClearFlag_UPDATE(TIM3);
 800db8e:	4822      	ldr	r0, [pc, #136]	; (800dc18 <TIM3_IRQHandler+0xbc>)
 800db90:	f7ff fef7 	bl	800d982 <LL_TIM_ClearFlag_UPDATE>

		LL_GPIO_ResetOutputPin(LP_LE_GPIO_Port, LP_LE_Pin);
 800db94:	f240 1101 	movw	r1, #257	; 0x101
 800db98:	4820      	ldr	r0, [pc, #128]	; (800dc1c <TIM3_IRQHandler+0xc0>)
 800db9a:	f7ff ff3f 	bl	800da1c <LL_GPIO_ResetOutputPin>

		str_cnt++;
 800db9e:	4b20      	ldr	r3, [pc, #128]	; (800dc20 <TIM3_IRQHandler+0xc4>)
 800dba0:	781b      	ldrb	r3, [r3, #0]
 800dba2:	3301      	adds	r3, #1
 800dba4:	b2da      	uxtb	r2, r3
 800dba6:	4b1e      	ldr	r3, [pc, #120]	; (800dc20 <TIM3_IRQHandler+0xc4>)
 800dba8:	701a      	strb	r2, [r3, #0]
		if (str_cnt >7) str_cnt = 0;
 800dbaa:	4b1d      	ldr	r3, [pc, #116]	; (800dc20 <TIM3_IRQHandler+0xc4>)
 800dbac:	781b      	ldrb	r3, [r3, #0]
 800dbae:	2b07      	cmp	r3, #7
 800dbb0:	d902      	bls.n	800dbb8 <TIM3_IRQHandler+0x5c>
 800dbb2:	4b1b      	ldr	r3, [pc, #108]	; (800dc20 <TIM3_IRQHandler+0xc4>)
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	701a      	strb	r2, [r3, #0]
		LP_lock = 1;
 800dbb8:	4b1a      	ldr	r3, [pc, #104]	; (800dc24 <TIM3_IRQHandler+0xc8>)
 800dbba:	2201      	movs	r2, #1
 800dbbc:	701a      	strb	r2, [r3, #0]
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_3);
 800dbbe:	2103      	movs	r1, #3
 800dbc0:	4819      	ldr	r0, [pc, #100]	; (800dc28 <TIM3_IRQHandler+0xcc>)
 800dbc2:	f7ff fe03 	bl	800d7cc <LL_DMA_DisableChannel>
		LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_3, (uint32_t)&LP_buffer[4*str_cnt],LL_SPI_DMA_GetRegAddr(SPI1) ,LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800dbc6:	4b16      	ldr	r3, [pc, #88]	; (800dc20 <TIM3_IRQHandler+0xc4>)
 800dbc8:	781b      	ldrb	r3, [r3, #0]
 800dbca:	009b      	lsls	r3, r3, #2
 800dbcc:	005b      	lsls	r3, r3, #1
 800dbce:	4a17      	ldr	r2, [pc, #92]	; (800dc2c <TIM3_IRQHandler+0xd0>)
 800dbd0:	4413      	add	r3, r2
 800dbd2:	461c      	mov	r4, r3
 800dbd4:	4816      	ldr	r0, [pc, #88]	; (800dc30 <TIM3_IRQHandler+0xd4>)
 800dbd6:	f7ff fec9 	bl	800d96c <LL_SPI_DMA_GetRegAddr>
 800dbda:	4603      	mov	r3, r0
 800dbdc:	2210      	movs	r2, #16
 800dbde:	9200      	str	r2, [sp, #0]
 800dbe0:	4622      	mov	r2, r4
 800dbe2:	2103      	movs	r1, #3
 800dbe4:	4810      	ldr	r0, [pc, #64]	; (800dc28 <TIM3_IRQHandler+0xcc>)
 800dbe6:	f7ff fe31 	bl	800d84c <LL_DMA_ConfigAddresses>
		LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_3, 4);
 800dbea:	2204      	movs	r2, #4
 800dbec:	2103      	movs	r1, #3
 800dbee:	480e      	ldr	r0, [pc, #56]	; (800dc28 <TIM3_IRQHandler+0xcc>)
 800dbf0:	f7ff fe0a 	bl	800d808 <LL_DMA_SetDataLength>
		LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_3);
 800dbf4:	2103      	movs	r1, #3
 800dbf6:	480c      	ldr	r0, [pc, #48]	; (800dc28 <TIM3_IRQHandler+0xcc>)
 800dbf8:	f7ff fdca 	bl	800d790 <LL_DMA_EnableChannel>




	};
	if(LL_TIM_IsActiveFlag_CC4(TIM4)){
 800dbfc:	480d      	ldr	r0, [pc, #52]	; (800dc34 <TIM3_IRQHandler+0xd8>)
 800dbfe:	f7ff feec 	bl	800d9da <LL_TIM_IsActiveFlag_CC4>
 800dc02:	4603      	mov	r3, r0
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d002      	beq.n	800dc0e <TIM3_IRQHandler+0xb2>
		LL_TIM_ClearFlag_CC4(TIM3);
 800dc08:	4803      	ldr	r0, [pc, #12]	; (800dc18 <TIM3_IRQHandler+0xbc>)
 800dc0a:	f7ff fed9 	bl	800d9c0 <LL_TIM_ClearFlag_CC4>

  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800dc0e:	bf00      	nop
 800dc10:	3704      	adds	r7, #4
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd90      	pop	{r4, r7, pc}
 800dc16:	bf00      	nop
 800dc18:	40000400 	.word	0x40000400
 800dc1c:	40010c00 	.word	0x40010c00
 800dc20:	20000159 	.word	0x20000159
 800dc24:	2000015a 	.word	0x2000015a
 800dc28:	40020000 	.word	0x40020000
 800dc2c:	2000015c 	.word	0x2000015c
 800dc30:	40013000 	.word	0x40013000
 800dc34:	40000800 	.word	0x40000800

0800dc38 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM6)){
 800dc3c:	4824      	ldr	r0, [pc, #144]	; (800dcd0 <TIM6_IRQHandler+0x98>)
 800dc3e:	f7ff fead 	bl	800d99c <LL_TIM_IsActiveFlag_UPDATE>
 800dc42:	4603      	mov	r3, r0
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d040      	beq.n	800dcca <TIM6_IRQHandler+0x92>
		LL_TIM_ClearFlag_UPDATE(TIM6);
 800dc48:	4821      	ldr	r0, [pc, #132]	; (800dcd0 <TIM6_IRQHandler+0x98>)
 800dc4a:	f7ff fe9a 	bl	800d982 <LL_TIM_ClearFlag_UPDATE>
		LL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800dc4e:	4921      	ldr	r1, [pc, #132]	; (800dcd4 <TIM6_IRQHandler+0x9c>)
 800dc50:	4821      	ldr	r0, [pc, #132]	; (800dcd8 <TIM6_IRQHandler+0xa0>)
 800dc52:	f7ff fef2 	bl	800da3a <LL_GPIO_TogglePin>
		cnt1.c0++;
 800dc56:	4b21      	ldr	r3, [pc, #132]	; (800dcdc <TIM6_IRQHandler+0xa4>)
 800dc58:	78db      	ldrb	r3, [r3, #3]
 800dc5a:	3301      	adds	r3, #1
 800dc5c:	b2da      	uxtb	r2, r3
 800dc5e:	4b1f      	ldr	r3, [pc, #124]	; (800dcdc <TIM6_IRQHandler+0xa4>)
 800dc60:	70da      	strb	r2, [r3, #3]
		if (cnt1.c0 > 9){cnt1.c0 = 0; cnt1.c1++;}
 800dc62:	4b1e      	ldr	r3, [pc, #120]	; (800dcdc <TIM6_IRQHandler+0xa4>)
 800dc64:	78db      	ldrb	r3, [r3, #3]
 800dc66:	2b09      	cmp	r3, #9
 800dc68:	d908      	bls.n	800dc7c <TIM6_IRQHandler+0x44>
 800dc6a:	4b1c      	ldr	r3, [pc, #112]	; (800dcdc <TIM6_IRQHandler+0xa4>)
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	70da      	strb	r2, [r3, #3]
 800dc70:	4b1a      	ldr	r3, [pc, #104]	; (800dcdc <TIM6_IRQHandler+0xa4>)
 800dc72:	789b      	ldrb	r3, [r3, #2]
 800dc74:	3301      	adds	r3, #1
 800dc76:	b2da      	uxtb	r2, r3
 800dc78:	4b18      	ldr	r3, [pc, #96]	; (800dcdc <TIM6_IRQHandler+0xa4>)
 800dc7a:	709a      	strb	r2, [r3, #2]
		if (cnt1.c1 > 9){cnt1.c1 = 0; cnt1.c2++;}
 800dc7c:	4b17      	ldr	r3, [pc, #92]	; (800dcdc <TIM6_IRQHandler+0xa4>)
 800dc7e:	789b      	ldrb	r3, [r3, #2]
 800dc80:	2b09      	cmp	r3, #9
 800dc82:	d908      	bls.n	800dc96 <TIM6_IRQHandler+0x5e>
 800dc84:	4b15      	ldr	r3, [pc, #84]	; (800dcdc <TIM6_IRQHandler+0xa4>)
 800dc86:	2200      	movs	r2, #0
 800dc88:	709a      	strb	r2, [r3, #2]
 800dc8a:	4b14      	ldr	r3, [pc, #80]	; (800dcdc <TIM6_IRQHandler+0xa4>)
 800dc8c:	785b      	ldrb	r3, [r3, #1]
 800dc8e:	3301      	adds	r3, #1
 800dc90:	b2da      	uxtb	r2, r3
 800dc92:	4b12      	ldr	r3, [pc, #72]	; (800dcdc <TIM6_IRQHandler+0xa4>)
 800dc94:	705a      	strb	r2, [r3, #1]
		if (cnt1.c2 > 9){cnt1.c2 = 0; cnt1.c3++;}
 800dc96:	4b11      	ldr	r3, [pc, #68]	; (800dcdc <TIM6_IRQHandler+0xa4>)
 800dc98:	785b      	ldrb	r3, [r3, #1]
 800dc9a:	2b09      	cmp	r3, #9
 800dc9c:	d908      	bls.n	800dcb0 <TIM6_IRQHandler+0x78>
 800dc9e:	4b0f      	ldr	r3, [pc, #60]	; (800dcdc <TIM6_IRQHandler+0xa4>)
 800dca0:	2200      	movs	r2, #0
 800dca2:	705a      	strb	r2, [r3, #1]
 800dca4:	4b0d      	ldr	r3, [pc, #52]	; (800dcdc <TIM6_IRQHandler+0xa4>)
 800dca6:	781b      	ldrb	r3, [r3, #0]
 800dca8:	3301      	adds	r3, #1
 800dcaa:	b2da      	uxtb	r2, r3
 800dcac:	4b0b      	ldr	r3, [pc, #44]	; (800dcdc <TIM6_IRQHandler+0xa4>)
 800dcae:	701a      	strb	r2, [r3, #0]
		if (cnt1.c3 > 9){cnt1.c3 = 0;}
 800dcb0:	4b0a      	ldr	r3, [pc, #40]	; (800dcdc <TIM6_IRQHandler+0xa4>)
 800dcb2:	781b      	ldrb	r3, [r3, #0]
 800dcb4:	2b09      	cmp	r3, #9
 800dcb6:	d902      	bls.n	800dcbe <TIM6_IRQHandler+0x86>
 800dcb8:	4b08      	ldr	r3, [pc, #32]	; (800dcdc <TIM6_IRQHandler+0xa4>)
 800dcba:	2200      	movs	r2, #0
 800dcbc:	701a      	strb	r2, [r3, #0]
		cntupd++;
 800dcbe:	4b08      	ldr	r3, [pc, #32]	; (800dce0 <TIM6_IRQHandler+0xa8>)
 800dcc0:	781b      	ldrb	r3, [r3, #0]
 800dcc2:	3301      	adds	r3, #1
 800dcc4:	b2da      	uxtb	r2, r3
 800dcc6:	4b06      	ldr	r3, [pc, #24]	; (800dce0 <TIM6_IRQHandler+0xa8>)
 800dcc8:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM6_IRQn 0 */
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800dcca:	bf00      	nop
 800dccc:	bd80      	pop	{r7, pc}
 800dcce:	bf00      	nop
 800dcd0:	40001000 	.word	0x40001000
 800dcd4:	04020002 	.word	0x04020002
 800dcd8:	40010c00 	.word	0x40010c00
 800dcdc:	20000154 	.word	0x20000154
 800dce0:	20000158 	.word	0x20000158

0800dce4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800dce4:	b480      	push	{r7}
 800dce6:	af00      	add	r7, sp, #0
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 800dce8:	4b03      	ldr	r3, [pc, #12]	; (800dcf8 <SystemInit+0x14>)
 800dcea:	4a04      	ldr	r2, [pc, #16]	; (800dcfc <SystemInit+0x18>)
 800dcec:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 800dcee:	bf00      	nop
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	bc80      	pop	{r7}
 800dcf4:	4770      	bx	lr
 800dcf6:	bf00      	nop
 800dcf8:	e000ed00 	.word	0xe000ed00
 800dcfc:	0800c000 	.word	0x0800c000

0800dd00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800dd00:	f7ff fff0 	bl	800dce4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800dd04:	480b      	ldr	r0, [pc, #44]	; (800dd34 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800dd06:	490c      	ldr	r1, [pc, #48]	; (800dd38 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800dd08:	4a0c      	ldr	r2, [pc, #48]	; (800dd3c <LoopFillZerobss+0x16>)
  movs r3, #0
 800dd0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800dd0c:	e002      	b.n	800dd14 <LoopCopyDataInit>

0800dd0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800dd0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800dd10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800dd12:	3304      	adds	r3, #4

0800dd14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800dd14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800dd16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800dd18:	d3f9      	bcc.n	800dd0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800dd1a:	4a09      	ldr	r2, [pc, #36]	; (800dd40 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800dd1c:	4c09      	ldr	r4, [pc, #36]	; (800dd44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800dd1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800dd20:	e001      	b.n	800dd26 <LoopFillZerobss>

0800dd22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800dd22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800dd24:	3204      	adds	r2, #4

0800dd26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800dd26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800dd28:	d3fb      	bcc.n	800dd22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800dd2a:	f008 f8f3 	bl	8015f14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800dd2e:	f7ff f831 	bl	800cd94 <main>
  bx lr
 800dd32:	4770      	bx	lr
  ldr r0, =_sdata
 800dd34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800dd38:	20000138 	.word	0x20000138
  ldr r2, =_sidata
 800dd3c:	0801617c 	.word	0x0801617c
  ldr r2, =_sbss
 800dd40:	20000138 	.word	0x20000138
  ldr r4, =_ebss
 800dd44:	20000c08 	.word	0x20000c08

0800dd48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800dd48:	e7fe      	b.n	800dd48 <ADC1_2_IRQHandler>
	...

0800dd4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800dd50:	4b08      	ldr	r3, [pc, #32]	; (800dd74 <HAL_Init+0x28>)
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	4a07      	ldr	r2, [pc, #28]	; (800dd74 <HAL_Init+0x28>)
 800dd56:	f043 0310 	orr.w	r3, r3, #16
 800dd5a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800dd5c:	2003      	movs	r0, #3
 800dd5e:	f000 f919 	bl	800df94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800dd62:	200f      	movs	r0, #15
 800dd64:	f000 f808 	bl	800dd78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800dd68:	f7ff fcd8 	bl	800d71c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800dd6c:	2300      	movs	r3, #0
}
 800dd6e:	4618      	mov	r0, r3
 800dd70:	bd80      	pop	{r7, pc}
 800dd72:	bf00      	nop
 800dd74:	40022000 	.word	0x40022000

0800dd78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b082      	sub	sp, #8
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800dd80:	4b12      	ldr	r3, [pc, #72]	; (800ddcc <HAL_InitTick+0x54>)
 800dd82:	681a      	ldr	r2, [r3, #0]
 800dd84:	4b12      	ldr	r3, [pc, #72]	; (800ddd0 <HAL_InitTick+0x58>)
 800dd86:	781b      	ldrb	r3, [r3, #0]
 800dd88:	4619      	mov	r1, r3
 800dd8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dd8e:	fbb3 f3f1 	udiv	r3, r3, r1
 800dd92:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd96:	4618      	mov	r0, r3
 800dd98:	f000 f931 	bl	800dffe <HAL_SYSTICK_Config>
 800dd9c:	4603      	mov	r3, r0
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d001      	beq.n	800dda6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800dda2:	2301      	movs	r3, #1
 800dda4:	e00e      	b.n	800ddc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	2b0f      	cmp	r3, #15
 800ddaa:	d80a      	bhi.n	800ddc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800ddac:	2200      	movs	r2, #0
 800ddae:	6879      	ldr	r1, [r7, #4]
 800ddb0:	f04f 30ff 	mov.w	r0, #4294967295
 800ddb4:	f000 f8f9 	bl	800dfaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800ddb8:	4a06      	ldr	r2, [pc, #24]	; (800ddd4 <HAL_InitTick+0x5c>)
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	e000      	b.n	800ddc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800ddc2:	2301      	movs	r3, #1
}
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	3708      	adds	r7, #8
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd80      	pop	{r7, pc}
 800ddcc:	20000018 	.word	0x20000018
 800ddd0:	20000020 	.word	0x20000020
 800ddd4:	2000001c 	.word	0x2000001c

0800ddd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ddd8:	b480      	push	{r7}
 800ddda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800dddc:	4b05      	ldr	r3, [pc, #20]	; (800ddf4 <HAL_IncTick+0x1c>)
 800ddde:	781b      	ldrb	r3, [r3, #0]
 800dde0:	461a      	mov	r2, r3
 800dde2:	4b05      	ldr	r3, [pc, #20]	; (800ddf8 <HAL_IncTick+0x20>)
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	4413      	add	r3, r2
 800dde8:	4a03      	ldr	r2, [pc, #12]	; (800ddf8 <HAL_IncTick+0x20>)
 800ddea:	6013      	str	r3, [r2, #0]
}
 800ddec:	bf00      	nop
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	bc80      	pop	{r7}
 800ddf2:	4770      	bx	lr
 800ddf4:	20000020 	.word	0x20000020
 800ddf8:	200001dc 	.word	0x200001dc

0800ddfc <__NVIC_SetPriorityGrouping>:
{
 800ddfc:	b480      	push	{r7}
 800ddfe:	b085      	sub	sp, #20
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	f003 0307 	and.w	r3, r3, #7
 800de0a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800de0c:	4b0c      	ldr	r3, [pc, #48]	; (800de40 <__NVIC_SetPriorityGrouping+0x44>)
 800de0e:	68db      	ldr	r3, [r3, #12]
 800de10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800de12:	68ba      	ldr	r2, [r7, #8]
 800de14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800de18:	4013      	ands	r3, r2
 800de1a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800de20:	68bb      	ldr	r3, [r7, #8]
 800de22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800de24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800de28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800de2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800de2e:	4a04      	ldr	r2, [pc, #16]	; (800de40 <__NVIC_SetPriorityGrouping+0x44>)
 800de30:	68bb      	ldr	r3, [r7, #8]
 800de32:	60d3      	str	r3, [r2, #12]
}
 800de34:	bf00      	nop
 800de36:	3714      	adds	r7, #20
 800de38:	46bd      	mov	sp, r7
 800de3a:	bc80      	pop	{r7}
 800de3c:	4770      	bx	lr
 800de3e:	bf00      	nop
 800de40:	e000ed00 	.word	0xe000ed00

0800de44 <__NVIC_GetPriorityGrouping>:
{
 800de44:	b480      	push	{r7}
 800de46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800de48:	4b04      	ldr	r3, [pc, #16]	; (800de5c <__NVIC_GetPriorityGrouping+0x18>)
 800de4a:	68db      	ldr	r3, [r3, #12]
 800de4c:	0a1b      	lsrs	r3, r3, #8
 800de4e:	f003 0307 	and.w	r3, r3, #7
}
 800de52:	4618      	mov	r0, r3
 800de54:	46bd      	mov	sp, r7
 800de56:	bc80      	pop	{r7}
 800de58:	4770      	bx	lr
 800de5a:	bf00      	nop
 800de5c:	e000ed00 	.word	0xe000ed00

0800de60 <__NVIC_EnableIRQ>:
{
 800de60:	b480      	push	{r7}
 800de62:	b083      	sub	sp, #12
 800de64:	af00      	add	r7, sp, #0
 800de66:	4603      	mov	r3, r0
 800de68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800de6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	db0b      	blt.n	800de8a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800de72:	79fb      	ldrb	r3, [r7, #7]
 800de74:	f003 021f 	and.w	r2, r3, #31
 800de78:	4906      	ldr	r1, [pc, #24]	; (800de94 <__NVIC_EnableIRQ+0x34>)
 800de7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800de7e:	095b      	lsrs	r3, r3, #5
 800de80:	2001      	movs	r0, #1
 800de82:	fa00 f202 	lsl.w	r2, r0, r2
 800de86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800de8a:	bf00      	nop
 800de8c:	370c      	adds	r7, #12
 800de8e:	46bd      	mov	sp, r7
 800de90:	bc80      	pop	{r7}
 800de92:	4770      	bx	lr
 800de94:	e000e100 	.word	0xe000e100

0800de98 <__NVIC_SetPriority>:
{
 800de98:	b480      	push	{r7}
 800de9a:	b083      	sub	sp, #12
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	4603      	mov	r3, r0
 800dea0:	6039      	str	r1, [r7, #0]
 800dea2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800dea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	db0a      	blt.n	800dec2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800deac:	683b      	ldr	r3, [r7, #0]
 800deae:	b2da      	uxtb	r2, r3
 800deb0:	490c      	ldr	r1, [pc, #48]	; (800dee4 <__NVIC_SetPriority+0x4c>)
 800deb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800deb6:	0112      	lsls	r2, r2, #4
 800deb8:	b2d2      	uxtb	r2, r2
 800deba:	440b      	add	r3, r1
 800debc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800dec0:	e00a      	b.n	800ded8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dec2:	683b      	ldr	r3, [r7, #0]
 800dec4:	b2da      	uxtb	r2, r3
 800dec6:	4908      	ldr	r1, [pc, #32]	; (800dee8 <__NVIC_SetPriority+0x50>)
 800dec8:	79fb      	ldrb	r3, [r7, #7]
 800deca:	f003 030f 	and.w	r3, r3, #15
 800dece:	3b04      	subs	r3, #4
 800ded0:	0112      	lsls	r2, r2, #4
 800ded2:	b2d2      	uxtb	r2, r2
 800ded4:	440b      	add	r3, r1
 800ded6:	761a      	strb	r2, [r3, #24]
}
 800ded8:	bf00      	nop
 800deda:	370c      	adds	r7, #12
 800dedc:	46bd      	mov	sp, r7
 800dede:	bc80      	pop	{r7}
 800dee0:	4770      	bx	lr
 800dee2:	bf00      	nop
 800dee4:	e000e100 	.word	0xe000e100
 800dee8:	e000ed00 	.word	0xe000ed00

0800deec <NVIC_EncodePriority>:
{
 800deec:	b480      	push	{r7}
 800deee:	b089      	sub	sp, #36	; 0x24
 800def0:	af00      	add	r7, sp, #0
 800def2:	60f8      	str	r0, [r7, #12]
 800def4:	60b9      	str	r1, [r7, #8]
 800def6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	f003 0307 	and.w	r3, r3, #7
 800defe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800df00:	69fb      	ldr	r3, [r7, #28]
 800df02:	f1c3 0307 	rsb	r3, r3, #7
 800df06:	2b04      	cmp	r3, #4
 800df08:	bf28      	it	cs
 800df0a:	2304      	movcs	r3, #4
 800df0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800df0e:	69fb      	ldr	r3, [r7, #28]
 800df10:	3304      	adds	r3, #4
 800df12:	2b06      	cmp	r3, #6
 800df14:	d902      	bls.n	800df1c <NVIC_EncodePriority+0x30>
 800df16:	69fb      	ldr	r3, [r7, #28]
 800df18:	3b03      	subs	r3, #3
 800df1a:	e000      	b.n	800df1e <NVIC_EncodePriority+0x32>
 800df1c:	2300      	movs	r3, #0
 800df1e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800df20:	f04f 32ff 	mov.w	r2, #4294967295
 800df24:	69bb      	ldr	r3, [r7, #24]
 800df26:	fa02 f303 	lsl.w	r3, r2, r3
 800df2a:	43da      	mvns	r2, r3
 800df2c:	68bb      	ldr	r3, [r7, #8]
 800df2e:	401a      	ands	r2, r3
 800df30:	697b      	ldr	r3, [r7, #20]
 800df32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800df34:	f04f 31ff 	mov.w	r1, #4294967295
 800df38:	697b      	ldr	r3, [r7, #20]
 800df3a:	fa01 f303 	lsl.w	r3, r1, r3
 800df3e:	43d9      	mvns	r1, r3
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800df44:	4313      	orrs	r3, r2
}
 800df46:	4618      	mov	r0, r3
 800df48:	3724      	adds	r7, #36	; 0x24
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bc80      	pop	{r7}
 800df4e:	4770      	bx	lr

0800df50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b082      	sub	sp, #8
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	3b01      	subs	r3, #1
 800df5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800df60:	d301      	bcc.n	800df66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800df62:	2301      	movs	r3, #1
 800df64:	e00f      	b.n	800df86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800df66:	4a0a      	ldr	r2, [pc, #40]	; (800df90 <SysTick_Config+0x40>)
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	3b01      	subs	r3, #1
 800df6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800df6e:	210f      	movs	r1, #15
 800df70:	f04f 30ff 	mov.w	r0, #4294967295
 800df74:	f7ff ff90 	bl	800de98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800df78:	4b05      	ldr	r3, [pc, #20]	; (800df90 <SysTick_Config+0x40>)
 800df7a:	2200      	movs	r2, #0
 800df7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800df7e:	4b04      	ldr	r3, [pc, #16]	; (800df90 <SysTick_Config+0x40>)
 800df80:	2207      	movs	r2, #7
 800df82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800df84:	2300      	movs	r3, #0
}
 800df86:	4618      	mov	r0, r3
 800df88:	3708      	adds	r7, #8
 800df8a:	46bd      	mov	sp, r7
 800df8c:	bd80      	pop	{r7, pc}
 800df8e:	bf00      	nop
 800df90:	e000e010 	.word	0xe000e010

0800df94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b082      	sub	sp, #8
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800df9c:	6878      	ldr	r0, [r7, #4]
 800df9e:	f7ff ff2d 	bl	800ddfc <__NVIC_SetPriorityGrouping>
}
 800dfa2:	bf00      	nop
 800dfa4:	3708      	adds	r7, #8
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bd80      	pop	{r7, pc}

0800dfaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800dfaa:	b580      	push	{r7, lr}
 800dfac:	b086      	sub	sp, #24
 800dfae:	af00      	add	r7, sp, #0
 800dfb0:	4603      	mov	r3, r0
 800dfb2:	60b9      	str	r1, [r7, #8]
 800dfb4:	607a      	str	r2, [r7, #4]
 800dfb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800dfb8:	2300      	movs	r3, #0
 800dfba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800dfbc:	f7ff ff42 	bl	800de44 <__NVIC_GetPriorityGrouping>
 800dfc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800dfc2:	687a      	ldr	r2, [r7, #4]
 800dfc4:	68b9      	ldr	r1, [r7, #8]
 800dfc6:	6978      	ldr	r0, [r7, #20]
 800dfc8:	f7ff ff90 	bl	800deec <NVIC_EncodePriority>
 800dfcc:	4602      	mov	r2, r0
 800dfce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dfd2:	4611      	mov	r1, r2
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	f7ff ff5f 	bl	800de98 <__NVIC_SetPriority>
}
 800dfda:	bf00      	nop
 800dfdc:	3718      	adds	r7, #24
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd80      	pop	{r7, pc}

0800dfe2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800dfe2:	b580      	push	{r7, lr}
 800dfe4:	b082      	sub	sp, #8
 800dfe6:	af00      	add	r7, sp, #0
 800dfe8:	4603      	mov	r3, r0
 800dfea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800dfec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dff0:	4618      	mov	r0, r3
 800dff2:	f7ff ff35 	bl	800de60 <__NVIC_EnableIRQ>
}
 800dff6:	bf00      	nop
 800dff8:	3708      	adds	r7, #8
 800dffa:	46bd      	mov	sp, r7
 800dffc:	bd80      	pop	{r7, pc}

0800dffe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800dffe:	b580      	push	{r7, lr}
 800e000:	b082      	sub	sp, #8
 800e002:	af00      	add	r7, sp, #0
 800e004:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800e006:	6878      	ldr	r0, [r7, #4]
 800e008:	f7ff ffa2 	bl	800df50 <SysTick_Config>
 800e00c:	4603      	mov	r3, r0
}
 800e00e:	4618      	mov	r0, r3
 800e010:	3708      	adds	r7, #8
 800e012:	46bd      	mov	sp, r7
 800e014:	bd80      	pop	{r7, pc}

0800e016 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800e016:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e018:	b08b      	sub	sp, #44	; 0x2c
 800e01a:	af06      	add	r7, sp, #24
 800e01c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d101      	bne.n	800e028 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800e024:	2301      	movs	r3, #1
 800e026:	e0f1      	b.n	800e20c <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800e02e:	b2db      	uxtb	r3, r3
 800e030:	2b00      	cmp	r3, #0
 800e032:	d106      	bne.n	800e042 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2200      	movs	r2, #0
 800e038:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800e03c:	6878      	ldr	r0, [r7, #4]
 800e03e:	f007 fca1 	bl	8015984 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	2203      	movs	r2, #3
 800e046:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	4618      	mov	r0, r3
 800e050:	f002 fcba 	bl	80109c8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	603b      	str	r3, [r7, #0]
 800e05a:	687e      	ldr	r6, [r7, #4]
 800e05c:	466d      	mov	r5, sp
 800e05e:	f106 0410 	add.w	r4, r6, #16
 800e062:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e064:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e066:	6823      	ldr	r3, [r4, #0]
 800e068:	602b      	str	r3, [r5, #0]
 800e06a:	1d33      	adds	r3, r6, #4
 800e06c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e06e:	6838      	ldr	r0, [r7, #0]
 800e070:	f002 fc84 	bl	801097c <USB_CoreInit>
 800e074:	4603      	mov	r3, r0
 800e076:	2b00      	cmp	r3, #0
 800e078:	d005      	beq.n	800e086 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	2202      	movs	r2, #2
 800e07e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800e082:	2301      	movs	r3, #1
 800e084:	e0c2      	b.n	800e20c <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	2100      	movs	r1, #0
 800e08c:	4618      	mov	r0, r3
 800e08e:	f002 fcb5 	bl	80109fc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e092:	2300      	movs	r3, #0
 800e094:	73fb      	strb	r3, [r7, #15]
 800e096:	e040      	b.n	800e11a <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800e098:	7bfb      	ldrb	r3, [r7, #15]
 800e09a:	6879      	ldr	r1, [r7, #4]
 800e09c:	1c5a      	adds	r2, r3, #1
 800e09e:	4613      	mov	r3, r2
 800e0a0:	009b      	lsls	r3, r3, #2
 800e0a2:	4413      	add	r3, r2
 800e0a4:	00db      	lsls	r3, r3, #3
 800e0a6:	440b      	add	r3, r1
 800e0a8:	3301      	adds	r3, #1
 800e0aa:	2201      	movs	r2, #1
 800e0ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800e0ae:	7bfb      	ldrb	r3, [r7, #15]
 800e0b0:	6879      	ldr	r1, [r7, #4]
 800e0b2:	1c5a      	adds	r2, r3, #1
 800e0b4:	4613      	mov	r3, r2
 800e0b6:	009b      	lsls	r3, r3, #2
 800e0b8:	4413      	add	r3, r2
 800e0ba:	00db      	lsls	r3, r3, #3
 800e0bc:	440b      	add	r3, r1
 800e0be:	7bfa      	ldrb	r2, [r7, #15]
 800e0c0:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800e0c2:	7bfb      	ldrb	r3, [r7, #15]
 800e0c4:	6879      	ldr	r1, [r7, #4]
 800e0c6:	1c5a      	adds	r2, r3, #1
 800e0c8:	4613      	mov	r3, r2
 800e0ca:	009b      	lsls	r3, r3, #2
 800e0cc:	4413      	add	r3, r2
 800e0ce:	00db      	lsls	r3, r3, #3
 800e0d0:	440b      	add	r3, r1
 800e0d2:	3303      	adds	r3, #3
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800e0d8:	7bfa      	ldrb	r2, [r7, #15]
 800e0da:	6879      	ldr	r1, [r7, #4]
 800e0dc:	4613      	mov	r3, r2
 800e0de:	009b      	lsls	r3, r3, #2
 800e0e0:	4413      	add	r3, r2
 800e0e2:	00db      	lsls	r3, r3, #3
 800e0e4:	440b      	add	r3, r1
 800e0e6:	3338      	adds	r3, #56	; 0x38
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800e0ec:	7bfa      	ldrb	r2, [r7, #15]
 800e0ee:	6879      	ldr	r1, [r7, #4]
 800e0f0:	4613      	mov	r3, r2
 800e0f2:	009b      	lsls	r3, r3, #2
 800e0f4:	4413      	add	r3, r2
 800e0f6:	00db      	lsls	r3, r3, #3
 800e0f8:	440b      	add	r3, r1
 800e0fa:	333c      	adds	r3, #60	; 0x3c
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800e100:	7bfa      	ldrb	r2, [r7, #15]
 800e102:	6879      	ldr	r1, [r7, #4]
 800e104:	4613      	mov	r3, r2
 800e106:	009b      	lsls	r3, r3, #2
 800e108:	4413      	add	r3, r2
 800e10a:	00db      	lsls	r3, r3, #3
 800e10c:	440b      	add	r3, r1
 800e10e:	3340      	adds	r3, #64	; 0x40
 800e110:	2200      	movs	r2, #0
 800e112:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e114:	7bfb      	ldrb	r3, [r7, #15]
 800e116:	3301      	adds	r3, #1
 800e118:	73fb      	strb	r3, [r7, #15]
 800e11a:	7bfa      	ldrb	r2, [r7, #15]
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	685b      	ldr	r3, [r3, #4]
 800e120:	429a      	cmp	r2, r3
 800e122:	d3b9      	bcc.n	800e098 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e124:	2300      	movs	r3, #0
 800e126:	73fb      	strb	r3, [r7, #15]
 800e128:	e044      	b.n	800e1b4 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800e12a:	7bfa      	ldrb	r2, [r7, #15]
 800e12c:	6879      	ldr	r1, [r7, #4]
 800e12e:	4613      	mov	r3, r2
 800e130:	009b      	lsls	r3, r3, #2
 800e132:	4413      	add	r3, r2
 800e134:	00db      	lsls	r3, r3, #3
 800e136:	440b      	add	r3, r1
 800e138:	f203 1369 	addw	r3, r3, #361	; 0x169
 800e13c:	2200      	movs	r2, #0
 800e13e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800e140:	7bfa      	ldrb	r2, [r7, #15]
 800e142:	6879      	ldr	r1, [r7, #4]
 800e144:	4613      	mov	r3, r2
 800e146:	009b      	lsls	r3, r3, #2
 800e148:	4413      	add	r3, r2
 800e14a:	00db      	lsls	r3, r3, #3
 800e14c:	440b      	add	r3, r1
 800e14e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800e152:	7bfa      	ldrb	r2, [r7, #15]
 800e154:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800e156:	7bfa      	ldrb	r2, [r7, #15]
 800e158:	6879      	ldr	r1, [r7, #4]
 800e15a:	4613      	mov	r3, r2
 800e15c:	009b      	lsls	r3, r3, #2
 800e15e:	4413      	add	r3, r2
 800e160:	00db      	lsls	r3, r3, #3
 800e162:	440b      	add	r3, r1
 800e164:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800e168:	2200      	movs	r2, #0
 800e16a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800e16c:	7bfa      	ldrb	r2, [r7, #15]
 800e16e:	6879      	ldr	r1, [r7, #4]
 800e170:	4613      	mov	r3, r2
 800e172:	009b      	lsls	r3, r3, #2
 800e174:	4413      	add	r3, r2
 800e176:	00db      	lsls	r3, r3, #3
 800e178:	440b      	add	r3, r1
 800e17a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800e17e:	2200      	movs	r2, #0
 800e180:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800e182:	7bfa      	ldrb	r2, [r7, #15]
 800e184:	6879      	ldr	r1, [r7, #4]
 800e186:	4613      	mov	r3, r2
 800e188:	009b      	lsls	r3, r3, #2
 800e18a:	4413      	add	r3, r2
 800e18c:	00db      	lsls	r3, r3, #3
 800e18e:	440b      	add	r3, r1
 800e190:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800e194:	2200      	movs	r2, #0
 800e196:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800e198:	7bfa      	ldrb	r2, [r7, #15]
 800e19a:	6879      	ldr	r1, [r7, #4]
 800e19c:	4613      	mov	r3, r2
 800e19e:	009b      	lsls	r3, r3, #2
 800e1a0:	4413      	add	r3, r2
 800e1a2:	00db      	lsls	r3, r3, #3
 800e1a4:	440b      	add	r3, r1
 800e1a6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e1ae:	7bfb      	ldrb	r3, [r7, #15]
 800e1b0:	3301      	adds	r3, #1
 800e1b2:	73fb      	strb	r3, [r7, #15]
 800e1b4:	7bfa      	ldrb	r2, [r7, #15]
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	685b      	ldr	r3, [r3, #4]
 800e1ba:	429a      	cmp	r2, r3
 800e1bc:	d3b5      	bcc.n	800e12a <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	603b      	str	r3, [r7, #0]
 800e1c4:	687e      	ldr	r6, [r7, #4]
 800e1c6:	466d      	mov	r5, sp
 800e1c8:	f106 0410 	add.w	r4, r6, #16
 800e1cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e1ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e1d0:	6823      	ldr	r3, [r4, #0]
 800e1d2:	602b      	str	r3, [r5, #0]
 800e1d4:	1d33      	adds	r3, r6, #4
 800e1d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e1d8:	6838      	ldr	r0, [r7, #0]
 800e1da:	f002 fc1b 	bl	8010a14 <USB_DevInit>
 800e1de:	4603      	mov	r3, r0
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d005      	beq.n	800e1f0 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	2202      	movs	r2, #2
 800e1e8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800e1ec:	2301      	movs	r3, #1
 800e1ee:	e00d      	b.n	800e20c <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	2201      	movs	r2, #1
 800e1fc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	4618      	mov	r0, r3
 800e206:	f004 feb2 	bl	8012f6e <USB_DevDisconnect>

  return HAL_OK;
 800e20a:	2300      	movs	r3, #0
}
 800e20c:	4618      	mov	r0, r3
 800e20e:	3714      	adds	r7, #20
 800e210:	46bd      	mov	sp, r7
 800e212:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e214 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b082      	sub	sp, #8
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800e222:	2b01      	cmp	r3, #1
 800e224:	d101      	bne.n	800e22a <HAL_PCD_Start+0x16>
 800e226:	2302      	movs	r3, #2
 800e228:	e016      	b.n	800e258 <HAL_PCD_Start+0x44>
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	2201      	movs	r2, #1
 800e22e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	4618      	mov	r0, r3
 800e238:	f002 fbb0 	bl	801099c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800e23c:	2101      	movs	r1, #1
 800e23e:	6878      	ldr	r0, [r7, #4]
 800e240:	f007 fe29 	bl	8015e96 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	4618      	mov	r0, r3
 800e24a:	f004 fe86 	bl	8012f5a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	2200      	movs	r2, #0
 800e252:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800e256:	2300      	movs	r3, #0
}
 800e258:	4618      	mov	r0, r3
 800e25a:	3708      	adds	r7, #8
 800e25c:	46bd      	mov	sp, r7
 800e25e:	bd80      	pop	{r7, pc}

0800e260 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b088      	sub	sp, #32
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	4618      	mov	r0, r3
 800e26e:	f004 fe88 	bl	8012f82 <USB_ReadInterrupts>
 800e272:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800e274:	69bb      	ldr	r3, [r7, #24]
 800e276:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d003      	beq.n	800e286 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800e27e:	6878      	ldr	r0, [r7, #4]
 800e280:	f000 fb48 	bl	800e914 <PCD_EP_ISR_Handler>

    return;
 800e284:	e119      	b.n	800e4ba <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800e286:	69bb      	ldr	r3, [r7, #24]
 800e288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d013      	beq.n	800e2b8 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800e298:	b29a      	uxth	r2, r3
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e2a2:	b292      	uxth	r2, r2
 800e2a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800e2a8:	6878      	ldr	r0, [r7, #4]
 800e2aa:	f007 fbe6 	bl	8015a7a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800e2ae:	2100      	movs	r1, #0
 800e2b0:	6878      	ldr	r0, [r7, #4]
 800e2b2:	f000 f905 	bl	800e4c0 <HAL_PCD_SetAddress>

    return;
 800e2b6:	e100      	b.n	800e4ba <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800e2b8:	69bb      	ldr	r3, [r7, #24]
 800e2ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d00c      	beq.n	800e2dc <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800e2ca:	b29a      	uxth	r2, r3
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e2d4:	b292      	uxth	r2, r2
 800e2d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800e2da:	e0ee      	b.n	800e4ba <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800e2dc:	69bb      	ldr	r3, [r7, #24]
 800e2de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d00c      	beq.n	800e300 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800e2ee:	b29a      	uxth	r2, r3
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e2f8:	b292      	uxth	r2, r2
 800e2fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800e2fe:	e0dc      	b.n	800e4ba <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800e300:	69bb      	ldr	r3, [r7, #24]
 800e302:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e306:	2b00      	cmp	r3, #0
 800e308:	d027      	beq.n	800e35a <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800e312:	b29a      	uxth	r2, r3
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	f022 0204 	bic.w	r2, r2, #4
 800e31c:	b292      	uxth	r2, r2
 800e31e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800e32a:	b29a      	uxth	r2, r3
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	f022 0208 	bic.w	r2, r2, #8
 800e334:	b292      	uxth	r2, r2
 800e336:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800e33a:	6878      	ldr	r0, [r7, #4]
 800e33c:	f007 fbd6 	bl	8015aec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800e348:	b29a      	uxth	r2, r3
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e352:	b292      	uxth	r2, r2
 800e354:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800e358:	e0af      	b.n	800e4ba <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800e35a:	69bb      	ldr	r3, [r7, #24]
 800e35c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e360:	2b00      	cmp	r3, #0
 800e362:	f000 8083 	beq.w	800e46c <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800e366:	2300      	movs	r3, #0
 800e368:	77fb      	strb	r3, [r7, #31]
 800e36a:	e010      	b.n	800e38e <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	461a      	mov	r2, r3
 800e372:	7ffb      	ldrb	r3, [r7, #31]
 800e374:	009b      	lsls	r3, r3, #2
 800e376:	441a      	add	r2, r3
 800e378:	7ffb      	ldrb	r3, [r7, #31]
 800e37a:	8812      	ldrh	r2, [r2, #0]
 800e37c:	b292      	uxth	r2, r2
 800e37e:	005b      	lsls	r3, r3, #1
 800e380:	3320      	adds	r3, #32
 800e382:	443b      	add	r3, r7
 800e384:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800e388:	7ffb      	ldrb	r3, [r7, #31]
 800e38a:	3301      	adds	r3, #1
 800e38c:	77fb      	strb	r3, [r7, #31]
 800e38e:	7ffb      	ldrb	r3, [r7, #31]
 800e390:	2b07      	cmp	r3, #7
 800e392:	d9eb      	bls.n	800e36c <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800e39c:	b29a      	uxth	r2, r3
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	f042 0201 	orr.w	r2, r2, #1
 800e3a6:	b292      	uxth	r2, r2
 800e3a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800e3b4:	b29a      	uxth	r2, r3
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	f022 0201 	bic.w	r2, r2, #1
 800e3be:	b292      	uxth	r2, r2
 800e3c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800e3c4:	bf00      	nop
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800e3ce:	b29b      	uxth	r3, r3
 800e3d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d0f6      	beq.n	800e3c6 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800e3e0:	b29a      	uxth	r2, r3
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e3ea:	b292      	uxth	r2, r2
 800e3ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	77fb      	strb	r3, [r7, #31]
 800e3f4:	e00f      	b.n	800e416 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800e3f6:	7ffb      	ldrb	r3, [r7, #31]
 800e3f8:	687a      	ldr	r2, [r7, #4]
 800e3fa:	6812      	ldr	r2, [r2, #0]
 800e3fc:	4611      	mov	r1, r2
 800e3fe:	7ffa      	ldrb	r2, [r7, #31]
 800e400:	0092      	lsls	r2, r2, #2
 800e402:	440a      	add	r2, r1
 800e404:	005b      	lsls	r3, r3, #1
 800e406:	3320      	adds	r3, #32
 800e408:	443b      	add	r3, r7
 800e40a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800e40e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800e410:	7ffb      	ldrb	r3, [r7, #31]
 800e412:	3301      	adds	r3, #1
 800e414:	77fb      	strb	r3, [r7, #31]
 800e416:	7ffb      	ldrb	r3, [r7, #31]
 800e418:	2b07      	cmp	r3, #7
 800e41a:	d9ec      	bls.n	800e3f6 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800e424:	b29a      	uxth	r2, r3
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	f042 0208 	orr.w	r2, r2, #8
 800e42e:	b292      	uxth	r2, r2
 800e430:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800e43c:	b29a      	uxth	r2, r3
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e446:	b292      	uxth	r2, r2
 800e448:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800e454:	b29a      	uxth	r2, r3
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	f042 0204 	orr.w	r2, r2, #4
 800e45e:	b292      	uxth	r2, r2
 800e460:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800e464:	6878      	ldr	r0, [r7, #4]
 800e466:	f007 fb27 	bl	8015ab8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800e46a:	e026      	b.n	800e4ba <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800e46c:	69bb      	ldr	r3, [r7, #24]
 800e46e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e472:	2b00      	cmp	r3, #0
 800e474:	d00f      	beq.n	800e496 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800e47e:	b29a      	uxth	r2, r3
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800e488:	b292      	uxth	r2, r2
 800e48a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800e48e:	6878      	ldr	r0, [r7, #4]
 800e490:	f007 fae5 	bl	8015a5e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800e494:	e011      	b.n	800e4ba <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800e496:	69bb      	ldr	r3, [r7, #24]
 800e498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d00c      	beq.n	800e4ba <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800e4a8:	b29a      	uxth	r2, r3
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e4b2:	b292      	uxth	r2, r2
 800e4b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800e4b8:	bf00      	nop
  }
}
 800e4ba:	3720      	adds	r7, #32
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	bd80      	pop	{r7, pc}

0800e4c0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b082      	sub	sp, #8
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]
 800e4c8:	460b      	mov	r3, r1
 800e4ca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800e4d2:	2b01      	cmp	r3, #1
 800e4d4:	d101      	bne.n	800e4da <HAL_PCD_SetAddress+0x1a>
 800e4d6:	2302      	movs	r3, #2
 800e4d8:	e013      	b.n	800e502 <HAL_PCD_SetAddress+0x42>
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	2201      	movs	r2, #1
 800e4de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	78fa      	ldrb	r2, [r7, #3]
 800e4e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	78fa      	ldrb	r2, [r7, #3]
 800e4f0:	4611      	mov	r1, r2
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	f004 fd1e 	bl	8012f34 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800e500:	2300      	movs	r3, #0
}
 800e502:	4618      	mov	r0, r3
 800e504:	3708      	adds	r7, #8
 800e506:	46bd      	mov	sp, r7
 800e508:	bd80      	pop	{r7, pc}

0800e50a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800e50a:	b580      	push	{r7, lr}
 800e50c:	b084      	sub	sp, #16
 800e50e:	af00      	add	r7, sp, #0
 800e510:	6078      	str	r0, [r7, #4]
 800e512:	4608      	mov	r0, r1
 800e514:	4611      	mov	r1, r2
 800e516:	461a      	mov	r2, r3
 800e518:	4603      	mov	r3, r0
 800e51a:	70fb      	strb	r3, [r7, #3]
 800e51c:	460b      	mov	r3, r1
 800e51e:	803b      	strh	r3, [r7, #0]
 800e520:	4613      	mov	r3, r2
 800e522:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800e524:	2300      	movs	r3, #0
 800e526:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800e528:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	da0e      	bge.n	800e54e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e530:	78fb      	ldrb	r3, [r7, #3]
 800e532:	f003 0307 	and.w	r3, r3, #7
 800e536:	1c5a      	adds	r2, r3, #1
 800e538:	4613      	mov	r3, r2
 800e53a:	009b      	lsls	r3, r3, #2
 800e53c:	4413      	add	r3, r2
 800e53e:	00db      	lsls	r3, r3, #3
 800e540:	687a      	ldr	r2, [r7, #4]
 800e542:	4413      	add	r3, r2
 800e544:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	2201      	movs	r2, #1
 800e54a:	705a      	strb	r2, [r3, #1]
 800e54c:	e00e      	b.n	800e56c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e54e:	78fb      	ldrb	r3, [r7, #3]
 800e550:	f003 0207 	and.w	r2, r3, #7
 800e554:	4613      	mov	r3, r2
 800e556:	009b      	lsls	r3, r3, #2
 800e558:	4413      	add	r3, r2
 800e55a:	00db      	lsls	r3, r3, #3
 800e55c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800e560:	687a      	ldr	r2, [r7, #4]
 800e562:	4413      	add	r3, r2
 800e564:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	2200      	movs	r2, #0
 800e56a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800e56c:	78fb      	ldrb	r3, [r7, #3]
 800e56e:	f003 0307 	and.w	r3, r3, #7
 800e572:	b2da      	uxtb	r2, r3
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800e578:	883a      	ldrh	r2, [r7, #0]
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	78ba      	ldrb	r2, [r7, #2]
 800e582:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800e584:	78bb      	ldrb	r3, [r7, #2]
 800e586:	2b02      	cmp	r3, #2
 800e588:	d102      	bne.n	800e590 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	2200      	movs	r2, #0
 800e58e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800e596:	2b01      	cmp	r3, #1
 800e598:	d101      	bne.n	800e59e <HAL_PCD_EP_Open+0x94>
 800e59a:	2302      	movs	r3, #2
 800e59c:	e00e      	b.n	800e5bc <HAL_PCD_EP_Open+0xb2>
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	2201      	movs	r2, #1
 800e5a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	68f9      	ldr	r1, [r7, #12]
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	f002 fa67 	bl	8010a80 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	2200      	movs	r2, #0
 800e5b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800e5ba:	7afb      	ldrb	r3, [r7, #11]
}
 800e5bc:	4618      	mov	r0, r3
 800e5be:	3710      	adds	r7, #16
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	bd80      	pop	{r7, pc}

0800e5c4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b084      	sub	sp, #16
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
 800e5cc:	460b      	mov	r3, r1
 800e5ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800e5d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	da0e      	bge.n	800e5f6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e5d8:	78fb      	ldrb	r3, [r7, #3]
 800e5da:	f003 0307 	and.w	r3, r3, #7
 800e5de:	1c5a      	adds	r2, r3, #1
 800e5e0:	4613      	mov	r3, r2
 800e5e2:	009b      	lsls	r3, r3, #2
 800e5e4:	4413      	add	r3, r2
 800e5e6:	00db      	lsls	r3, r3, #3
 800e5e8:	687a      	ldr	r2, [r7, #4]
 800e5ea:	4413      	add	r3, r2
 800e5ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	2201      	movs	r2, #1
 800e5f2:	705a      	strb	r2, [r3, #1]
 800e5f4:	e00e      	b.n	800e614 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e5f6:	78fb      	ldrb	r3, [r7, #3]
 800e5f8:	f003 0207 	and.w	r2, r3, #7
 800e5fc:	4613      	mov	r3, r2
 800e5fe:	009b      	lsls	r3, r3, #2
 800e600:	4413      	add	r3, r2
 800e602:	00db      	lsls	r3, r3, #3
 800e604:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800e608:	687a      	ldr	r2, [r7, #4]
 800e60a:	4413      	add	r3, r2
 800e60c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	2200      	movs	r2, #0
 800e612:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800e614:	78fb      	ldrb	r3, [r7, #3]
 800e616:	f003 0307 	and.w	r3, r3, #7
 800e61a:	b2da      	uxtb	r2, r3
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800e626:	2b01      	cmp	r3, #1
 800e628:	d101      	bne.n	800e62e <HAL_PCD_EP_Close+0x6a>
 800e62a:	2302      	movs	r3, #2
 800e62c:	e00e      	b.n	800e64c <HAL_PCD_EP_Close+0x88>
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	2201      	movs	r2, #1
 800e632:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	68f9      	ldr	r1, [r7, #12]
 800e63c:	4618      	mov	r0, r3
 800e63e:	f002 fddf 	bl	8011200 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	2200      	movs	r2, #0
 800e646:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800e64a:	2300      	movs	r3, #0
}
 800e64c:	4618      	mov	r0, r3
 800e64e:	3710      	adds	r7, #16
 800e650:	46bd      	mov	sp, r7
 800e652:	bd80      	pop	{r7, pc}

0800e654 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800e654:	b580      	push	{r7, lr}
 800e656:	b086      	sub	sp, #24
 800e658:	af00      	add	r7, sp, #0
 800e65a:	60f8      	str	r0, [r7, #12]
 800e65c:	607a      	str	r2, [r7, #4]
 800e65e:	603b      	str	r3, [r7, #0]
 800e660:	460b      	mov	r3, r1
 800e662:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e664:	7afb      	ldrb	r3, [r7, #11]
 800e666:	f003 0207 	and.w	r2, r3, #7
 800e66a:	4613      	mov	r3, r2
 800e66c:	009b      	lsls	r3, r3, #2
 800e66e:	4413      	add	r3, r2
 800e670:	00db      	lsls	r3, r3, #3
 800e672:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800e676:	68fa      	ldr	r2, [r7, #12]
 800e678:	4413      	add	r3, r2
 800e67a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800e67c:	697b      	ldr	r3, [r7, #20]
 800e67e:	687a      	ldr	r2, [r7, #4]
 800e680:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800e682:	697b      	ldr	r3, [r7, #20]
 800e684:	683a      	ldr	r2, [r7, #0]
 800e686:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800e688:	697b      	ldr	r3, [r7, #20]
 800e68a:	2200      	movs	r2, #0
 800e68c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800e68e:	697b      	ldr	r3, [r7, #20]
 800e690:	2200      	movs	r2, #0
 800e692:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e694:	7afb      	ldrb	r3, [r7, #11]
 800e696:	f003 0307 	and.w	r3, r3, #7
 800e69a:	b2da      	uxtb	r2, r3
 800e69c:	697b      	ldr	r3, [r7, #20]
 800e69e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	6979      	ldr	r1, [r7, #20]
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	f002 ff96 	bl	80115d8 <USB_EPStartXfer>

  return HAL_OK;
 800e6ac:	2300      	movs	r3, #0
}
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	3718      	adds	r7, #24
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	bd80      	pop	{r7, pc}

0800e6b6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800e6b6:	b480      	push	{r7}
 800e6b8:	b083      	sub	sp, #12
 800e6ba:	af00      	add	r7, sp, #0
 800e6bc:	6078      	str	r0, [r7, #4]
 800e6be:	460b      	mov	r3, r1
 800e6c0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800e6c2:	78fb      	ldrb	r3, [r7, #3]
 800e6c4:	f003 0207 	and.w	r2, r3, #7
 800e6c8:	6879      	ldr	r1, [r7, #4]
 800e6ca:	4613      	mov	r3, r2
 800e6cc:	009b      	lsls	r3, r3, #2
 800e6ce:	4413      	add	r3, r2
 800e6d0:	00db      	lsls	r3, r3, #3
 800e6d2:	440b      	add	r3, r1
 800e6d4:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800e6d8:	681b      	ldr	r3, [r3, #0]
}
 800e6da:	4618      	mov	r0, r3
 800e6dc:	370c      	adds	r7, #12
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	bc80      	pop	{r7}
 800e6e2:	4770      	bx	lr

0800e6e4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b086      	sub	sp, #24
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	60f8      	str	r0, [r7, #12]
 800e6ec:	607a      	str	r2, [r7, #4]
 800e6ee:	603b      	str	r3, [r7, #0]
 800e6f0:	460b      	mov	r3, r1
 800e6f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e6f4:	7afb      	ldrb	r3, [r7, #11]
 800e6f6:	f003 0307 	and.w	r3, r3, #7
 800e6fa:	1c5a      	adds	r2, r3, #1
 800e6fc:	4613      	mov	r3, r2
 800e6fe:	009b      	lsls	r3, r3, #2
 800e700:	4413      	add	r3, r2
 800e702:	00db      	lsls	r3, r3, #3
 800e704:	68fa      	ldr	r2, [r7, #12]
 800e706:	4413      	add	r3, r2
 800e708:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800e70a:	697b      	ldr	r3, [r7, #20]
 800e70c:	687a      	ldr	r2, [r7, #4]
 800e70e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800e710:	697b      	ldr	r3, [r7, #20]
 800e712:	683a      	ldr	r2, [r7, #0]
 800e714:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800e716:	697b      	ldr	r3, [r7, #20]
 800e718:	2201      	movs	r2, #1
 800e71a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800e71e:	697b      	ldr	r3, [r7, #20]
 800e720:	683a      	ldr	r2, [r7, #0]
 800e722:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800e724:	697b      	ldr	r3, [r7, #20]
 800e726:	2200      	movs	r2, #0
 800e728:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800e72a:	697b      	ldr	r3, [r7, #20]
 800e72c:	2201      	movs	r2, #1
 800e72e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e730:	7afb      	ldrb	r3, [r7, #11]
 800e732:	f003 0307 	and.w	r3, r3, #7
 800e736:	b2da      	uxtb	r2, r3
 800e738:	697b      	ldr	r3, [r7, #20]
 800e73a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	6979      	ldr	r1, [r7, #20]
 800e742:	4618      	mov	r0, r3
 800e744:	f002 ff48 	bl	80115d8 <USB_EPStartXfer>

  return HAL_OK;
 800e748:	2300      	movs	r3, #0
}
 800e74a:	4618      	mov	r0, r3
 800e74c:	3718      	adds	r7, #24
 800e74e:	46bd      	mov	sp, r7
 800e750:	bd80      	pop	{r7, pc}

0800e752 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e752:	b580      	push	{r7, lr}
 800e754:	b084      	sub	sp, #16
 800e756:	af00      	add	r7, sp, #0
 800e758:	6078      	str	r0, [r7, #4]
 800e75a:	460b      	mov	r3, r1
 800e75c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800e75e:	78fb      	ldrb	r3, [r7, #3]
 800e760:	f003 0207 	and.w	r2, r3, #7
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	685b      	ldr	r3, [r3, #4]
 800e768:	429a      	cmp	r2, r3
 800e76a:	d901      	bls.n	800e770 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800e76c:	2301      	movs	r3, #1
 800e76e:	e04c      	b.n	800e80a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800e770:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e774:	2b00      	cmp	r3, #0
 800e776:	da0e      	bge.n	800e796 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e778:	78fb      	ldrb	r3, [r7, #3]
 800e77a:	f003 0307 	and.w	r3, r3, #7
 800e77e:	1c5a      	adds	r2, r3, #1
 800e780:	4613      	mov	r3, r2
 800e782:	009b      	lsls	r3, r3, #2
 800e784:	4413      	add	r3, r2
 800e786:	00db      	lsls	r3, r3, #3
 800e788:	687a      	ldr	r2, [r7, #4]
 800e78a:	4413      	add	r3, r2
 800e78c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	2201      	movs	r2, #1
 800e792:	705a      	strb	r2, [r3, #1]
 800e794:	e00c      	b.n	800e7b0 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800e796:	78fa      	ldrb	r2, [r7, #3]
 800e798:	4613      	mov	r3, r2
 800e79a:	009b      	lsls	r3, r3, #2
 800e79c:	4413      	add	r3, r2
 800e79e:	00db      	lsls	r3, r3, #3
 800e7a0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800e7a4:	687a      	ldr	r2, [r7, #4]
 800e7a6:	4413      	add	r3, r2
 800e7a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	2201      	movs	r2, #1
 800e7b4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e7b6:	78fb      	ldrb	r3, [r7, #3]
 800e7b8:	f003 0307 	and.w	r3, r3, #7
 800e7bc:	b2da      	uxtb	r2, r3
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800e7c8:	2b01      	cmp	r3, #1
 800e7ca:	d101      	bne.n	800e7d0 <HAL_PCD_EP_SetStall+0x7e>
 800e7cc:	2302      	movs	r3, #2
 800e7ce:	e01c      	b.n	800e80a <HAL_PCD_EP_SetStall+0xb8>
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2201      	movs	r2, #1
 800e7d4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	68f9      	ldr	r1, [r7, #12]
 800e7de:	4618      	mov	r0, r3
 800e7e0:	f004 faab 	bl	8012d3a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800e7e4:	78fb      	ldrb	r3, [r7, #3]
 800e7e6:	f003 0307 	and.w	r3, r3, #7
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d108      	bne.n	800e800 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	681a      	ldr	r2, [r3, #0]
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800e7f8:	4619      	mov	r1, r3
 800e7fa:	4610      	mov	r0, r2
 800e7fc:	f004 fbd0 	bl	8012fa0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2200      	movs	r2, #0
 800e804:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800e808:	2300      	movs	r3, #0
}
 800e80a:	4618      	mov	r0, r3
 800e80c:	3710      	adds	r7, #16
 800e80e:	46bd      	mov	sp, r7
 800e810:	bd80      	pop	{r7, pc}

0800e812 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e812:	b580      	push	{r7, lr}
 800e814:	b084      	sub	sp, #16
 800e816:	af00      	add	r7, sp, #0
 800e818:	6078      	str	r0, [r7, #4]
 800e81a:	460b      	mov	r3, r1
 800e81c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800e81e:	78fb      	ldrb	r3, [r7, #3]
 800e820:	f003 020f 	and.w	r2, r3, #15
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	685b      	ldr	r3, [r3, #4]
 800e828:	429a      	cmp	r2, r3
 800e82a:	d901      	bls.n	800e830 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800e82c:	2301      	movs	r3, #1
 800e82e:	e040      	b.n	800e8b2 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800e830:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e834:	2b00      	cmp	r3, #0
 800e836:	da0e      	bge.n	800e856 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e838:	78fb      	ldrb	r3, [r7, #3]
 800e83a:	f003 0307 	and.w	r3, r3, #7
 800e83e:	1c5a      	adds	r2, r3, #1
 800e840:	4613      	mov	r3, r2
 800e842:	009b      	lsls	r3, r3, #2
 800e844:	4413      	add	r3, r2
 800e846:	00db      	lsls	r3, r3, #3
 800e848:	687a      	ldr	r2, [r7, #4]
 800e84a:	4413      	add	r3, r2
 800e84c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	2201      	movs	r2, #1
 800e852:	705a      	strb	r2, [r3, #1]
 800e854:	e00e      	b.n	800e874 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e856:	78fb      	ldrb	r3, [r7, #3]
 800e858:	f003 0207 	and.w	r2, r3, #7
 800e85c:	4613      	mov	r3, r2
 800e85e:	009b      	lsls	r3, r3, #2
 800e860:	4413      	add	r3, r2
 800e862:	00db      	lsls	r3, r3, #3
 800e864:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800e868:	687a      	ldr	r2, [r7, #4]
 800e86a:	4413      	add	r3, r2
 800e86c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	2200      	movs	r2, #0
 800e872:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	2200      	movs	r2, #0
 800e878:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e87a:	78fb      	ldrb	r3, [r7, #3]
 800e87c:	f003 0307 	and.w	r3, r3, #7
 800e880:	b2da      	uxtb	r2, r3
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800e88c:	2b01      	cmp	r3, #1
 800e88e:	d101      	bne.n	800e894 <HAL_PCD_EP_ClrStall+0x82>
 800e890:	2302      	movs	r3, #2
 800e892:	e00e      	b.n	800e8b2 <HAL_PCD_EP_ClrStall+0xa0>
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	2201      	movs	r2, #1
 800e898:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	68f9      	ldr	r1, [r7, #12]
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	f004 fa99 	bl	8012dda <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800e8b0:	2300      	movs	r3, #0
}
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	3710      	adds	r7, #16
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	bd80      	pop	{r7, pc}

0800e8ba <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e8ba:	b580      	push	{r7, lr}
 800e8bc:	b082      	sub	sp, #8
 800e8be:	af00      	add	r7, sp, #0
 800e8c0:	6078      	str	r0, [r7, #4]
 800e8c2:	460b      	mov	r3, r1
 800e8c4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800e8cc:	2b01      	cmp	r3, #1
 800e8ce:	d101      	bne.n	800e8d4 <HAL_PCD_EP_Flush+0x1a>
 800e8d0:	2302      	movs	r3, #2
 800e8d2:	e01b      	b.n	800e90c <HAL_PCD_EP_Flush+0x52>
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	2201      	movs	r2, #1
 800e8d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  if ((ep_addr & 0x80U) == 0x80U)
 800e8dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	da09      	bge.n	800e8f8 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	681a      	ldr	r2, [r3, #0]
 800e8e8:	78fb      	ldrb	r3, [r7, #3]
 800e8ea:	f003 0307 	and.w	r3, r3, #7
 800e8ee:	4619      	mov	r1, r3
 800e8f0:	4610      	mov	r0, r2
 800e8f2:	f002 f8af 	bl	8010a54 <USB_FlushTxFifo>
 800e8f6:	e004      	b.n	800e902 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	f002 f8b4 	bl	8010a6a <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	2200      	movs	r2, #0
 800e906:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800e90a:	2300      	movs	r3, #0
}
 800e90c:	4618      	mov	r0, r3
 800e90e:	3708      	adds	r7, #8
 800e910:	46bd      	mov	sp, r7
 800e912:	bd80      	pop	{r7, pc}

0800e914 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800e914:	b580      	push	{r7, lr}
 800e916:	b096      	sub	sp, #88	; 0x58
 800e918:	af00      	add	r7, sp, #0
 800e91a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800e91c:	e3bf      	b.n	800f09e <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800e926:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800e92a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e92e:	b2db      	uxtb	r3, r3
 800e930:	f003 030f 	and.w	r3, r3, #15
 800e934:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800e938:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	f040 8179 	bne.w	800ec34 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800e942:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e946:	f003 0310 	and.w	r3, r3, #16
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d152      	bne.n	800e9f4 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	881b      	ldrh	r3, [r3, #0]
 800e954:	b29b      	uxth	r3, r3
 800e956:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800e95a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e95e:	81fb      	strh	r3, [r7, #14]
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	681a      	ldr	r2, [r3, #0]
 800e964:	89fb      	ldrh	r3, [r7, #14]
 800e966:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e96a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e96e:	b29b      	uxth	r3, r3
 800e970:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	3328      	adds	r3, #40	; 0x28
 800e976:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e980:	b29b      	uxth	r3, r3
 800e982:	461a      	mov	r2, r3
 800e984:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e986:	781b      	ldrb	r3, [r3, #0]
 800e988:	00db      	lsls	r3, r3, #3
 800e98a:	4413      	add	r3, r2
 800e98c:	3302      	adds	r3, #2
 800e98e:	005b      	lsls	r3, r3, #1
 800e990:	687a      	ldr	r2, [r7, #4]
 800e992:	6812      	ldr	r2, [r2, #0]
 800e994:	4413      	add	r3, r2
 800e996:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e99a:	881b      	ldrh	r3, [r3, #0]
 800e99c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800e9a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e9a2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800e9a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e9a6:	695a      	ldr	r2, [r3, #20]
 800e9a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e9aa:	69db      	ldr	r3, [r3, #28]
 800e9ac:	441a      	add	r2, r3
 800e9ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e9b0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800e9b2:	2100      	movs	r1, #0
 800e9b4:	6878      	ldr	r0, [r7, #4]
 800e9b6:	f007 f838 	bl	8015a2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e9c0:	b2db      	uxtb	r3, r3
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	f000 836b 	beq.w	800f09e <PCD_EP_ISR_Handler+0x78a>
 800e9c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e9ca:	699b      	ldr	r3, [r3, #24]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	f040 8366 	bne.w	800f09e <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e9d8:	b2db      	uxtb	r3, r3
 800e9da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e9de:	b2da      	uxtb	r2, r3
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	b292      	uxth	r2, r2
 800e9e6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	2200      	movs	r2, #0
 800e9ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800e9f2:	e354      	b.n	800f09e <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800e9fa:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	881b      	ldrh	r3, [r3, #0]
 800ea02:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800ea06:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ea0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d034      	beq.n	800ea7c <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ea1a:	b29b      	uxth	r3, r3
 800ea1c:	461a      	mov	r2, r3
 800ea1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea20:	781b      	ldrb	r3, [r3, #0]
 800ea22:	00db      	lsls	r3, r3, #3
 800ea24:	4413      	add	r3, r2
 800ea26:	3306      	adds	r3, #6
 800ea28:	005b      	lsls	r3, r3, #1
 800ea2a:	687a      	ldr	r2, [r7, #4]
 800ea2c:	6812      	ldr	r2, [r2, #0]
 800ea2e:	4413      	add	r3, r2
 800ea30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ea34:	881b      	ldrh	r3, [r3, #0]
 800ea36:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800ea3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea3c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	6818      	ldr	r0, [r3, #0]
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800ea48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea4a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800ea4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea4e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800ea50:	b29b      	uxth	r3, r3
 800ea52:	f004 faf5 	bl	8013040 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	881b      	ldrh	r3, [r3, #0]
 800ea5c:	b29a      	uxth	r2, r3
 800ea5e:	f640 738f 	movw	r3, #3983	; 0xf8f
 800ea62:	4013      	ands	r3, r2
 800ea64:	823b      	strh	r3, [r7, #16]
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	8a3a      	ldrh	r2, [r7, #16]
 800ea6c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ea70:	b292      	uxth	r2, r2
 800ea72:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800ea74:	6878      	ldr	r0, [r7, #4]
 800ea76:	f006 ffab 	bl	80159d0 <HAL_PCD_SetupStageCallback>
 800ea7a:	e310      	b.n	800f09e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800ea7c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	f280 830c 	bge.w	800f09e <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	881b      	ldrh	r3, [r3, #0]
 800ea8c:	b29a      	uxth	r2, r3
 800ea8e:	f640 738f 	movw	r3, #3983	; 0xf8f
 800ea92:	4013      	ands	r3, r2
 800ea94:	83fb      	strh	r3, [r7, #30]
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	8bfa      	ldrh	r2, [r7, #30]
 800ea9c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800eaa0:	b292      	uxth	r2, r2
 800eaa2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eaac:	b29b      	uxth	r3, r3
 800eaae:	461a      	mov	r2, r3
 800eab0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eab2:	781b      	ldrb	r3, [r3, #0]
 800eab4:	00db      	lsls	r3, r3, #3
 800eab6:	4413      	add	r3, r2
 800eab8:	3306      	adds	r3, #6
 800eaba:	005b      	lsls	r3, r3, #1
 800eabc:	687a      	ldr	r2, [r7, #4]
 800eabe:	6812      	ldr	r2, [r2, #0]
 800eac0:	4413      	add	r3, r2
 800eac2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800eac6:	881b      	ldrh	r3, [r3, #0]
 800eac8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800eacc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eace:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800ead0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ead2:	69db      	ldr	r3, [r3, #28]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d019      	beq.n	800eb0c <PCD_EP_ISR_Handler+0x1f8>
 800ead8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eada:	695b      	ldr	r3, [r3, #20]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d015      	beq.n	800eb0c <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	6818      	ldr	r0, [r3, #0]
 800eae4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eae6:	6959      	ldr	r1, [r3, #20]
 800eae8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eaea:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800eaec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eaee:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800eaf0:	b29b      	uxth	r3, r3
 800eaf2:	f004 faa5 	bl	8013040 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800eaf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eaf8:	695a      	ldr	r2, [r3, #20]
 800eafa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eafc:	69db      	ldr	r3, [r3, #28]
 800eafe:	441a      	add	r2, r3
 800eb00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb02:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800eb04:	2100      	movs	r1, #0
 800eb06:	6878      	ldr	r0, [r7, #4]
 800eb08:	f006 ff74 	bl	80159f4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	881b      	ldrh	r3, [r3, #0]
 800eb12:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800eb16:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800eb1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	f040 82bd 	bne.w	800f09e <PCD_EP_ISR_Handler+0x78a>
 800eb24:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800eb28:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800eb2c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800eb30:	f000 82b5 	beq.w	800f09e <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	61bb      	str	r3, [r7, #24]
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eb42:	b29b      	uxth	r3, r3
 800eb44:	461a      	mov	r2, r3
 800eb46:	69bb      	ldr	r3, [r7, #24]
 800eb48:	4413      	add	r3, r2
 800eb4a:	61bb      	str	r3, [r7, #24]
 800eb4c:	69bb      	ldr	r3, [r7, #24]
 800eb4e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800eb52:	617b      	str	r3, [r7, #20]
 800eb54:	697b      	ldr	r3, [r7, #20]
 800eb56:	881b      	ldrh	r3, [r3, #0]
 800eb58:	b29b      	uxth	r3, r3
 800eb5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800eb5e:	b29a      	uxth	r2, r3
 800eb60:	697b      	ldr	r3, [r7, #20]
 800eb62:	801a      	strh	r2, [r3, #0]
 800eb64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb66:	691b      	ldr	r3, [r3, #16]
 800eb68:	2b3e      	cmp	r3, #62	; 0x3e
 800eb6a:	d91d      	bls.n	800eba8 <PCD_EP_ISR_Handler+0x294>
 800eb6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb6e:	691b      	ldr	r3, [r3, #16]
 800eb70:	095b      	lsrs	r3, r3, #5
 800eb72:	647b      	str	r3, [r7, #68]	; 0x44
 800eb74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb76:	691b      	ldr	r3, [r3, #16]
 800eb78:	f003 031f 	and.w	r3, r3, #31
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d102      	bne.n	800eb86 <PCD_EP_ISR_Handler+0x272>
 800eb80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb82:	3b01      	subs	r3, #1
 800eb84:	647b      	str	r3, [r7, #68]	; 0x44
 800eb86:	697b      	ldr	r3, [r7, #20]
 800eb88:	881b      	ldrh	r3, [r3, #0]
 800eb8a:	b29a      	uxth	r2, r3
 800eb8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb8e:	b29b      	uxth	r3, r3
 800eb90:	029b      	lsls	r3, r3, #10
 800eb92:	b29b      	uxth	r3, r3
 800eb94:	4313      	orrs	r3, r2
 800eb96:	b29b      	uxth	r3, r3
 800eb98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eb9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eba0:	b29a      	uxth	r2, r3
 800eba2:	697b      	ldr	r3, [r7, #20]
 800eba4:	801a      	strh	r2, [r3, #0]
 800eba6:	e026      	b.n	800ebf6 <PCD_EP_ISR_Handler+0x2e2>
 800eba8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ebaa:	691b      	ldr	r3, [r3, #16]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d10a      	bne.n	800ebc6 <PCD_EP_ISR_Handler+0x2b2>
 800ebb0:	697b      	ldr	r3, [r7, #20]
 800ebb2:	881b      	ldrh	r3, [r3, #0]
 800ebb4:	b29b      	uxth	r3, r3
 800ebb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ebba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ebbe:	b29a      	uxth	r2, r3
 800ebc0:	697b      	ldr	r3, [r7, #20]
 800ebc2:	801a      	strh	r2, [r3, #0]
 800ebc4:	e017      	b.n	800ebf6 <PCD_EP_ISR_Handler+0x2e2>
 800ebc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ebc8:	691b      	ldr	r3, [r3, #16]
 800ebca:	085b      	lsrs	r3, r3, #1
 800ebcc:	647b      	str	r3, [r7, #68]	; 0x44
 800ebce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ebd0:	691b      	ldr	r3, [r3, #16]
 800ebd2:	f003 0301 	and.w	r3, r3, #1
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d002      	beq.n	800ebe0 <PCD_EP_ISR_Handler+0x2cc>
 800ebda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ebdc:	3301      	adds	r3, #1
 800ebde:	647b      	str	r3, [r7, #68]	; 0x44
 800ebe0:	697b      	ldr	r3, [r7, #20]
 800ebe2:	881b      	ldrh	r3, [r3, #0]
 800ebe4:	b29a      	uxth	r2, r3
 800ebe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ebe8:	b29b      	uxth	r3, r3
 800ebea:	029b      	lsls	r3, r3, #10
 800ebec:	b29b      	uxth	r3, r3
 800ebee:	4313      	orrs	r3, r2
 800ebf0:	b29a      	uxth	r2, r3
 800ebf2:	697b      	ldr	r3, [r7, #20]
 800ebf4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	881b      	ldrh	r3, [r3, #0]
 800ebfc:	b29b      	uxth	r3, r3
 800ebfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ec02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ec06:	827b      	strh	r3, [r7, #18]
 800ec08:	8a7b      	ldrh	r3, [r7, #18]
 800ec0a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ec0e:	827b      	strh	r3, [r7, #18]
 800ec10:	8a7b      	ldrh	r3, [r7, #18]
 800ec12:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ec16:	827b      	strh	r3, [r7, #18]
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	681a      	ldr	r2, [r3, #0]
 800ec1c:	8a7b      	ldrh	r3, [r7, #18]
 800ec1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ec22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ec26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ec2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec2e:	b29b      	uxth	r3, r3
 800ec30:	8013      	strh	r3, [r2, #0]
 800ec32:	e234      	b.n	800f09e <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	461a      	mov	r2, r3
 800ec3a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800ec3e:	009b      	lsls	r3, r3, #2
 800ec40:	4413      	add	r3, r2
 800ec42:	881b      	ldrh	r3, [r3, #0]
 800ec44:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800ec48:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	f280 80fc 	bge.w	800ee4a <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	461a      	mov	r2, r3
 800ec58:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800ec5c:	009b      	lsls	r3, r3, #2
 800ec5e:	4413      	add	r3, r2
 800ec60:	881b      	ldrh	r3, [r3, #0]
 800ec62:	b29a      	uxth	r2, r3
 800ec64:	f640 738f 	movw	r3, #3983	; 0xf8f
 800ec68:	4013      	ands	r3, r2
 800ec6a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	461a      	mov	r2, r3
 800ec74:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800ec78:	009b      	lsls	r3, r3, #2
 800ec7a:	4413      	add	r3, r2
 800ec7c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800ec80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ec84:	b292      	uxth	r2, r2
 800ec86:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800ec88:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800ec8c:	4613      	mov	r3, r2
 800ec8e:	009b      	lsls	r3, r3, #2
 800ec90:	4413      	add	r3, r2
 800ec92:	00db      	lsls	r3, r3, #3
 800ec94:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800ec98:	687a      	ldr	r2, [r7, #4]
 800ec9a:	4413      	add	r3, r2
 800ec9c:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800ec9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eca0:	7b1b      	ldrb	r3, [r3, #12]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d125      	bne.n	800ecf2 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ecae:	b29b      	uxth	r3, r3
 800ecb0:	461a      	mov	r2, r3
 800ecb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ecb4:	781b      	ldrb	r3, [r3, #0]
 800ecb6:	00db      	lsls	r3, r3, #3
 800ecb8:	4413      	add	r3, r2
 800ecba:	3306      	adds	r3, #6
 800ecbc:	005b      	lsls	r3, r3, #1
 800ecbe:	687a      	ldr	r2, [r7, #4]
 800ecc0:	6812      	ldr	r2, [r2, #0]
 800ecc2:	4413      	add	r3, r2
 800ecc4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ecc8:	881b      	ldrh	r3, [r3, #0]
 800ecca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ecce:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800ecd2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	f000 8092 	beq.w	800ee00 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	6818      	ldr	r0, [r3, #0]
 800ece0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ece2:	6959      	ldr	r1, [r3, #20]
 800ece4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ece6:	88da      	ldrh	r2, [r3, #6]
 800ece8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800ecec:	f004 f9a8 	bl	8013040 <USB_ReadPMA>
 800ecf0:	e086      	b.n	800ee00 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800ecf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ecf4:	78db      	ldrb	r3, [r3, #3]
 800ecf6:	2b02      	cmp	r3, #2
 800ecf8:	d10a      	bne.n	800ed10 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800ecfa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ecfe:	461a      	mov	r2, r3
 800ed00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ed02:	6878      	ldr	r0, [r7, #4]
 800ed04:	f000 f9d9 	bl	800f0ba <HAL_PCD_EP_DB_Receive>
 800ed08:	4603      	mov	r3, r0
 800ed0a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800ed0e:	e077      	b.n	800ee00 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	461a      	mov	r2, r3
 800ed16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed18:	781b      	ldrb	r3, [r3, #0]
 800ed1a:	009b      	lsls	r3, r3, #2
 800ed1c:	4413      	add	r3, r2
 800ed1e:	881b      	ldrh	r3, [r3, #0]
 800ed20:	b29b      	uxth	r3, r3
 800ed22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ed26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ed2a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	461a      	mov	r2, r3
 800ed34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed36:	781b      	ldrb	r3, [r3, #0]
 800ed38:	009b      	lsls	r3, r3, #2
 800ed3a:	441a      	add	r2, r3
 800ed3c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800ed40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ed44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ed48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ed4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ed50:	b29b      	uxth	r3, r3
 800ed52:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	461a      	mov	r2, r3
 800ed5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed5c:	781b      	ldrb	r3, [r3, #0]
 800ed5e:	009b      	lsls	r3, r3, #2
 800ed60:	4413      	add	r3, r2
 800ed62:	881b      	ldrh	r3, [r3, #0]
 800ed64:	b29b      	uxth	r3, r3
 800ed66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d024      	beq.n	800edb8 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ed76:	b29b      	uxth	r3, r3
 800ed78:	461a      	mov	r2, r3
 800ed7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed7c:	781b      	ldrb	r3, [r3, #0]
 800ed7e:	00db      	lsls	r3, r3, #3
 800ed80:	4413      	add	r3, r2
 800ed82:	3302      	adds	r3, #2
 800ed84:	005b      	lsls	r3, r3, #1
 800ed86:	687a      	ldr	r2, [r7, #4]
 800ed88:	6812      	ldr	r2, [r2, #0]
 800ed8a:	4413      	add	r3, r2
 800ed8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ed90:	881b      	ldrh	r3, [r3, #0]
 800ed92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ed96:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800ed9a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d02e      	beq.n	800ee00 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	6818      	ldr	r0, [r3, #0]
 800eda6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eda8:	6959      	ldr	r1, [r3, #20]
 800edaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800edac:	891a      	ldrh	r2, [r3, #8]
 800edae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800edb2:	f004 f945 	bl	8013040 <USB_ReadPMA>
 800edb6:	e023      	b.n	800ee00 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800edc0:	b29b      	uxth	r3, r3
 800edc2:	461a      	mov	r2, r3
 800edc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800edc6:	781b      	ldrb	r3, [r3, #0]
 800edc8:	00db      	lsls	r3, r3, #3
 800edca:	4413      	add	r3, r2
 800edcc:	3306      	adds	r3, #6
 800edce:	005b      	lsls	r3, r3, #1
 800edd0:	687a      	ldr	r2, [r7, #4]
 800edd2:	6812      	ldr	r2, [r2, #0]
 800edd4:	4413      	add	r3, r2
 800edd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800edda:	881b      	ldrh	r3, [r3, #0]
 800eddc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ede0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800ede4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d009      	beq.n	800ee00 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	6818      	ldr	r0, [r3, #0]
 800edf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800edf2:	6959      	ldr	r1, [r3, #20]
 800edf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800edf6:	895a      	ldrh	r2, [r3, #10]
 800edf8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800edfc:	f004 f920 	bl	8013040 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800ee00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee02:	69da      	ldr	r2, [r3, #28]
 800ee04:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800ee08:	441a      	add	r2, r3
 800ee0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee0c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800ee0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee10:	695a      	ldr	r2, [r3, #20]
 800ee12:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800ee16:	441a      	add	r2, r3
 800ee18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee1a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800ee1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee1e:	699b      	ldr	r3, [r3, #24]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d005      	beq.n	800ee30 <PCD_EP_ISR_Handler+0x51c>
 800ee24:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800ee28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee2a:	691b      	ldr	r3, [r3, #16]
 800ee2c:	429a      	cmp	r2, r3
 800ee2e:	d206      	bcs.n	800ee3e <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800ee30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee32:	781b      	ldrb	r3, [r3, #0]
 800ee34:	4619      	mov	r1, r3
 800ee36:	6878      	ldr	r0, [r7, #4]
 800ee38:	f006 fddc 	bl	80159f4 <HAL_PCD_DataOutStageCallback>
 800ee3c:	e005      	b.n	800ee4a <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ee44:	4618      	mov	r0, r3
 800ee46:	f002 fbc7 	bl	80115d8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800ee4a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ee4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	f000 8123 	beq.w	800f09e <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 800ee58:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800ee5c:	1c5a      	adds	r2, r3, #1
 800ee5e:	4613      	mov	r3, r2
 800ee60:	009b      	lsls	r3, r3, #2
 800ee62:	4413      	add	r3, r2
 800ee64:	00db      	lsls	r3, r3, #3
 800ee66:	687a      	ldr	r2, [r7, #4]
 800ee68:	4413      	add	r3, r2
 800ee6a:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	461a      	mov	r2, r3
 800ee72:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800ee76:	009b      	lsls	r3, r3, #2
 800ee78:	4413      	add	r3, r2
 800ee7a:	881b      	ldrh	r3, [r3, #0]
 800ee7c:	b29b      	uxth	r3, r3
 800ee7e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800ee82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee86:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	461a      	mov	r2, r3
 800ee90:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800ee94:	009b      	lsls	r3, r3, #2
 800ee96:	441a      	add	r2, r3
 800ee98:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ee9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eea0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eea4:	b29b      	uxth	r3, r3
 800eea6:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800eea8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eeaa:	78db      	ldrb	r3, [r3, #3]
 800eeac:	2b01      	cmp	r3, #1
 800eeae:	f040 80a2 	bne.w	800eff6 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 800eeb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eeb4:	2200      	movs	r2, #0
 800eeb6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800eeb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eeba:	7b1b      	ldrb	r3, [r3, #12]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	f000 8093 	beq.w	800efe8 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800eec2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800eec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d046      	beq.n	800ef5c <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800eece:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eed0:	785b      	ldrb	r3, [r3, #1]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d126      	bne.n	800ef24 <PCD_EP_ISR_Handler+0x610>
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	627b      	str	r3, [r7, #36]	; 0x24
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eee4:	b29b      	uxth	r3, r3
 800eee6:	461a      	mov	r2, r3
 800eee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeea:	4413      	add	r3, r2
 800eeec:	627b      	str	r3, [r7, #36]	; 0x24
 800eeee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eef0:	781b      	ldrb	r3, [r3, #0]
 800eef2:	011a      	lsls	r2, r3, #4
 800eef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eef6:	4413      	add	r3, r2
 800eef8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800eefc:	623b      	str	r3, [r7, #32]
 800eefe:	6a3b      	ldr	r3, [r7, #32]
 800ef00:	881b      	ldrh	r3, [r3, #0]
 800ef02:	b29b      	uxth	r3, r3
 800ef04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ef08:	b29a      	uxth	r2, r3
 800ef0a:	6a3b      	ldr	r3, [r7, #32]
 800ef0c:	801a      	strh	r2, [r3, #0]
 800ef0e:	6a3b      	ldr	r3, [r7, #32]
 800ef10:	881b      	ldrh	r3, [r3, #0]
 800ef12:	b29b      	uxth	r3, r3
 800ef14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ef18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ef1c:	b29a      	uxth	r2, r3
 800ef1e:	6a3b      	ldr	r3, [r7, #32]
 800ef20:	801a      	strh	r2, [r3, #0]
 800ef22:	e061      	b.n	800efe8 <PCD_EP_ISR_Handler+0x6d4>
 800ef24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef26:	785b      	ldrb	r3, [r3, #1]
 800ef28:	2b01      	cmp	r3, #1
 800ef2a:	d15d      	bne.n	800efe8 <PCD_EP_ISR_Handler+0x6d4>
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ef3a:	b29b      	uxth	r3, r3
 800ef3c:	461a      	mov	r2, r3
 800ef3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef40:	4413      	add	r3, r2
 800ef42:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ef44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef46:	781b      	ldrb	r3, [r3, #0]
 800ef48:	011a      	lsls	r2, r3, #4
 800ef4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef4c:	4413      	add	r3, r2
 800ef4e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ef52:	62bb      	str	r3, [r7, #40]	; 0x28
 800ef54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef56:	2200      	movs	r2, #0
 800ef58:	801a      	strh	r2, [r3, #0]
 800ef5a:	e045      	b.n	800efe8 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ef62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef64:	785b      	ldrb	r3, [r3, #1]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d126      	bne.n	800efb8 <PCD_EP_ISR_Handler+0x6a4>
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	637b      	str	r3, [r7, #52]	; 0x34
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ef78:	b29b      	uxth	r3, r3
 800ef7a:	461a      	mov	r2, r3
 800ef7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef7e:	4413      	add	r3, r2
 800ef80:	637b      	str	r3, [r7, #52]	; 0x34
 800ef82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef84:	781b      	ldrb	r3, [r3, #0]
 800ef86:	011a      	lsls	r2, r3, #4
 800ef88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef8a:	4413      	add	r3, r2
 800ef8c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ef90:	633b      	str	r3, [r7, #48]	; 0x30
 800ef92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef94:	881b      	ldrh	r3, [r3, #0]
 800ef96:	b29b      	uxth	r3, r3
 800ef98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ef9c:	b29a      	uxth	r2, r3
 800ef9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efa0:	801a      	strh	r2, [r3, #0]
 800efa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efa4:	881b      	ldrh	r3, [r3, #0]
 800efa6:	b29b      	uxth	r3, r3
 800efa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800efac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800efb0:	b29a      	uxth	r2, r3
 800efb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efb4:	801a      	strh	r2, [r3, #0]
 800efb6:	e017      	b.n	800efe8 <PCD_EP_ISR_Handler+0x6d4>
 800efb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800efba:	785b      	ldrb	r3, [r3, #1]
 800efbc:	2b01      	cmp	r3, #1
 800efbe:	d113      	bne.n	800efe8 <PCD_EP_ISR_Handler+0x6d4>
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800efc8:	b29b      	uxth	r3, r3
 800efca:	461a      	mov	r2, r3
 800efcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efce:	4413      	add	r3, r2
 800efd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800efd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800efd4:	781b      	ldrb	r3, [r3, #0]
 800efd6:	011a      	lsls	r2, r3, #4
 800efd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efda:	4413      	add	r3, r2
 800efdc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800efe0:	63bb      	str	r3, [r7, #56]	; 0x38
 800efe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efe4:	2200      	movs	r2, #0
 800efe6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800efe8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800efea:	781b      	ldrb	r3, [r3, #0]
 800efec:	4619      	mov	r1, r3
 800efee:	6878      	ldr	r0, [r7, #4]
 800eff0:	f006 fd1b 	bl	8015a2a <HAL_PCD_DataInStageCallback>
 800eff4:	e053      	b.n	800f09e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800eff6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800effa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800effe:	2b00      	cmp	r3, #0
 800f000:	d146      	bne.n	800f090 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f00a:	b29b      	uxth	r3, r3
 800f00c:	461a      	mov	r2, r3
 800f00e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f010:	781b      	ldrb	r3, [r3, #0]
 800f012:	00db      	lsls	r3, r3, #3
 800f014:	4413      	add	r3, r2
 800f016:	3302      	adds	r3, #2
 800f018:	005b      	lsls	r3, r3, #1
 800f01a:	687a      	ldr	r2, [r7, #4]
 800f01c:	6812      	ldr	r2, [r2, #0]
 800f01e:	4413      	add	r3, r2
 800f020:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f024:	881b      	ldrh	r3, [r3, #0]
 800f026:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f02a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800f02e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f030:	699a      	ldr	r2, [r3, #24]
 800f032:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f036:	429a      	cmp	r2, r3
 800f038:	d907      	bls.n	800f04a <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 800f03a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f03c:	699a      	ldr	r2, [r3, #24]
 800f03e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f042:	1ad2      	subs	r2, r2, r3
 800f044:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f046:	619a      	str	r2, [r3, #24]
 800f048:	e002      	b.n	800f050 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 800f04a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f04c:	2200      	movs	r2, #0
 800f04e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800f050:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f052:	699b      	ldr	r3, [r3, #24]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d106      	bne.n	800f066 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800f058:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f05a:	781b      	ldrb	r3, [r3, #0]
 800f05c:	4619      	mov	r1, r3
 800f05e:	6878      	ldr	r0, [r7, #4]
 800f060:	f006 fce3 	bl	8015a2a <HAL_PCD_DataInStageCallback>
 800f064:	e01b      	b.n	800f09e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800f066:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f068:	695a      	ldr	r2, [r3, #20]
 800f06a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f06e:	441a      	add	r2, r3
 800f070:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f072:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800f074:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f076:	69da      	ldr	r2, [r3, #28]
 800f078:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f07c:	441a      	add	r2, r3
 800f07e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f080:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f088:	4618      	mov	r0, r3
 800f08a:	f002 faa5 	bl	80115d8 <USB_EPStartXfer>
 800f08e:	e006      	b.n	800f09e <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800f090:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800f094:	461a      	mov	r2, r3
 800f096:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f098:	6878      	ldr	r0, [r7, #4]
 800f09a:	f000 f91b 	bl	800f2d4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800f0a6:	b29b      	uxth	r3, r3
 800f0a8:	b21b      	sxth	r3, r3
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	f6ff ac37 	blt.w	800e91e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800f0b0:	2300      	movs	r3, #0
}
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	3758      	adds	r7, #88	; 0x58
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	bd80      	pop	{r7, pc}

0800f0ba <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800f0ba:	b580      	push	{r7, lr}
 800f0bc:	b088      	sub	sp, #32
 800f0be:	af00      	add	r7, sp, #0
 800f0c0:	60f8      	str	r0, [r7, #12]
 800f0c2:	60b9      	str	r1, [r7, #8]
 800f0c4:	4613      	mov	r3, r2
 800f0c6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800f0c8:	88fb      	ldrh	r3, [r7, #6]
 800f0ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d07e      	beq.n	800f1d0 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f0da:	b29b      	uxth	r3, r3
 800f0dc:	461a      	mov	r2, r3
 800f0de:	68bb      	ldr	r3, [r7, #8]
 800f0e0:	781b      	ldrb	r3, [r3, #0]
 800f0e2:	00db      	lsls	r3, r3, #3
 800f0e4:	4413      	add	r3, r2
 800f0e6:	3302      	adds	r3, #2
 800f0e8:	005b      	lsls	r3, r3, #1
 800f0ea:	68fa      	ldr	r2, [r7, #12]
 800f0ec:	6812      	ldr	r2, [r2, #0]
 800f0ee:	4413      	add	r3, r2
 800f0f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f0f4:	881b      	ldrh	r3, [r3, #0]
 800f0f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f0fa:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800f0fc:	68bb      	ldr	r3, [r7, #8]
 800f0fe:	699a      	ldr	r2, [r3, #24]
 800f100:	8b7b      	ldrh	r3, [r7, #26]
 800f102:	429a      	cmp	r2, r3
 800f104:	d306      	bcc.n	800f114 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800f106:	68bb      	ldr	r3, [r7, #8]
 800f108:	699a      	ldr	r2, [r3, #24]
 800f10a:	8b7b      	ldrh	r3, [r7, #26]
 800f10c:	1ad2      	subs	r2, r2, r3
 800f10e:	68bb      	ldr	r3, [r7, #8]
 800f110:	619a      	str	r2, [r3, #24]
 800f112:	e002      	b.n	800f11a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800f114:	68bb      	ldr	r3, [r7, #8]
 800f116:	2200      	movs	r2, #0
 800f118:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800f11a:	68bb      	ldr	r3, [r7, #8]
 800f11c:	699b      	ldr	r3, [r3, #24]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d123      	bne.n	800f16a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	461a      	mov	r2, r3
 800f128:	68bb      	ldr	r3, [r7, #8]
 800f12a:	781b      	ldrb	r3, [r3, #0]
 800f12c:	009b      	lsls	r3, r3, #2
 800f12e:	4413      	add	r3, r2
 800f130:	881b      	ldrh	r3, [r3, #0]
 800f132:	b29b      	uxth	r3, r3
 800f134:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f13c:	833b      	strh	r3, [r7, #24]
 800f13e:	8b3b      	ldrh	r3, [r7, #24]
 800f140:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800f144:	833b      	strh	r3, [r7, #24]
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	461a      	mov	r2, r3
 800f14c:	68bb      	ldr	r3, [r7, #8]
 800f14e:	781b      	ldrb	r3, [r3, #0]
 800f150:	009b      	lsls	r3, r3, #2
 800f152:	441a      	add	r2, r3
 800f154:	8b3b      	ldrh	r3, [r7, #24]
 800f156:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f15a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f15e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f162:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f166:	b29b      	uxth	r3, r3
 800f168:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800f16a:	88fb      	ldrh	r3, [r7, #6]
 800f16c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f170:	2b00      	cmp	r3, #0
 800f172:	d01f      	beq.n	800f1b4 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	461a      	mov	r2, r3
 800f17a:	68bb      	ldr	r3, [r7, #8]
 800f17c:	781b      	ldrb	r3, [r3, #0]
 800f17e:	009b      	lsls	r3, r3, #2
 800f180:	4413      	add	r3, r2
 800f182:	881b      	ldrh	r3, [r3, #0]
 800f184:	b29b      	uxth	r3, r3
 800f186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f18a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f18e:	82fb      	strh	r3, [r7, #22]
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	461a      	mov	r2, r3
 800f196:	68bb      	ldr	r3, [r7, #8]
 800f198:	781b      	ldrb	r3, [r3, #0]
 800f19a:	009b      	lsls	r3, r3, #2
 800f19c:	441a      	add	r2, r3
 800f19e:	8afb      	ldrh	r3, [r7, #22]
 800f1a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f1a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f1a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f1ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f1b0:	b29b      	uxth	r3, r3
 800f1b2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800f1b4:	8b7b      	ldrh	r3, [r7, #26]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	f000 8087 	beq.w	800f2ca <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	6818      	ldr	r0, [r3, #0]
 800f1c0:	68bb      	ldr	r3, [r7, #8]
 800f1c2:	6959      	ldr	r1, [r3, #20]
 800f1c4:	68bb      	ldr	r3, [r7, #8]
 800f1c6:	891a      	ldrh	r2, [r3, #8]
 800f1c8:	8b7b      	ldrh	r3, [r7, #26]
 800f1ca:	f003 ff39 	bl	8013040 <USB_ReadPMA>
 800f1ce:	e07c      	b.n	800f2ca <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f1d8:	b29b      	uxth	r3, r3
 800f1da:	461a      	mov	r2, r3
 800f1dc:	68bb      	ldr	r3, [r7, #8]
 800f1de:	781b      	ldrb	r3, [r3, #0]
 800f1e0:	00db      	lsls	r3, r3, #3
 800f1e2:	4413      	add	r3, r2
 800f1e4:	3306      	adds	r3, #6
 800f1e6:	005b      	lsls	r3, r3, #1
 800f1e8:	68fa      	ldr	r2, [r7, #12]
 800f1ea:	6812      	ldr	r2, [r2, #0]
 800f1ec:	4413      	add	r3, r2
 800f1ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f1f2:	881b      	ldrh	r3, [r3, #0]
 800f1f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f1f8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800f1fa:	68bb      	ldr	r3, [r7, #8]
 800f1fc:	699a      	ldr	r2, [r3, #24]
 800f1fe:	8b7b      	ldrh	r3, [r7, #26]
 800f200:	429a      	cmp	r2, r3
 800f202:	d306      	bcc.n	800f212 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800f204:	68bb      	ldr	r3, [r7, #8]
 800f206:	699a      	ldr	r2, [r3, #24]
 800f208:	8b7b      	ldrh	r3, [r7, #26]
 800f20a:	1ad2      	subs	r2, r2, r3
 800f20c:	68bb      	ldr	r3, [r7, #8]
 800f20e:	619a      	str	r2, [r3, #24]
 800f210:	e002      	b.n	800f218 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800f212:	68bb      	ldr	r3, [r7, #8]
 800f214:	2200      	movs	r2, #0
 800f216:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800f218:	68bb      	ldr	r3, [r7, #8]
 800f21a:	699b      	ldr	r3, [r3, #24]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d123      	bne.n	800f268 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	461a      	mov	r2, r3
 800f226:	68bb      	ldr	r3, [r7, #8]
 800f228:	781b      	ldrb	r3, [r3, #0]
 800f22a:	009b      	lsls	r3, r3, #2
 800f22c:	4413      	add	r3, r2
 800f22e:	881b      	ldrh	r3, [r3, #0]
 800f230:	b29b      	uxth	r3, r3
 800f232:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f23a:	83fb      	strh	r3, [r7, #30]
 800f23c:	8bfb      	ldrh	r3, [r7, #30]
 800f23e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800f242:	83fb      	strh	r3, [r7, #30]
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	461a      	mov	r2, r3
 800f24a:	68bb      	ldr	r3, [r7, #8]
 800f24c:	781b      	ldrb	r3, [r3, #0]
 800f24e:	009b      	lsls	r3, r3, #2
 800f250:	441a      	add	r2, r3
 800f252:	8bfb      	ldrh	r3, [r7, #30]
 800f254:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f258:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f25c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f264:	b29b      	uxth	r3, r3
 800f266:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800f268:	88fb      	ldrh	r3, [r7, #6]
 800f26a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d11f      	bne.n	800f2b2 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	461a      	mov	r2, r3
 800f278:	68bb      	ldr	r3, [r7, #8]
 800f27a:	781b      	ldrb	r3, [r3, #0]
 800f27c:	009b      	lsls	r3, r3, #2
 800f27e:	4413      	add	r3, r2
 800f280:	881b      	ldrh	r3, [r3, #0]
 800f282:	b29b      	uxth	r3, r3
 800f284:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f288:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f28c:	83bb      	strh	r3, [r7, #28]
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	461a      	mov	r2, r3
 800f294:	68bb      	ldr	r3, [r7, #8]
 800f296:	781b      	ldrb	r3, [r3, #0]
 800f298:	009b      	lsls	r3, r3, #2
 800f29a:	441a      	add	r2, r3
 800f29c:	8bbb      	ldrh	r3, [r7, #28]
 800f29e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f2a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f2a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f2aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f2ae:	b29b      	uxth	r3, r3
 800f2b0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800f2b2:	8b7b      	ldrh	r3, [r7, #26]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d008      	beq.n	800f2ca <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	6818      	ldr	r0, [r3, #0]
 800f2bc:	68bb      	ldr	r3, [r7, #8]
 800f2be:	6959      	ldr	r1, [r3, #20]
 800f2c0:	68bb      	ldr	r3, [r7, #8]
 800f2c2:	895a      	ldrh	r2, [r3, #10]
 800f2c4:	8b7b      	ldrh	r3, [r7, #26]
 800f2c6:	f003 febb 	bl	8013040 <USB_ReadPMA>
    }
  }

  return count;
 800f2ca:	8b7b      	ldrh	r3, [r7, #26]
}
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	3720      	adds	r7, #32
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	bd80      	pop	{r7, pc}

0800f2d4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800f2d4:	b580      	push	{r7, lr}
 800f2d6:	b0a4      	sub	sp, #144	; 0x90
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	60f8      	str	r0, [r7, #12]
 800f2dc:	60b9      	str	r1, [r7, #8]
 800f2de:	4613      	mov	r3, r2
 800f2e0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800f2e2:	88fb      	ldrh	r3, [r7, #6]
 800f2e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	f000 81dd 	beq.w	800f6a8 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f2f6:	b29b      	uxth	r3, r3
 800f2f8:	461a      	mov	r2, r3
 800f2fa:	68bb      	ldr	r3, [r7, #8]
 800f2fc:	781b      	ldrb	r3, [r3, #0]
 800f2fe:	00db      	lsls	r3, r3, #3
 800f300:	4413      	add	r3, r2
 800f302:	3302      	adds	r3, #2
 800f304:	005b      	lsls	r3, r3, #1
 800f306:	68fa      	ldr	r2, [r7, #12]
 800f308:	6812      	ldr	r2, [r2, #0]
 800f30a:	4413      	add	r3, r2
 800f30c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f310:	881b      	ldrh	r3, [r3, #0]
 800f312:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f316:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800f31a:	68bb      	ldr	r3, [r7, #8]
 800f31c:	699a      	ldr	r2, [r3, #24]
 800f31e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800f322:	429a      	cmp	r2, r3
 800f324:	d907      	bls.n	800f336 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800f326:	68bb      	ldr	r3, [r7, #8]
 800f328:	699a      	ldr	r2, [r3, #24]
 800f32a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800f32e:	1ad2      	subs	r2, r2, r3
 800f330:	68bb      	ldr	r3, [r7, #8]
 800f332:	619a      	str	r2, [r3, #24]
 800f334:	e002      	b.n	800f33c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800f336:	68bb      	ldr	r3, [r7, #8]
 800f338:	2200      	movs	r2, #0
 800f33a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800f33c:	68bb      	ldr	r3, [r7, #8]
 800f33e:	699b      	ldr	r3, [r3, #24]
 800f340:	2b00      	cmp	r3, #0
 800f342:	f040 80b9 	bne.w	800f4b8 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f346:	68bb      	ldr	r3, [r7, #8]
 800f348:	785b      	ldrb	r3, [r3, #1]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d126      	bne.n	800f39c <HAL_PCD_EP_DB_Transmit+0xc8>
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f35c:	b29b      	uxth	r3, r3
 800f35e:	461a      	mov	r2, r3
 800f360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f362:	4413      	add	r3, r2
 800f364:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f366:	68bb      	ldr	r3, [r7, #8]
 800f368:	781b      	ldrb	r3, [r3, #0]
 800f36a:	011a      	lsls	r2, r3, #4
 800f36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f36e:	4413      	add	r3, r2
 800f370:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800f374:	62bb      	str	r3, [r7, #40]	; 0x28
 800f376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f378:	881b      	ldrh	r3, [r3, #0]
 800f37a:	b29b      	uxth	r3, r3
 800f37c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f380:	b29a      	uxth	r2, r3
 800f382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f384:	801a      	strh	r2, [r3, #0]
 800f386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f388:	881b      	ldrh	r3, [r3, #0]
 800f38a:	b29b      	uxth	r3, r3
 800f38c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f390:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f394:	b29a      	uxth	r2, r3
 800f396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f398:	801a      	strh	r2, [r3, #0]
 800f39a:	e01a      	b.n	800f3d2 <HAL_PCD_EP_DB_Transmit+0xfe>
 800f39c:	68bb      	ldr	r3, [r7, #8]
 800f39e:	785b      	ldrb	r3, [r3, #1]
 800f3a0:	2b01      	cmp	r3, #1
 800f3a2:	d116      	bne.n	800f3d2 <HAL_PCD_EP_DB_Transmit+0xfe>
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	637b      	str	r3, [r7, #52]	; 0x34
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f3b2:	b29b      	uxth	r3, r3
 800f3b4:	461a      	mov	r2, r3
 800f3b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3b8:	4413      	add	r3, r2
 800f3ba:	637b      	str	r3, [r7, #52]	; 0x34
 800f3bc:	68bb      	ldr	r3, [r7, #8]
 800f3be:	781b      	ldrb	r3, [r3, #0]
 800f3c0:	011a      	lsls	r2, r3, #4
 800f3c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3c4:	4413      	add	r3, r2
 800f3c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800f3ca:	633b      	str	r3, [r7, #48]	; 0x30
 800f3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	627b      	str	r3, [r7, #36]	; 0x24
 800f3d8:	68bb      	ldr	r3, [r7, #8]
 800f3da:	785b      	ldrb	r3, [r3, #1]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d126      	bne.n	800f42e <HAL_PCD_EP_DB_Transmit+0x15a>
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	61fb      	str	r3, [r7, #28]
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f3ee:	b29b      	uxth	r3, r3
 800f3f0:	461a      	mov	r2, r3
 800f3f2:	69fb      	ldr	r3, [r7, #28]
 800f3f4:	4413      	add	r3, r2
 800f3f6:	61fb      	str	r3, [r7, #28]
 800f3f8:	68bb      	ldr	r3, [r7, #8]
 800f3fa:	781b      	ldrb	r3, [r3, #0]
 800f3fc:	011a      	lsls	r2, r3, #4
 800f3fe:	69fb      	ldr	r3, [r7, #28]
 800f400:	4413      	add	r3, r2
 800f402:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800f406:	61bb      	str	r3, [r7, #24]
 800f408:	69bb      	ldr	r3, [r7, #24]
 800f40a:	881b      	ldrh	r3, [r3, #0]
 800f40c:	b29b      	uxth	r3, r3
 800f40e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f412:	b29a      	uxth	r2, r3
 800f414:	69bb      	ldr	r3, [r7, #24]
 800f416:	801a      	strh	r2, [r3, #0]
 800f418:	69bb      	ldr	r3, [r7, #24]
 800f41a:	881b      	ldrh	r3, [r3, #0]
 800f41c:	b29b      	uxth	r3, r3
 800f41e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f422:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f426:	b29a      	uxth	r2, r3
 800f428:	69bb      	ldr	r3, [r7, #24]
 800f42a:	801a      	strh	r2, [r3, #0]
 800f42c:	e017      	b.n	800f45e <HAL_PCD_EP_DB_Transmit+0x18a>
 800f42e:	68bb      	ldr	r3, [r7, #8]
 800f430:	785b      	ldrb	r3, [r3, #1]
 800f432:	2b01      	cmp	r3, #1
 800f434:	d113      	bne.n	800f45e <HAL_PCD_EP_DB_Transmit+0x18a>
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f43e:	b29b      	uxth	r3, r3
 800f440:	461a      	mov	r2, r3
 800f442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f444:	4413      	add	r3, r2
 800f446:	627b      	str	r3, [r7, #36]	; 0x24
 800f448:	68bb      	ldr	r3, [r7, #8]
 800f44a:	781b      	ldrb	r3, [r3, #0]
 800f44c:	011a      	lsls	r2, r3, #4
 800f44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f450:	4413      	add	r3, r2
 800f452:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800f456:	623b      	str	r3, [r7, #32]
 800f458:	6a3b      	ldr	r3, [r7, #32]
 800f45a:	2200      	movs	r2, #0
 800f45c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800f45e:	68bb      	ldr	r3, [r7, #8]
 800f460:	781b      	ldrb	r3, [r3, #0]
 800f462:	4619      	mov	r1, r3
 800f464:	68f8      	ldr	r0, [r7, #12]
 800f466:	f006 fae0 	bl	8015a2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800f46a:	88fb      	ldrh	r3, [r7, #6]
 800f46c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f470:	2b00      	cmp	r3, #0
 800f472:	f000 82fc 	beq.w	800fa6e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	461a      	mov	r2, r3
 800f47c:	68bb      	ldr	r3, [r7, #8]
 800f47e:	781b      	ldrb	r3, [r3, #0]
 800f480:	009b      	lsls	r3, r3, #2
 800f482:	4413      	add	r3, r2
 800f484:	881b      	ldrh	r3, [r3, #0]
 800f486:	b29b      	uxth	r3, r3
 800f488:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f48c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f490:	82fb      	strh	r3, [r7, #22]
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	461a      	mov	r2, r3
 800f498:	68bb      	ldr	r3, [r7, #8]
 800f49a:	781b      	ldrb	r3, [r3, #0]
 800f49c:	009b      	lsls	r3, r3, #2
 800f49e:	441a      	add	r2, r3
 800f4a0:	8afb      	ldrh	r3, [r7, #22]
 800f4a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f4a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f4aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f4ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f4b2:	b29b      	uxth	r3, r3
 800f4b4:	8013      	strh	r3, [r2, #0]
 800f4b6:	e2da      	b.n	800fa6e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800f4b8:	88fb      	ldrh	r3, [r7, #6]
 800f4ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d021      	beq.n	800f506 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	461a      	mov	r2, r3
 800f4c8:	68bb      	ldr	r3, [r7, #8]
 800f4ca:	781b      	ldrb	r3, [r3, #0]
 800f4cc:	009b      	lsls	r3, r3, #2
 800f4ce:	4413      	add	r3, r2
 800f4d0:	881b      	ldrh	r3, [r3, #0]
 800f4d2:	b29b      	uxth	r3, r3
 800f4d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f4d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f4dc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	461a      	mov	r2, r3
 800f4e6:	68bb      	ldr	r3, [r7, #8]
 800f4e8:	781b      	ldrb	r3, [r3, #0]
 800f4ea:	009b      	lsls	r3, r3, #2
 800f4ec:	441a      	add	r2, r3
 800f4ee:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800f4f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f4f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f4fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f4fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f502:	b29b      	uxth	r3, r3
 800f504:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800f506:	68bb      	ldr	r3, [r7, #8]
 800f508:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f50c:	2b01      	cmp	r3, #1
 800f50e:	f040 82ae 	bne.w	800fa6e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800f512:	68bb      	ldr	r3, [r7, #8]
 800f514:	695a      	ldr	r2, [r3, #20]
 800f516:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800f51a:	441a      	add	r2, r3
 800f51c:	68bb      	ldr	r3, [r7, #8]
 800f51e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800f520:	68bb      	ldr	r3, [r7, #8]
 800f522:	69da      	ldr	r2, [r3, #28]
 800f524:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800f528:	441a      	add	r2, r3
 800f52a:	68bb      	ldr	r3, [r7, #8]
 800f52c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800f52e:	68bb      	ldr	r3, [r7, #8]
 800f530:	6a1a      	ldr	r2, [r3, #32]
 800f532:	68bb      	ldr	r3, [r7, #8]
 800f534:	691b      	ldr	r3, [r3, #16]
 800f536:	429a      	cmp	r2, r3
 800f538:	d30b      	bcc.n	800f552 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800f53a:	68bb      	ldr	r3, [r7, #8]
 800f53c:	691b      	ldr	r3, [r3, #16]
 800f53e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800f542:	68bb      	ldr	r3, [r7, #8]
 800f544:	6a1a      	ldr	r2, [r3, #32]
 800f546:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f54a:	1ad2      	subs	r2, r2, r3
 800f54c:	68bb      	ldr	r3, [r7, #8]
 800f54e:	621a      	str	r2, [r3, #32]
 800f550:	e017      	b.n	800f582 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800f552:	68bb      	ldr	r3, [r7, #8]
 800f554:	6a1b      	ldr	r3, [r3, #32]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d108      	bne.n	800f56c <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800f55a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800f55e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800f562:	68bb      	ldr	r3, [r7, #8]
 800f564:	2200      	movs	r2, #0
 800f566:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800f56a:	e00a      	b.n	800f582 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800f56c:	68bb      	ldr	r3, [r7, #8]
 800f56e:	2200      	movs	r2, #0
 800f570:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800f574:	68bb      	ldr	r3, [r7, #8]
 800f576:	6a1b      	ldr	r3, [r3, #32]
 800f578:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800f57c:	68bb      	ldr	r3, [r7, #8]
 800f57e:	2200      	movs	r2, #0
 800f580:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800f582:	68bb      	ldr	r3, [r7, #8]
 800f584:	785b      	ldrb	r3, [r3, #1]
 800f586:	2b00      	cmp	r3, #0
 800f588:	d165      	bne.n	800f656 <HAL_PCD_EP_DB_Transmit+0x382>
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f598:	b29b      	uxth	r3, r3
 800f59a:	461a      	mov	r2, r3
 800f59c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f59e:	4413      	add	r3, r2
 800f5a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f5a2:	68bb      	ldr	r3, [r7, #8]
 800f5a4:	781b      	ldrb	r3, [r3, #0]
 800f5a6:	011a      	lsls	r2, r3, #4
 800f5a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5aa:	4413      	add	r3, r2
 800f5ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800f5b0:	63bb      	str	r3, [r7, #56]	; 0x38
 800f5b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5b4:	881b      	ldrh	r3, [r3, #0]
 800f5b6:	b29b      	uxth	r3, r3
 800f5b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f5bc:	b29a      	uxth	r2, r3
 800f5be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5c0:	801a      	strh	r2, [r3, #0]
 800f5c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f5c6:	2b3e      	cmp	r3, #62	; 0x3e
 800f5c8:	d91d      	bls.n	800f606 <HAL_PCD_EP_DB_Transmit+0x332>
 800f5ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f5ce:	095b      	lsrs	r3, r3, #5
 800f5d0:	64bb      	str	r3, [r7, #72]	; 0x48
 800f5d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f5d6:	f003 031f 	and.w	r3, r3, #31
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d102      	bne.n	800f5e4 <HAL_PCD_EP_DB_Transmit+0x310>
 800f5de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f5e0:	3b01      	subs	r3, #1
 800f5e2:	64bb      	str	r3, [r7, #72]	; 0x48
 800f5e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5e6:	881b      	ldrh	r3, [r3, #0]
 800f5e8:	b29a      	uxth	r2, r3
 800f5ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f5ec:	b29b      	uxth	r3, r3
 800f5ee:	029b      	lsls	r3, r3, #10
 800f5f0:	b29b      	uxth	r3, r3
 800f5f2:	4313      	orrs	r3, r2
 800f5f4:	b29b      	uxth	r3, r3
 800f5f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f5fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f5fe:	b29a      	uxth	r2, r3
 800f600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f602:	801a      	strh	r2, [r3, #0]
 800f604:	e044      	b.n	800f690 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800f606:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d10a      	bne.n	800f624 <HAL_PCD_EP_DB_Transmit+0x350>
 800f60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f610:	881b      	ldrh	r3, [r3, #0]
 800f612:	b29b      	uxth	r3, r3
 800f614:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f618:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f61c:	b29a      	uxth	r2, r3
 800f61e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f620:	801a      	strh	r2, [r3, #0]
 800f622:	e035      	b.n	800f690 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800f624:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f628:	085b      	lsrs	r3, r3, #1
 800f62a:	64bb      	str	r3, [r7, #72]	; 0x48
 800f62c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f630:	f003 0301 	and.w	r3, r3, #1
 800f634:	2b00      	cmp	r3, #0
 800f636:	d002      	beq.n	800f63e <HAL_PCD_EP_DB_Transmit+0x36a>
 800f638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f63a:	3301      	adds	r3, #1
 800f63c:	64bb      	str	r3, [r7, #72]	; 0x48
 800f63e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f640:	881b      	ldrh	r3, [r3, #0]
 800f642:	b29a      	uxth	r2, r3
 800f644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f646:	b29b      	uxth	r3, r3
 800f648:	029b      	lsls	r3, r3, #10
 800f64a:	b29b      	uxth	r3, r3
 800f64c:	4313      	orrs	r3, r2
 800f64e:	b29a      	uxth	r2, r3
 800f650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f652:	801a      	strh	r2, [r3, #0]
 800f654:	e01c      	b.n	800f690 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800f656:	68bb      	ldr	r3, [r7, #8]
 800f658:	785b      	ldrb	r3, [r3, #1]
 800f65a:	2b01      	cmp	r3, #1
 800f65c:	d118      	bne.n	800f690 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	647b      	str	r3, [r7, #68]	; 0x44
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f66c:	b29b      	uxth	r3, r3
 800f66e:	461a      	mov	r2, r3
 800f670:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f672:	4413      	add	r3, r2
 800f674:	647b      	str	r3, [r7, #68]	; 0x44
 800f676:	68bb      	ldr	r3, [r7, #8]
 800f678:	781b      	ldrb	r3, [r3, #0]
 800f67a:	011a      	lsls	r2, r3, #4
 800f67c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f67e:	4413      	add	r3, r2
 800f680:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800f684:	643b      	str	r3, [r7, #64]	; 0x40
 800f686:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f68a:	b29a      	uxth	r2, r3
 800f68c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f68e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	6818      	ldr	r0, [r3, #0]
 800f694:	68bb      	ldr	r3, [r7, #8]
 800f696:	6959      	ldr	r1, [r3, #20]
 800f698:	68bb      	ldr	r3, [r7, #8]
 800f69a:	891a      	ldrh	r2, [r3, #8]
 800f69c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f6a0:	b29b      	uxth	r3, r3
 800f6a2:	f003 fc88 	bl	8012fb6 <USB_WritePMA>
 800f6a6:	e1e2      	b.n	800fa6e <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f6b0:	b29b      	uxth	r3, r3
 800f6b2:	461a      	mov	r2, r3
 800f6b4:	68bb      	ldr	r3, [r7, #8]
 800f6b6:	781b      	ldrb	r3, [r3, #0]
 800f6b8:	00db      	lsls	r3, r3, #3
 800f6ba:	4413      	add	r3, r2
 800f6bc:	3306      	adds	r3, #6
 800f6be:	005b      	lsls	r3, r3, #1
 800f6c0:	68fa      	ldr	r2, [r7, #12]
 800f6c2:	6812      	ldr	r2, [r2, #0]
 800f6c4:	4413      	add	r3, r2
 800f6c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f6ca:	881b      	ldrh	r3, [r3, #0]
 800f6cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f6d0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800f6d4:	68bb      	ldr	r3, [r7, #8]
 800f6d6:	699a      	ldr	r2, [r3, #24]
 800f6d8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800f6dc:	429a      	cmp	r2, r3
 800f6de:	d307      	bcc.n	800f6f0 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800f6e0:	68bb      	ldr	r3, [r7, #8]
 800f6e2:	699a      	ldr	r2, [r3, #24]
 800f6e4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800f6e8:	1ad2      	subs	r2, r2, r3
 800f6ea:	68bb      	ldr	r3, [r7, #8]
 800f6ec:	619a      	str	r2, [r3, #24]
 800f6ee:	e002      	b.n	800f6f6 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800f6f0:	68bb      	ldr	r3, [r7, #8]
 800f6f2:	2200      	movs	r2, #0
 800f6f4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800f6f6:	68bb      	ldr	r3, [r7, #8]
 800f6f8:	699b      	ldr	r3, [r3, #24]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	f040 80c0 	bne.w	800f880 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f700:	68bb      	ldr	r3, [r7, #8]
 800f702:	785b      	ldrb	r3, [r3, #1]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d126      	bne.n	800f756 <HAL_PCD_EP_DB_Transmit+0x482>
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f716:	b29b      	uxth	r3, r3
 800f718:	461a      	mov	r2, r3
 800f71a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f71c:	4413      	add	r3, r2
 800f71e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f720:	68bb      	ldr	r3, [r7, #8]
 800f722:	781b      	ldrb	r3, [r3, #0]
 800f724:	011a      	lsls	r2, r3, #4
 800f726:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f728:	4413      	add	r3, r2
 800f72a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800f72e:	67bb      	str	r3, [r7, #120]	; 0x78
 800f730:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f732:	881b      	ldrh	r3, [r3, #0]
 800f734:	b29b      	uxth	r3, r3
 800f736:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f73a:	b29a      	uxth	r2, r3
 800f73c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f73e:	801a      	strh	r2, [r3, #0]
 800f740:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f742:	881b      	ldrh	r3, [r3, #0]
 800f744:	b29b      	uxth	r3, r3
 800f746:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f74a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f74e:	b29a      	uxth	r2, r3
 800f750:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f752:	801a      	strh	r2, [r3, #0]
 800f754:	e01a      	b.n	800f78c <HAL_PCD_EP_DB_Transmit+0x4b8>
 800f756:	68bb      	ldr	r3, [r7, #8]
 800f758:	785b      	ldrb	r3, [r3, #1]
 800f75a:	2b01      	cmp	r3, #1
 800f75c:	d116      	bne.n	800f78c <HAL_PCD_EP_DB_Transmit+0x4b8>
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	667b      	str	r3, [r7, #100]	; 0x64
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f76c:	b29b      	uxth	r3, r3
 800f76e:	461a      	mov	r2, r3
 800f770:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f772:	4413      	add	r3, r2
 800f774:	667b      	str	r3, [r7, #100]	; 0x64
 800f776:	68bb      	ldr	r3, [r7, #8]
 800f778:	781b      	ldrb	r3, [r3, #0]
 800f77a:	011a      	lsls	r2, r3, #4
 800f77c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f77e:	4413      	add	r3, r2
 800f780:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800f784:	663b      	str	r3, [r7, #96]	; 0x60
 800f786:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f788:	2200      	movs	r2, #0
 800f78a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	677b      	str	r3, [r7, #116]	; 0x74
 800f792:	68bb      	ldr	r3, [r7, #8]
 800f794:	785b      	ldrb	r3, [r3, #1]
 800f796:	2b00      	cmp	r3, #0
 800f798:	d12b      	bne.n	800f7f2 <HAL_PCD_EP_DB_Transmit+0x51e>
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f7a8:	b29b      	uxth	r3, r3
 800f7aa:	461a      	mov	r2, r3
 800f7ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f7ae:	4413      	add	r3, r2
 800f7b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f7b2:	68bb      	ldr	r3, [r7, #8]
 800f7b4:	781b      	ldrb	r3, [r3, #0]
 800f7b6:	011a      	lsls	r2, r3, #4
 800f7b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f7ba:	4413      	add	r3, r2
 800f7bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800f7c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f7c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f7c8:	881b      	ldrh	r3, [r3, #0]
 800f7ca:	b29b      	uxth	r3, r3
 800f7cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f7d0:	b29a      	uxth	r2, r3
 800f7d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f7d6:	801a      	strh	r2, [r3, #0]
 800f7d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f7dc:	881b      	ldrh	r3, [r3, #0]
 800f7de:	b29b      	uxth	r3, r3
 800f7e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f7e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f7e8:	b29a      	uxth	r2, r3
 800f7ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f7ee:	801a      	strh	r2, [r3, #0]
 800f7f0:	e017      	b.n	800f822 <HAL_PCD_EP_DB_Transmit+0x54e>
 800f7f2:	68bb      	ldr	r3, [r7, #8]
 800f7f4:	785b      	ldrb	r3, [r3, #1]
 800f7f6:	2b01      	cmp	r3, #1
 800f7f8:	d113      	bne.n	800f822 <HAL_PCD_EP_DB_Transmit+0x54e>
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f802:	b29b      	uxth	r3, r3
 800f804:	461a      	mov	r2, r3
 800f806:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f808:	4413      	add	r3, r2
 800f80a:	677b      	str	r3, [r7, #116]	; 0x74
 800f80c:	68bb      	ldr	r3, [r7, #8]
 800f80e:	781b      	ldrb	r3, [r3, #0]
 800f810:	011a      	lsls	r2, r3, #4
 800f812:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f814:	4413      	add	r3, r2
 800f816:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800f81a:	673b      	str	r3, [r7, #112]	; 0x70
 800f81c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f81e:	2200      	movs	r2, #0
 800f820:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800f822:	68bb      	ldr	r3, [r7, #8]
 800f824:	781b      	ldrb	r3, [r3, #0]
 800f826:	4619      	mov	r1, r3
 800f828:	68f8      	ldr	r0, [r7, #12]
 800f82a:	f006 f8fe 	bl	8015a2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800f82e:	88fb      	ldrh	r3, [r7, #6]
 800f830:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f834:	2b00      	cmp	r3, #0
 800f836:	f040 811a 	bne.w	800fa6e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	461a      	mov	r2, r3
 800f840:	68bb      	ldr	r3, [r7, #8]
 800f842:	781b      	ldrb	r3, [r3, #0]
 800f844:	009b      	lsls	r3, r3, #2
 800f846:	4413      	add	r3, r2
 800f848:	881b      	ldrh	r3, [r3, #0]
 800f84a:	b29b      	uxth	r3, r3
 800f84c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f854:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	461a      	mov	r2, r3
 800f85e:	68bb      	ldr	r3, [r7, #8]
 800f860:	781b      	ldrb	r3, [r3, #0]
 800f862:	009b      	lsls	r3, r3, #2
 800f864:	441a      	add	r2, r3
 800f866:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800f86a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f86e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f872:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f87a:	b29b      	uxth	r3, r3
 800f87c:	8013      	strh	r3, [r2, #0]
 800f87e:	e0f6      	b.n	800fa6e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800f880:	88fb      	ldrh	r3, [r7, #6]
 800f882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f886:	2b00      	cmp	r3, #0
 800f888:	d121      	bne.n	800f8ce <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	461a      	mov	r2, r3
 800f890:	68bb      	ldr	r3, [r7, #8]
 800f892:	781b      	ldrb	r3, [r3, #0]
 800f894:	009b      	lsls	r3, r3, #2
 800f896:	4413      	add	r3, r2
 800f898:	881b      	ldrh	r3, [r3, #0]
 800f89a:	b29b      	uxth	r3, r3
 800f89c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f8a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f8a4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	461a      	mov	r2, r3
 800f8ae:	68bb      	ldr	r3, [r7, #8]
 800f8b0:	781b      	ldrb	r3, [r3, #0]
 800f8b2:	009b      	lsls	r3, r3, #2
 800f8b4:	441a      	add	r2, r3
 800f8b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f8ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f8be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f8c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f8c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f8ca:	b29b      	uxth	r3, r3
 800f8cc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800f8ce:	68bb      	ldr	r3, [r7, #8]
 800f8d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f8d4:	2b01      	cmp	r3, #1
 800f8d6:	f040 80ca 	bne.w	800fa6e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800f8da:	68bb      	ldr	r3, [r7, #8]
 800f8dc:	695a      	ldr	r2, [r3, #20]
 800f8de:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800f8e2:	441a      	add	r2, r3
 800f8e4:	68bb      	ldr	r3, [r7, #8]
 800f8e6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800f8e8:	68bb      	ldr	r3, [r7, #8]
 800f8ea:	69da      	ldr	r2, [r3, #28]
 800f8ec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800f8f0:	441a      	add	r2, r3
 800f8f2:	68bb      	ldr	r3, [r7, #8]
 800f8f4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800f8f6:	68bb      	ldr	r3, [r7, #8]
 800f8f8:	6a1a      	ldr	r2, [r3, #32]
 800f8fa:	68bb      	ldr	r3, [r7, #8]
 800f8fc:	691b      	ldr	r3, [r3, #16]
 800f8fe:	429a      	cmp	r2, r3
 800f900:	d30b      	bcc.n	800f91a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800f902:	68bb      	ldr	r3, [r7, #8]
 800f904:	691b      	ldr	r3, [r3, #16]
 800f906:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800f90a:	68bb      	ldr	r3, [r7, #8]
 800f90c:	6a1a      	ldr	r2, [r3, #32]
 800f90e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f912:	1ad2      	subs	r2, r2, r3
 800f914:	68bb      	ldr	r3, [r7, #8]
 800f916:	621a      	str	r2, [r3, #32]
 800f918:	e017      	b.n	800f94a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800f91a:	68bb      	ldr	r3, [r7, #8]
 800f91c:	6a1b      	ldr	r3, [r3, #32]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d108      	bne.n	800f934 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800f922:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800f926:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800f92a:	68bb      	ldr	r3, [r7, #8]
 800f92c:	2200      	movs	r2, #0
 800f92e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800f932:	e00a      	b.n	800f94a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800f934:	68bb      	ldr	r3, [r7, #8]
 800f936:	6a1b      	ldr	r3, [r3, #32]
 800f938:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800f93c:	68bb      	ldr	r3, [r7, #8]
 800f93e:	2200      	movs	r2, #0
 800f940:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800f942:	68bb      	ldr	r3, [r7, #8]
 800f944:	2200      	movs	r2, #0
 800f946:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	657b      	str	r3, [r7, #84]	; 0x54
 800f950:	68bb      	ldr	r3, [r7, #8]
 800f952:	785b      	ldrb	r3, [r3, #1]
 800f954:	2b00      	cmp	r3, #0
 800f956:	d165      	bne.n	800fa24 <HAL_PCD_EP_DB_Transmit+0x750>
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f966:	b29b      	uxth	r3, r3
 800f968:	461a      	mov	r2, r3
 800f96a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f96c:	4413      	add	r3, r2
 800f96e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f970:	68bb      	ldr	r3, [r7, #8]
 800f972:	781b      	ldrb	r3, [r3, #0]
 800f974:	011a      	lsls	r2, r3, #4
 800f976:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f978:	4413      	add	r3, r2
 800f97a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800f97e:	65bb      	str	r3, [r7, #88]	; 0x58
 800f980:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f982:	881b      	ldrh	r3, [r3, #0]
 800f984:	b29b      	uxth	r3, r3
 800f986:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f98a:	b29a      	uxth	r2, r3
 800f98c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f98e:	801a      	strh	r2, [r3, #0]
 800f990:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f994:	2b3e      	cmp	r3, #62	; 0x3e
 800f996:	d91d      	bls.n	800f9d4 <HAL_PCD_EP_DB_Transmit+0x700>
 800f998:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f99c:	095b      	lsrs	r3, r3, #5
 800f99e:	66bb      	str	r3, [r7, #104]	; 0x68
 800f9a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f9a4:	f003 031f 	and.w	r3, r3, #31
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d102      	bne.n	800f9b2 <HAL_PCD_EP_DB_Transmit+0x6de>
 800f9ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f9ae:	3b01      	subs	r3, #1
 800f9b0:	66bb      	str	r3, [r7, #104]	; 0x68
 800f9b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f9b4:	881b      	ldrh	r3, [r3, #0]
 800f9b6:	b29a      	uxth	r2, r3
 800f9b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f9ba:	b29b      	uxth	r3, r3
 800f9bc:	029b      	lsls	r3, r3, #10
 800f9be:	b29b      	uxth	r3, r3
 800f9c0:	4313      	orrs	r3, r2
 800f9c2:	b29b      	uxth	r3, r3
 800f9c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f9c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f9cc:	b29a      	uxth	r2, r3
 800f9ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f9d0:	801a      	strh	r2, [r3, #0]
 800f9d2:	e041      	b.n	800fa58 <HAL_PCD_EP_DB_Transmit+0x784>
 800f9d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d10a      	bne.n	800f9f2 <HAL_PCD_EP_DB_Transmit+0x71e>
 800f9dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f9de:	881b      	ldrh	r3, [r3, #0]
 800f9e0:	b29b      	uxth	r3, r3
 800f9e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f9e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f9ea:	b29a      	uxth	r2, r3
 800f9ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f9ee:	801a      	strh	r2, [r3, #0]
 800f9f0:	e032      	b.n	800fa58 <HAL_PCD_EP_DB_Transmit+0x784>
 800f9f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f9f6:	085b      	lsrs	r3, r3, #1
 800f9f8:	66bb      	str	r3, [r7, #104]	; 0x68
 800f9fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f9fe:	f003 0301 	and.w	r3, r3, #1
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d002      	beq.n	800fa0c <HAL_PCD_EP_DB_Transmit+0x738>
 800fa06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fa08:	3301      	adds	r3, #1
 800fa0a:	66bb      	str	r3, [r7, #104]	; 0x68
 800fa0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fa0e:	881b      	ldrh	r3, [r3, #0]
 800fa10:	b29a      	uxth	r2, r3
 800fa12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fa14:	b29b      	uxth	r3, r3
 800fa16:	029b      	lsls	r3, r3, #10
 800fa18:	b29b      	uxth	r3, r3
 800fa1a:	4313      	orrs	r3, r2
 800fa1c:	b29a      	uxth	r2, r3
 800fa1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fa20:	801a      	strh	r2, [r3, #0]
 800fa22:	e019      	b.n	800fa58 <HAL_PCD_EP_DB_Transmit+0x784>
 800fa24:	68bb      	ldr	r3, [r7, #8]
 800fa26:	785b      	ldrb	r3, [r3, #1]
 800fa28:	2b01      	cmp	r3, #1
 800fa2a:	d115      	bne.n	800fa58 <HAL_PCD_EP_DB_Transmit+0x784>
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fa34:	b29b      	uxth	r3, r3
 800fa36:	461a      	mov	r2, r3
 800fa38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa3a:	4413      	add	r3, r2
 800fa3c:	657b      	str	r3, [r7, #84]	; 0x54
 800fa3e:	68bb      	ldr	r3, [r7, #8]
 800fa40:	781b      	ldrb	r3, [r3, #0]
 800fa42:	011a      	lsls	r2, r3, #4
 800fa44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa46:	4413      	add	r3, r2
 800fa48:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800fa4c:	653b      	str	r3, [r7, #80]	; 0x50
 800fa4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fa52:	b29a      	uxth	r2, r3
 800fa54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa56:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	6818      	ldr	r0, [r3, #0]
 800fa5c:	68bb      	ldr	r3, [r7, #8]
 800fa5e:	6959      	ldr	r1, [r3, #20]
 800fa60:	68bb      	ldr	r3, [r7, #8]
 800fa62:	895a      	ldrh	r2, [r3, #10]
 800fa64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fa68:	b29b      	uxth	r3, r3
 800fa6a:	f003 faa4 	bl	8012fb6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	461a      	mov	r2, r3
 800fa74:	68bb      	ldr	r3, [r7, #8]
 800fa76:	781b      	ldrb	r3, [r3, #0]
 800fa78:	009b      	lsls	r3, r3, #2
 800fa7a:	4413      	add	r3, r2
 800fa7c:	881b      	ldrh	r3, [r3, #0]
 800fa7e:	b29b      	uxth	r3, r3
 800fa80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fa84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fa88:	82bb      	strh	r3, [r7, #20]
 800fa8a:	8abb      	ldrh	r3, [r7, #20]
 800fa8c:	f083 0310 	eor.w	r3, r3, #16
 800fa90:	82bb      	strh	r3, [r7, #20]
 800fa92:	8abb      	ldrh	r3, [r7, #20]
 800fa94:	f083 0320 	eor.w	r3, r3, #32
 800fa98:	82bb      	strh	r3, [r7, #20]
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	461a      	mov	r2, r3
 800faa0:	68bb      	ldr	r3, [r7, #8]
 800faa2:	781b      	ldrb	r3, [r3, #0]
 800faa4:	009b      	lsls	r3, r3, #2
 800faa6:	441a      	add	r2, r3
 800faa8:	8abb      	ldrh	r3, [r7, #20]
 800faaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800faae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fab2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800faba:	b29b      	uxth	r3, r3
 800fabc:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800fabe:	2300      	movs	r3, #0
}
 800fac0:	4618      	mov	r0, r3
 800fac2:	3790      	adds	r7, #144	; 0x90
 800fac4:	46bd      	mov	sp, r7
 800fac6:	bd80      	pop	{r7, pc}

0800fac8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800fac8:	b480      	push	{r7}
 800faca:	b087      	sub	sp, #28
 800facc:	af00      	add	r7, sp, #0
 800face:	60f8      	str	r0, [r7, #12]
 800fad0:	607b      	str	r3, [r7, #4]
 800fad2:	460b      	mov	r3, r1
 800fad4:	817b      	strh	r3, [r7, #10]
 800fad6:	4613      	mov	r3, r2
 800fad8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800fada:	897b      	ldrh	r3, [r7, #10]
 800fadc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fae0:	b29b      	uxth	r3, r3
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d00b      	beq.n	800fafe <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800fae6:	897b      	ldrh	r3, [r7, #10]
 800fae8:	f003 0307 	and.w	r3, r3, #7
 800faec:	1c5a      	adds	r2, r3, #1
 800faee:	4613      	mov	r3, r2
 800faf0:	009b      	lsls	r3, r3, #2
 800faf2:	4413      	add	r3, r2
 800faf4:	00db      	lsls	r3, r3, #3
 800faf6:	68fa      	ldr	r2, [r7, #12]
 800faf8:	4413      	add	r3, r2
 800fafa:	617b      	str	r3, [r7, #20]
 800fafc:	e009      	b.n	800fb12 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800fafe:	897a      	ldrh	r2, [r7, #10]
 800fb00:	4613      	mov	r3, r2
 800fb02:	009b      	lsls	r3, r3, #2
 800fb04:	4413      	add	r3, r2
 800fb06:	00db      	lsls	r3, r3, #3
 800fb08:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800fb0c:	68fa      	ldr	r2, [r7, #12]
 800fb0e:	4413      	add	r3, r2
 800fb10:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800fb12:	893b      	ldrh	r3, [r7, #8]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d107      	bne.n	800fb28 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800fb18:	697b      	ldr	r3, [r7, #20]
 800fb1a:	2200      	movs	r2, #0
 800fb1c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	b29a      	uxth	r2, r3
 800fb22:	697b      	ldr	r3, [r7, #20]
 800fb24:	80da      	strh	r2, [r3, #6]
 800fb26:	e00b      	b.n	800fb40 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800fb28:	697b      	ldr	r3, [r7, #20]
 800fb2a:	2201      	movs	r2, #1
 800fb2c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	b29a      	uxth	r2, r3
 800fb32:	697b      	ldr	r3, [r7, #20]
 800fb34:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	0c1b      	lsrs	r3, r3, #16
 800fb3a:	b29a      	uxth	r2, r3
 800fb3c:	697b      	ldr	r3, [r7, #20]
 800fb3e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800fb40:	2300      	movs	r3, #0
}
 800fb42:	4618      	mov	r0, r3
 800fb44:	371c      	adds	r7, #28
 800fb46:	46bd      	mov	sp, r7
 800fb48:	bc80      	pop	{r7}
 800fb4a:	4770      	bx	lr

0800fb4c <HAL_PWR_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 800fb50:	4b06      	ldr	r3, [pc, #24]	; (800fb6c <HAL_PWR_PVD_IRQHandler+0x20>)
 800fb52:	695b      	ldr	r3, [r3, #20]
 800fb54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d005      	beq.n	800fb68 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 800fb5c:	f000 f808 	bl	800fb70 <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 800fb60:	4b02      	ldr	r3, [pc, #8]	; (800fb6c <HAL_PWR_PVD_IRQHandler+0x20>)
 800fb62:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800fb66:	615a      	str	r2, [r3, #20]
  }
}
 800fb68:	bf00      	nop
 800fb6a:	bd80      	pop	{r7, pc}
 800fb6c:	40010400 	.word	0x40010400

0800fb70 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 800fb70:	b480      	push	{r7}
 800fb72:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 800fb74:	bf00      	nop
 800fb76:	46bd      	mov	sp, r7
 800fb78:	bc80      	pop	{r7}
 800fb7a:	4770      	bx	lr

0800fb7c <LL_EXTI_EnableIT_0_31>:
{
 800fb7c:	b480      	push	{r7}
 800fb7e:	b083      	sub	sp, #12
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 800fb84:	4b05      	ldr	r3, [pc, #20]	; (800fb9c <LL_EXTI_EnableIT_0_31+0x20>)
 800fb86:	681a      	ldr	r2, [r3, #0]
 800fb88:	4904      	ldr	r1, [pc, #16]	; (800fb9c <LL_EXTI_EnableIT_0_31+0x20>)
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	4313      	orrs	r3, r2
 800fb8e:	600b      	str	r3, [r1, #0]
}
 800fb90:	bf00      	nop
 800fb92:	370c      	adds	r7, #12
 800fb94:	46bd      	mov	sp, r7
 800fb96:	bc80      	pop	{r7}
 800fb98:	4770      	bx	lr
 800fb9a:	bf00      	nop
 800fb9c:	40010400 	.word	0x40010400

0800fba0 <LL_EXTI_DisableIT_0_31>:
{
 800fba0:	b480      	push	{r7}
 800fba2:	b083      	sub	sp, #12
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 800fba8:	4b05      	ldr	r3, [pc, #20]	; (800fbc0 <LL_EXTI_DisableIT_0_31+0x20>)
 800fbaa:	681a      	ldr	r2, [r3, #0]
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	43db      	mvns	r3, r3
 800fbb0:	4903      	ldr	r1, [pc, #12]	; (800fbc0 <LL_EXTI_DisableIT_0_31+0x20>)
 800fbb2:	4013      	ands	r3, r2
 800fbb4:	600b      	str	r3, [r1, #0]
}
 800fbb6:	bf00      	nop
 800fbb8:	370c      	adds	r7, #12
 800fbba:	46bd      	mov	sp, r7
 800fbbc:	bc80      	pop	{r7}
 800fbbe:	4770      	bx	lr
 800fbc0:	40010400 	.word	0x40010400

0800fbc4 <LL_EXTI_EnableEvent_0_31>:
{
 800fbc4:	b480      	push	{r7}
 800fbc6:	b083      	sub	sp, #12
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 800fbcc:	4b05      	ldr	r3, [pc, #20]	; (800fbe4 <LL_EXTI_EnableEvent_0_31+0x20>)
 800fbce:	685a      	ldr	r2, [r3, #4]
 800fbd0:	4904      	ldr	r1, [pc, #16]	; (800fbe4 <LL_EXTI_EnableEvent_0_31+0x20>)
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	4313      	orrs	r3, r2
 800fbd6:	604b      	str	r3, [r1, #4]
}
 800fbd8:	bf00      	nop
 800fbda:	370c      	adds	r7, #12
 800fbdc:	46bd      	mov	sp, r7
 800fbde:	bc80      	pop	{r7}
 800fbe0:	4770      	bx	lr
 800fbe2:	bf00      	nop
 800fbe4:	40010400 	.word	0x40010400

0800fbe8 <LL_EXTI_DisableEvent_0_31>:
{
 800fbe8:	b480      	push	{r7}
 800fbea:	b083      	sub	sp, #12
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 800fbf0:	4b05      	ldr	r3, [pc, #20]	; (800fc08 <LL_EXTI_DisableEvent_0_31+0x20>)
 800fbf2:	685a      	ldr	r2, [r3, #4]
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	43db      	mvns	r3, r3
 800fbf8:	4903      	ldr	r1, [pc, #12]	; (800fc08 <LL_EXTI_DisableEvent_0_31+0x20>)
 800fbfa:	4013      	ands	r3, r2
 800fbfc:	604b      	str	r3, [r1, #4]
}
 800fbfe:	bf00      	nop
 800fc00:	370c      	adds	r7, #12
 800fc02:	46bd      	mov	sp, r7
 800fc04:	bc80      	pop	{r7}
 800fc06:	4770      	bx	lr
 800fc08:	40010400 	.word	0x40010400

0800fc0c <LL_EXTI_EnableRisingTrig_0_31>:
{
 800fc0c:	b480      	push	{r7}
 800fc0e:	b083      	sub	sp, #12
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 800fc14:	4b05      	ldr	r3, [pc, #20]	; (800fc2c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800fc16:	689a      	ldr	r2, [r3, #8]
 800fc18:	4904      	ldr	r1, [pc, #16]	; (800fc2c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	4313      	orrs	r3, r2
 800fc1e:	608b      	str	r3, [r1, #8]
}
 800fc20:	bf00      	nop
 800fc22:	370c      	adds	r7, #12
 800fc24:	46bd      	mov	sp, r7
 800fc26:	bc80      	pop	{r7}
 800fc28:	4770      	bx	lr
 800fc2a:	bf00      	nop
 800fc2c:	40010400 	.word	0x40010400

0800fc30 <LL_EXTI_DisableRisingTrig_0_31>:
{
 800fc30:	b480      	push	{r7}
 800fc32:	b083      	sub	sp, #12
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 800fc38:	4b05      	ldr	r3, [pc, #20]	; (800fc50 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800fc3a:	689a      	ldr	r2, [r3, #8]
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	43db      	mvns	r3, r3
 800fc40:	4903      	ldr	r1, [pc, #12]	; (800fc50 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800fc42:	4013      	ands	r3, r2
 800fc44:	608b      	str	r3, [r1, #8]
}
 800fc46:	bf00      	nop
 800fc48:	370c      	adds	r7, #12
 800fc4a:	46bd      	mov	sp, r7
 800fc4c:	bc80      	pop	{r7}
 800fc4e:	4770      	bx	lr
 800fc50:	40010400 	.word	0x40010400

0800fc54 <LL_EXTI_EnableFallingTrig_0_31>:
{
 800fc54:	b480      	push	{r7}
 800fc56:	b083      	sub	sp, #12
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 800fc5c:	4b05      	ldr	r3, [pc, #20]	; (800fc74 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800fc5e:	68da      	ldr	r2, [r3, #12]
 800fc60:	4904      	ldr	r1, [pc, #16]	; (800fc74 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	4313      	orrs	r3, r2
 800fc66:	60cb      	str	r3, [r1, #12]
}
 800fc68:	bf00      	nop
 800fc6a:	370c      	adds	r7, #12
 800fc6c:	46bd      	mov	sp, r7
 800fc6e:	bc80      	pop	{r7}
 800fc70:	4770      	bx	lr
 800fc72:	bf00      	nop
 800fc74:	40010400 	.word	0x40010400

0800fc78 <LL_EXTI_DisableFallingTrig_0_31>:
{
 800fc78:	b480      	push	{r7}
 800fc7a:	b083      	sub	sp, #12
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 800fc80:	4b05      	ldr	r3, [pc, #20]	; (800fc98 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800fc82:	68da      	ldr	r2, [r3, #12]
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	43db      	mvns	r3, r3
 800fc88:	4903      	ldr	r1, [pc, #12]	; (800fc98 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800fc8a:	4013      	ands	r3, r2
 800fc8c:	60cb      	str	r3, [r1, #12]
}
 800fc8e:	bf00      	nop
 800fc90:	370c      	adds	r7, #12
 800fc92:	46bd      	mov	sp, r7
 800fc94:	bc80      	pop	{r7}
 800fc96:	4770      	bx	lr
 800fc98:	40010400 	.word	0x40010400

0800fc9c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	b084      	sub	sp, #16
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 800fca4:	2300      	movs	r3, #0
 800fca6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	791b      	ldrb	r3, [r3, #4]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d065      	beq.n	800fd7c <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d06b      	beq.n	800fd90 <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	795b      	ldrb	r3, [r3, #5]
 800fcbc:	2b02      	cmp	r3, #2
 800fcbe:	d01c      	beq.n	800fcfa <LL_EXTI_Init+0x5e>
 800fcc0:	2b02      	cmp	r3, #2
 800fcc2:	dc25      	bgt.n	800fd10 <LL_EXTI_Init+0x74>
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d002      	beq.n	800fcce <LL_EXTI_Init+0x32>
 800fcc8:	2b01      	cmp	r3, #1
 800fcca:	d00b      	beq.n	800fce4 <LL_EXTI_Init+0x48>
 800fccc:	e020      	b.n	800fd10 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	f7ff ff88 	bl	800fbe8 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	4618      	mov	r0, r3
 800fcde:	f7ff ff4d 	bl	800fb7c <LL_EXTI_EnableIT_0_31>
          break;
 800fce2:	e018      	b.n	800fd16 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	4618      	mov	r0, r3
 800fcea:	f7ff ff59 	bl	800fba0 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	f7ff ff66 	bl	800fbc4 <LL_EXTI_EnableEvent_0_31>
          break;
 800fcf8:	e00d      	b.n	800fd16 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	4618      	mov	r0, r3
 800fd00:	f7ff ff3c 	bl	800fb7c <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	4618      	mov	r0, r3
 800fd0a:	f7ff ff5b 	bl	800fbc4 <LL_EXTI_EnableEvent_0_31>
          break;
 800fd0e:	e002      	b.n	800fd16 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 800fd10:	2301      	movs	r3, #1
 800fd12:	73fb      	strb	r3, [r7, #15]
          break;
 800fd14:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	799b      	ldrb	r3, [r3, #6]
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d038      	beq.n	800fd90 <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	799b      	ldrb	r3, [r3, #6]
 800fd22:	2b03      	cmp	r3, #3
 800fd24:	d01c      	beq.n	800fd60 <LL_EXTI_Init+0xc4>
 800fd26:	2b03      	cmp	r3, #3
 800fd28:	dc25      	bgt.n	800fd76 <LL_EXTI_Init+0xda>
 800fd2a:	2b01      	cmp	r3, #1
 800fd2c:	d002      	beq.n	800fd34 <LL_EXTI_Init+0x98>
 800fd2e:	2b02      	cmp	r3, #2
 800fd30:	d00b      	beq.n	800fd4a <LL_EXTI_Init+0xae>
 800fd32:	e020      	b.n	800fd76 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	4618      	mov	r0, r3
 800fd3a:	f7ff ff9d 	bl	800fc78 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	4618      	mov	r0, r3
 800fd44:	f7ff ff62 	bl	800fc0c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800fd48:	e022      	b.n	800fd90 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	4618      	mov	r0, r3
 800fd50:	f7ff ff6e 	bl	800fc30 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	4618      	mov	r0, r3
 800fd5a:	f7ff ff7b 	bl	800fc54 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800fd5e:	e017      	b.n	800fd90 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	4618      	mov	r0, r3
 800fd66:	f7ff ff51 	bl	800fc0c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	4618      	mov	r0, r3
 800fd70:	f7ff ff70 	bl	800fc54 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800fd74:	e00c      	b.n	800fd90 <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 800fd76:	2301      	movs	r3, #1
 800fd78:	73fb      	strb	r3, [r7, #15]
            break;
 800fd7a:	e009      	b.n	800fd90 <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	4618      	mov	r0, r3
 800fd82:	f7ff ff0d 	bl	800fba0 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	f7ff ff2c 	bl	800fbe8 <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 800fd90:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd92:	4618      	mov	r0, r3
 800fd94:	3710      	adds	r7, #16
 800fd96:	46bd      	mov	sp, r7
 800fd98:	bd80      	pop	{r7, pc}

0800fd9a <LL_GPIO_SetPinMode>:
{
 800fd9a:	b490      	push	{r4, r7}
 800fd9c:	b088      	sub	sp, #32
 800fd9e:	af00      	add	r7, sp, #0
 800fda0:	60f8      	str	r0, [r7, #12]
 800fda2:	60b9      	str	r1, [r7, #8]
 800fda4:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	461a      	mov	r2, r3
 800fdaa:	68bb      	ldr	r3, [r7, #8]
 800fdac:	0e1b      	lsrs	r3, r3, #24
 800fdae:	4413      	add	r3, r2
 800fdb0:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 800fdb2:	6822      	ldr	r2, [r4, #0]
 800fdb4:	68bb      	ldr	r3, [r7, #8]
 800fdb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fdb8:	697b      	ldr	r3, [r7, #20]
 800fdba:	fa93 f3a3 	rbit	r3, r3
 800fdbe:	613b      	str	r3, [r7, #16]
  return result;
 800fdc0:	693b      	ldr	r3, [r7, #16]
 800fdc2:	fab3 f383 	clz	r3, r3
 800fdc6:	b2db      	uxtb	r3, r3
 800fdc8:	009b      	lsls	r3, r3, #2
 800fdca:	210f      	movs	r1, #15
 800fdcc:	fa01 f303 	lsl.w	r3, r1, r3
 800fdd0:	43db      	mvns	r3, r3
 800fdd2:	401a      	ands	r2, r3
 800fdd4:	68bb      	ldr	r3, [r7, #8]
 800fdd6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fdd8:	69fb      	ldr	r3, [r7, #28]
 800fdda:	fa93 f3a3 	rbit	r3, r3
 800fdde:	61bb      	str	r3, [r7, #24]
  return result;
 800fde0:	69bb      	ldr	r3, [r7, #24]
 800fde2:	fab3 f383 	clz	r3, r3
 800fde6:	b2db      	uxtb	r3, r3
 800fde8:	009b      	lsls	r3, r3, #2
 800fdea:	6879      	ldr	r1, [r7, #4]
 800fdec:	fa01 f303 	lsl.w	r3, r1, r3
 800fdf0:	4313      	orrs	r3, r2
 800fdf2:	6023      	str	r3, [r4, #0]
}
 800fdf4:	bf00      	nop
 800fdf6:	3720      	adds	r7, #32
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	bc90      	pop	{r4, r7}
 800fdfc:	4770      	bx	lr

0800fdfe <LL_GPIO_SetPinSpeed>:
{
 800fdfe:	b490      	push	{r4, r7}
 800fe00:	b088      	sub	sp, #32
 800fe02:	af00      	add	r7, sp, #0
 800fe04:	60f8      	str	r0, [r7, #12]
 800fe06:	60b9      	str	r1, [r7, #8]
 800fe08:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	461a      	mov	r2, r3
 800fe0e:	68bb      	ldr	r3, [r7, #8]
 800fe10:	0e1b      	lsrs	r3, r3, #24
 800fe12:	4413      	add	r3, r2
 800fe14:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 800fe16:	6822      	ldr	r2, [r4, #0]
 800fe18:	68bb      	ldr	r3, [r7, #8]
 800fe1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fe1c:	697b      	ldr	r3, [r7, #20]
 800fe1e:	fa93 f3a3 	rbit	r3, r3
 800fe22:	613b      	str	r3, [r7, #16]
  return result;
 800fe24:	693b      	ldr	r3, [r7, #16]
 800fe26:	fab3 f383 	clz	r3, r3
 800fe2a:	b2db      	uxtb	r3, r3
 800fe2c:	009b      	lsls	r3, r3, #2
 800fe2e:	2103      	movs	r1, #3
 800fe30:	fa01 f303 	lsl.w	r3, r1, r3
 800fe34:	43db      	mvns	r3, r3
 800fe36:	401a      	ands	r2, r3
 800fe38:	68bb      	ldr	r3, [r7, #8]
 800fe3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fe3c:	69fb      	ldr	r3, [r7, #28]
 800fe3e:	fa93 f3a3 	rbit	r3, r3
 800fe42:	61bb      	str	r3, [r7, #24]
  return result;
 800fe44:	69bb      	ldr	r3, [r7, #24]
 800fe46:	fab3 f383 	clz	r3, r3
 800fe4a:	b2db      	uxtb	r3, r3
 800fe4c:	009b      	lsls	r3, r3, #2
 800fe4e:	6879      	ldr	r1, [r7, #4]
 800fe50:	fa01 f303 	lsl.w	r3, r1, r3
 800fe54:	4313      	orrs	r3, r2
 800fe56:	6023      	str	r3, [r4, #0]
}
 800fe58:	bf00      	nop
 800fe5a:	3720      	adds	r7, #32
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	bc90      	pop	{r4, r7}
 800fe60:	4770      	bx	lr

0800fe62 <LL_GPIO_SetPinOutputType>:
{
 800fe62:	b490      	push	{r4, r7}
 800fe64:	b088      	sub	sp, #32
 800fe66:	af00      	add	r7, sp, #0
 800fe68:	60f8      	str	r0, [r7, #12]
 800fe6a:	60b9      	str	r1, [r7, #8]
 800fe6c:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	461a      	mov	r2, r3
 800fe72:	68bb      	ldr	r3, [r7, #8]
 800fe74:	0e1b      	lsrs	r3, r3, #24
 800fe76:	4413      	add	r3, r2
 800fe78:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 800fe7a:	6822      	ldr	r2, [r4, #0]
 800fe7c:	68bb      	ldr	r3, [r7, #8]
 800fe7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fe80:	697b      	ldr	r3, [r7, #20]
 800fe82:	fa93 f3a3 	rbit	r3, r3
 800fe86:	613b      	str	r3, [r7, #16]
  return result;
 800fe88:	693b      	ldr	r3, [r7, #16]
 800fe8a:	fab3 f383 	clz	r3, r3
 800fe8e:	b2db      	uxtb	r3, r3
 800fe90:	009b      	lsls	r3, r3, #2
 800fe92:	2104      	movs	r1, #4
 800fe94:	fa01 f303 	lsl.w	r3, r1, r3
 800fe98:	43db      	mvns	r3, r3
 800fe9a:	401a      	ands	r2, r3
 800fe9c:	68bb      	ldr	r3, [r7, #8]
 800fe9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fea0:	69fb      	ldr	r3, [r7, #28]
 800fea2:	fa93 f3a3 	rbit	r3, r3
 800fea6:	61bb      	str	r3, [r7, #24]
  return result;
 800fea8:	69bb      	ldr	r3, [r7, #24]
 800feaa:	fab3 f383 	clz	r3, r3
 800feae:	b2db      	uxtb	r3, r3
 800feb0:	009b      	lsls	r3, r3, #2
 800feb2:	6879      	ldr	r1, [r7, #4]
 800feb4:	fa01 f303 	lsl.w	r3, r1, r3
 800feb8:	4313      	orrs	r3, r2
 800feba:	6023      	str	r3, [r4, #0]
}
 800febc:	bf00      	nop
 800febe:	3720      	adds	r7, #32
 800fec0:	46bd      	mov	sp, r7
 800fec2:	bc90      	pop	{r4, r7}
 800fec4:	4770      	bx	lr

0800fec6 <LL_GPIO_SetPinPull>:
{
 800fec6:	b480      	push	{r7}
 800fec8:	b087      	sub	sp, #28
 800feca:	af00      	add	r7, sp, #0
 800fecc:	60f8      	str	r0, [r7, #12]
 800fece:	60b9      	str	r1, [r7, #8]
 800fed0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	68da      	ldr	r2, [r3, #12]
 800fed6:	68bb      	ldr	r3, [r7, #8]
 800fed8:	0a1b      	lsrs	r3, r3, #8
 800feda:	43db      	mvns	r3, r3
 800fedc:	401a      	ands	r2, r3
 800fede:	68bb      	ldr	r3, [r7, #8]
 800fee0:	0a1b      	lsrs	r3, r3, #8
 800fee2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fee4:	697b      	ldr	r3, [r7, #20]
 800fee6:	fa93 f3a3 	rbit	r3, r3
 800feea:	613b      	str	r3, [r7, #16]
  return result;
 800feec:	693b      	ldr	r3, [r7, #16]
 800feee:	fab3 f383 	clz	r3, r3
 800fef2:	b2db      	uxtb	r3, r3
 800fef4:	4619      	mov	r1, r3
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	408b      	lsls	r3, r1
 800fefa:	431a      	orrs	r2, r3
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	60da      	str	r2, [r3, #12]
}
 800ff00:	bf00      	nop
 800ff02:	371c      	adds	r7, #28
 800ff04:	46bd      	mov	sp, r7
 800ff06:	bc80      	pop	{r7}
 800ff08:	4770      	bx	lr

0800ff0a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800ff0a:	b580      	push	{r7, lr}
 800ff0c:	b088      	sub	sp, #32
 800ff0e:	af00      	add	r7, sp, #0
 800ff10:	6078      	str	r0, [r7, #4]
 800ff12:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 800ff14:	683b      	ldr	r3, [r7, #0]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	021b      	lsls	r3, r3, #8
 800ff1a:	0c1b      	lsrs	r3, r3, #16
 800ff1c:	617b      	str	r3, [r7, #20]
 800ff1e:	697b      	ldr	r3, [r7, #20]
 800ff20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ff22:	693b      	ldr	r3, [r7, #16]
 800ff24:	fa93 f3a3 	rbit	r3, r3
 800ff28:	60fb      	str	r3, [r7, #12]
  return result;
 800ff2a:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 800ff2c:	fab3 f383 	clz	r3, r3
 800ff30:	b2db      	uxtb	r3, r3
 800ff32:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 800ff34:	e044      	b.n	800ffc0 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 800ff36:	2201      	movs	r2, #1
 800ff38:	69fb      	ldr	r3, [r7, #28]
 800ff3a:	409a      	lsls	r2, r3
 800ff3c:	697b      	ldr	r3, [r7, #20]
 800ff3e:	4013      	ands	r3, r2
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d03a      	beq.n	800ffba <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 800ff44:	69fb      	ldr	r3, [r7, #28]
 800ff46:	2b07      	cmp	r3, #7
 800ff48:	d806      	bhi.n	800ff58 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 800ff4a:	f240 1201 	movw	r2, #257	; 0x101
 800ff4e:	69fb      	ldr	r3, [r7, #28]
 800ff50:	fa02 f303 	lsl.w	r3, r2, r3
 800ff54:	61bb      	str	r3, [r7, #24]
 800ff56:	e008      	b.n	800ff6a <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 800ff58:	69fb      	ldr	r3, [r7, #28]
 800ff5a:	3b08      	subs	r3, #8
 800ff5c:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800ff60:	fa02 f303 	lsl.w	r3, r2, r3
 800ff64:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ff68:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 800ff6a:	683b      	ldr	r3, [r7, #0]
 800ff6c:	685b      	ldr	r3, [r3, #4]
 800ff6e:	2b08      	cmp	r3, #8
 800ff70:	d106      	bne.n	800ff80 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800ff72:	683b      	ldr	r3, [r7, #0]
 800ff74:	691b      	ldr	r3, [r3, #16]
 800ff76:	461a      	mov	r2, r3
 800ff78:	69b9      	ldr	r1, [r7, #24]
 800ff7a:	6878      	ldr	r0, [r7, #4]
 800ff7c:	f7ff ffa3 	bl	800fec6 <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800ff80:	683b      	ldr	r3, [r7, #0]
 800ff82:	685b      	ldr	r3, [r3, #4]
 800ff84:	461a      	mov	r2, r3
 800ff86:	69b9      	ldr	r1, [r7, #24]
 800ff88:	6878      	ldr	r0, [r7, #4]
 800ff8a:	f7ff ff06 	bl	800fd9a <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800ff8e:	683b      	ldr	r3, [r7, #0]
 800ff90:	685b      	ldr	r3, [r3, #4]
 800ff92:	2b01      	cmp	r3, #1
 800ff94:	d003      	beq.n	800ff9e <LL_GPIO_Init+0x94>
 800ff96:	683b      	ldr	r3, [r7, #0]
 800ff98:	685b      	ldr	r3, [r3, #4]
 800ff9a:	2b09      	cmp	r3, #9
 800ff9c:	d10d      	bne.n	800ffba <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800ff9e:	683b      	ldr	r3, [r7, #0]
 800ffa0:	689b      	ldr	r3, [r3, #8]
 800ffa2:	461a      	mov	r2, r3
 800ffa4:	69b9      	ldr	r1, [r7, #24]
 800ffa6:	6878      	ldr	r0, [r7, #4]
 800ffa8:	f7ff ff29 	bl	800fdfe <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800ffac:	683b      	ldr	r3, [r7, #0]
 800ffae:	68db      	ldr	r3, [r3, #12]
 800ffb0:	461a      	mov	r2, r3
 800ffb2:	69b9      	ldr	r1, [r7, #24]
 800ffb4:	6878      	ldr	r0, [r7, #4]
 800ffb6:	f7ff ff54 	bl	800fe62 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 800ffba:	69fb      	ldr	r3, [r7, #28]
 800ffbc:	3301      	adds	r3, #1
 800ffbe:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 800ffc0:	697a      	ldr	r2, [r7, #20]
 800ffc2:	69fb      	ldr	r3, [r7, #28]
 800ffc4:	fa22 f303 	lsr.w	r3, r2, r3
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d1b4      	bne.n	800ff36 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 800ffcc:	2300      	movs	r3, #0
}
 800ffce:	4618      	mov	r0, r3
 800ffd0:	3720      	adds	r7, #32
 800ffd2:	46bd      	mov	sp, r7
 800ffd4:	bd80      	pop	{r7, pc}

0800ffd6 <LL_RTC_SetAsynchPrescaler>:
{
 800ffd6:	b480      	push	{r7}
 800ffd8:	b083      	sub	sp, #12
 800ffda:	af00      	add	r7, sp, #0
 800ffdc:	6078      	str	r0, [r7, #4]
 800ffde:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRLH, RTC_PRLH_PRL, (AsynchPrescaler >> 16));
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	689b      	ldr	r3, [r3, #8]
 800ffe4:	f023 020f 	bic.w	r2, r3, #15
 800ffe8:	683b      	ldr	r3, [r7, #0]
 800ffea:	0c1b      	lsrs	r3, r3, #16
 800ffec:	431a      	orrs	r2, r3
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RTCx->PRLL, RTC_PRLL_PRL, (AsynchPrescaler & RTC_PRLL_PRL));
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	68db      	ldr	r3, [r3, #12]
 800fff6:	0c1b      	lsrs	r3, r3, #16
 800fff8:	041b      	lsls	r3, r3, #16
 800fffa:	683a      	ldr	r2, [r7, #0]
 800fffc:	b292      	uxth	r2, r2
 800fffe:	431a      	orrs	r2, r3
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	60da      	str	r2, [r3, #12]
}
 8010004:	bf00      	nop
 8010006:	370c      	adds	r7, #12
 8010008:	46bd      	mov	sp, r7
 801000a:	bc80      	pop	{r7}
 801000c:	4770      	bx	lr

0801000e <LL_RTC_SetOutputSource>:
  *         @arg @ref LL_RTC_CALIB_OUTPUT_ALARM
  *         @arg @ref LL_RTC_CALIB_OUTPUT_SECOND
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetOutputSource(BKP_TypeDef *BKPx, uint32_t OutputSource)
{
 801000e:	b480      	push	{r7}
 8010010:	b083      	sub	sp, #12
 8010012:	af00      	add	r7, sp, #0
 8010014:	6078      	str	r0, [r7, #4]
 8010016:	6039      	str	r1, [r7, #0]
  MODIFY_REG(BKPx->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), OutputSource);
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801001c:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8010020:	683b      	ldr	r3, [r7, #0]
 8010022:	431a      	orrs	r2, r3
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8010028:	bf00      	nop
 801002a:	370c      	adds	r7, #12
 801002c:	46bd      	mov	sp, r7
 801002e:	bc80      	pop	{r7}
 8010030:	4770      	bx	lr

08010032 <LL_RTC_EnableWriteProtection>:
  * @rmtoll CRL          CNF           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8010032:	b480      	push	{r7}
 8010034:	b083      	sub	sp, #12
 8010036:	af00      	add	r7, sp, #0
 8010038:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RTCx->CRL, RTC_CRL_CNF);
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	685b      	ldr	r3, [r3, #4]
 801003e:	f023 0210 	bic.w	r2, r3, #16
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	605a      	str	r2, [r3, #4]
}
 8010046:	bf00      	nop
 8010048:	370c      	adds	r7, #12
 801004a:	46bd      	mov	sp, r7
 801004c:	bc80      	pop	{r7}
 801004e:	4770      	bx	lr

08010050 <LL_RTC_DisableWriteProtection>:
  * @rmtoll CRL          RTC_CRL_CNF           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8010050:	b480      	push	{r7}
 8010052:	b083      	sub	sp, #12
 8010054:	af00      	add	r7, sp, #0
 8010056:	6078      	str	r0, [r7, #4]
  SET_BIT(RTCx->CRL, RTC_CRL_CNF);
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	685b      	ldr	r3, [r3, #4]
 801005c:	f043 0210 	orr.w	r2, r3, #16
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	605a      	str	r2, [r3, #4]
}
 8010064:	bf00      	nop
 8010066:	370c      	adds	r7, #12
 8010068:	46bd      	mov	sp, r7
 801006a:	bc80      	pop	{r7}
 801006c:	4770      	bx	lr
	...

08010070 <LL_RTC_TAMPER_Disable>:
  * @brief  Disable RTC_TAMPx Tamper
  * @rmtoll CR    TPE        LL_RTC_TAMPER_Disable\n
  * @retval None
  */
__STATIC_INLINE void LL_RTC_TAMPER_Disable(BKP_TypeDef *BKPx)
{
 8010070:	b480      	push	{r7}
 8010072:	b083      	sub	sp, #12
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8010078:	4b05      	ldr	r3, [pc, #20]	; (8010090 <LL_RTC_TAMPER_Disable+0x20>)
 801007a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801007c:	4a04      	ldr	r2, [pc, #16]	; (8010090 <LL_RTC_TAMPER_Disable+0x20>)
 801007e:	f023 0301 	bic.w	r3, r3, #1
 8010082:	6313      	str	r3, [r2, #48]	; 0x30
}
 8010084:	bf00      	nop
 8010086:	370c      	adds	r7, #12
 8010088:	46bd      	mov	sp, r7
 801008a:	bc80      	pop	{r7}
 801008c:	4770      	bx	lr
 801008e:	bf00      	nop
 8010090:	40006c00 	.word	0x40006c00

08010094 <LL_RTC_ClearFlag_ALR>:
  * @rmtoll CRL          ALRF         LL_RTC_ClearFlag_ALR
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_ALR(RTC_TypeDef *RTCx)
{
 8010094:	b480      	push	{r7}
 8010096:	b083      	sub	sp, #12
 8010098:	af00      	add	r7, sp, #0
 801009a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RTCx->CRL, RTC_CRL_ALRF);
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	685b      	ldr	r3, [r3, #4]
 80100a0:	f023 0202 	bic.w	r2, r3, #2
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	605a      	str	r2, [r3, #4]
}
 80100a8:	bf00      	nop
 80100aa:	370c      	adds	r7, #12
 80100ac:	46bd      	mov	sp, r7
 80100ae:	bc80      	pop	{r7}
 80100b0:	4770      	bx	lr

080100b2 <LL_RTC_IsActiveFlag_RS>:
  * @rmtoll CRL          RSF           LL_RTC_IsActiveFlag_RS
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_RS(RTC_TypeDef *RTCx)
{
 80100b2:	b480      	push	{r7}
 80100b4:	b083      	sub	sp, #12
 80100b6:	af00      	add	r7, sp, #0
 80100b8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->CRL, RTC_CRL_RSF) == (RTC_CRL_RSF));
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	685b      	ldr	r3, [r3, #4]
 80100be:	f003 0308 	and.w	r3, r3, #8
 80100c2:	2b08      	cmp	r3, #8
 80100c4:	bf0c      	ite	eq
 80100c6:	2301      	moveq	r3, #1
 80100c8:	2300      	movne	r3, #0
 80100ca:	b2db      	uxtb	r3, r3
}
 80100cc:	4618      	mov	r0, r3
 80100ce:	370c      	adds	r7, #12
 80100d0:	46bd      	mov	sp, r7
 80100d2:	bc80      	pop	{r7}
 80100d4:	4770      	bx	lr

080100d6 <LL_RTC_ClearFlag_RS>:
  * @rmtoll CRL          RSF           LL_RTC_ClearFlag_RS
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_RS(RTC_TypeDef *RTCx)
{
 80100d6:	b480      	push	{r7}
 80100d8:	b083      	sub	sp, #12
 80100da:	af00      	add	r7, sp, #0
 80100dc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RTCx->CRL, RTC_CRL_RSF);
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	685b      	ldr	r3, [r3, #4]
 80100e2:	f023 0208 	bic.w	r2, r3, #8
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	605a      	str	r2, [r3, #4]
}
 80100ea:	bf00      	nop
 80100ec:	370c      	adds	r7, #12
 80100ee:	46bd      	mov	sp, r7
 80100f0:	bc80      	pop	{r7}
 80100f2:	4770      	bx	lr

080100f4 <LL_RTC_ClearFlag_OW>:
  * @rmtoll CRL          OWF           LL_RTC_ClearFlag_OW
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_OW(RTC_TypeDef *RTCx)
{
 80100f4:	b480      	push	{r7}
 80100f6:	b083      	sub	sp, #12
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RTCx->CRL, RTC_CRL_OWF);
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	685b      	ldr	r3, [r3, #4]
 8010100:	f023 0204 	bic.w	r2, r3, #4
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	605a      	str	r2, [r3, #4]
}
 8010108:	bf00      	nop
 801010a:	370c      	adds	r7, #12
 801010c:	46bd      	mov	sp, r7
 801010e:	bc80      	pop	{r7}
 8010110:	4770      	bx	lr

08010112 <LL_RTC_ClearFlag_SEC>:
  * @rmtoll CRL          SECF           LL_RTC_ClearFlag_SEC
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_SEC(RTC_TypeDef *RTCx)
{
 8010112:	b480      	push	{r7}
 8010114:	b083      	sub	sp, #12
 8010116:	af00      	add	r7, sp, #0
 8010118:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RTCx->CRL, RTC_CRL_SECF);
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	685b      	ldr	r3, [r3, #4]
 801011e:	f023 0201 	bic.w	r2, r3, #1
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	605a      	str	r2, [r3, #4]
}
 8010126:	bf00      	nop
 8010128:	370c      	adds	r7, #12
 801012a:	46bd      	mov	sp, r7
 801012c:	bc80      	pop	{r7}
 801012e:	4770      	bx	lr

08010130 <LL_RTC_IsActiveFlag_RTOF>:
  * @rmtoll CRL          RTOFF         LL_RTC_IsActiveFlag_RTOF
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_RTOF(RTC_TypeDef *RTCx)
{
 8010130:	b480      	push	{r7}
 8010132:	b083      	sub	sp, #12
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->CRL, RTC_CRL_RTOFF) == (RTC_CRL_RTOFF));
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	685b      	ldr	r3, [r3, #4]
 801013c:	f003 0320 	and.w	r3, r3, #32
 8010140:	2b20      	cmp	r3, #32
 8010142:	bf0c      	ite	eq
 8010144:	2301      	moveq	r3, #1
 8010146:	2300      	movne	r3, #0
 8010148:	b2db      	uxtb	r3, r3
}
 801014a:	4618      	mov	r0, r3
 801014c:	370c      	adds	r7, #12
 801014e:	46bd      	mov	sp, r7
 8010150:	bc80      	pop	{r7}
 8010152:	4770      	bx	lr

08010154 <LL_SYSTICK_IsActiveCounterFlag>:
  * @note   It can be used in timeout function on application side.
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 8010154:	b480      	push	{r7}
 8010156:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8010158:	4b06      	ldr	r3, [pc, #24]	; (8010174 <LL_SYSTICK_IsActiveCounterFlag+0x20>)
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010164:	bf0c      	ite	eq
 8010166:	2301      	moveq	r3, #1
 8010168:	2300      	movne	r3, #0
 801016a:	b2db      	uxtb	r3, r3
}
 801016c:	4618      	mov	r0, r3
 801016e:	46bd      	mov	sp, r7
 8010170:	bc80      	pop	{r7}
 8010172:	4770      	bx	lr
 8010174:	e000e010 	.word	0xe000e010

08010178 <LL_RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized
  */
ErrorStatus LL_RTC_Init(RTC_TypeDef *RTCx, LL_RTC_InitTypeDef *RTC_InitStruct)
{
 8010178:	b580      	push	{r7, lr}
 801017a:	b084      	sub	sp, #16
 801017c:	af00      	add	r7, sp, #0
 801017e:	6078      	str	r0, [r7, #4]
 8010180:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8010182:	2301      	movs	r3, #1
 8010184:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
  assert_param(IS_LL_RTC_ASYNCH_PREDIV(RTC_InitStruct->AsynchPrescaler));
  assert_param(IS_LL_RTC_CALIB_OUTPUT(RTC_InitStruct->OutPutSource));
  /* Waiting for synchro */
  if (LL_RTC_WaitForSynchro(RTCx) != ERROR)
 8010186:	6878      	ldr	r0, [r7, #4]
 8010188:	f000 f890 	bl	80102ac <LL_RTC_WaitForSynchro>
 801018c:	4603      	mov	r3, r0
 801018e:	2b01      	cmp	r3, #1
 8010190:	d026      	beq.n	80101e0 <LL_RTC_Init+0x68>
  {
    /* Set Initialization mode */
    if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8010192:	6878      	ldr	r0, [r7, #4]
 8010194:	f000 f82c 	bl	80101f0 <LL_RTC_EnterInitMode>
 8010198:	4603      	mov	r3, r0
 801019a:	2b01      	cmp	r3, #1
 801019c:	d020      	beq.n	80101e0 <LL_RTC_Init+0x68>
    {
      /* Clear Flag Bits */
      LL_RTC_ClearFlag_ALR(RTCx);
 801019e:	6878      	ldr	r0, [r7, #4]
 80101a0:	f7ff ff78 	bl	8010094 <LL_RTC_ClearFlag_ALR>
      LL_RTC_ClearFlag_OW(RTCx);
 80101a4:	6878      	ldr	r0, [r7, #4]
 80101a6:	f7ff ffa5 	bl	80100f4 <LL_RTC_ClearFlag_OW>
      LL_RTC_ClearFlag_SEC(RTCx);
 80101aa:	6878      	ldr	r0, [r7, #4]
 80101ac:	f7ff ffb1 	bl	8010112 <LL_RTC_ClearFlag_SEC>

      if (RTC_InitStruct->OutPutSource != LL_RTC_CALIB_OUTPUT_NONE)
 80101b0:	683b      	ldr	r3, [r7, #0]
 80101b2:	685b      	ldr	r3, [r3, #4]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d002      	beq.n	80101be <LL_RTC_Init+0x46>
      {
        /* Disable the selected Tamper Pin */
        LL_RTC_TAMPER_Disable(BKP);
 80101b8:	480c      	ldr	r0, [pc, #48]	; (80101ec <LL_RTC_Init+0x74>)
 80101ba:	f7ff ff59 	bl	8010070 <LL_RTC_TAMPER_Disable>
      }
      /* Set the signal which will be routed to RTC Tamper Pin */
      LL_RTC_SetOutputSource(BKP, RTC_InitStruct->OutPutSource);
 80101be:	683b      	ldr	r3, [r7, #0]
 80101c0:	685b      	ldr	r3, [r3, #4]
 80101c2:	4619      	mov	r1, r3
 80101c4:	4809      	ldr	r0, [pc, #36]	; (80101ec <LL_RTC_Init+0x74>)
 80101c6:	f7ff ff22 	bl	801000e <LL_RTC_SetOutputSource>

      /* Configure Synchronous and Asynchronous prescaler factor */
      LL_RTC_SetAsynchPrescaler(RTCx, RTC_InitStruct->AsynchPrescaler);
 80101ca:	683b      	ldr	r3, [r7, #0]
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	4619      	mov	r1, r3
 80101d0:	6878      	ldr	r0, [r7, #4]
 80101d2:	f7ff ff00 	bl	800ffd6 <LL_RTC_SetAsynchPrescaler>

      /* Exit Initialization Mode */
      LL_RTC_ExitInitMode(RTCx);
 80101d6:	6878      	ldr	r0, [r7, #4]
 80101d8:	f000 f839 	bl	801024e <LL_RTC_ExitInitMode>

      status = SUCCESS;
 80101dc:	2300      	movs	r3, #0
 80101de:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 80101e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80101e2:	4618      	mov	r0, r3
 80101e4:	3710      	adds	r7, #16
 80101e6:	46bd      	mov	sp, r7
 80101e8:	bd80      	pop	{r7, pc}
 80101ea:	bf00      	nop
 80101ec:	40006c00 	.word	0x40006c00

080101f0 <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 80101f0:	b580      	push	{r7, lr}
 80101f2:	b086      	sub	sp, #24
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 80101f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80101fc:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 80101fe:	2300      	movs	r3, #0
 8010200:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp = 0U;
 8010202:	2300      	movs	r3, #0
 8010204:	613b      	str	r3, [r7, #16]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Wait till RTC is in INIT state and if Time out is reached exit */
  tmp = LL_RTC_IsActiveFlag_RTOF(RTCx);
 8010206:	6878      	ldr	r0, [r7, #4]
 8010208:	f7ff ff92 	bl	8010130 <LL_RTC_IsActiveFlag_RTOF>
 801020c:	6138      	str	r0, [r7, #16]
  while ((timeout != 0U) && (tmp != 1U))
 801020e:	e010      	b.n	8010232 <LL_RTC_EnterInitMode+0x42>
  {
    if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8010210:	f7ff ffa0 	bl	8010154 <LL_SYSTICK_IsActiveCounterFlag>
 8010214:	4603      	mov	r3, r0
 8010216:	2b01      	cmp	r3, #1
 8010218:	d102      	bne.n	8010220 <LL_RTC_EnterInitMode+0x30>
    {
      timeout --;
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	3b01      	subs	r3, #1
 801021e:	60fb      	str	r3, [r7, #12]
    }
    tmp = LL_RTC_IsActiveFlag_RTOF(RTCx);
 8010220:	6878      	ldr	r0, [r7, #4]
 8010222:	f7ff ff85 	bl	8010130 <LL_RTC_IsActiveFlag_RTOF>
 8010226:	6138      	str	r0, [r7, #16]
    if (timeout == 0U)
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d101      	bne.n	8010232 <LL_RTC_EnterInitMode+0x42>
    {
      status = ERROR;
 801022e:	2301      	movs	r3, #1
 8010230:	75fb      	strb	r3, [r7, #23]
  while ((timeout != 0U) && (tmp != 1U))
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d002      	beq.n	801023e <LL_RTC_EnterInitMode+0x4e>
 8010238:	693b      	ldr	r3, [r7, #16]
 801023a:	2b01      	cmp	r3, #1
 801023c:	d1e8      	bne.n	8010210 <LL_RTC_EnterInitMode+0x20>
    }
  }

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 801023e:	6878      	ldr	r0, [r7, #4]
 8010240:	f7ff ff06 	bl	8010050 <LL_RTC_DisableWriteProtection>

  return status;
 8010244:	7dfb      	ldrb	r3, [r7, #23]
}
 8010246:	4618      	mov	r0, r3
 8010248:	3718      	adds	r7, #24
 801024a:	46bd      	mov	sp, r7
 801024c:	bd80      	pop	{r7, pc}

0801024e <LL_RTC_ExitInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC exited from in Init mode
  *          - ERROR: Not applicable
  */
ErrorStatus LL_RTC_ExitInitMode(RTC_TypeDef *RTCx)
{
 801024e:	b580      	push	{r7, lr}
 8010250:	b086      	sub	sp, #24
 8010252:	af00      	add	r7, sp, #0
 8010254:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 8010256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801025a:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 801025c:	2300      	movs	r3, #0
 801025e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp = 0U;
 8010260:	2300      	movs	r3, #0
 8010262:	613b      	str	r3, [r7, #16]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Disable initialization mode */
  LL_RTC_EnableWriteProtection(RTCx);
 8010264:	6878      	ldr	r0, [r7, #4]
 8010266:	f7ff fee4 	bl	8010032 <LL_RTC_EnableWriteProtection>

  /* Wait till RTC is in INIT state and if Time out is reached exit */
  tmp = LL_RTC_IsActiveFlag_RTOF(RTCx);
 801026a:	6878      	ldr	r0, [r7, #4]
 801026c:	f7ff ff60 	bl	8010130 <LL_RTC_IsActiveFlag_RTOF>
 8010270:	6138      	str	r0, [r7, #16]
  while ((timeout != 0U) && (tmp != 1U))
 8010272:	e010      	b.n	8010296 <LL_RTC_ExitInitMode+0x48>
  {
    if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8010274:	f7ff ff6e 	bl	8010154 <LL_SYSTICK_IsActiveCounterFlag>
 8010278:	4603      	mov	r3, r0
 801027a:	2b01      	cmp	r3, #1
 801027c:	d102      	bne.n	8010284 <LL_RTC_ExitInitMode+0x36>
    {
      timeout --;
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	3b01      	subs	r3, #1
 8010282:	60fb      	str	r3, [r7, #12]
    }
    tmp = LL_RTC_IsActiveFlag_RTOF(RTCx);
 8010284:	6878      	ldr	r0, [r7, #4]
 8010286:	f7ff ff53 	bl	8010130 <LL_RTC_IsActiveFlag_RTOF>
 801028a:	6138      	str	r0, [r7, #16]
    if (timeout == 0U)
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	2b00      	cmp	r3, #0
 8010290:	d101      	bne.n	8010296 <LL_RTC_ExitInitMode+0x48>
    {
      status = ERROR;
 8010292:	2301      	movs	r3, #1
 8010294:	75fb      	strb	r3, [r7, #23]
  while ((timeout != 0U) && (tmp != 1U))
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d002      	beq.n	80102a2 <LL_RTC_ExitInitMode+0x54>
 801029c:	693b      	ldr	r3, [r7, #16]
 801029e:	2b01      	cmp	r3, #1
 80102a0:	d1e8      	bne.n	8010274 <LL_RTC_ExitInitMode+0x26>
    }
  }
  return status;
 80102a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80102a4:	4618      	mov	r0, r3
 80102a6:	3718      	adds	r7, #24
 80102a8:	46bd      	mov	sp, r7
 80102aa:	bd80      	pop	{r7, pc}

080102ac <LL_RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus LL_RTC_WaitForSynchro(RTC_TypeDef *RTCx)
{
 80102ac:	b580      	push	{r7, lr}
 80102ae:	b086      	sub	sp, #24
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_SYNCHRO_TIMEOUT;
 80102b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80102b8:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 80102ba:	2300      	movs	r3, #0
 80102bc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp = 0U;
 80102be:	2300      	movs	r3, #0
 80102c0:	613b      	str	r3, [r7, #16]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Clear RSF flag */
  LL_RTC_ClearFlag_RS(RTCx);
 80102c2:	6878      	ldr	r0, [r7, #4]
 80102c4:	f7ff ff07 	bl	80100d6 <LL_RTC_ClearFlag_RS>

  /* Wait the registers to be synchronised */
  tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 80102c8:	6878      	ldr	r0, [r7, #4]
 80102ca:	f7ff fef2 	bl	80100b2 <LL_RTC_IsActiveFlag_RS>
 80102ce:	6138      	str	r0, [r7, #16]
  while ((timeout != 0U) && (tmp != 0U))
 80102d0:	e010      	b.n	80102f4 <LL_RTC_WaitForSynchro+0x48>
  {
    if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 80102d2:	f7ff ff3f 	bl	8010154 <LL_SYSTICK_IsActiveCounterFlag>
 80102d6:	4603      	mov	r3, r0
 80102d8:	2b01      	cmp	r3, #1
 80102da:	d102      	bne.n	80102e2 <LL_RTC_WaitForSynchro+0x36>
    {
      timeout--;
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	3b01      	subs	r3, #1
 80102e0:	60fb      	str	r3, [r7, #12]
    }
    tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 80102e2:	6878      	ldr	r0, [r7, #4]
 80102e4:	f7ff fee5 	bl	80100b2 <LL_RTC_IsActiveFlag_RS>
 80102e8:	6138      	str	r0, [r7, #16]
    if (timeout == 0U)
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d101      	bne.n	80102f4 <LL_RTC_WaitForSynchro+0x48>
    {
      status = ERROR;
 80102f0:	2301      	movs	r3, #1
 80102f2:	75fb      	strb	r3, [r7, #23]
  while ((timeout != 0U) && (tmp != 0U))
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d002      	beq.n	8010300 <LL_RTC_WaitForSynchro+0x54>
 80102fa:	693b      	ldr	r3, [r7, #16]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d1e8      	bne.n	80102d2 <LL_RTC_WaitForSynchro+0x26>
    }
  }

  return (status);
 8010300:	7dfb      	ldrb	r3, [r7, #23]
}
 8010302:	4618      	mov	r0, r3
 8010304:	3718      	adds	r7, #24
 8010306:	46bd      	mov	sp, r7
 8010308:	bd80      	pop	{r7, pc}

0801030a <LL_SPI_IsEnabled>:
{
 801030a:	b480      	push	{r7}
 801030c:	b083      	sub	sp, #12
 801030e:	af00      	add	r7, sp, #0
 8010310:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801031a:	2b40      	cmp	r3, #64	; 0x40
 801031c:	d101      	bne.n	8010322 <LL_SPI_IsEnabled+0x18>
 801031e:	2301      	movs	r3, #1
 8010320:	e000      	b.n	8010324 <LL_SPI_IsEnabled+0x1a>
 8010322:	2300      	movs	r3, #0
}
 8010324:	4618      	mov	r0, r3
 8010326:	370c      	adds	r7, #12
 8010328:	46bd      	mov	sp, r7
 801032a:	bc80      	pop	{r7}
 801032c:	4770      	bx	lr

0801032e <LL_SPI_SetCRCPolynomial>:
{
 801032e:	b480      	push	{r7}
 8010330:	b083      	sub	sp, #12
 8010332:	af00      	add	r7, sp, #0
 8010334:	6078      	str	r0, [r7, #4]
 8010336:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8010338:	683b      	ldr	r3, [r7, #0]
 801033a:	b29b      	uxth	r3, r3
 801033c:	461a      	mov	r2, r3
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	611a      	str	r2, [r3, #16]
}
 8010342:	bf00      	nop
 8010344:	370c      	adds	r7, #12
 8010346:	46bd      	mov	sp, r7
 8010348:	bc80      	pop	{r7}
 801034a:	4770      	bx	lr

0801034c <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 801034c:	b580      	push	{r7, lr}
 801034e:	b084      	sub	sp, #16
 8010350:	af00      	add	r7, sp, #0
 8010352:	6078      	str	r0, [r7, #4]
 8010354:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8010356:	2301      	movs	r3, #1
 8010358:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 801035a:	6878      	ldr	r0, [r7, #4]
 801035c:	f7ff ffd5 	bl	801030a <LL_SPI_IsEnabled>
 8010360:	4603      	mov	r3, r0
 8010362:	2b00      	cmp	r3, #0
 8010364:	d139      	bne.n	80103da <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801036e:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8010372:	683a      	ldr	r2, [r7, #0]
 8010374:	6811      	ldr	r1, [r2, #0]
 8010376:	683a      	ldr	r2, [r7, #0]
 8010378:	6852      	ldr	r2, [r2, #4]
 801037a:	4311      	orrs	r1, r2
 801037c:	683a      	ldr	r2, [r7, #0]
 801037e:	6892      	ldr	r2, [r2, #8]
 8010380:	4311      	orrs	r1, r2
 8010382:	683a      	ldr	r2, [r7, #0]
 8010384:	68d2      	ldr	r2, [r2, #12]
 8010386:	4311      	orrs	r1, r2
 8010388:	683a      	ldr	r2, [r7, #0]
 801038a:	6912      	ldr	r2, [r2, #16]
 801038c:	4311      	orrs	r1, r2
 801038e:	683a      	ldr	r2, [r7, #0]
 8010390:	6952      	ldr	r2, [r2, #20]
 8010392:	4311      	orrs	r1, r2
 8010394:	683a      	ldr	r2, [r7, #0]
 8010396:	6992      	ldr	r2, [r2, #24]
 8010398:	4311      	orrs	r1, r2
 801039a:	683a      	ldr	r2, [r7, #0]
 801039c:	69d2      	ldr	r2, [r2, #28]
 801039e:	4311      	orrs	r1, r2
 80103a0:	683a      	ldr	r2, [r7, #0]
 80103a2:	6a12      	ldr	r2, [r2, #32]
 80103a4:	430a      	orrs	r2, r1
 80103a6:	431a      	orrs	r2, r3
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	685b      	ldr	r3, [r3, #4]
 80103b0:	f023 0204 	bic.w	r2, r3, #4
 80103b4:	683b      	ldr	r3, [r7, #0]
 80103b6:	695b      	ldr	r3, [r3, #20]
 80103b8:	0c1b      	lsrs	r3, r3, #16
 80103ba:	431a      	orrs	r2, r3
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80103c0:	683b      	ldr	r3, [r7, #0]
 80103c2:	6a1b      	ldr	r3, [r3, #32]
 80103c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80103c8:	d105      	bne.n	80103d6 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80103ca:	683b      	ldr	r3, [r7, #0]
 80103cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103ce:	4619      	mov	r1, r3
 80103d0:	6878      	ldr	r0, [r7, #4]
 80103d2:	f7ff ffac 	bl	801032e <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80103d6:	2300      	movs	r3, #0
 80103d8:	73fb      	strb	r3, [r7, #15]
  }

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	69db      	ldr	r3, [r3, #28]
 80103de:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2S_SUPPORT */
  return status;
 80103e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80103e8:	4618      	mov	r0, r3
 80103ea:	3710      	adds	r7, #16
 80103ec:	46bd      	mov	sp, r7
 80103ee:	bd80      	pop	{r7, pc}

080103f0 <LL_TIM_SetPrescaler>:
{
 80103f0:	b480      	push	{r7}
 80103f2:	b083      	sub	sp, #12
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
 80103f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	683a      	ldr	r2, [r7, #0]
 80103fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8010400:	bf00      	nop
 8010402:	370c      	adds	r7, #12
 8010404:	46bd      	mov	sp, r7
 8010406:	bc80      	pop	{r7}
 8010408:	4770      	bx	lr

0801040a <LL_TIM_SetAutoReload>:
{
 801040a:	b480      	push	{r7}
 801040c:	b083      	sub	sp, #12
 801040e:	af00      	add	r7, sp, #0
 8010410:	6078      	str	r0, [r7, #4]
 8010412:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	683a      	ldr	r2, [r7, #0]
 8010418:	62da      	str	r2, [r3, #44]	; 0x2c
}
 801041a:	bf00      	nop
 801041c:	370c      	adds	r7, #12
 801041e:	46bd      	mov	sp, r7
 8010420:	bc80      	pop	{r7}
 8010422:	4770      	bx	lr

08010424 <LL_TIM_SetRepetitionCounter>:
{
 8010424:	b480      	push	{r7}
 8010426:	b083      	sub	sp, #12
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
 801042c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	683a      	ldr	r2, [r7, #0]
 8010432:	631a      	str	r2, [r3, #48]	; 0x30
}
 8010434:	bf00      	nop
 8010436:	370c      	adds	r7, #12
 8010438:	46bd      	mov	sp, r7
 801043a:	bc80      	pop	{r7}
 801043c:	4770      	bx	lr

0801043e <LL_TIM_OC_SetCompareCH1>:
{
 801043e:	b480      	push	{r7}
 8010440:	b083      	sub	sp, #12
 8010442:	af00      	add	r7, sp, #0
 8010444:	6078      	str	r0, [r7, #4]
 8010446:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	683a      	ldr	r2, [r7, #0]
 801044c:	635a      	str	r2, [r3, #52]	; 0x34
}
 801044e:	bf00      	nop
 8010450:	370c      	adds	r7, #12
 8010452:	46bd      	mov	sp, r7
 8010454:	bc80      	pop	{r7}
 8010456:	4770      	bx	lr

08010458 <LL_TIM_OC_SetCompareCH2>:
{
 8010458:	b480      	push	{r7}
 801045a:	b083      	sub	sp, #12
 801045c:	af00      	add	r7, sp, #0
 801045e:	6078      	str	r0, [r7, #4]
 8010460:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	683a      	ldr	r2, [r7, #0]
 8010466:	639a      	str	r2, [r3, #56]	; 0x38
}
 8010468:	bf00      	nop
 801046a:	370c      	adds	r7, #12
 801046c:	46bd      	mov	sp, r7
 801046e:	bc80      	pop	{r7}
 8010470:	4770      	bx	lr

08010472 <LL_TIM_OC_SetCompareCH3>:
{
 8010472:	b480      	push	{r7}
 8010474:	b083      	sub	sp, #12
 8010476:	af00      	add	r7, sp, #0
 8010478:	6078      	str	r0, [r7, #4]
 801047a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	683a      	ldr	r2, [r7, #0]
 8010480:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8010482:	bf00      	nop
 8010484:	370c      	adds	r7, #12
 8010486:	46bd      	mov	sp, r7
 8010488:	bc80      	pop	{r7}
 801048a:	4770      	bx	lr

0801048c <LL_TIM_OC_SetCompareCH4>:
{
 801048c:	b480      	push	{r7}
 801048e:	b083      	sub	sp, #12
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
 8010494:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	683a      	ldr	r2, [r7, #0]
 801049a:	641a      	str	r2, [r3, #64]	; 0x40
}
 801049c:	bf00      	nop
 801049e:	370c      	adds	r7, #12
 80104a0:	46bd      	mov	sp, r7
 80104a2:	bc80      	pop	{r7}
 80104a4:	4770      	bx	lr

080104a6 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80104a6:	b480      	push	{r7}
 80104a8:	b083      	sub	sp, #12
 80104aa:	af00      	add	r7, sp, #0
 80104ac:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	695b      	ldr	r3, [r3, #20]
 80104b2:	f043 0201 	orr.w	r2, r3, #1
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	615a      	str	r2, [r3, #20]
}
 80104ba:	bf00      	nop
 80104bc:	370c      	adds	r7, #12
 80104be:	46bd      	mov	sp, r7
 80104c0:	bc80      	pop	{r7}
 80104c2:	4770      	bx	lr

080104c4 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80104c4:	b580      	push	{r7, lr}
 80104c6:	b084      	sub	sp, #16
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	6078      	str	r0, [r7, #4]
 80104cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	4a31      	ldr	r2, [pc, #196]	; (801059c <LL_TIM_Init+0xd8>)
 80104d8:	4293      	cmp	r3, r2
 80104da:	d013      	beq.n	8010504 <LL_TIM_Init+0x40>
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	4a30      	ldr	r2, [pc, #192]	; (80105a0 <LL_TIM_Init+0xdc>)
 80104e0:	4293      	cmp	r3, r2
 80104e2:	d00f      	beq.n	8010504 <LL_TIM_Init+0x40>
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80104ea:	d00b      	beq.n	8010504 <LL_TIM_Init+0x40>
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	4a2d      	ldr	r2, [pc, #180]	; (80105a4 <LL_TIM_Init+0xe0>)
 80104f0:	4293      	cmp	r3, r2
 80104f2:	d007      	beq.n	8010504 <LL_TIM_Init+0x40>
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	4a2c      	ldr	r2, [pc, #176]	; (80105a8 <LL_TIM_Init+0xe4>)
 80104f8:	4293      	cmp	r3, r2
 80104fa:	d003      	beq.n	8010504 <LL_TIM_Init+0x40>
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	4a2b      	ldr	r2, [pc, #172]	; (80105ac <LL_TIM_Init+0xe8>)
 8010500:	4293      	cmp	r3, r2
 8010502:	d106      	bne.n	8010512 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801050a:	683b      	ldr	r3, [r7, #0]
 801050c:	685b      	ldr	r3, [r3, #4]
 801050e:	4313      	orrs	r3, r2
 8010510:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	4a21      	ldr	r2, [pc, #132]	; (801059c <LL_TIM_Init+0xd8>)
 8010516:	4293      	cmp	r3, r2
 8010518:	d013      	beq.n	8010542 <LL_TIM_Init+0x7e>
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	4a20      	ldr	r2, [pc, #128]	; (80105a0 <LL_TIM_Init+0xdc>)
 801051e:	4293      	cmp	r3, r2
 8010520:	d00f      	beq.n	8010542 <LL_TIM_Init+0x7e>
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010528:	d00b      	beq.n	8010542 <LL_TIM_Init+0x7e>
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	4a1d      	ldr	r2, [pc, #116]	; (80105a4 <LL_TIM_Init+0xe0>)
 801052e:	4293      	cmp	r3, r2
 8010530:	d007      	beq.n	8010542 <LL_TIM_Init+0x7e>
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	4a1c      	ldr	r2, [pc, #112]	; (80105a8 <LL_TIM_Init+0xe4>)
 8010536:	4293      	cmp	r3, r2
 8010538:	d003      	beq.n	8010542 <LL_TIM_Init+0x7e>
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	4a1b      	ldr	r2, [pc, #108]	; (80105ac <LL_TIM_Init+0xe8>)
 801053e:	4293      	cmp	r3, r2
 8010540:	d106      	bne.n	8010550 <LL_TIM_Init+0x8c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8010548:	683b      	ldr	r3, [r7, #0]
 801054a:	68db      	ldr	r3, [r3, #12]
 801054c:	4313      	orrs	r3, r2
 801054e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	68fa      	ldr	r2, [r7, #12]
 8010554:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8010556:	683b      	ldr	r3, [r7, #0]
 8010558:	689b      	ldr	r3, [r3, #8]
 801055a:	4619      	mov	r1, r3
 801055c:	6878      	ldr	r0, [r7, #4]
 801055e:	f7ff ff54 	bl	801040a <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8010562:	683b      	ldr	r3, [r7, #0]
 8010564:	881b      	ldrh	r3, [r3, #0]
 8010566:	4619      	mov	r1, r3
 8010568:	6878      	ldr	r0, [r7, #4]
 801056a:	f7ff ff41 	bl	80103f0 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	4a0a      	ldr	r2, [pc, #40]	; (801059c <LL_TIM_Init+0xd8>)
 8010572:	4293      	cmp	r3, r2
 8010574:	d003      	beq.n	801057e <LL_TIM_Init+0xba>
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	4a09      	ldr	r2, [pc, #36]	; (80105a0 <LL_TIM_Init+0xdc>)
 801057a:	4293      	cmp	r3, r2
 801057c:	d105      	bne.n	801058a <LL_TIM_Init+0xc6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 801057e:	683b      	ldr	r3, [r7, #0]
 8010580:	691b      	ldr	r3, [r3, #16]
 8010582:	4619      	mov	r1, r3
 8010584:	6878      	ldr	r0, [r7, #4]
 8010586:	f7ff ff4d 	bl	8010424 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 801058a:	6878      	ldr	r0, [r7, #4]
 801058c:	f7ff ff8b 	bl	80104a6 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8010590:	2300      	movs	r3, #0
}
 8010592:	4618      	mov	r0, r3
 8010594:	3710      	adds	r7, #16
 8010596:	46bd      	mov	sp, r7
 8010598:	bd80      	pop	{r7, pc}
 801059a:	bf00      	nop
 801059c:	40012c00 	.word	0x40012c00
 80105a0:	40013400 	.word	0x40013400
 80105a4:	40000400 	.word	0x40000400
 80105a8:	40000800 	.word	0x40000800
 80105ac:	40000c00 	.word	0x40000c00

080105b0 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80105b0:	b580      	push	{r7, lr}
 80105b2:	b086      	sub	sp, #24
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	60f8      	str	r0, [r7, #12]
 80105b8:	60b9      	str	r1, [r7, #8]
 80105ba:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80105bc:	2301      	movs	r3, #1
 80105be:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80105c0:	68bb      	ldr	r3, [r7, #8]
 80105c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80105c6:	d027      	beq.n	8010618 <LL_TIM_OC_Init+0x68>
 80105c8:	68bb      	ldr	r3, [r7, #8]
 80105ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80105ce:	d82a      	bhi.n	8010626 <LL_TIM_OC_Init+0x76>
 80105d0:	68bb      	ldr	r3, [r7, #8]
 80105d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80105d6:	d018      	beq.n	801060a <LL_TIM_OC_Init+0x5a>
 80105d8:	68bb      	ldr	r3, [r7, #8]
 80105da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80105de:	d822      	bhi.n	8010626 <LL_TIM_OC_Init+0x76>
 80105e0:	68bb      	ldr	r3, [r7, #8]
 80105e2:	2b01      	cmp	r3, #1
 80105e4:	d003      	beq.n	80105ee <LL_TIM_OC_Init+0x3e>
 80105e6:	68bb      	ldr	r3, [r7, #8]
 80105e8:	2b10      	cmp	r3, #16
 80105ea:	d007      	beq.n	80105fc <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80105ec:	e01b      	b.n	8010626 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80105ee:	6879      	ldr	r1, [r7, #4]
 80105f0:	68f8      	ldr	r0, [r7, #12]
 80105f2:	f000 f81f 	bl	8010634 <OC1Config>
 80105f6:	4603      	mov	r3, r0
 80105f8:	75fb      	strb	r3, [r7, #23]
      break;
 80105fa:	e015      	b.n	8010628 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80105fc:	6879      	ldr	r1, [r7, #4]
 80105fe:	68f8      	ldr	r0, [r7, #12]
 8010600:	f000 f884 	bl	801070c <OC2Config>
 8010604:	4603      	mov	r3, r0
 8010606:	75fb      	strb	r3, [r7, #23]
      break;
 8010608:	e00e      	b.n	8010628 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 801060a:	6879      	ldr	r1, [r7, #4]
 801060c:	68f8      	ldr	r0, [r7, #12]
 801060e:	f000 f8ed 	bl	80107ec <OC3Config>
 8010612:	4603      	mov	r3, r0
 8010614:	75fb      	strb	r3, [r7, #23]
      break;
 8010616:	e007      	b.n	8010628 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8010618:	6879      	ldr	r1, [r7, #4]
 801061a:	68f8      	ldr	r0, [r7, #12]
 801061c:	f000 f956 	bl	80108cc <OC4Config>
 8010620:	4603      	mov	r3, r0
 8010622:	75fb      	strb	r3, [r7, #23]
      break;
 8010624:	e000      	b.n	8010628 <LL_TIM_OC_Init+0x78>
      break;
 8010626:	bf00      	nop
  }

  return result;
 8010628:	7dfb      	ldrb	r3, [r7, #23]
}
 801062a:	4618      	mov	r0, r3
 801062c:	3718      	adds	r7, #24
 801062e:	46bd      	mov	sp, r7
 8010630:	bd80      	pop	{r7, pc}
	...

08010634 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8010634:	b580      	push	{r7, lr}
 8010636:	b086      	sub	sp, #24
 8010638:	af00      	add	r7, sp, #0
 801063a:	6078      	str	r0, [r7, #4]
 801063c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	6a1b      	ldr	r3, [r3, #32]
 8010642:	f023 0201 	bic.w	r2, r3, #1
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	6a1b      	ldr	r3, [r3, #32]
 801064e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	685b      	ldr	r3, [r3, #4]
 8010654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	699b      	ldr	r3, [r3, #24]
 801065a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	f023 0303 	bic.w	r3, r3, #3
 8010662:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801066a:	683b      	ldr	r3, [r7, #0]
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	4313      	orrs	r3, r2
 8010670:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8010672:	697b      	ldr	r3, [r7, #20]
 8010674:	f023 0202 	bic.w	r2, r3, #2
 8010678:	683b      	ldr	r3, [r7, #0]
 801067a:	691b      	ldr	r3, [r3, #16]
 801067c:	4313      	orrs	r3, r2
 801067e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8010680:	697b      	ldr	r3, [r7, #20]
 8010682:	f023 0201 	bic.w	r2, r3, #1
 8010686:	683b      	ldr	r3, [r7, #0]
 8010688:	685b      	ldr	r3, [r3, #4]
 801068a:	4313      	orrs	r3, r2
 801068c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	4a1c      	ldr	r2, [pc, #112]	; (8010704 <OC1Config+0xd0>)
 8010692:	4293      	cmp	r3, r2
 8010694:	d003      	beq.n	801069e <OC1Config+0x6a>
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	4a1b      	ldr	r2, [pc, #108]	; (8010708 <OC1Config+0xd4>)
 801069a:	4293      	cmp	r3, r2
 801069c:	d11e      	bne.n	80106dc <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 801069e:	697b      	ldr	r3, [r7, #20]
 80106a0:	f023 0208 	bic.w	r2, r3, #8
 80106a4:	683b      	ldr	r3, [r7, #0]
 80106a6:	695b      	ldr	r3, [r3, #20]
 80106a8:	009b      	lsls	r3, r3, #2
 80106aa:	4313      	orrs	r3, r2
 80106ac:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80106ae:	697b      	ldr	r3, [r7, #20]
 80106b0:	f023 0204 	bic.w	r2, r3, #4
 80106b4:	683b      	ldr	r3, [r7, #0]
 80106b6:	689b      	ldr	r3, [r3, #8]
 80106b8:	009b      	lsls	r3, r3, #2
 80106ba:	4313      	orrs	r3, r2
 80106bc:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80106be:	693b      	ldr	r3, [r7, #16]
 80106c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80106c4:	683b      	ldr	r3, [r7, #0]
 80106c6:	699b      	ldr	r3, [r3, #24]
 80106c8:	4313      	orrs	r3, r2
 80106ca:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80106cc:	693b      	ldr	r3, [r7, #16]
 80106ce:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80106d2:	683b      	ldr	r3, [r7, #0]
 80106d4:	69db      	ldr	r3, [r3, #28]
 80106d6:	005b      	lsls	r3, r3, #1
 80106d8:	4313      	orrs	r3, r2
 80106da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	693a      	ldr	r2, [r7, #16]
 80106e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	68fa      	ldr	r2, [r7, #12]
 80106e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80106e8:	683b      	ldr	r3, [r7, #0]
 80106ea:	68db      	ldr	r3, [r3, #12]
 80106ec:	4619      	mov	r1, r3
 80106ee:	6878      	ldr	r0, [r7, #4]
 80106f0:	f7ff fea5 	bl	801043e <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	697a      	ldr	r2, [r7, #20]
 80106f8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80106fa:	2300      	movs	r3, #0
}
 80106fc:	4618      	mov	r0, r3
 80106fe:	3718      	adds	r7, #24
 8010700:	46bd      	mov	sp, r7
 8010702:	bd80      	pop	{r7, pc}
 8010704:	40012c00 	.word	0x40012c00
 8010708:	40013400 	.word	0x40013400

0801070c <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 801070c:	b580      	push	{r7, lr}
 801070e:	b086      	sub	sp, #24
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
 8010714:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	6a1b      	ldr	r3, [r3, #32]
 801071a:	f023 0210 	bic.w	r2, r3, #16
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	6a1b      	ldr	r3, [r3, #32]
 8010726:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	685b      	ldr	r3, [r3, #4]
 801072c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	699b      	ldr	r3, [r3, #24]
 8010732:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801073a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8010742:	683b      	ldr	r3, [r7, #0]
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	021b      	lsls	r3, r3, #8
 8010748:	4313      	orrs	r3, r2
 801074a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 801074c:	697b      	ldr	r3, [r7, #20]
 801074e:	f023 0220 	bic.w	r2, r3, #32
 8010752:	683b      	ldr	r3, [r7, #0]
 8010754:	691b      	ldr	r3, [r3, #16]
 8010756:	011b      	lsls	r3, r3, #4
 8010758:	4313      	orrs	r3, r2
 801075a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 801075c:	697b      	ldr	r3, [r7, #20]
 801075e:	f023 0210 	bic.w	r2, r3, #16
 8010762:	683b      	ldr	r3, [r7, #0]
 8010764:	685b      	ldr	r3, [r3, #4]
 8010766:	011b      	lsls	r3, r3, #4
 8010768:	4313      	orrs	r3, r2
 801076a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	4a1d      	ldr	r2, [pc, #116]	; (80107e4 <OC2Config+0xd8>)
 8010770:	4293      	cmp	r3, r2
 8010772:	d003      	beq.n	801077c <OC2Config+0x70>
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	4a1c      	ldr	r2, [pc, #112]	; (80107e8 <OC2Config+0xdc>)
 8010778:	4293      	cmp	r3, r2
 801077a:	d11f      	bne.n	80107bc <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 801077c:	697b      	ldr	r3, [r7, #20]
 801077e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010782:	683b      	ldr	r3, [r7, #0]
 8010784:	695b      	ldr	r3, [r3, #20]
 8010786:	019b      	lsls	r3, r3, #6
 8010788:	4313      	orrs	r3, r2
 801078a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 801078c:	697b      	ldr	r3, [r7, #20]
 801078e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8010792:	683b      	ldr	r3, [r7, #0]
 8010794:	689b      	ldr	r3, [r3, #8]
 8010796:	019b      	lsls	r3, r3, #6
 8010798:	4313      	orrs	r3, r2
 801079a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 801079c:	693b      	ldr	r3, [r7, #16]
 801079e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80107a2:	683b      	ldr	r3, [r7, #0]
 80107a4:	699b      	ldr	r3, [r3, #24]
 80107a6:	009b      	lsls	r3, r3, #2
 80107a8:	4313      	orrs	r3, r2
 80107aa:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80107ac:	693b      	ldr	r3, [r7, #16]
 80107ae:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80107b2:	683b      	ldr	r3, [r7, #0]
 80107b4:	69db      	ldr	r3, [r3, #28]
 80107b6:	00db      	lsls	r3, r3, #3
 80107b8:	4313      	orrs	r3, r2
 80107ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	693a      	ldr	r2, [r7, #16]
 80107c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	68fa      	ldr	r2, [r7, #12]
 80107c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80107c8:	683b      	ldr	r3, [r7, #0]
 80107ca:	68db      	ldr	r3, [r3, #12]
 80107cc:	4619      	mov	r1, r3
 80107ce:	6878      	ldr	r0, [r7, #4]
 80107d0:	f7ff fe42 	bl	8010458 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	697a      	ldr	r2, [r7, #20]
 80107d8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80107da:	2300      	movs	r3, #0
}
 80107dc:	4618      	mov	r0, r3
 80107de:	3718      	adds	r7, #24
 80107e0:	46bd      	mov	sp, r7
 80107e2:	bd80      	pop	{r7, pc}
 80107e4:	40012c00 	.word	0x40012c00
 80107e8:	40013400 	.word	0x40013400

080107ec <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80107ec:	b580      	push	{r7, lr}
 80107ee:	b086      	sub	sp, #24
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	6078      	str	r0, [r7, #4]
 80107f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	6a1b      	ldr	r3, [r3, #32]
 80107fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	6a1b      	ldr	r3, [r3, #32]
 8010806:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	685b      	ldr	r3, [r3, #4]
 801080c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	69db      	ldr	r3, [r3, #28]
 8010812:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	f023 0303 	bic.w	r3, r3, #3
 801081a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8010822:	683b      	ldr	r3, [r7, #0]
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	4313      	orrs	r3, r2
 8010828:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 801082a:	697b      	ldr	r3, [r7, #20]
 801082c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8010830:	683b      	ldr	r3, [r7, #0]
 8010832:	691b      	ldr	r3, [r3, #16]
 8010834:	021b      	lsls	r3, r3, #8
 8010836:	4313      	orrs	r3, r2
 8010838:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 801083a:	697b      	ldr	r3, [r7, #20]
 801083c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010840:	683b      	ldr	r3, [r7, #0]
 8010842:	685b      	ldr	r3, [r3, #4]
 8010844:	021b      	lsls	r3, r3, #8
 8010846:	4313      	orrs	r3, r2
 8010848:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	4a1d      	ldr	r2, [pc, #116]	; (80108c4 <OC3Config+0xd8>)
 801084e:	4293      	cmp	r3, r2
 8010850:	d003      	beq.n	801085a <OC3Config+0x6e>
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	4a1c      	ldr	r2, [pc, #112]	; (80108c8 <OC3Config+0xdc>)
 8010856:	4293      	cmp	r3, r2
 8010858:	d11f      	bne.n	801089a <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 801085a:	697b      	ldr	r3, [r7, #20]
 801085c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8010860:	683b      	ldr	r3, [r7, #0]
 8010862:	695b      	ldr	r3, [r3, #20]
 8010864:	029b      	lsls	r3, r3, #10
 8010866:	4313      	orrs	r3, r2
 8010868:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 801086a:	697b      	ldr	r3, [r7, #20]
 801086c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8010870:	683b      	ldr	r3, [r7, #0]
 8010872:	689b      	ldr	r3, [r3, #8]
 8010874:	029b      	lsls	r3, r3, #10
 8010876:	4313      	orrs	r3, r2
 8010878:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 801087a:	693b      	ldr	r3, [r7, #16]
 801087c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010880:	683b      	ldr	r3, [r7, #0]
 8010882:	699b      	ldr	r3, [r3, #24]
 8010884:	011b      	lsls	r3, r3, #4
 8010886:	4313      	orrs	r3, r2
 8010888:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 801088a:	693b      	ldr	r3, [r7, #16]
 801088c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8010890:	683b      	ldr	r3, [r7, #0]
 8010892:	69db      	ldr	r3, [r3, #28]
 8010894:	015b      	lsls	r3, r3, #5
 8010896:	4313      	orrs	r3, r2
 8010898:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	693a      	ldr	r2, [r7, #16]
 801089e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	68fa      	ldr	r2, [r7, #12]
 80108a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80108a6:	683b      	ldr	r3, [r7, #0]
 80108a8:	68db      	ldr	r3, [r3, #12]
 80108aa:	4619      	mov	r1, r3
 80108ac:	6878      	ldr	r0, [r7, #4]
 80108ae:	f7ff fde0 	bl	8010472 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	697a      	ldr	r2, [r7, #20]
 80108b6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80108b8:	2300      	movs	r3, #0
}
 80108ba:	4618      	mov	r0, r3
 80108bc:	3718      	adds	r7, #24
 80108be:	46bd      	mov	sp, r7
 80108c0:	bd80      	pop	{r7, pc}
 80108c2:	bf00      	nop
 80108c4:	40012c00 	.word	0x40012c00
 80108c8:	40013400 	.word	0x40013400

080108cc <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80108cc:	b580      	push	{r7, lr}
 80108ce:	b086      	sub	sp, #24
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	6078      	str	r0, [r7, #4]
 80108d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	6a1b      	ldr	r3, [r3, #32]
 80108da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	6a1b      	ldr	r3, [r3, #32]
 80108e6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	685b      	ldr	r3, [r3, #4]
 80108ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	69db      	ldr	r3, [r3, #28]
 80108f2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80108fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8010902:	683b      	ldr	r3, [r7, #0]
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	021b      	lsls	r3, r3, #8
 8010908:	4313      	orrs	r3, r2
 801090a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 801090c:	693b      	ldr	r3, [r7, #16]
 801090e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8010912:	683b      	ldr	r3, [r7, #0]
 8010914:	691b      	ldr	r3, [r3, #16]
 8010916:	031b      	lsls	r3, r3, #12
 8010918:	4313      	orrs	r3, r2
 801091a:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 801091c:	693b      	ldr	r3, [r7, #16]
 801091e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010922:	683b      	ldr	r3, [r7, #0]
 8010924:	685b      	ldr	r3, [r3, #4]
 8010926:	031b      	lsls	r3, r3, #12
 8010928:	4313      	orrs	r3, r2
 801092a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	4a11      	ldr	r2, [pc, #68]	; (8010974 <OC4Config+0xa8>)
 8010930:	4293      	cmp	r3, r2
 8010932:	d003      	beq.n	801093c <OC4Config+0x70>
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	4a10      	ldr	r2, [pc, #64]	; (8010978 <OC4Config+0xac>)
 8010938:	4293      	cmp	r3, r2
 801093a:	d107      	bne.n	801094c <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 801093c:	697b      	ldr	r3, [r7, #20]
 801093e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8010942:	683b      	ldr	r3, [r7, #0]
 8010944:	699b      	ldr	r3, [r3, #24]
 8010946:	019b      	lsls	r3, r3, #6
 8010948:	4313      	orrs	r3, r2
 801094a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	697a      	ldr	r2, [r7, #20]
 8010950:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	68fa      	ldr	r2, [r7, #12]
 8010956:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8010958:	683b      	ldr	r3, [r7, #0]
 801095a:	68db      	ldr	r3, [r3, #12]
 801095c:	4619      	mov	r1, r3
 801095e:	6878      	ldr	r0, [r7, #4]
 8010960:	f7ff fd94 	bl	801048c <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	693a      	ldr	r2, [r7, #16]
 8010968:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 801096a:	2300      	movs	r3, #0
}
 801096c:	4618      	mov	r0, r3
 801096e:	3718      	adds	r7, #24
 8010970:	46bd      	mov	sp, r7
 8010972:	bd80      	pop	{r7, pc}
 8010974:	40012c00 	.word	0x40012c00
 8010978:	40013400 	.word	0x40013400

0801097c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801097c:	b084      	sub	sp, #16
 801097e:	b480      	push	{r7}
 8010980:	b083      	sub	sp, #12
 8010982:	af00      	add	r7, sp, #0
 8010984:	6078      	str	r0, [r7, #4]
 8010986:	f107 0014 	add.w	r0, r7, #20
 801098a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 801098e:	2300      	movs	r3, #0
}
 8010990:	4618      	mov	r0, r3
 8010992:	370c      	adds	r7, #12
 8010994:	46bd      	mov	sp, r7
 8010996:	bc80      	pop	{r7}
 8010998:	b004      	add	sp, #16
 801099a:	4770      	bx	lr

0801099c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 801099c:	b480      	push	{r7}
 801099e:	b085      	sub	sp, #20
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	2200      	movs	r2, #0
 80109a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80109ac:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80109b0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	b29a      	uxth	r2, r3
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80109bc:	2300      	movs	r3, #0
}
 80109be:	4618      	mov	r0, r3
 80109c0:	3714      	adds	r7, #20
 80109c2:	46bd      	mov	sp, r7
 80109c4:	bc80      	pop	{r7}
 80109c6:	4770      	bx	lr

080109c8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80109c8:	b480      	push	{r7}
 80109ca:	b085      	sub	sp, #20
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80109d0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80109d4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80109dc:	b29a      	uxth	r2, r3
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	b29b      	uxth	r3, r3
 80109e2:	43db      	mvns	r3, r3
 80109e4:	b29b      	uxth	r3, r3
 80109e6:	4013      	ands	r3, r2
 80109e8:	b29a      	uxth	r2, r3
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80109f0:	2300      	movs	r3, #0
}
 80109f2:	4618      	mov	r0, r3
 80109f4:	3714      	adds	r7, #20
 80109f6:	46bd      	mov	sp, r7
 80109f8:	bc80      	pop	{r7}
 80109fa:	4770      	bx	lr

080109fc <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80109fc:	b480      	push	{r7}
 80109fe:	b083      	sub	sp, #12
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	6078      	str	r0, [r7, #4]
 8010a04:	460b      	mov	r3, r1
 8010a06:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8010a08:	2300      	movs	r3, #0
}
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	370c      	adds	r7, #12
 8010a0e:	46bd      	mov	sp, r7
 8010a10:	bc80      	pop	{r7}
 8010a12:	4770      	bx	lr

08010a14 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8010a14:	b084      	sub	sp, #16
 8010a16:	b480      	push	{r7}
 8010a18:	b083      	sub	sp, #12
 8010a1a:	af00      	add	r7, sp, #0
 8010a1c:	6078      	str	r0, [r7, #4]
 8010a1e:	f107 0014 	add.w	r0, r7, #20
 8010a22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	2201      	movs	r2, #1
 8010a2a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	2200      	movs	r2, #0
 8010a32:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	2200      	movs	r2, #0
 8010a3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	2200      	movs	r2, #0
 8010a42:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8010a46:	2300      	movs	r3, #0
}
 8010a48:	4618      	mov	r0, r3
 8010a4a:	370c      	adds	r7, #12
 8010a4c:	46bd      	mov	sp, r7
 8010a4e:	bc80      	pop	{r7}
 8010a50:	b004      	add	sp, #16
 8010a52:	4770      	bx	lr

08010a54 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_TypeDef const *USBx, uint32_t num)
{
 8010a54:	b480      	push	{r7}
 8010a56:	b083      	sub	sp, #12
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	6078      	str	r0, [r7, #4]
 8010a5c:	6039      	str	r1, [r7, #0]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8010a5e:	2300      	movs	r3, #0
}
 8010a60:	4618      	mov	r0, r3
 8010a62:	370c      	adds	r7, #12
 8010a64:	46bd      	mov	sp, r7
 8010a66:	bc80      	pop	{r7}
 8010a68:	4770      	bx	lr

08010a6a <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_TypeDef const *USBx)
{
 8010a6a:	b480      	push	{r7}
 8010a6c:	b083      	sub	sp, #12
 8010a6e:	af00      	add	r7, sp, #0
 8010a70:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8010a72:	2300      	movs	r3, #0
}
 8010a74:	4618      	mov	r0, r3
 8010a76:	370c      	adds	r7, #12
 8010a78:	46bd      	mov	sp, r7
 8010a7a:	bc80      	pop	{r7}
 8010a7c:	4770      	bx	lr
	...

08010a80 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010a80:	b480      	push	{r7}
 8010a82:	b09d      	sub	sp, #116	; 0x74
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	6078      	str	r0, [r7, #4]
 8010a88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8010a90:	687a      	ldr	r2, [r7, #4]
 8010a92:	683b      	ldr	r3, [r7, #0]
 8010a94:	781b      	ldrb	r3, [r3, #0]
 8010a96:	009b      	lsls	r3, r3, #2
 8010a98:	4413      	add	r3, r2
 8010a9a:	881b      	ldrh	r3, [r3, #0]
 8010a9c:	b29b      	uxth	r3, r3
 8010a9e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8010aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010aa6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8010aaa:	683b      	ldr	r3, [r7, #0]
 8010aac:	78db      	ldrb	r3, [r3, #3]
 8010aae:	2b03      	cmp	r3, #3
 8010ab0:	d81f      	bhi.n	8010af2 <USB_ActivateEndpoint+0x72>
 8010ab2:	a201      	add	r2, pc, #4	; (adr r2, 8010ab8 <USB_ActivateEndpoint+0x38>)
 8010ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ab8:	08010ac9 	.word	0x08010ac9
 8010abc:	08010ae5 	.word	0x08010ae5
 8010ac0:	08010afb 	.word	0x08010afb
 8010ac4:	08010ad7 	.word	0x08010ad7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8010ac8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8010acc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010ad0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8010ad4:	e012      	b.n	8010afc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8010ad6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8010ada:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8010ade:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8010ae2:	e00b      	b.n	8010afc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8010ae4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8010ae8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8010aec:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8010af0:	e004      	b.n	8010afc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8010af2:	2301      	movs	r3, #1
 8010af4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8010af8:	e000      	b.n	8010afc <USB_ActivateEndpoint+0x7c>
      break;
 8010afa:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8010afc:	687a      	ldr	r2, [r7, #4]
 8010afe:	683b      	ldr	r3, [r7, #0]
 8010b00:	781b      	ldrb	r3, [r3, #0]
 8010b02:	009b      	lsls	r3, r3, #2
 8010b04:	441a      	add	r2, r3
 8010b06:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8010b0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010b0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010b12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010b16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b1a:	b29b      	uxth	r3, r3
 8010b1c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8010b1e:	687a      	ldr	r2, [r7, #4]
 8010b20:	683b      	ldr	r3, [r7, #0]
 8010b22:	781b      	ldrb	r3, [r3, #0]
 8010b24:	009b      	lsls	r3, r3, #2
 8010b26:	4413      	add	r3, r2
 8010b28:	881b      	ldrh	r3, [r3, #0]
 8010b2a:	b29b      	uxth	r3, r3
 8010b2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010b30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010b34:	b29a      	uxth	r2, r3
 8010b36:	683b      	ldr	r3, [r7, #0]
 8010b38:	781b      	ldrb	r3, [r3, #0]
 8010b3a:	b29b      	uxth	r3, r3
 8010b3c:	4313      	orrs	r3, r2
 8010b3e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8010b42:	687a      	ldr	r2, [r7, #4]
 8010b44:	683b      	ldr	r3, [r7, #0]
 8010b46:	781b      	ldrb	r3, [r3, #0]
 8010b48:	009b      	lsls	r3, r3, #2
 8010b4a:	441a      	add	r2, r3
 8010b4c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8010b50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010b54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010b58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b60:	b29b      	uxth	r3, r3
 8010b62:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8010b64:	683b      	ldr	r3, [r7, #0]
 8010b66:	7b1b      	ldrb	r3, [r3, #12]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	f040 8178 	bne.w	8010e5e <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8010b6e:	683b      	ldr	r3, [r7, #0]
 8010b70:	785b      	ldrb	r3, [r3, #1]
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	f000 8084 	beq.w	8010c80 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	61bb      	str	r3, [r7, #24]
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010b82:	b29b      	uxth	r3, r3
 8010b84:	461a      	mov	r2, r3
 8010b86:	69bb      	ldr	r3, [r7, #24]
 8010b88:	4413      	add	r3, r2
 8010b8a:	61bb      	str	r3, [r7, #24]
 8010b8c:	683b      	ldr	r3, [r7, #0]
 8010b8e:	781b      	ldrb	r3, [r3, #0]
 8010b90:	011a      	lsls	r2, r3, #4
 8010b92:	69bb      	ldr	r3, [r7, #24]
 8010b94:	4413      	add	r3, r2
 8010b96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010b9a:	617b      	str	r3, [r7, #20]
 8010b9c:	683b      	ldr	r3, [r7, #0]
 8010b9e:	88db      	ldrh	r3, [r3, #6]
 8010ba0:	085b      	lsrs	r3, r3, #1
 8010ba2:	b29b      	uxth	r3, r3
 8010ba4:	005b      	lsls	r3, r3, #1
 8010ba6:	b29a      	uxth	r2, r3
 8010ba8:	697b      	ldr	r3, [r7, #20]
 8010baa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010bac:	687a      	ldr	r2, [r7, #4]
 8010bae:	683b      	ldr	r3, [r7, #0]
 8010bb0:	781b      	ldrb	r3, [r3, #0]
 8010bb2:	009b      	lsls	r3, r3, #2
 8010bb4:	4413      	add	r3, r2
 8010bb6:	881b      	ldrh	r3, [r3, #0]
 8010bb8:	827b      	strh	r3, [r7, #18]
 8010bba:	8a7b      	ldrh	r3, [r7, #18]
 8010bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d01b      	beq.n	8010bfc <USB_ActivateEndpoint+0x17c>
 8010bc4:	687a      	ldr	r2, [r7, #4]
 8010bc6:	683b      	ldr	r3, [r7, #0]
 8010bc8:	781b      	ldrb	r3, [r3, #0]
 8010bca:	009b      	lsls	r3, r3, #2
 8010bcc:	4413      	add	r3, r2
 8010bce:	881b      	ldrh	r3, [r3, #0]
 8010bd0:	b29b      	uxth	r3, r3
 8010bd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010bda:	823b      	strh	r3, [r7, #16]
 8010bdc:	687a      	ldr	r2, [r7, #4]
 8010bde:	683b      	ldr	r3, [r7, #0]
 8010be0:	781b      	ldrb	r3, [r3, #0]
 8010be2:	009b      	lsls	r3, r3, #2
 8010be4:	441a      	add	r2, r3
 8010be6:	8a3b      	ldrh	r3, [r7, #16]
 8010be8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010bec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010bf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010bf4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010bf8:	b29b      	uxth	r3, r3
 8010bfa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010bfc:	683b      	ldr	r3, [r7, #0]
 8010bfe:	78db      	ldrb	r3, [r3, #3]
 8010c00:	2b01      	cmp	r3, #1
 8010c02:	d020      	beq.n	8010c46 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8010c04:	687a      	ldr	r2, [r7, #4]
 8010c06:	683b      	ldr	r3, [r7, #0]
 8010c08:	781b      	ldrb	r3, [r3, #0]
 8010c0a:	009b      	lsls	r3, r3, #2
 8010c0c:	4413      	add	r3, r2
 8010c0e:	881b      	ldrh	r3, [r3, #0]
 8010c10:	b29b      	uxth	r3, r3
 8010c12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010c16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010c1a:	81bb      	strh	r3, [r7, #12]
 8010c1c:	89bb      	ldrh	r3, [r7, #12]
 8010c1e:	f083 0320 	eor.w	r3, r3, #32
 8010c22:	81bb      	strh	r3, [r7, #12]
 8010c24:	687a      	ldr	r2, [r7, #4]
 8010c26:	683b      	ldr	r3, [r7, #0]
 8010c28:	781b      	ldrb	r3, [r3, #0]
 8010c2a:	009b      	lsls	r3, r3, #2
 8010c2c:	441a      	add	r2, r3
 8010c2e:	89bb      	ldrh	r3, [r7, #12]
 8010c30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010c34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010c38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c40:	b29b      	uxth	r3, r3
 8010c42:	8013      	strh	r3, [r2, #0]
 8010c44:	e2d5      	b.n	80111f2 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010c46:	687a      	ldr	r2, [r7, #4]
 8010c48:	683b      	ldr	r3, [r7, #0]
 8010c4a:	781b      	ldrb	r3, [r3, #0]
 8010c4c:	009b      	lsls	r3, r3, #2
 8010c4e:	4413      	add	r3, r2
 8010c50:	881b      	ldrh	r3, [r3, #0]
 8010c52:	b29b      	uxth	r3, r3
 8010c54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010c58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010c5c:	81fb      	strh	r3, [r7, #14]
 8010c5e:	687a      	ldr	r2, [r7, #4]
 8010c60:	683b      	ldr	r3, [r7, #0]
 8010c62:	781b      	ldrb	r3, [r3, #0]
 8010c64:	009b      	lsls	r3, r3, #2
 8010c66:	441a      	add	r2, r3
 8010c68:	89fb      	ldrh	r3, [r7, #14]
 8010c6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010c6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010c72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010c76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c7a:	b29b      	uxth	r3, r3
 8010c7c:	8013      	strh	r3, [r2, #0]
 8010c7e:	e2b8      	b.n	80111f2 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	633b      	str	r3, [r7, #48]	; 0x30
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010c8a:	b29b      	uxth	r3, r3
 8010c8c:	461a      	mov	r2, r3
 8010c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c90:	4413      	add	r3, r2
 8010c92:	633b      	str	r3, [r7, #48]	; 0x30
 8010c94:	683b      	ldr	r3, [r7, #0]
 8010c96:	781b      	ldrb	r3, [r3, #0]
 8010c98:	011a      	lsls	r2, r3, #4
 8010c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c9c:	4413      	add	r3, r2
 8010c9e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8010ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010ca4:	683b      	ldr	r3, [r7, #0]
 8010ca6:	88db      	ldrh	r3, [r3, #6]
 8010ca8:	085b      	lsrs	r3, r3, #1
 8010caa:	b29b      	uxth	r3, r3
 8010cac:	005b      	lsls	r3, r3, #1
 8010cae:	b29a      	uxth	r2, r3
 8010cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cb2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010cbe:	b29b      	uxth	r3, r3
 8010cc0:	461a      	mov	r2, r3
 8010cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cc4:	4413      	add	r3, r2
 8010cc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8010cc8:	683b      	ldr	r3, [r7, #0]
 8010cca:	781b      	ldrb	r3, [r3, #0]
 8010ccc:	011a      	lsls	r2, r3, #4
 8010cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cd0:	4413      	add	r3, r2
 8010cd2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8010cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8010cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cda:	881b      	ldrh	r3, [r3, #0]
 8010cdc:	b29b      	uxth	r3, r3
 8010cde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010ce2:	b29a      	uxth	r2, r3
 8010ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ce6:	801a      	strh	r2, [r3, #0]
 8010ce8:	683b      	ldr	r3, [r7, #0]
 8010cea:	691b      	ldr	r3, [r3, #16]
 8010cec:	2b3e      	cmp	r3, #62	; 0x3e
 8010cee:	d91d      	bls.n	8010d2c <USB_ActivateEndpoint+0x2ac>
 8010cf0:	683b      	ldr	r3, [r7, #0]
 8010cf2:	691b      	ldr	r3, [r3, #16]
 8010cf4:	095b      	lsrs	r3, r3, #5
 8010cf6:	66bb      	str	r3, [r7, #104]	; 0x68
 8010cf8:	683b      	ldr	r3, [r7, #0]
 8010cfa:	691b      	ldr	r3, [r3, #16]
 8010cfc:	f003 031f 	and.w	r3, r3, #31
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d102      	bne.n	8010d0a <USB_ActivateEndpoint+0x28a>
 8010d04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010d06:	3b01      	subs	r3, #1
 8010d08:	66bb      	str	r3, [r7, #104]	; 0x68
 8010d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d0c:	881b      	ldrh	r3, [r3, #0]
 8010d0e:	b29a      	uxth	r2, r3
 8010d10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010d12:	b29b      	uxth	r3, r3
 8010d14:	029b      	lsls	r3, r3, #10
 8010d16:	b29b      	uxth	r3, r3
 8010d18:	4313      	orrs	r3, r2
 8010d1a:	b29b      	uxth	r3, r3
 8010d1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010d20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010d24:	b29a      	uxth	r2, r3
 8010d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d28:	801a      	strh	r2, [r3, #0]
 8010d2a:	e026      	b.n	8010d7a <USB_ActivateEndpoint+0x2fa>
 8010d2c:	683b      	ldr	r3, [r7, #0]
 8010d2e:	691b      	ldr	r3, [r3, #16]
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d10a      	bne.n	8010d4a <USB_ActivateEndpoint+0x2ca>
 8010d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d36:	881b      	ldrh	r3, [r3, #0]
 8010d38:	b29b      	uxth	r3, r3
 8010d3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010d3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010d42:	b29a      	uxth	r2, r3
 8010d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d46:	801a      	strh	r2, [r3, #0]
 8010d48:	e017      	b.n	8010d7a <USB_ActivateEndpoint+0x2fa>
 8010d4a:	683b      	ldr	r3, [r7, #0]
 8010d4c:	691b      	ldr	r3, [r3, #16]
 8010d4e:	085b      	lsrs	r3, r3, #1
 8010d50:	66bb      	str	r3, [r7, #104]	; 0x68
 8010d52:	683b      	ldr	r3, [r7, #0]
 8010d54:	691b      	ldr	r3, [r3, #16]
 8010d56:	f003 0301 	and.w	r3, r3, #1
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d002      	beq.n	8010d64 <USB_ActivateEndpoint+0x2e4>
 8010d5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010d60:	3301      	adds	r3, #1
 8010d62:	66bb      	str	r3, [r7, #104]	; 0x68
 8010d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d66:	881b      	ldrh	r3, [r3, #0]
 8010d68:	b29a      	uxth	r2, r3
 8010d6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010d6c:	b29b      	uxth	r3, r3
 8010d6e:	029b      	lsls	r3, r3, #10
 8010d70:	b29b      	uxth	r3, r3
 8010d72:	4313      	orrs	r3, r2
 8010d74:	b29a      	uxth	r2, r3
 8010d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d78:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010d7a:	687a      	ldr	r2, [r7, #4]
 8010d7c:	683b      	ldr	r3, [r7, #0]
 8010d7e:	781b      	ldrb	r3, [r3, #0]
 8010d80:	009b      	lsls	r3, r3, #2
 8010d82:	4413      	add	r3, r2
 8010d84:	881b      	ldrh	r3, [r3, #0]
 8010d86:	847b      	strh	r3, [r7, #34]	; 0x22
 8010d88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d01b      	beq.n	8010dca <USB_ActivateEndpoint+0x34a>
 8010d92:	687a      	ldr	r2, [r7, #4]
 8010d94:	683b      	ldr	r3, [r7, #0]
 8010d96:	781b      	ldrb	r3, [r3, #0]
 8010d98:	009b      	lsls	r3, r3, #2
 8010d9a:	4413      	add	r3, r2
 8010d9c:	881b      	ldrh	r3, [r3, #0]
 8010d9e:	b29b      	uxth	r3, r3
 8010da0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010da4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010da8:	843b      	strh	r3, [r7, #32]
 8010daa:	687a      	ldr	r2, [r7, #4]
 8010dac:	683b      	ldr	r3, [r7, #0]
 8010dae:	781b      	ldrb	r3, [r3, #0]
 8010db0:	009b      	lsls	r3, r3, #2
 8010db2:	441a      	add	r2, r3
 8010db4:	8c3b      	ldrh	r3, [r7, #32]
 8010db6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010dba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010dbe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010dc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010dc6:	b29b      	uxth	r3, r3
 8010dc8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8010dca:	683b      	ldr	r3, [r7, #0]
 8010dcc:	781b      	ldrb	r3, [r3, #0]
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d124      	bne.n	8010e1c <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8010dd2:	687a      	ldr	r2, [r7, #4]
 8010dd4:	683b      	ldr	r3, [r7, #0]
 8010dd6:	781b      	ldrb	r3, [r3, #0]
 8010dd8:	009b      	lsls	r3, r3, #2
 8010dda:	4413      	add	r3, r2
 8010ddc:	881b      	ldrh	r3, [r3, #0]
 8010dde:	b29b      	uxth	r3, r3
 8010de0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010de4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010de8:	83bb      	strh	r3, [r7, #28]
 8010dea:	8bbb      	ldrh	r3, [r7, #28]
 8010dec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8010df0:	83bb      	strh	r3, [r7, #28]
 8010df2:	8bbb      	ldrh	r3, [r7, #28]
 8010df4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8010df8:	83bb      	strh	r3, [r7, #28]
 8010dfa:	687a      	ldr	r2, [r7, #4]
 8010dfc:	683b      	ldr	r3, [r7, #0]
 8010dfe:	781b      	ldrb	r3, [r3, #0]
 8010e00:	009b      	lsls	r3, r3, #2
 8010e02:	441a      	add	r2, r3
 8010e04:	8bbb      	ldrh	r3, [r7, #28]
 8010e06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010e0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010e0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010e12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e16:	b29b      	uxth	r3, r3
 8010e18:	8013      	strh	r3, [r2, #0]
 8010e1a:	e1ea      	b.n	80111f2 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8010e1c:	687a      	ldr	r2, [r7, #4]
 8010e1e:	683b      	ldr	r3, [r7, #0]
 8010e20:	781b      	ldrb	r3, [r3, #0]
 8010e22:	009b      	lsls	r3, r3, #2
 8010e24:	4413      	add	r3, r2
 8010e26:	881b      	ldrh	r3, [r3, #0]
 8010e28:	b29b      	uxth	r3, r3
 8010e2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010e32:	83fb      	strh	r3, [r7, #30]
 8010e34:	8bfb      	ldrh	r3, [r7, #30]
 8010e36:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8010e3a:	83fb      	strh	r3, [r7, #30]
 8010e3c:	687a      	ldr	r2, [r7, #4]
 8010e3e:	683b      	ldr	r3, [r7, #0]
 8010e40:	781b      	ldrb	r3, [r3, #0]
 8010e42:	009b      	lsls	r3, r3, #2
 8010e44:	441a      	add	r2, r3
 8010e46:	8bfb      	ldrh	r3, [r7, #30]
 8010e48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010e4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010e50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e58:	b29b      	uxth	r3, r3
 8010e5a:	8013      	strh	r3, [r2, #0]
 8010e5c:	e1c9      	b.n	80111f2 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8010e5e:	683b      	ldr	r3, [r7, #0]
 8010e60:	78db      	ldrb	r3, [r3, #3]
 8010e62:	2b02      	cmp	r3, #2
 8010e64:	d11e      	bne.n	8010ea4 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8010e66:	687a      	ldr	r2, [r7, #4]
 8010e68:	683b      	ldr	r3, [r7, #0]
 8010e6a:	781b      	ldrb	r3, [r3, #0]
 8010e6c:	009b      	lsls	r3, r3, #2
 8010e6e:	4413      	add	r3, r2
 8010e70:	881b      	ldrh	r3, [r3, #0]
 8010e72:	b29b      	uxth	r3, r3
 8010e74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010e7c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8010e80:	687a      	ldr	r2, [r7, #4]
 8010e82:	683b      	ldr	r3, [r7, #0]
 8010e84:	781b      	ldrb	r3, [r3, #0]
 8010e86:	009b      	lsls	r3, r3, #2
 8010e88:	441a      	add	r2, r3
 8010e8a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8010e8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010e92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010e96:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8010e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e9e:	b29b      	uxth	r3, r3
 8010ea0:	8013      	strh	r3, [r2, #0]
 8010ea2:	e01d      	b.n	8010ee0 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8010ea4:	687a      	ldr	r2, [r7, #4]
 8010ea6:	683b      	ldr	r3, [r7, #0]
 8010ea8:	781b      	ldrb	r3, [r3, #0]
 8010eaa:	009b      	lsls	r3, r3, #2
 8010eac:	4413      	add	r3, r2
 8010eae:	881b      	ldrh	r3, [r3, #0]
 8010eb0:	b29b      	uxth	r3, r3
 8010eb2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8010eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010eba:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8010ebe:	687a      	ldr	r2, [r7, #4]
 8010ec0:	683b      	ldr	r3, [r7, #0]
 8010ec2:	781b      	ldrb	r3, [r3, #0]
 8010ec4:	009b      	lsls	r3, r3, #2
 8010ec6:	441a      	add	r2, r3
 8010ec8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8010ecc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010ed0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010ed4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010edc:	b29b      	uxth	r3, r3
 8010ede:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010eea:	b29b      	uxth	r3, r3
 8010eec:	461a      	mov	r2, r3
 8010eee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010ef0:	4413      	add	r3, r2
 8010ef2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010ef4:	683b      	ldr	r3, [r7, #0]
 8010ef6:	781b      	ldrb	r3, [r3, #0]
 8010ef8:	011a      	lsls	r2, r3, #4
 8010efa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010efc:	4413      	add	r3, r2
 8010efe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010f02:	65bb      	str	r3, [r7, #88]	; 0x58
 8010f04:	683b      	ldr	r3, [r7, #0]
 8010f06:	891b      	ldrh	r3, [r3, #8]
 8010f08:	085b      	lsrs	r3, r3, #1
 8010f0a:	b29b      	uxth	r3, r3
 8010f0c:	005b      	lsls	r3, r3, #1
 8010f0e:	b29a      	uxth	r2, r3
 8010f10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010f12:	801a      	strh	r2, [r3, #0]
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	657b      	str	r3, [r7, #84]	; 0x54
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010f1e:	b29b      	uxth	r3, r3
 8010f20:	461a      	mov	r2, r3
 8010f22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010f24:	4413      	add	r3, r2
 8010f26:	657b      	str	r3, [r7, #84]	; 0x54
 8010f28:	683b      	ldr	r3, [r7, #0]
 8010f2a:	781b      	ldrb	r3, [r3, #0]
 8010f2c:	011a      	lsls	r2, r3, #4
 8010f2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010f30:	4413      	add	r3, r2
 8010f32:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8010f36:	653b      	str	r3, [r7, #80]	; 0x50
 8010f38:	683b      	ldr	r3, [r7, #0]
 8010f3a:	895b      	ldrh	r3, [r3, #10]
 8010f3c:	085b      	lsrs	r3, r3, #1
 8010f3e:	b29b      	uxth	r3, r3
 8010f40:	005b      	lsls	r3, r3, #1
 8010f42:	b29a      	uxth	r2, r3
 8010f44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f46:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8010f48:	683b      	ldr	r3, [r7, #0]
 8010f4a:	785b      	ldrb	r3, [r3, #1]
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	f040 8093 	bne.w	8011078 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010f52:	687a      	ldr	r2, [r7, #4]
 8010f54:	683b      	ldr	r3, [r7, #0]
 8010f56:	781b      	ldrb	r3, [r3, #0]
 8010f58:	009b      	lsls	r3, r3, #2
 8010f5a:	4413      	add	r3, r2
 8010f5c:	881b      	ldrh	r3, [r3, #0]
 8010f5e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8010f62:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d01b      	beq.n	8010fa6 <USB_ActivateEndpoint+0x526>
 8010f6e:	687a      	ldr	r2, [r7, #4]
 8010f70:	683b      	ldr	r3, [r7, #0]
 8010f72:	781b      	ldrb	r3, [r3, #0]
 8010f74:	009b      	lsls	r3, r3, #2
 8010f76:	4413      	add	r3, r2
 8010f78:	881b      	ldrh	r3, [r3, #0]
 8010f7a:	b29b      	uxth	r3, r3
 8010f7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010f80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010f84:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8010f86:	687a      	ldr	r2, [r7, #4]
 8010f88:	683b      	ldr	r3, [r7, #0]
 8010f8a:	781b      	ldrb	r3, [r3, #0]
 8010f8c:	009b      	lsls	r3, r3, #2
 8010f8e:	441a      	add	r2, r3
 8010f90:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010f92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010f96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010f9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010f9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010fa2:	b29b      	uxth	r3, r3
 8010fa4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010fa6:	687a      	ldr	r2, [r7, #4]
 8010fa8:	683b      	ldr	r3, [r7, #0]
 8010faa:	781b      	ldrb	r3, [r3, #0]
 8010fac:	009b      	lsls	r3, r3, #2
 8010fae:	4413      	add	r3, r2
 8010fb0:	881b      	ldrh	r3, [r3, #0]
 8010fb2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8010fb4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d01b      	beq.n	8010ff6 <USB_ActivateEndpoint+0x576>
 8010fbe:	687a      	ldr	r2, [r7, #4]
 8010fc0:	683b      	ldr	r3, [r7, #0]
 8010fc2:	781b      	ldrb	r3, [r3, #0]
 8010fc4:	009b      	lsls	r3, r3, #2
 8010fc6:	4413      	add	r3, r2
 8010fc8:	881b      	ldrh	r3, [r3, #0]
 8010fca:	b29b      	uxth	r3, r3
 8010fcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010fd4:	877b      	strh	r3, [r7, #58]	; 0x3a
 8010fd6:	687a      	ldr	r2, [r7, #4]
 8010fd8:	683b      	ldr	r3, [r7, #0]
 8010fda:	781b      	ldrb	r3, [r3, #0]
 8010fdc:	009b      	lsls	r3, r3, #2
 8010fde:	441a      	add	r2, r3
 8010fe0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010fe2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010fe6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010fea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010fee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010ff2:	b29b      	uxth	r3, r3
 8010ff4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8010ff6:	687a      	ldr	r2, [r7, #4]
 8010ff8:	683b      	ldr	r3, [r7, #0]
 8010ffa:	781b      	ldrb	r3, [r3, #0]
 8010ffc:	009b      	lsls	r3, r3, #2
 8010ffe:	4413      	add	r3, r2
 8011000:	881b      	ldrh	r3, [r3, #0]
 8011002:	b29b      	uxth	r3, r3
 8011004:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801100c:	873b      	strh	r3, [r7, #56]	; 0x38
 801100e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8011010:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8011014:	873b      	strh	r3, [r7, #56]	; 0x38
 8011016:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8011018:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 801101c:	873b      	strh	r3, [r7, #56]	; 0x38
 801101e:	687a      	ldr	r2, [r7, #4]
 8011020:	683b      	ldr	r3, [r7, #0]
 8011022:	781b      	ldrb	r3, [r3, #0]
 8011024:	009b      	lsls	r3, r3, #2
 8011026:	441a      	add	r2, r3
 8011028:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801102a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801102e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801103a:	b29b      	uxth	r3, r3
 801103c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801103e:	687a      	ldr	r2, [r7, #4]
 8011040:	683b      	ldr	r3, [r7, #0]
 8011042:	781b      	ldrb	r3, [r3, #0]
 8011044:	009b      	lsls	r3, r3, #2
 8011046:	4413      	add	r3, r2
 8011048:	881b      	ldrh	r3, [r3, #0]
 801104a:	b29b      	uxth	r3, r3
 801104c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011050:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011054:	86fb      	strh	r3, [r7, #54]	; 0x36
 8011056:	687a      	ldr	r2, [r7, #4]
 8011058:	683b      	ldr	r3, [r7, #0]
 801105a:	781b      	ldrb	r3, [r3, #0]
 801105c:	009b      	lsls	r3, r3, #2
 801105e:	441a      	add	r2, r3
 8011060:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011062:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011066:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801106a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801106e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011072:	b29b      	uxth	r3, r3
 8011074:	8013      	strh	r3, [r2, #0]
 8011076:	e0bc      	b.n	80111f2 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011078:	687a      	ldr	r2, [r7, #4]
 801107a:	683b      	ldr	r3, [r7, #0]
 801107c:	781b      	ldrb	r3, [r3, #0]
 801107e:	009b      	lsls	r3, r3, #2
 8011080:	4413      	add	r3, r2
 8011082:	881b      	ldrh	r3, [r3, #0]
 8011084:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8011088:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801108c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011090:	2b00      	cmp	r3, #0
 8011092:	d01d      	beq.n	80110d0 <USB_ActivateEndpoint+0x650>
 8011094:	687a      	ldr	r2, [r7, #4]
 8011096:	683b      	ldr	r3, [r7, #0]
 8011098:	781b      	ldrb	r3, [r3, #0]
 801109a:	009b      	lsls	r3, r3, #2
 801109c:	4413      	add	r3, r2
 801109e:	881b      	ldrh	r3, [r3, #0]
 80110a0:	b29b      	uxth	r3, r3
 80110a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80110a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80110aa:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80110ae:	687a      	ldr	r2, [r7, #4]
 80110b0:	683b      	ldr	r3, [r7, #0]
 80110b2:	781b      	ldrb	r3, [r3, #0]
 80110b4:	009b      	lsls	r3, r3, #2
 80110b6:	441a      	add	r2, r3
 80110b8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80110bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80110c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80110c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80110c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80110cc:	b29b      	uxth	r3, r3
 80110ce:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80110d0:	687a      	ldr	r2, [r7, #4]
 80110d2:	683b      	ldr	r3, [r7, #0]
 80110d4:	781b      	ldrb	r3, [r3, #0]
 80110d6:	009b      	lsls	r3, r3, #2
 80110d8:	4413      	add	r3, r2
 80110da:	881b      	ldrh	r3, [r3, #0]
 80110dc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80110e0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80110e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d01d      	beq.n	8011128 <USB_ActivateEndpoint+0x6a8>
 80110ec:	687a      	ldr	r2, [r7, #4]
 80110ee:	683b      	ldr	r3, [r7, #0]
 80110f0:	781b      	ldrb	r3, [r3, #0]
 80110f2:	009b      	lsls	r3, r3, #2
 80110f4:	4413      	add	r3, r2
 80110f6:	881b      	ldrh	r3, [r3, #0]
 80110f8:	b29b      	uxth	r3, r3
 80110fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80110fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011102:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8011106:	687a      	ldr	r2, [r7, #4]
 8011108:	683b      	ldr	r3, [r7, #0]
 801110a:	781b      	ldrb	r3, [r3, #0]
 801110c:	009b      	lsls	r3, r3, #2
 801110e:	441a      	add	r2, r3
 8011110:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8011114:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011118:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801111c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011120:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011124:	b29b      	uxth	r3, r3
 8011126:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011128:	683b      	ldr	r3, [r7, #0]
 801112a:	78db      	ldrb	r3, [r3, #3]
 801112c:	2b01      	cmp	r3, #1
 801112e:	d024      	beq.n	801117a <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011130:	687a      	ldr	r2, [r7, #4]
 8011132:	683b      	ldr	r3, [r7, #0]
 8011134:	781b      	ldrb	r3, [r3, #0]
 8011136:	009b      	lsls	r3, r3, #2
 8011138:	4413      	add	r3, r2
 801113a:	881b      	ldrh	r3, [r3, #0]
 801113c:	b29b      	uxth	r3, r3
 801113e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011142:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011146:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 801114a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801114e:	f083 0320 	eor.w	r3, r3, #32
 8011152:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8011156:	687a      	ldr	r2, [r7, #4]
 8011158:	683b      	ldr	r3, [r7, #0]
 801115a:	781b      	ldrb	r3, [r3, #0]
 801115c:	009b      	lsls	r3, r3, #2
 801115e:	441a      	add	r2, r3
 8011160:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011164:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011168:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801116c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011174:	b29b      	uxth	r3, r3
 8011176:	8013      	strh	r3, [r2, #0]
 8011178:	e01d      	b.n	80111b6 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801117a:	687a      	ldr	r2, [r7, #4]
 801117c:	683b      	ldr	r3, [r7, #0]
 801117e:	781b      	ldrb	r3, [r3, #0]
 8011180:	009b      	lsls	r3, r3, #2
 8011182:	4413      	add	r3, r2
 8011184:	881b      	ldrh	r3, [r3, #0]
 8011186:	b29b      	uxth	r3, r3
 8011188:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801118c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011190:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8011194:	687a      	ldr	r2, [r7, #4]
 8011196:	683b      	ldr	r3, [r7, #0]
 8011198:	781b      	ldrb	r3, [r3, #0]
 801119a:	009b      	lsls	r3, r3, #2
 801119c:	441a      	add	r2, r3
 801119e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80111a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80111a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80111aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80111ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80111b2:	b29b      	uxth	r3, r3
 80111b4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80111b6:	687a      	ldr	r2, [r7, #4]
 80111b8:	683b      	ldr	r3, [r7, #0]
 80111ba:	781b      	ldrb	r3, [r3, #0]
 80111bc:	009b      	lsls	r3, r3, #2
 80111be:	4413      	add	r3, r2
 80111c0:	881b      	ldrh	r3, [r3, #0]
 80111c2:	b29b      	uxth	r3, r3
 80111c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80111c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80111cc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80111d0:	687a      	ldr	r2, [r7, #4]
 80111d2:	683b      	ldr	r3, [r7, #0]
 80111d4:	781b      	ldrb	r3, [r3, #0]
 80111d6:	009b      	lsls	r3, r3, #2
 80111d8:	441a      	add	r2, r3
 80111da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80111de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80111e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80111e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80111ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80111ee:	b29b      	uxth	r3, r3
 80111f0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80111f2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80111f6:	4618      	mov	r0, r3
 80111f8:	3774      	adds	r7, #116	; 0x74
 80111fa:	46bd      	mov	sp, r7
 80111fc:	bc80      	pop	{r7}
 80111fe:	4770      	bx	lr

08011200 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011200:	b480      	push	{r7}
 8011202:	b08d      	sub	sp, #52	; 0x34
 8011204:	af00      	add	r7, sp, #0
 8011206:	6078      	str	r0, [r7, #4]
 8011208:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801120a:	683b      	ldr	r3, [r7, #0]
 801120c:	7b1b      	ldrb	r3, [r3, #12]
 801120e:	2b00      	cmp	r3, #0
 8011210:	f040 808e 	bne.w	8011330 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8011214:	683b      	ldr	r3, [r7, #0]
 8011216:	785b      	ldrb	r3, [r3, #1]
 8011218:	2b00      	cmp	r3, #0
 801121a:	d044      	beq.n	80112a6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801121c:	687a      	ldr	r2, [r7, #4]
 801121e:	683b      	ldr	r3, [r7, #0]
 8011220:	781b      	ldrb	r3, [r3, #0]
 8011222:	009b      	lsls	r3, r3, #2
 8011224:	4413      	add	r3, r2
 8011226:	881b      	ldrh	r3, [r3, #0]
 8011228:	81bb      	strh	r3, [r7, #12]
 801122a:	89bb      	ldrh	r3, [r7, #12]
 801122c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011230:	2b00      	cmp	r3, #0
 8011232:	d01b      	beq.n	801126c <USB_DeactivateEndpoint+0x6c>
 8011234:	687a      	ldr	r2, [r7, #4]
 8011236:	683b      	ldr	r3, [r7, #0]
 8011238:	781b      	ldrb	r3, [r3, #0]
 801123a:	009b      	lsls	r3, r3, #2
 801123c:	4413      	add	r3, r2
 801123e:	881b      	ldrh	r3, [r3, #0]
 8011240:	b29b      	uxth	r3, r3
 8011242:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801124a:	817b      	strh	r3, [r7, #10]
 801124c:	687a      	ldr	r2, [r7, #4]
 801124e:	683b      	ldr	r3, [r7, #0]
 8011250:	781b      	ldrb	r3, [r3, #0]
 8011252:	009b      	lsls	r3, r3, #2
 8011254:	441a      	add	r2, r3
 8011256:	897b      	ldrh	r3, [r7, #10]
 8011258:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801125c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011260:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011264:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011268:	b29b      	uxth	r3, r3
 801126a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801126c:	687a      	ldr	r2, [r7, #4]
 801126e:	683b      	ldr	r3, [r7, #0]
 8011270:	781b      	ldrb	r3, [r3, #0]
 8011272:	009b      	lsls	r3, r3, #2
 8011274:	4413      	add	r3, r2
 8011276:	881b      	ldrh	r3, [r3, #0]
 8011278:	b29b      	uxth	r3, r3
 801127a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801127e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011282:	813b      	strh	r3, [r7, #8]
 8011284:	687a      	ldr	r2, [r7, #4]
 8011286:	683b      	ldr	r3, [r7, #0]
 8011288:	781b      	ldrb	r3, [r3, #0]
 801128a:	009b      	lsls	r3, r3, #2
 801128c:	441a      	add	r2, r3
 801128e:	893b      	ldrh	r3, [r7, #8]
 8011290:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011294:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011298:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801129c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80112a0:	b29b      	uxth	r3, r3
 80112a2:	8013      	strh	r3, [r2, #0]
 80112a4:	e192      	b.n	80115cc <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80112a6:	687a      	ldr	r2, [r7, #4]
 80112a8:	683b      	ldr	r3, [r7, #0]
 80112aa:	781b      	ldrb	r3, [r3, #0]
 80112ac:	009b      	lsls	r3, r3, #2
 80112ae:	4413      	add	r3, r2
 80112b0:	881b      	ldrh	r3, [r3, #0]
 80112b2:	827b      	strh	r3, [r7, #18]
 80112b4:	8a7b      	ldrh	r3, [r7, #18]
 80112b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d01b      	beq.n	80112f6 <USB_DeactivateEndpoint+0xf6>
 80112be:	687a      	ldr	r2, [r7, #4]
 80112c0:	683b      	ldr	r3, [r7, #0]
 80112c2:	781b      	ldrb	r3, [r3, #0]
 80112c4:	009b      	lsls	r3, r3, #2
 80112c6:	4413      	add	r3, r2
 80112c8:	881b      	ldrh	r3, [r3, #0]
 80112ca:	b29b      	uxth	r3, r3
 80112cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80112d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80112d4:	823b      	strh	r3, [r7, #16]
 80112d6:	687a      	ldr	r2, [r7, #4]
 80112d8:	683b      	ldr	r3, [r7, #0]
 80112da:	781b      	ldrb	r3, [r3, #0]
 80112dc:	009b      	lsls	r3, r3, #2
 80112de:	441a      	add	r2, r3
 80112e0:	8a3b      	ldrh	r3, [r7, #16]
 80112e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80112e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80112ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80112ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80112f2:	b29b      	uxth	r3, r3
 80112f4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80112f6:	687a      	ldr	r2, [r7, #4]
 80112f8:	683b      	ldr	r3, [r7, #0]
 80112fa:	781b      	ldrb	r3, [r3, #0]
 80112fc:	009b      	lsls	r3, r3, #2
 80112fe:	4413      	add	r3, r2
 8011300:	881b      	ldrh	r3, [r3, #0]
 8011302:	b29b      	uxth	r3, r3
 8011304:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801130c:	81fb      	strh	r3, [r7, #14]
 801130e:	687a      	ldr	r2, [r7, #4]
 8011310:	683b      	ldr	r3, [r7, #0]
 8011312:	781b      	ldrb	r3, [r3, #0]
 8011314:	009b      	lsls	r3, r3, #2
 8011316:	441a      	add	r2, r3
 8011318:	89fb      	ldrh	r3, [r7, #14]
 801131a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801131e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011322:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801132a:	b29b      	uxth	r3, r3
 801132c:	8013      	strh	r3, [r2, #0]
 801132e:	e14d      	b.n	80115cc <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8011330:	683b      	ldr	r3, [r7, #0]
 8011332:	785b      	ldrb	r3, [r3, #1]
 8011334:	2b00      	cmp	r3, #0
 8011336:	f040 80a5 	bne.w	8011484 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801133a:	687a      	ldr	r2, [r7, #4]
 801133c:	683b      	ldr	r3, [r7, #0]
 801133e:	781b      	ldrb	r3, [r3, #0]
 8011340:	009b      	lsls	r3, r3, #2
 8011342:	4413      	add	r3, r2
 8011344:	881b      	ldrh	r3, [r3, #0]
 8011346:	843b      	strh	r3, [r7, #32]
 8011348:	8c3b      	ldrh	r3, [r7, #32]
 801134a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801134e:	2b00      	cmp	r3, #0
 8011350:	d01b      	beq.n	801138a <USB_DeactivateEndpoint+0x18a>
 8011352:	687a      	ldr	r2, [r7, #4]
 8011354:	683b      	ldr	r3, [r7, #0]
 8011356:	781b      	ldrb	r3, [r3, #0]
 8011358:	009b      	lsls	r3, r3, #2
 801135a:	4413      	add	r3, r2
 801135c:	881b      	ldrh	r3, [r3, #0]
 801135e:	b29b      	uxth	r3, r3
 8011360:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011368:	83fb      	strh	r3, [r7, #30]
 801136a:	687a      	ldr	r2, [r7, #4]
 801136c:	683b      	ldr	r3, [r7, #0]
 801136e:	781b      	ldrb	r3, [r3, #0]
 8011370:	009b      	lsls	r3, r3, #2
 8011372:	441a      	add	r2, r3
 8011374:	8bfb      	ldrh	r3, [r7, #30]
 8011376:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801137a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801137e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011386:	b29b      	uxth	r3, r3
 8011388:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801138a:	687a      	ldr	r2, [r7, #4]
 801138c:	683b      	ldr	r3, [r7, #0]
 801138e:	781b      	ldrb	r3, [r3, #0]
 8011390:	009b      	lsls	r3, r3, #2
 8011392:	4413      	add	r3, r2
 8011394:	881b      	ldrh	r3, [r3, #0]
 8011396:	83bb      	strh	r3, [r7, #28]
 8011398:	8bbb      	ldrh	r3, [r7, #28]
 801139a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d01b      	beq.n	80113da <USB_DeactivateEndpoint+0x1da>
 80113a2:	687a      	ldr	r2, [r7, #4]
 80113a4:	683b      	ldr	r3, [r7, #0]
 80113a6:	781b      	ldrb	r3, [r3, #0]
 80113a8:	009b      	lsls	r3, r3, #2
 80113aa:	4413      	add	r3, r2
 80113ac:	881b      	ldrh	r3, [r3, #0]
 80113ae:	b29b      	uxth	r3, r3
 80113b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80113b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80113b8:	837b      	strh	r3, [r7, #26]
 80113ba:	687a      	ldr	r2, [r7, #4]
 80113bc:	683b      	ldr	r3, [r7, #0]
 80113be:	781b      	ldrb	r3, [r3, #0]
 80113c0:	009b      	lsls	r3, r3, #2
 80113c2:	441a      	add	r2, r3
 80113c4:	8b7b      	ldrh	r3, [r7, #26]
 80113c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80113ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80113ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80113d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80113d6:	b29b      	uxth	r3, r3
 80113d8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80113da:	687a      	ldr	r2, [r7, #4]
 80113dc:	683b      	ldr	r3, [r7, #0]
 80113de:	781b      	ldrb	r3, [r3, #0]
 80113e0:	009b      	lsls	r3, r3, #2
 80113e2:	4413      	add	r3, r2
 80113e4:	881b      	ldrh	r3, [r3, #0]
 80113e6:	b29b      	uxth	r3, r3
 80113e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80113ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80113f0:	833b      	strh	r3, [r7, #24]
 80113f2:	687a      	ldr	r2, [r7, #4]
 80113f4:	683b      	ldr	r3, [r7, #0]
 80113f6:	781b      	ldrb	r3, [r3, #0]
 80113f8:	009b      	lsls	r3, r3, #2
 80113fa:	441a      	add	r2, r3
 80113fc:	8b3b      	ldrh	r3, [r7, #24]
 80113fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011402:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011406:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801140a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801140e:	b29b      	uxth	r3, r3
 8011410:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011412:	687a      	ldr	r2, [r7, #4]
 8011414:	683b      	ldr	r3, [r7, #0]
 8011416:	781b      	ldrb	r3, [r3, #0]
 8011418:	009b      	lsls	r3, r3, #2
 801141a:	4413      	add	r3, r2
 801141c:	881b      	ldrh	r3, [r3, #0]
 801141e:	b29b      	uxth	r3, r3
 8011420:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011428:	82fb      	strh	r3, [r7, #22]
 801142a:	687a      	ldr	r2, [r7, #4]
 801142c:	683b      	ldr	r3, [r7, #0]
 801142e:	781b      	ldrb	r3, [r3, #0]
 8011430:	009b      	lsls	r3, r3, #2
 8011432:	441a      	add	r2, r3
 8011434:	8afb      	ldrh	r3, [r7, #22]
 8011436:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801143a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801143e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011442:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011446:	b29b      	uxth	r3, r3
 8011448:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801144a:	687a      	ldr	r2, [r7, #4]
 801144c:	683b      	ldr	r3, [r7, #0]
 801144e:	781b      	ldrb	r3, [r3, #0]
 8011450:	009b      	lsls	r3, r3, #2
 8011452:	4413      	add	r3, r2
 8011454:	881b      	ldrh	r3, [r3, #0]
 8011456:	b29b      	uxth	r3, r3
 8011458:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801145c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011460:	82bb      	strh	r3, [r7, #20]
 8011462:	687a      	ldr	r2, [r7, #4]
 8011464:	683b      	ldr	r3, [r7, #0]
 8011466:	781b      	ldrb	r3, [r3, #0]
 8011468:	009b      	lsls	r3, r3, #2
 801146a:	441a      	add	r2, r3
 801146c:	8abb      	ldrh	r3, [r7, #20]
 801146e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011472:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011476:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801147a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801147e:	b29b      	uxth	r3, r3
 8011480:	8013      	strh	r3, [r2, #0]
 8011482:	e0a3      	b.n	80115cc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011484:	687a      	ldr	r2, [r7, #4]
 8011486:	683b      	ldr	r3, [r7, #0]
 8011488:	781b      	ldrb	r3, [r3, #0]
 801148a:	009b      	lsls	r3, r3, #2
 801148c:	4413      	add	r3, r2
 801148e:	881b      	ldrh	r3, [r3, #0]
 8011490:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8011492:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011494:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011498:	2b00      	cmp	r3, #0
 801149a:	d01b      	beq.n	80114d4 <USB_DeactivateEndpoint+0x2d4>
 801149c:	687a      	ldr	r2, [r7, #4]
 801149e:	683b      	ldr	r3, [r7, #0]
 80114a0:	781b      	ldrb	r3, [r3, #0]
 80114a2:	009b      	lsls	r3, r3, #2
 80114a4:	4413      	add	r3, r2
 80114a6:	881b      	ldrh	r3, [r3, #0]
 80114a8:	b29b      	uxth	r3, r3
 80114aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80114ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80114b2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80114b4:	687a      	ldr	r2, [r7, #4]
 80114b6:	683b      	ldr	r3, [r7, #0]
 80114b8:	781b      	ldrb	r3, [r3, #0]
 80114ba:	009b      	lsls	r3, r3, #2
 80114bc:	441a      	add	r2, r3
 80114be:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80114c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80114c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80114c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80114cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80114d0:	b29b      	uxth	r3, r3
 80114d2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80114d4:	687a      	ldr	r2, [r7, #4]
 80114d6:	683b      	ldr	r3, [r7, #0]
 80114d8:	781b      	ldrb	r3, [r3, #0]
 80114da:	009b      	lsls	r3, r3, #2
 80114dc:	4413      	add	r3, r2
 80114de:	881b      	ldrh	r3, [r3, #0]
 80114e0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80114e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80114e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d01b      	beq.n	8011524 <USB_DeactivateEndpoint+0x324>
 80114ec:	687a      	ldr	r2, [r7, #4]
 80114ee:	683b      	ldr	r3, [r7, #0]
 80114f0:	781b      	ldrb	r3, [r3, #0]
 80114f2:	009b      	lsls	r3, r3, #2
 80114f4:	4413      	add	r3, r2
 80114f6:	881b      	ldrh	r3, [r3, #0]
 80114f8:	b29b      	uxth	r3, r3
 80114fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80114fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011502:	853b      	strh	r3, [r7, #40]	; 0x28
 8011504:	687a      	ldr	r2, [r7, #4]
 8011506:	683b      	ldr	r3, [r7, #0]
 8011508:	781b      	ldrb	r3, [r3, #0]
 801150a:	009b      	lsls	r3, r3, #2
 801150c:	441a      	add	r2, r3
 801150e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011510:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011514:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011518:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801151c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011520:	b29b      	uxth	r3, r3
 8011522:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8011524:	687a      	ldr	r2, [r7, #4]
 8011526:	683b      	ldr	r3, [r7, #0]
 8011528:	781b      	ldrb	r3, [r3, #0]
 801152a:	009b      	lsls	r3, r3, #2
 801152c:	4413      	add	r3, r2
 801152e:	881b      	ldrh	r3, [r3, #0]
 8011530:	b29b      	uxth	r3, r3
 8011532:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801153a:	84fb      	strh	r3, [r7, #38]	; 0x26
 801153c:	687a      	ldr	r2, [r7, #4]
 801153e:	683b      	ldr	r3, [r7, #0]
 8011540:	781b      	ldrb	r3, [r3, #0]
 8011542:	009b      	lsls	r3, r3, #2
 8011544:	441a      	add	r2, r3
 8011546:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011548:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801154c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011550:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011558:	b29b      	uxth	r3, r3
 801155a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801155c:	687a      	ldr	r2, [r7, #4]
 801155e:	683b      	ldr	r3, [r7, #0]
 8011560:	781b      	ldrb	r3, [r3, #0]
 8011562:	009b      	lsls	r3, r3, #2
 8011564:	4413      	add	r3, r2
 8011566:	881b      	ldrh	r3, [r3, #0]
 8011568:	b29b      	uxth	r3, r3
 801156a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801156e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011572:	84bb      	strh	r3, [r7, #36]	; 0x24
 8011574:	687a      	ldr	r2, [r7, #4]
 8011576:	683b      	ldr	r3, [r7, #0]
 8011578:	781b      	ldrb	r3, [r3, #0]
 801157a:	009b      	lsls	r3, r3, #2
 801157c:	441a      	add	r2, r3
 801157e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011580:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011584:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011588:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801158c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011590:	b29b      	uxth	r3, r3
 8011592:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011594:	687a      	ldr	r2, [r7, #4]
 8011596:	683b      	ldr	r3, [r7, #0]
 8011598:	781b      	ldrb	r3, [r3, #0]
 801159a:	009b      	lsls	r3, r3, #2
 801159c:	4413      	add	r3, r2
 801159e:	881b      	ldrh	r3, [r3, #0]
 80115a0:	b29b      	uxth	r3, r3
 80115a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80115a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80115aa:	847b      	strh	r3, [r7, #34]	; 0x22
 80115ac:	687a      	ldr	r2, [r7, #4]
 80115ae:	683b      	ldr	r3, [r7, #0]
 80115b0:	781b      	ldrb	r3, [r3, #0]
 80115b2:	009b      	lsls	r3, r3, #2
 80115b4:	441a      	add	r2, r3
 80115b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80115b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80115bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80115c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80115c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80115c8:	b29b      	uxth	r3, r3
 80115ca:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80115cc:	2300      	movs	r3, #0
}
 80115ce:	4618      	mov	r0, r3
 80115d0:	3734      	adds	r7, #52	; 0x34
 80115d2:	46bd      	mov	sp, r7
 80115d4:	bc80      	pop	{r7}
 80115d6:	4770      	bx	lr

080115d8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80115d8:	b580      	push	{r7, lr}
 80115da:	b0c2      	sub	sp, #264	; 0x108
 80115dc:	af00      	add	r7, sp, #0
 80115de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80115e6:	6018      	str	r0, [r3, #0]
 80115e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80115f0:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80115f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	785b      	ldrb	r3, [r3, #1]
 80115fe:	2b01      	cmp	r3, #1
 8011600:	f040 86b7 	bne.w	8012372 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8011604:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011608:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	699a      	ldr	r2, [r3, #24]
 8011610:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011614:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	691b      	ldr	r3, [r3, #16]
 801161c:	429a      	cmp	r2, r3
 801161e:	d908      	bls.n	8011632 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8011620:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011624:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	691b      	ldr	r3, [r3, #16]
 801162c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8011630:	e007      	b.n	8011642 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8011632:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011636:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	699b      	ldr	r3, [r3, #24]
 801163e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8011642:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011646:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	7b1b      	ldrb	r3, [r3, #12]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d13a      	bne.n	80116c8 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8011652:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011656:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	6959      	ldr	r1, [r3, #20]
 801165e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011662:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	88da      	ldrh	r2, [r3, #6]
 801166a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801166e:	b29b      	uxth	r3, r3
 8011670:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011674:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011678:	6800      	ldr	r0, [r0, #0]
 801167a:	f001 fc9c 	bl	8012fb6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801167e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011682:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	613b      	str	r3, [r7, #16]
 801168a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801168e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011698:	b29b      	uxth	r3, r3
 801169a:	461a      	mov	r2, r3
 801169c:	693b      	ldr	r3, [r7, #16]
 801169e:	4413      	add	r3, r2
 80116a0:	613b      	str	r3, [r7, #16]
 80116a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	781b      	ldrb	r3, [r3, #0]
 80116ae:	011a      	lsls	r2, r3, #4
 80116b0:	693b      	ldr	r3, [r7, #16]
 80116b2:	4413      	add	r3, r2
 80116b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80116b8:	60fb      	str	r3, [r7, #12]
 80116ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80116be:	b29a      	uxth	r2, r3
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	801a      	strh	r2, [r3, #0]
 80116c4:	f000 be1f 	b.w	8012306 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80116c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	78db      	ldrb	r3, [r3, #3]
 80116d4:	2b02      	cmp	r3, #2
 80116d6:	f040 8462 	bne.w	8011f9e <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80116da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	6a1a      	ldr	r2, [r3, #32]
 80116e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	691b      	ldr	r3, [r3, #16]
 80116f2:	429a      	cmp	r2, r3
 80116f4:	f240 83df 	bls.w	8011eb6 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80116f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011700:	681a      	ldr	r2, [r3, #0]
 8011702:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011706:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	781b      	ldrb	r3, [r3, #0]
 801170e:	009b      	lsls	r3, r3, #2
 8011710:	4413      	add	r3, r2
 8011712:	881b      	ldrh	r3, [r3, #0]
 8011714:	b29b      	uxth	r3, r3
 8011716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801171a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801171e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8011722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011726:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801172a:	681a      	ldr	r2, [r3, #0]
 801172c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011730:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	781b      	ldrb	r3, [r3, #0]
 8011738:	009b      	lsls	r3, r3, #2
 801173a:	441a      	add	r2, r3
 801173c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8011740:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011744:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011748:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 801174c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011750:	b29b      	uxth	r3, r3
 8011752:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8011754:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011758:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	6a1a      	ldr	r2, [r3, #32]
 8011760:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011764:	1ad2      	subs	r2, r2, r3
 8011766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801176a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8011772:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011776:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801177a:	681a      	ldr	r2, [r3, #0]
 801177c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011780:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	781b      	ldrb	r3, [r3, #0]
 8011788:	009b      	lsls	r3, r3, #2
 801178a:	4413      	add	r3, r2
 801178c:	881b      	ldrh	r3, [r3, #0]
 801178e:	b29b      	uxth	r3, r3
 8011790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011794:	2b00      	cmp	r3, #0
 8011796:	f000 81c7 	beq.w	8011b28 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801179a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801179e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	633b      	str	r3, [r7, #48]	; 0x30
 80117a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	785b      	ldrb	r3, [r3, #1]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d177      	bne.n	80118a6 <USB_EPStartXfer+0x2ce>
 80117b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80117c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80117d0:	b29b      	uxth	r3, r3
 80117d2:	461a      	mov	r2, r3
 80117d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117d6:	4413      	add	r3, r2
 80117d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80117da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	781b      	ldrb	r3, [r3, #0]
 80117e6:	011a      	lsls	r2, r3, #4
 80117e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117ea:	4413      	add	r3, r2
 80117ec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80117f0:	627b      	str	r3, [r7, #36]	; 0x24
 80117f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117f4:	881b      	ldrh	r3, [r3, #0]
 80117f6:	b29b      	uxth	r3, r3
 80117f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80117fc:	b29a      	uxth	r2, r3
 80117fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011800:	801a      	strh	r2, [r3, #0]
 8011802:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011806:	2b3e      	cmp	r3, #62	; 0x3e
 8011808:	d921      	bls.n	801184e <USB_EPStartXfer+0x276>
 801180a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801180e:	095b      	lsrs	r3, r3, #5
 8011810:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8011814:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011818:	f003 031f 	and.w	r3, r3, #31
 801181c:	2b00      	cmp	r3, #0
 801181e:	d104      	bne.n	801182a <USB_EPStartXfer+0x252>
 8011820:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011824:	3b01      	subs	r3, #1
 8011826:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 801182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801182c:	881b      	ldrh	r3, [r3, #0]
 801182e:	b29a      	uxth	r2, r3
 8011830:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011834:	b29b      	uxth	r3, r3
 8011836:	029b      	lsls	r3, r3, #10
 8011838:	b29b      	uxth	r3, r3
 801183a:	4313      	orrs	r3, r2
 801183c:	b29b      	uxth	r3, r3
 801183e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011842:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011846:	b29a      	uxth	r2, r3
 8011848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801184a:	801a      	strh	r2, [r3, #0]
 801184c:	e050      	b.n	80118f0 <USB_EPStartXfer+0x318>
 801184e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011852:	2b00      	cmp	r3, #0
 8011854:	d10a      	bne.n	801186c <USB_EPStartXfer+0x294>
 8011856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011858:	881b      	ldrh	r3, [r3, #0]
 801185a:	b29b      	uxth	r3, r3
 801185c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011860:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011864:	b29a      	uxth	r2, r3
 8011866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011868:	801a      	strh	r2, [r3, #0]
 801186a:	e041      	b.n	80118f0 <USB_EPStartXfer+0x318>
 801186c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011870:	085b      	lsrs	r3, r3, #1
 8011872:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8011876:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801187a:	f003 0301 	and.w	r3, r3, #1
 801187e:	2b00      	cmp	r3, #0
 8011880:	d004      	beq.n	801188c <USB_EPStartXfer+0x2b4>
 8011882:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011886:	3301      	adds	r3, #1
 8011888:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 801188c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801188e:	881b      	ldrh	r3, [r3, #0]
 8011890:	b29a      	uxth	r2, r3
 8011892:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011896:	b29b      	uxth	r3, r3
 8011898:	029b      	lsls	r3, r3, #10
 801189a:	b29b      	uxth	r3, r3
 801189c:	4313      	orrs	r3, r2
 801189e:	b29a      	uxth	r2, r3
 80118a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118a2:	801a      	strh	r2, [r3, #0]
 80118a4:	e024      	b.n	80118f0 <USB_EPStartXfer+0x318>
 80118a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	785b      	ldrb	r3, [r3, #1]
 80118b2:	2b01      	cmp	r3, #1
 80118b4:	d11c      	bne.n	80118f0 <USB_EPStartXfer+0x318>
 80118b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80118c4:	b29b      	uxth	r3, r3
 80118c6:	461a      	mov	r2, r3
 80118c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118ca:	4413      	add	r3, r2
 80118cc:	633b      	str	r3, [r7, #48]	; 0x30
 80118ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	781b      	ldrb	r3, [r3, #0]
 80118da:	011a      	lsls	r2, r3, #4
 80118dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118de:	4413      	add	r3, r2
 80118e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80118e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80118e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80118ea:	b29a      	uxth	r2, r3
 80118ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118ee:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80118f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	895b      	ldrh	r3, [r3, #10]
 80118fc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011900:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011904:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	6959      	ldr	r1, [r3, #20]
 801190c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011910:	b29b      	uxth	r3, r3
 8011912:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011916:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801191a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801191e:	6800      	ldr	r0, [r0, #0]
 8011920:	f001 fb49 	bl	8012fb6 <USB_WritePMA>
            ep->xfer_buff += len;
 8011924:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011928:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	695a      	ldr	r2, [r3, #20]
 8011930:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011934:	441a      	add	r2, r3
 8011936:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801193a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8011942:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011946:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	6a1a      	ldr	r2, [r3, #32]
 801194e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011952:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	691b      	ldr	r3, [r3, #16]
 801195a:	429a      	cmp	r2, r3
 801195c:	d90f      	bls.n	801197e <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 801195e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011962:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	6a1a      	ldr	r2, [r3, #32]
 801196a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801196e:	1ad2      	subs	r2, r2, r3
 8011970:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011974:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	621a      	str	r2, [r3, #32]
 801197c:	e00e      	b.n	801199c <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 801197e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011982:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	6a1b      	ldr	r3, [r3, #32]
 801198a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 801198e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011992:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	2200      	movs	r2, #0
 801199a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801199c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	785b      	ldrb	r3, [r3, #1]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d177      	bne.n	8011a9c <USB_EPStartXfer+0x4c4>
 80119ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	61bb      	str	r3, [r7, #24]
 80119b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80119c6:	b29b      	uxth	r3, r3
 80119c8:	461a      	mov	r2, r3
 80119ca:	69bb      	ldr	r3, [r7, #24]
 80119cc:	4413      	add	r3, r2
 80119ce:	61bb      	str	r3, [r7, #24]
 80119d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	781b      	ldrb	r3, [r3, #0]
 80119dc:	011a      	lsls	r2, r3, #4
 80119de:	69bb      	ldr	r3, [r7, #24]
 80119e0:	4413      	add	r3, r2
 80119e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80119e6:	617b      	str	r3, [r7, #20]
 80119e8:	697b      	ldr	r3, [r7, #20]
 80119ea:	881b      	ldrh	r3, [r3, #0]
 80119ec:	b29b      	uxth	r3, r3
 80119ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80119f2:	b29a      	uxth	r2, r3
 80119f4:	697b      	ldr	r3, [r7, #20]
 80119f6:	801a      	strh	r2, [r3, #0]
 80119f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80119fc:	2b3e      	cmp	r3, #62	; 0x3e
 80119fe:	d921      	bls.n	8011a44 <USB_EPStartXfer+0x46c>
 8011a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a04:	095b      	lsrs	r3, r3, #5
 8011a06:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8011a0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a0e:	f003 031f 	and.w	r3, r3, #31
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d104      	bne.n	8011a20 <USB_EPStartXfer+0x448>
 8011a16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011a1a:	3b01      	subs	r3, #1
 8011a1c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8011a20:	697b      	ldr	r3, [r7, #20]
 8011a22:	881b      	ldrh	r3, [r3, #0]
 8011a24:	b29a      	uxth	r2, r3
 8011a26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011a2a:	b29b      	uxth	r3, r3
 8011a2c:	029b      	lsls	r3, r3, #10
 8011a2e:	b29b      	uxth	r3, r3
 8011a30:	4313      	orrs	r3, r2
 8011a32:	b29b      	uxth	r3, r3
 8011a34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011a38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011a3c:	b29a      	uxth	r2, r3
 8011a3e:	697b      	ldr	r3, [r7, #20]
 8011a40:	801a      	strh	r2, [r3, #0]
 8011a42:	e056      	b.n	8011af2 <USB_EPStartXfer+0x51a>
 8011a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d10a      	bne.n	8011a62 <USB_EPStartXfer+0x48a>
 8011a4c:	697b      	ldr	r3, [r7, #20]
 8011a4e:	881b      	ldrh	r3, [r3, #0]
 8011a50:	b29b      	uxth	r3, r3
 8011a52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011a56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011a5a:	b29a      	uxth	r2, r3
 8011a5c:	697b      	ldr	r3, [r7, #20]
 8011a5e:	801a      	strh	r2, [r3, #0]
 8011a60:	e047      	b.n	8011af2 <USB_EPStartXfer+0x51a>
 8011a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a66:	085b      	lsrs	r3, r3, #1
 8011a68:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8011a6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a70:	f003 0301 	and.w	r3, r3, #1
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d004      	beq.n	8011a82 <USB_EPStartXfer+0x4aa>
 8011a78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011a7c:	3301      	adds	r3, #1
 8011a7e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8011a82:	697b      	ldr	r3, [r7, #20]
 8011a84:	881b      	ldrh	r3, [r3, #0]
 8011a86:	b29a      	uxth	r2, r3
 8011a88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011a8c:	b29b      	uxth	r3, r3
 8011a8e:	029b      	lsls	r3, r3, #10
 8011a90:	b29b      	uxth	r3, r3
 8011a92:	4313      	orrs	r3, r2
 8011a94:	b29a      	uxth	r2, r3
 8011a96:	697b      	ldr	r3, [r7, #20]
 8011a98:	801a      	strh	r2, [r3, #0]
 8011a9a:	e02a      	b.n	8011af2 <USB_EPStartXfer+0x51a>
 8011a9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011aa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	785b      	ldrb	r3, [r3, #1]
 8011aa8:	2b01      	cmp	r3, #1
 8011aaa:	d122      	bne.n	8011af2 <USB_EPStartXfer+0x51a>
 8011aac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ab0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	623b      	str	r3, [r7, #32]
 8011ab8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011abc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011ac6:	b29b      	uxth	r3, r3
 8011ac8:	461a      	mov	r2, r3
 8011aca:	6a3b      	ldr	r3, [r7, #32]
 8011acc:	4413      	add	r3, r2
 8011ace:	623b      	str	r3, [r7, #32]
 8011ad0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ad4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	781b      	ldrb	r3, [r3, #0]
 8011adc:	011a      	lsls	r2, r3, #4
 8011ade:	6a3b      	ldr	r3, [r7, #32]
 8011ae0:	4413      	add	r3, r2
 8011ae2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8011ae6:	61fb      	str	r3, [r7, #28]
 8011ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011aec:	b29a      	uxth	r2, r3
 8011aee:	69fb      	ldr	r3, [r7, #28]
 8011af0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8011af2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011af6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	891b      	ldrh	r3, [r3, #8]
 8011afe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011b02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	6959      	ldr	r1, [r3, #20]
 8011b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011b12:	b29b      	uxth	r3, r3
 8011b14:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011b18:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011b1c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011b20:	6800      	ldr	r0, [r0, #0]
 8011b22:	f001 fa48 	bl	8012fb6 <USB_WritePMA>
 8011b26:	e3ee      	b.n	8012306 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8011b28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	785b      	ldrb	r3, [r3, #1]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d177      	bne.n	8011c28 <USB_EPStartXfer+0x650>
 8011b38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	64bb      	str	r3, [r7, #72]	; 0x48
 8011b44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011b52:	b29b      	uxth	r3, r3
 8011b54:	461a      	mov	r2, r3
 8011b56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011b58:	4413      	add	r3, r2
 8011b5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8011b5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	781b      	ldrb	r3, [r3, #0]
 8011b68:	011a      	lsls	r2, r3, #4
 8011b6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011b6c:	4413      	add	r3, r2
 8011b6e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8011b72:	647b      	str	r3, [r7, #68]	; 0x44
 8011b74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b76:	881b      	ldrh	r3, [r3, #0]
 8011b78:	b29b      	uxth	r3, r3
 8011b7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011b7e:	b29a      	uxth	r2, r3
 8011b80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b82:	801a      	strh	r2, [r3, #0]
 8011b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011b88:	2b3e      	cmp	r3, #62	; 0x3e
 8011b8a:	d921      	bls.n	8011bd0 <USB_EPStartXfer+0x5f8>
 8011b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011b90:	095b      	lsrs	r3, r3, #5
 8011b92:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8011b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011b9a:	f003 031f 	and.w	r3, r3, #31
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d104      	bne.n	8011bac <USB_EPStartXfer+0x5d4>
 8011ba2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011ba6:	3b01      	subs	r3, #1
 8011ba8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8011bac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011bae:	881b      	ldrh	r3, [r3, #0]
 8011bb0:	b29a      	uxth	r2, r3
 8011bb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011bb6:	b29b      	uxth	r3, r3
 8011bb8:	029b      	lsls	r3, r3, #10
 8011bba:	b29b      	uxth	r3, r3
 8011bbc:	4313      	orrs	r3, r2
 8011bbe:	b29b      	uxth	r3, r3
 8011bc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011bc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011bc8:	b29a      	uxth	r2, r3
 8011bca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011bcc:	801a      	strh	r2, [r3, #0]
 8011bce:	e056      	b.n	8011c7e <USB_EPStartXfer+0x6a6>
 8011bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d10a      	bne.n	8011bee <USB_EPStartXfer+0x616>
 8011bd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011bda:	881b      	ldrh	r3, [r3, #0]
 8011bdc:	b29b      	uxth	r3, r3
 8011bde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011be2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011be6:	b29a      	uxth	r2, r3
 8011be8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011bea:	801a      	strh	r2, [r3, #0]
 8011bec:	e047      	b.n	8011c7e <USB_EPStartXfer+0x6a6>
 8011bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011bf2:	085b      	lsrs	r3, r3, #1
 8011bf4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8011bf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011bfc:	f003 0301 	and.w	r3, r3, #1
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d004      	beq.n	8011c0e <USB_EPStartXfer+0x636>
 8011c04:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011c08:	3301      	adds	r3, #1
 8011c0a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8011c0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c10:	881b      	ldrh	r3, [r3, #0]
 8011c12:	b29a      	uxth	r2, r3
 8011c14:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011c18:	b29b      	uxth	r3, r3
 8011c1a:	029b      	lsls	r3, r3, #10
 8011c1c:	b29b      	uxth	r3, r3
 8011c1e:	4313      	orrs	r3, r2
 8011c20:	b29a      	uxth	r2, r3
 8011c22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c24:	801a      	strh	r2, [r3, #0]
 8011c26:	e02a      	b.n	8011c7e <USB_EPStartXfer+0x6a6>
 8011c28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	785b      	ldrb	r3, [r3, #1]
 8011c34:	2b01      	cmp	r3, #1
 8011c36:	d122      	bne.n	8011c7e <USB_EPStartXfer+0x6a6>
 8011c38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	653b      	str	r3, [r7, #80]	; 0x50
 8011c44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011c52:	b29b      	uxth	r3, r3
 8011c54:	461a      	mov	r2, r3
 8011c56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c58:	4413      	add	r3, r2
 8011c5a:	653b      	str	r3, [r7, #80]	; 0x50
 8011c5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	781b      	ldrb	r3, [r3, #0]
 8011c68:	011a      	lsls	r2, r3, #4
 8011c6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c6c:	4413      	add	r3, r2
 8011c6e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8011c72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011c78:	b29a      	uxth	r2, r3
 8011c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c7c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8011c7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	891b      	ldrh	r3, [r3, #8]
 8011c8a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011c8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	6959      	ldr	r1, [r3, #20]
 8011c9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011c9e:	b29b      	uxth	r3, r3
 8011ca0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011ca4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011ca8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011cac:	6800      	ldr	r0, [r0, #0]
 8011cae:	f001 f982 	bl	8012fb6 <USB_WritePMA>
            ep->xfer_buff += len;
 8011cb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011cb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011cba:	681b      	ldr	r3, [r3, #0]
 8011cbc:	695a      	ldr	r2, [r3, #20]
 8011cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011cc2:	441a      	add	r2, r3
 8011cc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011cc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8011cd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011cd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	6a1a      	ldr	r2, [r3, #32]
 8011cdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ce0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	691b      	ldr	r3, [r3, #16]
 8011ce8:	429a      	cmp	r2, r3
 8011cea:	d90f      	bls.n	8011d0c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8011cec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011cf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	6a1a      	ldr	r2, [r3, #32]
 8011cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011cfc:	1ad2      	subs	r2, r2, r3
 8011cfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	621a      	str	r2, [r3, #32]
 8011d0a:	e00e      	b.n	8011d2a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8011d0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	6a1b      	ldr	r3, [r3, #32]
 8011d18:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8011d1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	2200      	movs	r2, #0
 8011d28:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8011d2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	643b      	str	r3, [r7, #64]	; 0x40
 8011d36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	785b      	ldrb	r3, [r3, #1]
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d177      	bne.n	8011e36 <USB_EPStartXfer+0x85e>
 8011d46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	63bb      	str	r3, [r7, #56]	; 0x38
 8011d52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011d60:	b29b      	uxth	r3, r3
 8011d62:	461a      	mov	r2, r3
 8011d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d66:	4413      	add	r3, r2
 8011d68:	63bb      	str	r3, [r7, #56]	; 0x38
 8011d6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	781b      	ldrb	r3, [r3, #0]
 8011d76:	011a      	lsls	r2, r3, #4
 8011d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d7a:	4413      	add	r3, r2
 8011d7c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8011d80:	637b      	str	r3, [r7, #52]	; 0x34
 8011d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d84:	881b      	ldrh	r3, [r3, #0]
 8011d86:	b29b      	uxth	r3, r3
 8011d88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011d8c:	b29a      	uxth	r2, r3
 8011d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d90:	801a      	strh	r2, [r3, #0]
 8011d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011d96:	2b3e      	cmp	r3, #62	; 0x3e
 8011d98:	d921      	bls.n	8011dde <USB_EPStartXfer+0x806>
 8011d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011d9e:	095b      	lsrs	r3, r3, #5
 8011da0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8011da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011da8:	f003 031f 	and.w	r3, r3, #31
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d104      	bne.n	8011dba <USB_EPStartXfer+0x7e2>
 8011db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011db4:	3b01      	subs	r3, #1
 8011db6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8011dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011dbc:	881b      	ldrh	r3, [r3, #0]
 8011dbe:	b29a      	uxth	r2, r3
 8011dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011dc4:	b29b      	uxth	r3, r3
 8011dc6:	029b      	lsls	r3, r3, #10
 8011dc8:	b29b      	uxth	r3, r3
 8011dca:	4313      	orrs	r3, r2
 8011dcc:	b29b      	uxth	r3, r3
 8011dce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011dd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011dd6:	b29a      	uxth	r2, r3
 8011dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011dda:	801a      	strh	r2, [r3, #0]
 8011ddc:	e050      	b.n	8011e80 <USB_EPStartXfer+0x8a8>
 8011dde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d10a      	bne.n	8011dfc <USB_EPStartXfer+0x824>
 8011de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011de8:	881b      	ldrh	r3, [r3, #0]
 8011dea:	b29b      	uxth	r3, r3
 8011dec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011df0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011df4:	b29a      	uxth	r2, r3
 8011df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011df8:	801a      	strh	r2, [r3, #0]
 8011dfa:	e041      	b.n	8011e80 <USB_EPStartXfer+0x8a8>
 8011dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e00:	085b      	lsrs	r3, r3, #1
 8011e02:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8011e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e0a:	f003 0301 	and.w	r3, r3, #1
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d004      	beq.n	8011e1c <USB_EPStartXfer+0x844>
 8011e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011e16:	3301      	adds	r3, #1
 8011e18:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8011e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e1e:	881b      	ldrh	r3, [r3, #0]
 8011e20:	b29a      	uxth	r2, r3
 8011e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011e26:	b29b      	uxth	r3, r3
 8011e28:	029b      	lsls	r3, r3, #10
 8011e2a:	b29b      	uxth	r3, r3
 8011e2c:	4313      	orrs	r3, r2
 8011e2e:	b29a      	uxth	r2, r3
 8011e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e32:	801a      	strh	r2, [r3, #0]
 8011e34:	e024      	b.n	8011e80 <USB_EPStartXfer+0x8a8>
 8011e36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	785b      	ldrb	r3, [r3, #1]
 8011e42:	2b01      	cmp	r3, #1
 8011e44:	d11c      	bne.n	8011e80 <USB_EPStartXfer+0x8a8>
 8011e46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011e54:	b29b      	uxth	r3, r3
 8011e56:	461a      	mov	r2, r3
 8011e58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e5a:	4413      	add	r3, r2
 8011e5c:	643b      	str	r3, [r7, #64]	; 0x40
 8011e5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	781b      	ldrb	r3, [r3, #0]
 8011e6a:	011a      	lsls	r2, r3, #4
 8011e6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e6e:	4413      	add	r3, r2
 8011e70:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8011e74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e7a:	b29a      	uxth	r2, r3
 8011e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e7e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8011e80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	895b      	ldrh	r3, [r3, #10]
 8011e8c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011e90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	6959      	ldr	r1, [r3, #20]
 8011e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011ea0:	b29b      	uxth	r3, r3
 8011ea2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011ea6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011eaa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011eae:	6800      	ldr	r0, [r0, #0]
 8011eb0:	f001 f881 	bl	8012fb6 <USB_WritePMA>
 8011eb4:	e227      	b.n	8012306 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8011eb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011eba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	6a1b      	ldr	r3, [r3, #32]
 8011ec2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8011ec6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011eca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011ece:	681a      	ldr	r2, [r3, #0]
 8011ed0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ed4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	781b      	ldrb	r3, [r3, #0]
 8011edc:	009b      	lsls	r3, r3, #2
 8011ede:	4413      	add	r3, r2
 8011ee0:	881b      	ldrh	r3, [r3, #0]
 8011ee2:	b29b      	uxth	r3, r3
 8011ee4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8011ee8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011eec:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8011ef0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ef4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011ef8:	681a      	ldr	r2, [r3, #0]
 8011efa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011efe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	781b      	ldrb	r3, [r3, #0]
 8011f06:	009b      	lsls	r3, r3, #2
 8011f08:	441a      	add	r2, r3
 8011f0a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8011f0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011f12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011f16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011f1e:	b29b      	uxth	r3, r3
 8011f20:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8011f22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011f2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011f3c:	b29b      	uxth	r3, r3
 8011f3e:	461a      	mov	r2, r3
 8011f40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011f42:	4413      	add	r3, r2
 8011f44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011f46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	781b      	ldrb	r3, [r3, #0]
 8011f52:	011a      	lsls	r2, r3, #4
 8011f54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011f56:	4413      	add	r3, r2
 8011f58:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8011f5c:	65bb      	str	r3, [r7, #88]	; 0x58
 8011f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011f62:	b29a      	uxth	r2, r3
 8011f64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011f66:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8011f68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	891b      	ldrh	r3, [r3, #8]
 8011f74:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011f78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	6959      	ldr	r1, [r3, #20]
 8011f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011f88:	b29b      	uxth	r3, r3
 8011f8a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011f8e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011f92:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011f96:	6800      	ldr	r0, [r0, #0]
 8011f98:	f001 f80d 	bl	8012fb6 <USB_WritePMA>
 8011f9c:	e1b3      	b.n	8012306 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8011f9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	6a1a      	ldr	r2, [r3, #32]
 8011faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011fae:	1ad2      	subs	r2, r2, r3
 8011fb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8011fbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fc0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011fc4:	681a      	ldr	r2, [r3, #0]
 8011fc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	781b      	ldrb	r3, [r3, #0]
 8011fd2:	009b      	lsls	r3, r3, #2
 8011fd4:	4413      	add	r3, r2
 8011fd6:	881b      	ldrh	r3, [r3, #0]
 8011fd8:	b29b      	uxth	r3, r3
 8011fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	f000 80c6 	beq.w	8012170 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8011fe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fe8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	673b      	str	r3, [r7, #112]	; 0x70
 8011ff0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ff4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	785b      	ldrb	r3, [r3, #1]
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d177      	bne.n	80120f0 <USB_EPStartXfer+0xb18>
 8012000:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012004:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	66bb      	str	r3, [r7, #104]	; 0x68
 801200c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012010:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801201a:	b29b      	uxth	r3, r3
 801201c:	461a      	mov	r2, r3
 801201e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012020:	4413      	add	r3, r2
 8012022:	66bb      	str	r3, [r7, #104]	; 0x68
 8012024:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012028:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	781b      	ldrb	r3, [r3, #0]
 8012030:	011a      	lsls	r2, r3, #4
 8012032:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012034:	4413      	add	r3, r2
 8012036:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 801203a:	667b      	str	r3, [r7, #100]	; 0x64
 801203c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801203e:	881b      	ldrh	r3, [r3, #0]
 8012040:	b29b      	uxth	r3, r3
 8012042:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012046:	b29a      	uxth	r2, r3
 8012048:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801204a:	801a      	strh	r2, [r3, #0]
 801204c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012050:	2b3e      	cmp	r3, #62	; 0x3e
 8012052:	d921      	bls.n	8012098 <USB_EPStartXfer+0xac0>
 8012054:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012058:	095b      	lsrs	r3, r3, #5
 801205a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801205e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012062:	f003 031f 	and.w	r3, r3, #31
 8012066:	2b00      	cmp	r3, #0
 8012068:	d104      	bne.n	8012074 <USB_EPStartXfer+0xa9c>
 801206a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801206e:	3b01      	subs	r3, #1
 8012070:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8012074:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012076:	881b      	ldrh	r3, [r3, #0]
 8012078:	b29a      	uxth	r2, r3
 801207a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801207e:	b29b      	uxth	r3, r3
 8012080:	029b      	lsls	r3, r3, #10
 8012082:	b29b      	uxth	r3, r3
 8012084:	4313      	orrs	r3, r2
 8012086:	b29b      	uxth	r3, r3
 8012088:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801208c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012090:	b29a      	uxth	r2, r3
 8012092:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012094:	801a      	strh	r2, [r3, #0]
 8012096:	e050      	b.n	801213a <USB_EPStartXfer+0xb62>
 8012098:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801209c:	2b00      	cmp	r3, #0
 801209e:	d10a      	bne.n	80120b6 <USB_EPStartXfer+0xade>
 80120a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80120a2:	881b      	ldrh	r3, [r3, #0]
 80120a4:	b29b      	uxth	r3, r3
 80120a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80120aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80120ae:	b29a      	uxth	r2, r3
 80120b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80120b2:	801a      	strh	r2, [r3, #0]
 80120b4:	e041      	b.n	801213a <USB_EPStartXfer+0xb62>
 80120b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80120ba:	085b      	lsrs	r3, r3, #1
 80120bc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80120c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80120c4:	f003 0301 	and.w	r3, r3, #1
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d004      	beq.n	80120d6 <USB_EPStartXfer+0xafe>
 80120cc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80120d0:	3301      	adds	r3, #1
 80120d2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80120d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80120d8:	881b      	ldrh	r3, [r3, #0]
 80120da:	b29a      	uxth	r2, r3
 80120dc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80120e0:	b29b      	uxth	r3, r3
 80120e2:	029b      	lsls	r3, r3, #10
 80120e4:	b29b      	uxth	r3, r3
 80120e6:	4313      	orrs	r3, r2
 80120e8:	b29a      	uxth	r2, r3
 80120ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80120ec:	801a      	strh	r2, [r3, #0]
 80120ee:	e024      	b.n	801213a <USB_EPStartXfer+0xb62>
 80120f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80120f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	785b      	ldrb	r3, [r3, #1]
 80120fc:	2b01      	cmp	r3, #1
 80120fe:	d11c      	bne.n	801213a <USB_EPStartXfer+0xb62>
 8012100:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012104:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801210e:	b29b      	uxth	r3, r3
 8012110:	461a      	mov	r2, r3
 8012112:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012114:	4413      	add	r3, r2
 8012116:	673b      	str	r3, [r7, #112]	; 0x70
 8012118:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801211c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	781b      	ldrb	r3, [r3, #0]
 8012124:	011a      	lsls	r2, r3, #4
 8012126:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012128:	4413      	add	r3, r2
 801212a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 801212e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8012130:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012134:	b29a      	uxth	r2, r3
 8012136:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012138:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 801213a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801213e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	895b      	ldrh	r3, [r3, #10]
 8012146:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801214a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801214e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	6959      	ldr	r1, [r3, #20]
 8012156:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801215a:	b29b      	uxth	r3, r3
 801215c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8012160:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8012164:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8012168:	6800      	ldr	r0, [r0, #0]
 801216a:	f000 ff24 	bl	8012fb6 <USB_WritePMA>
 801216e:	e0ca      	b.n	8012306 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8012170:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012174:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	785b      	ldrb	r3, [r3, #1]
 801217c:	2b00      	cmp	r3, #0
 801217e:	d177      	bne.n	8012270 <USB_EPStartXfer+0xc98>
 8012180:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012184:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012188:	681b      	ldr	r3, [r3, #0]
 801218a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801218c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012190:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801219a:	b29b      	uxth	r3, r3
 801219c:	461a      	mov	r2, r3
 801219e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80121a0:	4413      	add	r3, r2
 80121a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80121a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	781b      	ldrb	r3, [r3, #0]
 80121b0:	011a      	lsls	r2, r3, #4
 80121b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80121b4:	4413      	add	r3, r2
 80121b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80121ba:	67bb      	str	r3, [r7, #120]	; 0x78
 80121bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80121be:	881b      	ldrh	r3, [r3, #0]
 80121c0:	b29b      	uxth	r3, r3
 80121c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80121c6:	b29a      	uxth	r2, r3
 80121c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80121ca:	801a      	strh	r2, [r3, #0]
 80121cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80121d0:	2b3e      	cmp	r3, #62	; 0x3e
 80121d2:	d921      	bls.n	8012218 <USB_EPStartXfer+0xc40>
 80121d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80121d8:	095b      	lsrs	r3, r3, #5
 80121da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80121de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80121e2:	f003 031f 	and.w	r3, r3, #31
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d104      	bne.n	80121f4 <USB_EPStartXfer+0xc1c>
 80121ea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80121ee:	3b01      	subs	r3, #1
 80121f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80121f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80121f6:	881b      	ldrh	r3, [r3, #0]
 80121f8:	b29a      	uxth	r2, r3
 80121fa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80121fe:	b29b      	uxth	r3, r3
 8012200:	029b      	lsls	r3, r3, #10
 8012202:	b29b      	uxth	r3, r3
 8012204:	4313      	orrs	r3, r2
 8012206:	b29b      	uxth	r3, r3
 8012208:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801220c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012210:	b29a      	uxth	r2, r3
 8012212:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012214:	801a      	strh	r2, [r3, #0]
 8012216:	e05c      	b.n	80122d2 <USB_EPStartXfer+0xcfa>
 8012218:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801221c:	2b00      	cmp	r3, #0
 801221e:	d10a      	bne.n	8012236 <USB_EPStartXfer+0xc5e>
 8012220:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012222:	881b      	ldrh	r3, [r3, #0]
 8012224:	b29b      	uxth	r3, r3
 8012226:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801222a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801222e:	b29a      	uxth	r2, r3
 8012230:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012232:	801a      	strh	r2, [r3, #0]
 8012234:	e04d      	b.n	80122d2 <USB_EPStartXfer+0xcfa>
 8012236:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801223a:	085b      	lsrs	r3, r3, #1
 801223c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8012240:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012244:	f003 0301 	and.w	r3, r3, #1
 8012248:	2b00      	cmp	r3, #0
 801224a:	d004      	beq.n	8012256 <USB_EPStartXfer+0xc7e>
 801224c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012250:	3301      	adds	r3, #1
 8012252:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8012256:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012258:	881b      	ldrh	r3, [r3, #0]
 801225a:	b29a      	uxth	r2, r3
 801225c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012260:	b29b      	uxth	r3, r3
 8012262:	029b      	lsls	r3, r3, #10
 8012264:	b29b      	uxth	r3, r3
 8012266:	4313      	orrs	r3, r2
 8012268:	b29a      	uxth	r2, r3
 801226a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801226c:	801a      	strh	r2, [r3, #0]
 801226e:	e030      	b.n	80122d2 <USB_EPStartXfer+0xcfa>
 8012270:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012274:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	785b      	ldrb	r3, [r3, #1]
 801227c:	2b01      	cmp	r3, #1
 801227e:	d128      	bne.n	80122d2 <USB_EPStartXfer+0xcfa>
 8012280:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012284:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801228e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012292:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801229c:	b29b      	uxth	r3, r3
 801229e:	461a      	mov	r2, r3
 80122a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80122a4:	4413      	add	r3, r2
 80122a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80122aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	781b      	ldrb	r3, [r3, #0]
 80122b6:	011a      	lsls	r2, r3, #4
 80122b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80122bc:	4413      	add	r3, r2
 80122be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80122c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80122c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80122ca:	b29a      	uxth	r2, r3
 80122cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80122d0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80122d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	891b      	ldrh	r3, [r3, #8]
 80122de:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80122e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	6959      	ldr	r1, [r3, #20]
 80122ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80122f2:	b29b      	uxth	r3, r3
 80122f4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80122f8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80122fc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8012300:	6800      	ldr	r0, [r0, #0]
 8012302:	f000 fe58 	bl	8012fb6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8012306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801230a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801230e:	681a      	ldr	r2, [r3, #0]
 8012310:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012314:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	781b      	ldrb	r3, [r3, #0]
 801231c:	009b      	lsls	r3, r3, #2
 801231e:	4413      	add	r3, r2
 8012320:	881b      	ldrh	r3, [r3, #0]
 8012322:	b29b      	uxth	r3, r3
 8012324:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012328:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801232c:	817b      	strh	r3, [r7, #10]
 801232e:	897b      	ldrh	r3, [r7, #10]
 8012330:	f083 0310 	eor.w	r3, r3, #16
 8012334:	817b      	strh	r3, [r7, #10]
 8012336:	897b      	ldrh	r3, [r7, #10]
 8012338:	f083 0320 	eor.w	r3, r3, #32
 801233c:	817b      	strh	r3, [r7, #10]
 801233e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012342:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012346:	681a      	ldr	r2, [r3, #0]
 8012348:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801234c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	781b      	ldrb	r3, [r3, #0]
 8012354:	009b      	lsls	r3, r3, #2
 8012356:	441a      	add	r2, r3
 8012358:	897b      	ldrh	r3, [r7, #10]
 801235a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801235e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012362:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012366:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801236a:	b29b      	uxth	r3, r3
 801236c:	8013      	strh	r3, [r2, #0]
 801236e:	f000 bcde 	b.w	8012d2e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8012372:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012376:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	7b1b      	ldrb	r3, [r3, #12]
 801237e:	2b00      	cmp	r3, #0
 8012380:	f040 80bb 	bne.w	80124fa <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8012384:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012388:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	699a      	ldr	r2, [r3, #24]
 8012390:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012394:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	691b      	ldr	r3, [r3, #16]
 801239c:	429a      	cmp	r2, r3
 801239e:	d917      	bls.n	80123d0 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80123a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80123a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	691b      	ldr	r3, [r3, #16]
 80123ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80123b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80123b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	699a      	ldr	r2, [r3, #24]
 80123bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80123c0:	1ad2      	subs	r2, r2, r3
 80123c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80123c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80123ca:	681b      	ldr	r3, [r3, #0]
 80123cc:	619a      	str	r2, [r3, #24]
 80123ce:	e00e      	b.n	80123ee <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80123d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80123d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	699b      	ldr	r3, [r3, #24]
 80123dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80123e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80123e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	2200      	movs	r2, #0
 80123ec:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80123ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80123f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80123fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012400:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801240a:	b29b      	uxth	r3, r3
 801240c:	461a      	mov	r2, r3
 801240e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012412:	4413      	add	r3, r2
 8012414:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012418:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801241c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	781b      	ldrb	r3, [r3, #0]
 8012424:	011a      	lsls	r2, r3, #4
 8012426:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801242a:	4413      	add	r3, r2
 801242c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8012430:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8012434:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012438:	881b      	ldrh	r3, [r3, #0]
 801243a:	b29b      	uxth	r3, r3
 801243c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012440:	b29a      	uxth	r2, r3
 8012442:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012446:	801a      	strh	r2, [r3, #0]
 8012448:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801244c:	2b3e      	cmp	r3, #62	; 0x3e
 801244e:	d924      	bls.n	801249a <USB_EPStartXfer+0xec2>
 8012450:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012454:	095b      	lsrs	r3, r3, #5
 8012456:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801245a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801245e:	f003 031f 	and.w	r3, r3, #31
 8012462:	2b00      	cmp	r3, #0
 8012464:	d104      	bne.n	8012470 <USB_EPStartXfer+0xe98>
 8012466:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801246a:	3b01      	subs	r3, #1
 801246c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8012470:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012474:	881b      	ldrh	r3, [r3, #0]
 8012476:	b29a      	uxth	r2, r3
 8012478:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801247c:	b29b      	uxth	r3, r3
 801247e:	029b      	lsls	r3, r3, #10
 8012480:	b29b      	uxth	r3, r3
 8012482:	4313      	orrs	r3, r2
 8012484:	b29b      	uxth	r3, r3
 8012486:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801248a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801248e:	b29a      	uxth	r2, r3
 8012490:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012494:	801a      	strh	r2, [r3, #0]
 8012496:	f000 bc10 	b.w	8012cba <USB_EPStartXfer+0x16e2>
 801249a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d10c      	bne.n	80124bc <USB_EPStartXfer+0xee4>
 80124a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80124a6:	881b      	ldrh	r3, [r3, #0]
 80124a8:	b29b      	uxth	r3, r3
 80124aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80124ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80124b2:	b29a      	uxth	r2, r3
 80124b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80124b8:	801a      	strh	r2, [r3, #0]
 80124ba:	e3fe      	b.n	8012cba <USB_EPStartXfer+0x16e2>
 80124bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80124c0:	085b      	lsrs	r3, r3, #1
 80124c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80124c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80124ca:	f003 0301 	and.w	r3, r3, #1
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d004      	beq.n	80124dc <USB_EPStartXfer+0xf04>
 80124d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80124d6:	3301      	adds	r3, #1
 80124d8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80124dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80124e0:	881b      	ldrh	r3, [r3, #0]
 80124e2:	b29a      	uxth	r2, r3
 80124e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80124e8:	b29b      	uxth	r3, r3
 80124ea:	029b      	lsls	r3, r3, #10
 80124ec:	b29b      	uxth	r3, r3
 80124ee:	4313      	orrs	r3, r2
 80124f0:	b29a      	uxth	r2, r3
 80124f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80124f6:	801a      	strh	r2, [r3, #0]
 80124f8:	e3df      	b.n	8012cba <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80124fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80124fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	78db      	ldrb	r3, [r3, #3]
 8012506:	2b02      	cmp	r3, #2
 8012508:	f040 8218 	bne.w	801293c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801250c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012510:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	785b      	ldrb	r3, [r3, #1]
 8012518:	2b00      	cmp	r3, #0
 801251a:	f040 809d 	bne.w	8012658 <USB_EPStartXfer+0x1080>
 801251e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012522:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801252c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012530:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801253a:	b29b      	uxth	r3, r3
 801253c:	461a      	mov	r2, r3
 801253e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012542:	4413      	add	r3, r2
 8012544:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8012548:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801254c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	781b      	ldrb	r3, [r3, #0]
 8012554:	011a      	lsls	r2, r3, #4
 8012556:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801255a:	4413      	add	r3, r2
 801255c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8012560:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8012564:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012568:	881b      	ldrh	r3, [r3, #0]
 801256a:	b29b      	uxth	r3, r3
 801256c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012570:	b29a      	uxth	r2, r3
 8012572:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012576:	801a      	strh	r2, [r3, #0]
 8012578:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801257c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	691b      	ldr	r3, [r3, #16]
 8012584:	2b3e      	cmp	r3, #62	; 0x3e
 8012586:	d92b      	bls.n	80125e0 <USB_EPStartXfer+0x1008>
 8012588:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801258c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	691b      	ldr	r3, [r3, #16]
 8012594:	095b      	lsrs	r3, r3, #5
 8012596:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801259a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801259e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	691b      	ldr	r3, [r3, #16]
 80125a6:	f003 031f 	and.w	r3, r3, #31
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d104      	bne.n	80125b8 <USB_EPStartXfer+0xfe0>
 80125ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80125b2:	3b01      	subs	r3, #1
 80125b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80125b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80125bc:	881b      	ldrh	r3, [r3, #0]
 80125be:	b29a      	uxth	r2, r3
 80125c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80125c4:	b29b      	uxth	r3, r3
 80125c6:	029b      	lsls	r3, r3, #10
 80125c8:	b29b      	uxth	r3, r3
 80125ca:	4313      	orrs	r3, r2
 80125cc:	b29b      	uxth	r3, r3
 80125ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80125d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80125d6:	b29a      	uxth	r2, r3
 80125d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80125dc:	801a      	strh	r2, [r3, #0]
 80125de:	e070      	b.n	80126c2 <USB_EPStartXfer+0x10ea>
 80125e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80125e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	691b      	ldr	r3, [r3, #16]
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d10c      	bne.n	801260a <USB_EPStartXfer+0x1032>
 80125f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80125f4:	881b      	ldrh	r3, [r3, #0]
 80125f6:	b29b      	uxth	r3, r3
 80125f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80125fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012600:	b29a      	uxth	r2, r3
 8012602:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012606:	801a      	strh	r2, [r3, #0]
 8012608:	e05b      	b.n	80126c2 <USB_EPStartXfer+0x10ea>
 801260a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801260e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	691b      	ldr	r3, [r3, #16]
 8012616:	085b      	lsrs	r3, r3, #1
 8012618:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801261c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012620:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	691b      	ldr	r3, [r3, #16]
 8012628:	f003 0301 	and.w	r3, r3, #1
 801262c:	2b00      	cmp	r3, #0
 801262e:	d004      	beq.n	801263a <USB_EPStartXfer+0x1062>
 8012630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012634:	3301      	adds	r3, #1
 8012636:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801263a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801263e:	881b      	ldrh	r3, [r3, #0]
 8012640:	b29a      	uxth	r2, r3
 8012642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012646:	b29b      	uxth	r3, r3
 8012648:	029b      	lsls	r3, r3, #10
 801264a:	b29b      	uxth	r3, r3
 801264c:	4313      	orrs	r3, r2
 801264e:	b29a      	uxth	r2, r3
 8012650:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012654:	801a      	strh	r2, [r3, #0]
 8012656:	e034      	b.n	80126c2 <USB_EPStartXfer+0x10ea>
 8012658:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801265c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	785b      	ldrb	r3, [r3, #1]
 8012664:	2b01      	cmp	r3, #1
 8012666:	d12c      	bne.n	80126c2 <USB_EPStartXfer+0x10ea>
 8012668:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801266c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012670:	681b      	ldr	r3, [r3, #0]
 8012672:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8012676:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801267a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012684:	b29b      	uxth	r3, r3
 8012686:	461a      	mov	r2, r3
 8012688:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801268c:	4413      	add	r3, r2
 801268e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8012692:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012696:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	781b      	ldrb	r3, [r3, #0]
 801269e:	011a      	lsls	r2, r3, #4
 80126a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80126a4:	4413      	add	r3, r2
 80126a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80126aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80126ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80126b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	691b      	ldr	r3, [r3, #16]
 80126ba:	b29a      	uxth	r2, r3
 80126bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80126c0:	801a      	strh	r2, [r3, #0]
 80126c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80126c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80126d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80126d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80126d8:	681b      	ldr	r3, [r3, #0]
 80126da:	785b      	ldrb	r3, [r3, #1]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	f040 809d 	bne.w	801281c <USB_EPStartXfer+0x1244>
 80126e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80126e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80126f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80126f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80126fe:	b29b      	uxth	r3, r3
 8012700:	461a      	mov	r2, r3
 8012702:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012706:	4413      	add	r3, r2
 8012708:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801270c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012710:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	781b      	ldrb	r3, [r3, #0]
 8012718:	011a      	lsls	r2, r3, #4
 801271a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801271e:	4413      	add	r3, r2
 8012720:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8012724:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012728:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801272c:	881b      	ldrh	r3, [r3, #0]
 801272e:	b29b      	uxth	r3, r3
 8012730:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012734:	b29a      	uxth	r2, r3
 8012736:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801273a:	801a      	strh	r2, [r3, #0]
 801273c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012740:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	691b      	ldr	r3, [r3, #16]
 8012748:	2b3e      	cmp	r3, #62	; 0x3e
 801274a:	d92b      	bls.n	80127a4 <USB_EPStartXfer+0x11cc>
 801274c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012750:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	691b      	ldr	r3, [r3, #16]
 8012758:	095b      	lsrs	r3, r3, #5
 801275a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801275e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012762:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	691b      	ldr	r3, [r3, #16]
 801276a:	f003 031f 	and.w	r3, r3, #31
 801276e:	2b00      	cmp	r3, #0
 8012770:	d104      	bne.n	801277c <USB_EPStartXfer+0x11a4>
 8012772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012776:	3b01      	subs	r3, #1
 8012778:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801277c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012780:	881b      	ldrh	r3, [r3, #0]
 8012782:	b29a      	uxth	r2, r3
 8012784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012788:	b29b      	uxth	r3, r3
 801278a:	029b      	lsls	r3, r3, #10
 801278c:	b29b      	uxth	r3, r3
 801278e:	4313      	orrs	r3, r2
 8012790:	b29b      	uxth	r3, r3
 8012792:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012796:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801279a:	b29a      	uxth	r2, r3
 801279c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80127a0:	801a      	strh	r2, [r3, #0]
 80127a2:	e069      	b.n	8012878 <USB_EPStartXfer+0x12a0>
 80127a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80127a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	691b      	ldr	r3, [r3, #16]
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d10c      	bne.n	80127ce <USB_EPStartXfer+0x11f6>
 80127b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80127b8:	881b      	ldrh	r3, [r3, #0]
 80127ba:	b29b      	uxth	r3, r3
 80127bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80127c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80127c4:	b29a      	uxth	r2, r3
 80127c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80127ca:	801a      	strh	r2, [r3, #0]
 80127cc:	e054      	b.n	8012878 <USB_EPStartXfer+0x12a0>
 80127ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80127d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	691b      	ldr	r3, [r3, #16]
 80127da:	085b      	lsrs	r3, r3, #1
 80127dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80127e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80127e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	691b      	ldr	r3, [r3, #16]
 80127ec:	f003 0301 	and.w	r3, r3, #1
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d004      	beq.n	80127fe <USB_EPStartXfer+0x1226>
 80127f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80127f8:	3301      	adds	r3, #1
 80127fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80127fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012802:	881b      	ldrh	r3, [r3, #0]
 8012804:	b29a      	uxth	r2, r3
 8012806:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801280a:	b29b      	uxth	r3, r3
 801280c:	029b      	lsls	r3, r3, #10
 801280e:	b29b      	uxth	r3, r3
 8012810:	4313      	orrs	r3, r2
 8012812:	b29a      	uxth	r2, r3
 8012814:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012818:	801a      	strh	r2, [r3, #0]
 801281a:	e02d      	b.n	8012878 <USB_EPStartXfer+0x12a0>
 801281c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012820:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	785b      	ldrb	r3, [r3, #1]
 8012828:	2b01      	cmp	r3, #1
 801282a:	d125      	bne.n	8012878 <USB_EPStartXfer+0x12a0>
 801282c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012830:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801283a:	b29b      	uxth	r3, r3
 801283c:	461a      	mov	r2, r3
 801283e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012842:	4413      	add	r3, r2
 8012844:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8012848:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801284c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	781b      	ldrb	r3, [r3, #0]
 8012854:	011a      	lsls	r2, r3, #4
 8012856:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801285a:	4413      	add	r3, r2
 801285c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8012860:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8012864:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012868:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	691b      	ldr	r3, [r3, #16]
 8012870:	b29a      	uxth	r2, r3
 8012872:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012876:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8012878:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801287c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012880:	681b      	ldr	r3, [r3, #0]
 8012882:	69db      	ldr	r3, [r3, #28]
 8012884:	2b00      	cmp	r3, #0
 8012886:	f000 8218 	beq.w	8012cba <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 801288a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801288e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012892:	681a      	ldr	r2, [r3, #0]
 8012894:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012898:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801289c:	681b      	ldr	r3, [r3, #0]
 801289e:	781b      	ldrb	r3, [r3, #0]
 80128a0:	009b      	lsls	r3, r3, #2
 80128a2:	4413      	add	r3, r2
 80128a4:	881b      	ldrh	r3, [r3, #0]
 80128a6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80128aa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80128ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d005      	beq.n	80128c2 <USB_EPStartXfer+0x12ea>
 80128b6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80128ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d10d      	bne.n	80128de <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80128c2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80128c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	f040 81f5 	bne.w	8012cba <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80128d0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80128d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80128d8:	2b00      	cmp	r3, #0
 80128da:	f040 81ee 	bne.w	8012cba <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80128de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80128e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80128e6:	681a      	ldr	r2, [r3, #0]
 80128e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80128ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	781b      	ldrb	r3, [r3, #0]
 80128f4:	009b      	lsls	r3, r3, #2
 80128f6:	4413      	add	r3, r2
 80128f8:	881b      	ldrh	r3, [r3, #0]
 80128fa:	b29b      	uxth	r3, r3
 80128fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012900:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012904:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8012908:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801290c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012910:	681a      	ldr	r2, [r3, #0]
 8012912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012916:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	781b      	ldrb	r3, [r3, #0]
 801291e:	009b      	lsls	r3, r3, #2
 8012920:	441a      	add	r2, r3
 8012922:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8012926:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801292a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801292e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012932:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8012936:	b29b      	uxth	r3, r3
 8012938:	8013      	strh	r3, [r2, #0]
 801293a:	e1be      	b.n	8012cba <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 801293c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012940:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	78db      	ldrb	r3, [r3, #3]
 8012948:	2b01      	cmp	r3, #1
 801294a:	f040 81b4 	bne.w	8012cb6 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 801294e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012952:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	699a      	ldr	r2, [r3, #24]
 801295a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801295e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012962:	681b      	ldr	r3, [r3, #0]
 8012964:	691b      	ldr	r3, [r3, #16]
 8012966:	429a      	cmp	r2, r3
 8012968:	d917      	bls.n	801299a <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 801296a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801296e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012972:	681b      	ldr	r3, [r3, #0]
 8012974:	691b      	ldr	r3, [r3, #16]
 8012976:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 801297a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801297e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	699a      	ldr	r2, [r3, #24]
 8012986:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801298a:	1ad2      	subs	r2, r2, r3
 801298c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012990:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	619a      	str	r2, [r3, #24]
 8012998:	e00e      	b.n	80129b8 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 801299a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801299e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	699b      	ldr	r3, [r3, #24]
 80129a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80129aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80129ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	2200      	movs	r2, #0
 80129b6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80129b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80129bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	785b      	ldrb	r3, [r3, #1]
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	f040 8085 	bne.w	8012ad4 <USB_EPStartXfer+0x14fc>
 80129ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80129ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80129d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80129dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80129e6:	b29b      	uxth	r3, r3
 80129e8:	461a      	mov	r2, r3
 80129ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80129ee:	4413      	add	r3, r2
 80129f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80129f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80129f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	781b      	ldrb	r3, [r3, #0]
 8012a00:	011a      	lsls	r2, r3, #4
 8012a02:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8012a06:	4413      	add	r3, r2
 8012a08:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8012a0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8012a10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012a14:	881b      	ldrh	r3, [r3, #0]
 8012a16:	b29b      	uxth	r3, r3
 8012a18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012a1c:	b29a      	uxth	r2, r3
 8012a1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012a22:	801a      	strh	r2, [r3, #0]
 8012a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012a28:	2b3e      	cmp	r3, #62	; 0x3e
 8012a2a:	d923      	bls.n	8012a74 <USB_EPStartXfer+0x149c>
 8012a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012a30:	095b      	lsrs	r3, r3, #5
 8012a32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8012a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012a3a:	f003 031f 	and.w	r3, r3, #31
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d104      	bne.n	8012a4c <USB_EPStartXfer+0x1474>
 8012a42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012a46:	3b01      	subs	r3, #1
 8012a48:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8012a4c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012a50:	881b      	ldrh	r3, [r3, #0]
 8012a52:	b29a      	uxth	r2, r3
 8012a54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012a58:	b29b      	uxth	r3, r3
 8012a5a:	029b      	lsls	r3, r3, #10
 8012a5c:	b29b      	uxth	r3, r3
 8012a5e:	4313      	orrs	r3, r2
 8012a60:	b29b      	uxth	r3, r3
 8012a62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012a66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012a6a:	b29a      	uxth	r2, r3
 8012a6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012a70:	801a      	strh	r2, [r3, #0]
 8012a72:	e060      	b.n	8012b36 <USB_EPStartXfer+0x155e>
 8012a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d10c      	bne.n	8012a96 <USB_EPStartXfer+0x14be>
 8012a7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012a80:	881b      	ldrh	r3, [r3, #0]
 8012a82:	b29b      	uxth	r3, r3
 8012a84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012a88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012a8c:	b29a      	uxth	r2, r3
 8012a8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012a92:	801a      	strh	r2, [r3, #0]
 8012a94:	e04f      	b.n	8012b36 <USB_EPStartXfer+0x155e>
 8012a96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012a9a:	085b      	lsrs	r3, r3, #1
 8012a9c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8012aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012aa4:	f003 0301 	and.w	r3, r3, #1
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d004      	beq.n	8012ab6 <USB_EPStartXfer+0x14de>
 8012aac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012ab0:	3301      	adds	r3, #1
 8012ab2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8012ab6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012aba:	881b      	ldrh	r3, [r3, #0]
 8012abc:	b29a      	uxth	r2, r3
 8012abe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012ac2:	b29b      	uxth	r3, r3
 8012ac4:	029b      	lsls	r3, r3, #10
 8012ac6:	b29b      	uxth	r3, r3
 8012ac8:	4313      	orrs	r3, r2
 8012aca:	b29a      	uxth	r2, r3
 8012acc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012ad0:	801a      	strh	r2, [r3, #0]
 8012ad2:	e030      	b.n	8012b36 <USB_EPStartXfer+0x155e>
 8012ad4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012ad8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	785b      	ldrb	r3, [r3, #1]
 8012ae0:	2b01      	cmp	r3, #1
 8012ae2:	d128      	bne.n	8012b36 <USB_EPStartXfer+0x155e>
 8012ae4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012ae8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8012af2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012af6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012b00:	b29b      	uxth	r3, r3
 8012b02:	461a      	mov	r2, r3
 8012b04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8012b08:	4413      	add	r3, r2
 8012b0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8012b0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	781b      	ldrb	r3, [r3, #0]
 8012b1a:	011a      	lsls	r2, r3, #4
 8012b1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8012b20:	4413      	add	r3, r2
 8012b22:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8012b26:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8012b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012b2e:	b29a      	uxth	r2, r3
 8012b30:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8012b34:	801a      	strh	r2, [r3, #0]
 8012b36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8012b44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	785b      	ldrb	r3, [r3, #1]
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	f040 8085 	bne.w	8012c60 <USB_EPStartXfer+0x1688>
 8012b56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8012b64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012b6c:	681b      	ldr	r3, [r3, #0]
 8012b6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012b72:	b29b      	uxth	r3, r3
 8012b74:	461a      	mov	r2, r3
 8012b76:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8012b7a:	4413      	add	r3, r2
 8012b7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8012b80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	781b      	ldrb	r3, [r3, #0]
 8012b8c:	011a      	lsls	r2, r3, #4
 8012b8e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8012b92:	4413      	add	r3, r2
 8012b94:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8012b98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8012b9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012ba0:	881b      	ldrh	r3, [r3, #0]
 8012ba2:	b29b      	uxth	r3, r3
 8012ba4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012ba8:	b29a      	uxth	r2, r3
 8012baa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012bae:	801a      	strh	r2, [r3, #0]
 8012bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012bb4:	2b3e      	cmp	r3, #62	; 0x3e
 8012bb6:	d923      	bls.n	8012c00 <USB_EPStartXfer+0x1628>
 8012bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012bbc:	095b      	lsrs	r3, r3, #5
 8012bbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8012bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012bc6:	f003 031f 	and.w	r3, r3, #31
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d104      	bne.n	8012bd8 <USB_EPStartXfer+0x1600>
 8012bce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012bd2:	3b01      	subs	r3, #1
 8012bd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8012bd8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012bdc:	881b      	ldrh	r3, [r3, #0]
 8012bde:	b29a      	uxth	r2, r3
 8012be0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012be4:	b29b      	uxth	r3, r3
 8012be6:	029b      	lsls	r3, r3, #10
 8012be8:	b29b      	uxth	r3, r3
 8012bea:	4313      	orrs	r3, r2
 8012bec:	b29b      	uxth	r3, r3
 8012bee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012bf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012bf6:	b29a      	uxth	r2, r3
 8012bf8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012bfc:	801a      	strh	r2, [r3, #0]
 8012bfe:	e05c      	b.n	8012cba <USB_EPStartXfer+0x16e2>
 8012c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d10c      	bne.n	8012c22 <USB_EPStartXfer+0x164a>
 8012c08:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012c0c:	881b      	ldrh	r3, [r3, #0]
 8012c0e:	b29b      	uxth	r3, r3
 8012c10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012c14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012c18:	b29a      	uxth	r2, r3
 8012c1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012c1e:	801a      	strh	r2, [r3, #0]
 8012c20:	e04b      	b.n	8012cba <USB_EPStartXfer+0x16e2>
 8012c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012c26:	085b      	lsrs	r3, r3, #1
 8012c28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8012c2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012c30:	f003 0301 	and.w	r3, r3, #1
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d004      	beq.n	8012c42 <USB_EPStartXfer+0x166a>
 8012c38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012c3c:	3301      	adds	r3, #1
 8012c3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8012c42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012c46:	881b      	ldrh	r3, [r3, #0]
 8012c48:	b29a      	uxth	r2, r3
 8012c4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012c4e:	b29b      	uxth	r3, r3
 8012c50:	029b      	lsls	r3, r3, #10
 8012c52:	b29b      	uxth	r3, r3
 8012c54:	4313      	orrs	r3, r2
 8012c56:	b29a      	uxth	r2, r3
 8012c58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012c5c:	801a      	strh	r2, [r3, #0]
 8012c5e:	e02c      	b.n	8012cba <USB_EPStartXfer+0x16e2>
 8012c60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012c64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	785b      	ldrb	r3, [r3, #1]
 8012c6c:	2b01      	cmp	r3, #1
 8012c6e:	d124      	bne.n	8012cba <USB_EPStartXfer+0x16e2>
 8012c70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012c74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012c7e:	b29b      	uxth	r3, r3
 8012c80:	461a      	mov	r2, r3
 8012c82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8012c86:	4413      	add	r3, r2
 8012c88:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8012c8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012c90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	781b      	ldrb	r3, [r3, #0]
 8012c98:	011a      	lsls	r2, r3, #4
 8012c9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8012c9e:	4413      	add	r3, r2
 8012ca0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8012ca4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8012ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012cac:	b29a      	uxth	r2, r3
 8012cae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8012cb2:	801a      	strh	r2, [r3, #0]
 8012cb4:	e001      	b.n	8012cba <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8012cb6:	2301      	movs	r3, #1
 8012cb8:	e03a      	b.n	8012d30 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8012cba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012cbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012cc2:	681a      	ldr	r2, [r3, #0]
 8012cc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012cc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	781b      	ldrb	r3, [r3, #0]
 8012cd0:	009b      	lsls	r3, r3, #2
 8012cd2:	4413      	add	r3, r2
 8012cd4:	881b      	ldrh	r3, [r3, #0]
 8012cd6:	b29b      	uxth	r3, r3
 8012cd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012cdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012ce0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8012ce4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8012ce8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8012cec:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8012cf0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8012cf4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8012cf8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8012cfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012d00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012d04:	681a      	ldr	r2, [r3, #0]
 8012d06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012d0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	781b      	ldrb	r3, [r3, #0]
 8012d12:	009b      	lsls	r3, r3, #2
 8012d14:	441a      	add	r2, r3
 8012d16:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8012d1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012d1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012d2a:	b29b      	uxth	r3, r3
 8012d2c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8012d2e:	2300      	movs	r3, #0
}
 8012d30:	4618      	mov	r0, r3
 8012d32:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8012d36:	46bd      	mov	sp, r7
 8012d38:	bd80      	pop	{r7, pc}

08012d3a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012d3a:	b480      	push	{r7}
 8012d3c:	b085      	sub	sp, #20
 8012d3e:	af00      	add	r7, sp, #0
 8012d40:	6078      	str	r0, [r7, #4]
 8012d42:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8012d44:	683b      	ldr	r3, [r7, #0]
 8012d46:	785b      	ldrb	r3, [r3, #1]
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d020      	beq.n	8012d8e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8012d4c:	687a      	ldr	r2, [r7, #4]
 8012d4e:	683b      	ldr	r3, [r7, #0]
 8012d50:	781b      	ldrb	r3, [r3, #0]
 8012d52:	009b      	lsls	r3, r3, #2
 8012d54:	4413      	add	r3, r2
 8012d56:	881b      	ldrh	r3, [r3, #0]
 8012d58:	b29b      	uxth	r3, r3
 8012d5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012d5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012d62:	81bb      	strh	r3, [r7, #12]
 8012d64:	89bb      	ldrh	r3, [r7, #12]
 8012d66:	f083 0310 	eor.w	r3, r3, #16
 8012d6a:	81bb      	strh	r3, [r7, #12]
 8012d6c:	687a      	ldr	r2, [r7, #4]
 8012d6e:	683b      	ldr	r3, [r7, #0]
 8012d70:	781b      	ldrb	r3, [r3, #0]
 8012d72:	009b      	lsls	r3, r3, #2
 8012d74:	441a      	add	r2, r3
 8012d76:	89bb      	ldrh	r3, [r7, #12]
 8012d78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012d7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012d80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012d84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012d88:	b29b      	uxth	r3, r3
 8012d8a:	8013      	strh	r3, [r2, #0]
 8012d8c:	e01f      	b.n	8012dce <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8012d8e:	687a      	ldr	r2, [r7, #4]
 8012d90:	683b      	ldr	r3, [r7, #0]
 8012d92:	781b      	ldrb	r3, [r3, #0]
 8012d94:	009b      	lsls	r3, r3, #2
 8012d96:	4413      	add	r3, r2
 8012d98:	881b      	ldrh	r3, [r3, #0]
 8012d9a:	b29b      	uxth	r3, r3
 8012d9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012da0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012da4:	81fb      	strh	r3, [r7, #14]
 8012da6:	89fb      	ldrh	r3, [r7, #14]
 8012da8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8012dac:	81fb      	strh	r3, [r7, #14]
 8012dae:	687a      	ldr	r2, [r7, #4]
 8012db0:	683b      	ldr	r3, [r7, #0]
 8012db2:	781b      	ldrb	r3, [r3, #0]
 8012db4:	009b      	lsls	r3, r3, #2
 8012db6:	441a      	add	r2, r3
 8012db8:	89fb      	ldrh	r3, [r7, #14]
 8012dba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012dbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012dc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012dc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012dca:	b29b      	uxth	r3, r3
 8012dcc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8012dce:	2300      	movs	r3, #0
}
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	3714      	adds	r7, #20
 8012dd4:	46bd      	mov	sp, r7
 8012dd6:	bc80      	pop	{r7}
 8012dd8:	4770      	bx	lr

08012dda <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012dda:	b480      	push	{r7}
 8012ddc:	b087      	sub	sp, #28
 8012dde:	af00      	add	r7, sp, #0
 8012de0:	6078      	str	r0, [r7, #4]
 8012de2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8012de4:	683b      	ldr	r3, [r7, #0]
 8012de6:	7b1b      	ldrb	r3, [r3, #12]
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	f040 809d 	bne.w	8012f28 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8012dee:	683b      	ldr	r3, [r7, #0]
 8012df0:	785b      	ldrb	r3, [r3, #1]
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d04c      	beq.n	8012e90 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012df6:	687a      	ldr	r2, [r7, #4]
 8012df8:	683b      	ldr	r3, [r7, #0]
 8012dfa:	781b      	ldrb	r3, [r3, #0]
 8012dfc:	009b      	lsls	r3, r3, #2
 8012dfe:	4413      	add	r3, r2
 8012e00:	881b      	ldrh	r3, [r3, #0]
 8012e02:	823b      	strh	r3, [r7, #16]
 8012e04:	8a3b      	ldrh	r3, [r7, #16]
 8012e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d01b      	beq.n	8012e46 <USB_EPClearStall+0x6c>
 8012e0e:	687a      	ldr	r2, [r7, #4]
 8012e10:	683b      	ldr	r3, [r7, #0]
 8012e12:	781b      	ldrb	r3, [r3, #0]
 8012e14:	009b      	lsls	r3, r3, #2
 8012e16:	4413      	add	r3, r2
 8012e18:	881b      	ldrh	r3, [r3, #0]
 8012e1a:	b29b      	uxth	r3, r3
 8012e1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012e24:	81fb      	strh	r3, [r7, #14]
 8012e26:	687a      	ldr	r2, [r7, #4]
 8012e28:	683b      	ldr	r3, [r7, #0]
 8012e2a:	781b      	ldrb	r3, [r3, #0]
 8012e2c:	009b      	lsls	r3, r3, #2
 8012e2e:	441a      	add	r2, r3
 8012e30:	89fb      	ldrh	r3, [r7, #14]
 8012e32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012e36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012e3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012e3e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8012e42:	b29b      	uxth	r3, r3
 8012e44:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8012e46:	683b      	ldr	r3, [r7, #0]
 8012e48:	78db      	ldrb	r3, [r3, #3]
 8012e4a:	2b01      	cmp	r3, #1
 8012e4c:	d06c      	beq.n	8012f28 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8012e4e:	687a      	ldr	r2, [r7, #4]
 8012e50:	683b      	ldr	r3, [r7, #0]
 8012e52:	781b      	ldrb	r3, [r3, #0]
 8012e54:	009b      	lsls	r3, r3, #2
 8012e56:	4413      	add	r3, r2
 8012e58:	881b      	ldrh	r3, [r3, #0]
 8012e5a:	b29b      	uxth	r3, r3
 8012e5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012e60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012e64:	81bb      	strh	r3, [r7, #12]
 8012e66:	89bb      	ldrh	r3, [r7, #12]
 8012e68:	f083 0320 	eor.w	r3, r3, #32
 8012e6c:	81bb      	strh	r3, [r7, #12]
 8012e6e:	687a      	ldr	r2, [r7, #4]
 8012e70:	683b      	ldr	r3, [r7, #0]
 8012e72:	781b      	ldrb	r3, [r3, #0]
 8012e74:	009b      	lsls	r3, r3, #2
 8012e76:	441a      	add	r2, r3
 8012e78:	89bb      	ldrh	r3, [r7, #12]
 8012e7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012e7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012e82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012e86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012e8a:	b29b      	uxth	r3, r3
 8012e8c:	8013      	strh	r3, [r2, #0]
 8012e8e:	e04b      	b.n	8012f28 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8012e90:	687a      	ldr	r2, [r7, #4]
 8012e92:	683b      	ldr	r3, [r7, #0]
 8012e94:	781b      	ldrb	r3, [r3, #0]
 8012e96:	009b      	lsls	r3, r3, #2
 8012e98:	4413      	add	r3, r2
 8012e9a:	881b      	ldrh	r3, [r3, #0]
 8012e9c:	82fb      	strh	r3, [r7, #22]
 8012e9e:	8afb      	ldrh	r3, [r7, #22]
 8012ea0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d01b      	beq.n	8012ee0 <USB_EPClearStall+0x106>
 8012ea8:	687a      	ldr	r2, [r7, #4]
 8012eaa:	683b      	ldr	r3, [r7, #0]
 8012eac:	781b      	ldrb	r3, [r3, #0]
 8012eae:	009b      	lsls	r3, r3, #2
 8012eb0:	4413      	add	r3, r2
 8012eb2:	881b      	ldrh	r3, [r3, #0]
 8012eb4:	b29b      	uxth	r3, r3
 8012eb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012ebe:	82bb      	strh	r3, [r7, #20]
 8012ec0:	687a      	ldr	r2, [r7, #4]
 8012ec2:	683b      	ldr	r3, [r7, #0]
 8012ec4:	781b      	ldrb	r3, [r3, #0]
 8012ec6:	009b      	lsls	r3, r3, #2
 8012ec8:	441a      	add	r2, r3
 8012eca:	8abb      	ldrh	r3, [r7, #20]
 8012ecc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012ed0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012ed4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8012ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012edc:	b29b      	uxth	r3, r3
 8012ede:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8012ee0:	687a      	ldr	r2, [r7, #4]
 8012ee2:	683b      	ldr	r3, [r7, #0]
 8012ee4:	781b      	ldrb	r3, [r3, #0]
 8012ee6:	009b      	lsls	r3, r3, #2
 8012ee8:	4413      	add	r3, r2
 8012eea:	881b      	ldrh	r3, [r3, #0]
 8012eec:	b29b      	uxth	r3, r3
 8012eee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012ef6:	827b      	strh	r3, [r7, #18]
 8012ef8:	8a7b      	ldrh	r3, [r7, #18]
 8012efa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8012efe:	827b      	strh	r3, [r7, #18]
 8012f00:	8a7b      	ldrh	r3, [r7, #18]
 8012f02:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8012f06:	827b      	strh	r3, [r7, #18]
 8012f08:	687a      	ldr	r2, [r7, #4]
 8012f0a:	683b      	ldr	r3, [r7, #0]
 8012f0c:	781b      	ldrb	r3, [r3, #0]
 8012f0e:	009b      	lsls	r3, r3, #2
 8012f10:	441a      	add	r2, r3
 8012f12:	8a7b      	ldrh	r3, [r7, #18]
 8012f14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012f18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012f1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012f24:	b29b      	uxth	r3, r3
 8012f26:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8012f28:	2300      	movs	r3, #0
}
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	371c      	adds	r7, #28
 8012f2e:	46bd      	mov	sp, r7
 8012f30:	bc80      	pop	{r7}
 8012f32:	4770      	bx	lr

08012f34 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8012f34:	b480      	push	{r7}
 8012f36:	b083      	sub	sp, #12
 8012f38:	af00      	add	r7, sp, #0
 8012f3a:	6078      	str	r0, [r7, #4]
 8012f3c:	460b      	mov	r3, r1
 8012f3e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8012f40:	78fb      	ldrb	r3, [r7, #3]
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d103      	bne.n	8012f4e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	2280      	movs	r2, #128	; 0x80
 8012f4a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8012f4e:	2300      	movs	r3, #0
}
 8012f50:	4618      	mov	r0, r3
 8012f52:	370c      	adds	r7, #12
 8012f54:	46bd      	mov	sp, r7
 8012f56:	bc80      	pop	{r7}
 8012f58:	4770      	bx	lr

08012f5a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8012f5a:	b480      	push	{r7}
 8012f5c:	b083      	sub	sp, #12
 8012f5e:	af00      	add	r7, sp, #0
 8012f60:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8012f62:	2300      	movs	r3, #0
}
 8012f64:	4618      	mov	r0, r3
 8012f66:	370c      	adds	r7, #12
 8012f68:	46bd      	mov	sp, r7
 8012f6a:	bc80      	pop	{r7}
 8012f6c:	4770      	bx	lr

08012f6e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8012f6e:	b480      	push	{r7}
 8012f70:	b083      	sub	sp, #12
 8012f72:	af00      	add	r7, sp, #0
 8012f74:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8012f76:	2300      	movs	r3, #0
}
 8012f78:	4618      	mov	r0, r3
 8012f7a:	370c      	adds	r7, #12
 8012f7c:	46bd      	mov	sp, r7
 8012f7e:	bc80      	pop	{r7}
 8012f80:	4770      	bx	lr

08012f82 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8012f82:	b480      	push	{r7}
 8012f84:	b085      	sub	sp, #20
 8012f86:	af00      	add	r7, sp, #0
 8012f88:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8012f90:	b29b      	uxth	r3, r3
 8012f92:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8012f94:	68fb      	ldr	r3, [r7, #12]
}
 8012f96:	4618      	mov	r0, r3
 8012f98:	3714      	adds	r7, #20
 8012f9a:	46bd      	mov	sp, r7
 8012f9c:	bc80      	pop	{r7}
 8012f9e:	4770      	bx	lr

08012fa0 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8012fa0:	b480      	push	{r7}
 8012fa2:	b083      	sub	sp, #12
 8012fa4:	af00      	add	r7, sp, #0
 8012fa6:	6078      	str	r0, [r7, #4]
 8012fa8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8012faa:	2300      	movs	r3, #0
}
 8012fac:	4618      	mov	r0, r3
 8012fae:	370c      	adds	r7, #12
 8012fb0:	46bd      	mov	sp, r7
 8012fb2:	bc80      	pop	{r7}
 8012fb4:	4770      	bx	lr

08012fb6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8012fb6:	b480      	push	{r7}
 8012fb8:	b08b      	sub	sp, #44	; 0x2c
 8012fba:	af00      	add	r7, sp, #0
 8012fbc:	60f8      	str	r0, [r7, #12]
 8012fbe:	60b9      	str	r1, [r7, #8]
 8012fc0:	4611      	mov	r1, r2
 8012fc2:	461a      	mov	r2, r3
 8012fc4:	460b      	mov	r3, r1
 8012fc6:	80fb      	strh	r3, [r7, #6]
 8012fc8:	4613      	mov	r3, r2
 8012fca:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8012fcc:	88bb      	ldrh	r3, [r7, #4]
 8012fce:	3301      	adds	r3, #1
 8012fd0:	085b      	lsrs	r3, r3, #1
 8012fd2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8012fd8:	68bb      	ldr	r3, [r7, #8]
 8012fda:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8012fdc:	88fb      	ldrh	r3, [r7, #6]
 8012fde:	005a      	lsls	r2, r3, #1
 8012fe0:	697b      	ldr	r3, [r7, #20]
 8012fe2:	4413      	add	r3, r2
 8012fe4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012fe8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8012fea:	69bb      	ldr	r3, [r7, #24]
 8012fec:	627b      	str	r3, [r7, #36]	; 0x24
 8012fee:	e01e      	b.n	801302e <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8012ff0:	69fb      	ldr	r3, [r7, #28]
 8012ff2:	781b      	ldrb	r3, [r3, #0]
 8012ff4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8012ff6:	69fb      	ldr	r3, [r7, #28]
 8012ff8:	3301      	adds	r3, #1
 8012ffa:	781b      	ldrb	r3, [r3, #0]
 8012ffc:	021b      	lsls	r3, r3, #8
 8012ffe:	b21a      	sxth	r2, r3
 8013000:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013004:	4313      	orrs	r3, r2
 8013006:	b21b      	sxth	r3, r3
 8013008:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 801300a:	6a3b      	ldr	r3, [r7, #32]
 801300c:	8a7a      	ldrh	r2, [r7, #18]
 801300e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8013010:	6a3b      	ldr	r3, [r7, #32]
 8013012:	3302      	adds	r3, #2
 8013014:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8013016:	6a3b      	ldr	r3, [r7, #32]
 8013018:	3302      	adds	r3, #2
 801301a:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 801301c:	69fb      	ldr	r3, [r7, #28]
 801301e:	3301      	adds	r3, #1
 8013020:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8013022:	69fb      	ldr	r3, [r7, #28]
 8013024:	3301      	adds	r3, #1
 8013026:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8013028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801302a:	3b01      	subs	r3, #1
 801302c:	627b      	str	r3, [r7, #36]	; 0x24
 801302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013030:	2b00      	cmp	r3, #0
 8013032:	d1dd      	bne.n	8012ff0 <USB_WritePMA+0x3a>
  }
}
 8013034:	bf00      	nop
 8013036:	bf00      	nop
 8013038:	372c      	adds	r7, #44	; 0x2c
 801303a:	46bd      	mov	sp, r7
 801303c:	bc80      	pop	{r7}
 801303e:	4770      	bx	lr

08013040 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8013040:	b480      	push	{r7}
 8013042:	b08b      	sub	sp, #44	; 0x2c
 8013044:	af00      	add	r7, sp, #0
 8013046:	60f8      	str	r0, [r7, #12]
 8013048:	60b9      	str	r1, [r7, #8]
 801304a:	4611      	mov	r1, r2
 801304c:	461a      	mov	r2, r3
 801304e:	460b      	mov	r3, r1
 8013050:	80fb      	strh	r3, [r7, #6]
 8013052:	4613      	mov	r3, r2
 8013054:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8013056:	88bb      	ldrh	r3, [r7, #4]
 8013058:	085b      	lsrs	r3, r3, #1
 801305a:	b29b      	uxth	r3, r3
 801305c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8013062:	68bb      	ldr	r3, [r7, #8]
 8013064:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8013066:	88fb      	ldrh	r3, [r7, #6]
 8013068:	005a      	lsls	r2, r3, #1
 801306a:	697b      	ldr	r3, [r7, #20]
 801306c:	4413      	add	r3, r2
 801306e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013072:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8013074:	69bb      	ldr	r3, [r7, #24]
 8013076:	627b      	str	r3, [r7, #36]	; 0x24
 8013078:	e01b      	b.n	80130b2 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 801307a:	6a3b      	ldr	r3, [r7, #32]
 801307c:	881b      	ldrh	r3, [r3, #0]
 801307e:	b29b      	uxth	r3, r3
 8013080:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8013082:	6a3b      	ldr	r3, [r7, #32]
 8013084:	3302      	adds	r3, #2
 8013086:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8013088:	693b      	ldr	r3, [r7, #16]
 801308a:	b2da      	uxtb	r2, r3
 801308c:	69fb      	ldr	r3, [r7, #28]
 801308e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8013090:	69fb      	ldr	r3, [r7, #28]
 8013092:	3301      	adds	r3, #1
 8013094:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8013096:	693b      	ldr	r3, [r7, #16]
 8013098:	0a1b      	lsrs	r3, r3, #8
 801309a:	b2da      	uxtb	r2, r3
 801309c:	69fb      	ldr	r3, [r7, #28]
 801309e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80130a0:	69fb      	ldr	r3, [r7, #28]
 80130a2:	3301      	adds	r3, #1
 80130a4:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80130a6:	6a3b      	ldr	r3, [r7, #32]
 80130a8:	3302      	adds	r3, #2
 80130aa:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80130ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ae:	3b01      	subs	r3, #1
 80130b0:	627b      	str	r3, [r7, #36]	; 0x24
 80130b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d1e0      	bne.n	801307a <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80130b8:	88bb      	ldrh	r3, [r7, #4]
 80130ba:	f003 0301 	and.w	r3, r3, #1
 80130be:	b29b      	uxth	r3, r3
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d007      	beq.n	80130d4 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80130c4:	6a3b      	ldr	r3, [r7, #32]
 80130c6:	881b      	ldrh	r3, [r3, #0]
 80130c8:	b29b      	uxth	r3, r3
 80130ca:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80130cc:	693b      	ldr	r3, [r7, #16]
 80130ce:	b2da      	uxtb	r2, r3
 80130d0:	69fb      	ldr	r3, [r7, #28]
 80130d2:	701a      	strb	r2, [r3, #0]
  }
}
 80130d4:	bf00      	nop
 80130d6:	372c      	adds	r7, #44	; 0x2c
 80130d8:	46bd      	mov	sp, r7
 80130da:	bc80      	pop	{r7}
 80130dc:	4770      	bx	lr
	...

080130e0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80130e0:	b480      	push	{r7}
 80130e2:	b083      	sub	sp, #12
 80130e4:	af00      	add	r7, sp, #0
 80130e6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80130e8:	4a03      	ldr	r2, [pc, #12]	; (80130f8 <LL_SetSystemCoreClock+0x18>)
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	6013      	str	r3, [r2, #0]
}
 80130ee:	bf00      	nop
 80130f0:	370c      	adds	r7, #12
 80130f2:	46bd      	mov	sp, r7
 80130f4:	bc80      	pop	{r7}
 80130f6:	4770      	bx	lr
 80130f8:	20000018 	.word	0x20000018

080130fc <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80130fc:	b580      	push	{r7, lr}
 80130fe:	b082      	sub	sp, #8
 8013100:	af00      	add	r7, sp, #0
 8013102:	6078      	str	r0, [r7, #4]
 8013104:	460b      	mov	r3, r1
 8013106:	70fb      	strb	r3, [r7, #3]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	7c1b      	ldrb	r3, [r3, #16]
 801310c:	2b00      	cmp	r3, #0
 801310e:	d115      	bne.n	801313c <USBD_MSC_Init+0x40>
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8013110:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013114:	2202      	movs	r2, #2
 8013116:	2101      	movs	r1, #1
 8013118:	6878      	ldr	r0, [r7, #4]
 801311a:	f002 fd60 	bl	8015bde <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	2201      	movs	r2, #1
 8013122:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8013126:	f44f 7300 	mov.w	r3, #512	; 0x200
 801312a:	2202      	movs	r2, #2
 801312c:	2181      	movs	r1, #129	; 0x81
 801312e:	6878      	ldr	r0, [r7, #4]
 8013130:	f002 fd55 	bl	8015bde <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	2201      	movs	r2, #1
 8013138:	62da      	str	r2, [r3, #44]	; 0x2c
 801313a:	e012      	b.n	8013162 <USBD_MSC_Init+0x66>
  }
  else
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801313c:	2340      	movs	r3, #64	; 0x40
 801313e:	2202      	movs	r2, #2
 8013140:	2101      	movs	r1, #1
 8013142:	6878      	ldr	r0, [r7, #4]
 8013144:	f002 fd4b 	bl	8015bde <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	2201      	movs	r2, #1
 801314c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8013150:	2340      	movs	r3, #64	; 0x40
 8013152:	2202      	movs	r2, #2
 8013154:	2181      	movs	r1, #129	; 0x81
 8013156:	6878      	ldr	r0, [r7, #4]
 8013158:	f002 fd41 	bl	8015bde <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	2201      	movs	r2, #1
 8013160:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  pdev->pClassData = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8013162:	f44f 701b 	mov.w	r0, #620	; 0x26c
 8013166:	f002 fe81 	bl	8015e6c <USBD_static_malloc>
 801316a:	4602      	mov	r2, r0
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013178:	2b00      	cmp	r3, #0
 801317a:	d101      	bne.n	8013180 <USBD_MSC_Init+0x84>
  {
    return USBD_FAIL;
 801317c:	2302      	movs	r3, #2
 801317e:	e003      	b.n	8013188 <USBD_MSC_Init+0x8c>
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8013180:	6878      	ldr	r0, [r7, #4]
 8013182:	f000 f9d9 	bl	8013538 <MSC_BOT_Init>

  return USBD_OK;
 8013186:	2300      	movs	r3, #0
}
 8013188:	4618      	mov	r0, r3
 801318a:	3708      	adds	r7, #8
 801318c:	46bd      	mov	sp, r7
 801318e:	bd80      	pop	{r7, pc}

08013190 <USBD_MSC_DeInit>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev,
                         uint8_t cfgidx)
{
 8013190:	b580      	push	{r7, lr}
 8013192:	b082      	sub	sp, #8
 8013194:	af00      	add	r7, sp, #0
 8013196:	6078      	str	r0, [r7, #4]
 8013198:	460b      	mov	r3, r1
 801319a:	70fb      	strb	r3, [r7, #3]
  /* Close MSC EPs */
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 801319c:	2101      	movs	r1, #1
 801319e:	6878      	ldr	r0, [r7, #4]
 80131a0:	f002 fd43 	bl	8015c2a <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	2200      	movs	r2, #0
 80131a8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 80131ac:	2181      	movs	r1, #129	; 0x81
 80131ae:	6878      	ldr	r0, [r7, #4]
 80131b0:	f002 fd3b 	bl	8015c2a <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	2200      	movs	r2, #0
 80131b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 80131ba:	6878      	ldr	r0, [r7, #4]
 80131bc:	f000 fa06 	bl	80135cc <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d009      	beq.n	80131de <USBD_MSC_DeInit+0x4e>
  {
    USBD_free(pdev->pClassData);
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80131d0:	4618      	mov	r0, r3
 80131d2:	f002 fe57 	bl	8015e84 <USBD_static_free>
    pdev->pClassData  = NULL;
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	2200      	movs	r2, #0
 80131da:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 80131de:	2300      	movs	r3, #0
}
 80131e0:	4618      	mov	r0, r3
 80131e2:	3708      	adds	r7, #8
 80131e4:	46bd      	mov	sp, r7
 80131e6:	bd80      	pop	{r7, pc}

080131e8 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80131e8:	b580      	push	{r7, lr}
 80131ea:	b086      	sub	sp, #24
 80131ec:	af00      	add	r7, sp, #0
 80131ee:	6078      	str	r0, [r7, #4]
 80131f0:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80131f8:	613b      	str	r3, [r7, #16]
  uint8_t ret = USBD_OK;
 80131fa:	2300      	movs	r3, #0
 80131fc:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 80131fe:	2300      	movs	r3, #0
 8013200:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013202:	683b      	ldr	r3, [r7, #0]
 8013204:	781b      	ldrb	r3, [r3, #0]
 8013206:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801320a:	2b00      	cmp	r3, #0
 801320c:	d04d      	beq.n	80132aa <USBD_MSC_Setup+0xc2>
 801320e:	2b20      	cmp	r3, #32
 8013210:	f040 8113 	bne.w	801343a <USBD_MSC_Setup+0x252>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8013214:	683b      	ldr	r3, [r7, #0]
 8013216:	785b      	ldrb	r3, [r3, #1]
 8013218:	2bfe      	cmp	r3, #254	; 0xfe
 801321a:	d002      	beq.n	8013222 <USBD_MSC_Setup+0x3a>
 801321c:	2bff      	cmp	r3, #255	; 0xff
 801321e:	d024      	beq.n	801326a <USBD_MSC_Setup+0x82>
 8013220:	e03b      	b.n	801329a <USBD_MSC_Setup+0xb2>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8013222:	683b      	ldr	r3, [r7, #0]
 8013224:	885b      	ldrh	r3, [r3, #2]
 8013226:	2b00      	cmp	r3, #0
 8013228:	d118      	bne.n	801325c <USBD_MSC_Setup+0x74>
 801322a:	683b      	ldr	r3, [r7, #0]
 801322c:	88db      	ldrh	r3, [r3, #6]
 801322e:	2b01      	cmp	r3, #1
 8013230:	d114      	bne.n	801325c <USBD_MSC_Setup+0x74>
              ((req->bmRequest & 0x80U) == 0x80U))
 8013232:	683b      	ldr	r3, [r7, #0]
 8013234:	781b      	ldrb	r3, [r3, #0]
 8013236:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8013238:	2b00      	cmp	r3, #0
 801323a:	da0f      	bge.n	801325c <USBD_MSC_Setup+0x74>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013242:	699b      	ldr	r3, [r3, #24]
 8013244:	4798      	blx	r3
 8013246:	4603      	mov	r3, r0
 8013248:	461a      	mov	r2, r3
 801324a:	693b      	ldr	r3, [r7, #16]
 801324c:	601a      	str	r2, [r3, #0]
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 801324e:	693b      	ldr	r3, [r7, #16]
 8013250:	2201      	movs	r2, #1
 8013252:	4619      	mov	r1, r3
 8013254:	6878      	ldr	r0, [r7, #4]
 8013256:	f002 f992 	bl	801557e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801325a:	e025      	b.n	80132a8 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 801325c:	6839      	ldr	r1, [r7, #0]
 801325e:	6878      	ldr	r0, [r7, #4]
 8013260:	f002 f923 	bl	80154aa <USBD_CtlError>
            ret = USBD_FAIL;
 8013264:	2302      	movs	r3, #2
 8013266:	75fb      	strb	r3, [r7, #23]
          break;
 8013268:	e01e      	b.n	80132a8 <USBD_MSC_Setup+0xc0>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801326a:	683b      	ldr	r3, [r7, #0]
 801326c:	885b      	ldrh	r3, [r3, #2]
 801326e:	2b00      	cmp	r3, #0
 8013270:	d10c      	bne.n	801328c <USBD_MSC_Setup+0xa4>
 8013272:	683b      	ldr	r3, [r7, #0]
 8013274:	88db      	ldrh	r3, [r3, #6]
 8013276:	2b00      	cmp	r3, #0
 8013278:	d108      	bne.n	801328c <USBD_MSC_Setup+0xa4>
              ((req->bmRequest & 0x80U) != 0x80U))
 801327a:	683b      	ldr	r3, [r7, #0]
 801327c:	781b      	ldrb	r3, [r3, #0]
 801327e:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8013280:	2b00      	cmp	r3, #0
 8013282:	db03      	blt.n	801328c <USBD_MSC_Setup+0xa4>
          {
            MSC_BOT_Reset(pdev);
 8013284:	6878      	ldr	r0, [r7, #4]
 8013286:	f000 f987 	bl	8013598 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801328a:	e00d      	b.n	80132a8 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 801328c:	6839      	ldr	r1, [r7, #0]
 801328e:	6878      	ldr	r0, [r7, #4]
 8013290:	f002 f90b 	bl	80154aa <USBD_CtlError>
            ret = USBD_FAIL;
 8013294:	2302      	movs	r3, #2
 8013296:	75fb      	strb	r3, [r7, #23]
          break;
 8013298:	e006      	b.n	80132a8 <USBD_MSC_Setup+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801329a:	6839      	ldr	r1, [r7, #0]
 801329c:	6878      	ldr	r0, [r7, #4]
 801329e:	f002 f904 	bl	80154aa <USBD_CtlError>
          ret = USBD_FAIL;
 80132a2:	2302      	movs	r3, #2
 80132a4:	75fb      	strb	r3, [r7, #23]
          break;
 80132a6:	bf00      	nop
      }
      break;
 80132a8:	e0ce      	b.n	8013448 <USBD_MSC_Setup+0x260>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80132aa:	683b      	ldr	r3, [r7, #0]
 80132ac:	785b      	ldrb	r3, [r3, #1]
 80132ae:	2b0b      	cmp	r3, #11
 80132b0:	f200 80bb 	bhi.w	801342a <USBD_MSC_Setup+0x242>
 80132b4:	a201      	add	r2, pc, #4	; (adr r2, 80132bc <USBD_MSC_Setup+0xd4>)
 80132b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132ba:	bf00      	nop
 80132bc:	080132ed 	.word	0x080132ed
 80132c0:	08013363 	.word	0x08013363
 80132c4:	0801342b 	.word	0x0801342b
 80132c8:	0801342b 	.word	0x0801342b
 80132cc:	0801342b 	.word	0x0801342b
 80132d0:	0801342b 	.word	0x0801342b
 80132d4:	0801342b 	.word	0x0801342b
 80132d8:	0801342b 	.word	0x0801342b
 80132dc:	0801342b 	.word	0x0801342b
 80132e0:	0801342b 	.word	0x0801342b
 80132e4:	08013315 	.word	0x08013315
 80132e8:	0801333d 	.word	0x0801333d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80132f2:	2b03      	cmp	r3, #3
 80132f4:	d107      	bne.n	8013306 <USBD_MSC_Setup+0x11e>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80132f6:	f107 030e 	add.w	r3, r7, #14
 80132fa:	2202      	movs	r2, #2
 80132fc:	4619      	mov	r1, r3
 80132fe:	6878      	ldr	r0, [r7, #4]
 8013300:	f002 f93d 	bl	801557e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013304:	e098      	b.n	8013438 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8013306:	6839      	ldr	r1, [r7, #0]
 8013308:	6878      	ldr	r0, [r7, #4]
 801330a:	f002 f8ce 	bl	80154aa <USBD_CtlError>
            ret = USBD_FAIL;
 801330e:	2302      	movs	r3, #2
 8013310:	75fb      	strb	r3, [r7, #23]
          break;
 8013312:	e091      	b.n	8013438 <USBD_MSC_Setup+0x250>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801331a:	2b03      	cmp	r3, #3
 801331c:	d107      	bne.n	801332e <USBD_MSC_Setup+0x146>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 801331e:	693b      	ldr	r3, [r7, #16]
 8013320:	3304      	adds	r3, #4
 8013322:	2201      	movs	r2, #1
 8013324:	4619      	mov	r1, r3
 8013326:	6878      	ldr	r0, [r7, #4]
 8013328:	f002 f929 	bl	801557e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801332c:	e084      	b.n	8013438 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 801332e:	6839      	ldr	r1, [r7, #0]
 8013330:	6878      	ldr	r0, [r7, #4]
 8013332:	f002 f8ba 	bl	80154aa <USBD_CtlError>
            ret = USBD_FAIL;
 8013336:	2302      	movs	r3, #2
 8013338:	75fb      	strb	r3, [r7, #23]
          break;
 801333a:	e07d      	b.n	8013438 <USBD_MSC_Setup+0x250>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013342:	2b03      	cmp	r3, #3
 8013344:	d106      	bne.n	8013354 <USBD_MSC_Setup+0x16c>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8013346:	683b      	ldr	r3, [r7, #0]
 8013348:	885b      	ldrh	r3, [r3, #2]
 801334a:	b2db      	uxtb	r3, r3
 801334c:	461a      	mov	r2, r3
 801334e:	693b      	ldr	r3, [r7, #16]
 8013350:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013352:	e071      	b.n	8013438 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8013354:	6839      	ldr	r1, [r7, #0]
 8013356:	6878      	ldr	r0, [r7, #4]
 8013358:	f002 f8a7 	bl	80154aa <USBD_CtlError>
            ret = USBD_FAIL;
 801335c:	2302      	movs	r3, #2
 801335e:	75fb      	strb	r3, [r7, #23]
          break;
 8013360:	e06a      	b.n	8013438 <USBD_MSC_Setup+0x250>

        case USB_REQ_CLEAR_FEATURE:

          /* Flush the FIFO and Clear the stall status */
          USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8013362:	683b      	ldr	r3, [r7, #0]
 8013364:	889b      	ldrh	r3, [r3, #4]
 8013366:	b2db      	uxtb	r3, r3
 8013368:	4619      	mov	r1, r3
 801336a:	6878      	ldr	r0, [r7, #4]
 801336c:	f002 fc7c 	bl	8015c68 <USBD_LL_FlushEP>

          /* Reactivate the EP */
          USBD_LL_CloseEP(pdev, (uint8_t)req->wIndex);
 8013370:	683b      	ldr	r3, [r7, #0]
 8013372:	889b      	ldrh	r3, [r3, #4]
 8013374:	b2db      	uxtb	r3, r3
 8013376:	4619      	mov	r1, r3
 8013378:	6878      	ldr	r0, [r7, #4]
 801337a:	f002 fc56 	bl	8015c2a <USBD_LL_CloseEP>
          if ((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 801337e:	683b      	ldr	r3, [r7, #0]
 8013380:	889b      	ldrh	r3, [r3, #4]
 8013382:	b25b      	sxtb	r3, r3
 8013384:	2b00      	cmp	r3, #0
 8013386:	da23      	bge.n	80133d0 <USBD_MSC_Setup+0x1e8>
          {
            pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8013388:	683b      	ldr	r3, [r7, #0]
 801338a:	889b      	ldrh	r3, [r3, #4]
 801338c:	b2db      	uxtb	r3, r3
 801338e:	f003 020f 	and.w	r2, r3, #15
 8013392:	6879      	ldr	r1, [r7, #4]
 8013394:	4613      	mov	r3, r2
 8013396:	009b      	lsls	r3, r3, #2
 8013398:	4413      	add	r3, r2
 801339a:	009b      	lsls	r3, r3, #2
 801339c:	440b      	add	r3, r1
 801339e:	3318      	adds	r3, #24
 80133a0:	2200      	movs	r2, #0
 80133a2:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	7c1b      	ldrb	r3, [r3, #16]
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d107      	bne.n	80133bc <USBD_MSC_Setup+0x1d4>
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 80133ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80133b0:	2202      	movs	r2, #2
 80133b2:	2181      	movs	r1, #129	; 0x81
 80133b4:	6878      	ldr	r0, [r7, #4]
 80133b6:	f002 fc12 	bl	8015bde <USBD_LL_OpenEP>
 80133ba:	e005      	b.n	80133c8 <USBD_MSC_Setup+0x1e0>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 80133bc:	2340      	movs	r3, #64	; 0x40
 80133be:	2202      	movs	r2, #2
 80133c0:	2181      	movs	r1, #129	; 0x81
 80133c2:	6878      	ldr	r0, [r7, #4]
 80133c4:	f002 fc0b 	bl	8015bde <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	2201      	movs	r2, #1
 80133cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80133ce:	e024      	b.n	801341a <USBD_MSC_Setup+0x232>
          }
          else
          {
            pdev->ep_out[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 80133d0:	683b      	ldr	r3, [r7, #0]
 80133d2:	889b      	ldrh	r3, [r3, #4]
 80133d4:	b2db      	uxtb	r3, r3
 80133d6:	f003 020f 	and.w	r2, r3, #15
 80133da:	6879      	ldr	r1, [r7, #4]
 80133dc:	4613      	mov	r3, r2
 80133de:	009b      	lsls	r3, r3, #2
 80133e0:	4413      	add	r3, r2
 80133e2:	009b      	lsls	r3, r3, #2
 80133e4:	440b      	add	r3, r1
 80133e6:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80133ea:	2200      	movs	r2, #0
 80133ec:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	7c1b      	ldrb	r3, [r3, #16]
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d107      	bne.n	8013406 <USBD_MSC_Setup+0x21e>
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 80133f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80133fa:	2202      	movs	r2, #2
 80133fc:	2101      	movs	r1, #1
 80133fe:	6878      	ldr	r0, [r7, #4]
 8013400:	f002 fbed 	bl	8015bde <USBD_LL_OpenEP>
 8013404:	e005      	b.n	8013412 <USBD_MSC_Setup+0x22a>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8013406:	2340      	movs	r3, #64	; 0x40
 8013408:	2202      	movs	r2, #2
 801340a:	2101      	movs	r1, #1
 801340c:	6878      	ldr	r0, [r7, #4]
 801340e:	f002 fbe6 	bl	8015bde <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	2201      	movs	r2, #1
 8013416:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
          }

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 801341a:	683b      	ldr	r3, [r7, #0]
 801341c:	889b      	ldrh	r3, [r3, #4]
 801341e:	b2db      	uxtb	r3, r3
 8013420:	4619      	mov	r1, r3
 8013422:	6878      	ldr	r0, [r7, #4]
 8013424:	f000 fa52 	bl	80138cc <MSC_BOT_CplClrFeature>
          break;
 8013428:	e006      	b.n	8013438 <USBD_MSC_Setup+0x250>

        default:
          USBD_CtlError(pdev, req);
 801342a:	6839      	ldr	r1, [r7, #0]
 801342c:	6878      	ldr	r0, [r7, #4]
 801342e:	f002 f83c 	bl	80154aa <USBD_CtlError>
          ret = USBD_FAIL;
 8013432:	2302      	movs	r3, #2
 8013434:	75fb      	strb	r3, [r7, #23]
          break;
 8013436:	bf00      	nop
      }
      break;
 8013438:	e006      	b.n	8013448 <USBD_MSC_Setup+0x260>

    default:
      USBD_CtlError(pdev, req);
 801343a:	6839      	ldr	r1, [r7, #0]
 801343c:	6878      	ldr	r0, [r7, #4]
 801343e:	f002 f834 	bl	80154aa <USBD_CtlError>
      ret = USBD_FAIL;
 8013442:	2302      	movs	r3, #2
 8013444:	75fb      	strb	r3, [r7, #23]
      break;
 8013446:	bf00      	nop
  }

  return ret;
 8013448:	7dfb      	ldrb	r3, [r7, #23]
}
 801344a:	4618      	mov	r0, r3
 801344c:	3718      	adds	r7, #24
 801344e:	46bd      	mov	sp, r7
 8013450:	bd80      	pop	{r7, pc}
 8013452:	bf00      	nop

08013454 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013454:	b580      	push	{r7, lr}
 8013456:	b082      	sub	sp, #8
 8013458:	af00      	add	r7, sp, #0
 801345a:	6078      	str	r0, [r7, #4]
 801345c:	460b      	mov	r3, r1
 801345e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8013460:	78fb      	ldrb	r3, [r7, #3]
 8013462:	4619      	mov	r1, r3
 8013464:	6878      	ldr	r0, [r7, #4]
 8013466:	f000 f8c1 	bl	80135ec <MSC_BOT_DataIn>

  return USBD_OK;
 801346a:	2300      	movs	r3, #0
}
 801346c:	4618      	mov	r0, r3
 801346e:	3708      	adds	r7, #8
 8013470:	46bd      	mov	sp, r7
 8013472:	bd80      	pop	{r7, pc}

08013474 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013474:	b580      	push	{r7, lr}
 8013476:	b082      	sub	sp, #8
 8013478:	af00      	add	r7, sp, #0
 801347a:	6078      	str	r0, [r7, #4]
 801347c:	460b      	mov	r3, r1
 801347e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8013480:	78fb      	ldrb	r3, [r7, #3]
 8013482:	4619      	mov	r1, r3
 8013484:	6878      	ldr	r0, [r7, #4]
 8013486:	f000 f8e3 	bl	8013650 <MSC_BOT_DataOut>

  return USBD_OK;
 801348a:	2300      	movs	r3, #0
}
 801348c:	4618      	mov	r0, r3
 801348e:	3708      	adds	r7, #8
 8013490:	46bd      	mov	sp, r7
 8013492:	bd80      	pop	{r7, pc}

08013494 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8013494:	b480      	push	{r7}
 8013496:	b083      	sub	sp, #12
 8013498:	af00      	add	r7, sp, #0
 801349a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgHSDesc);
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	2220      	movs	r2, #32
 80134a0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 80134a2:	4b03      	ldr	r3, [pc, #12]	; (80134b0 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 80134a4:	4618      	mov	r0, r3
 80134a6:	370c      	adds	r7, #12
 80134a8:	46bd      	mov	sp, r7
 80134aa:	bc80      	pop	{r7}
 80134ac:	4770      	bx	lr
 80134ae:	bf00      	nop
 80134b0:	2000005c 	.word	0x2000005c

080134b4 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 80134b4:	b480      	push	{r7}
 80134b6:	b083      	sub	sp, #12
 80134b8:	af00      	add	r7, sp, #0
 80134ba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgFSDesc);
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	2220      	movs	r2, #32
 80134c0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 80134c2:	4b03      	ldr	r3, [pc, #12]	; (80134d0 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 80134c4:	4618      	mov	r0, r3
 80134c6:	370c      	adds	r7, #12
 80134c8:	46bd      	mov	sp, r7
 80134ca:	bc80      	pop	{r7}
 80134cc:	4770      	bx	lr
 80134ce:	bf00      	nop
 80134d0:	2000007c 	.word	0x2000007c

080134d4 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80134d4:	b480      	push	{r7}
 80134d6:	b083      	sub	sp, #12
 80134d8:	af00      	add	r7, sp, #0
 80134da:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_OtherSpeedCfgDesc);
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	2220      	movs	r2, #32
 80134e0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 80134e2:	4b03      	ldr	r3, [pc, #12]	; (80134f0 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 80134e4:	4618      	mov	r0, r3
 80134e6:	370c      	adds	r7, #12
 80134e8:	46bd      	mov	sp, r7
 80134ea:	bc80      	pop	{r7}
 80134ec:	4770      	bx	lr
 80134ee:	bf00      	nop
 80134f0:	2000009c 	.word	0x2000009c

080134f4 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80134f4:	b480      	push	{r7}
 80134f6:	b083      	sub	sp, #12
 80134f8:	af00      	add	r7, sp, #0
 80134fa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_DeviceQualifierDesc);
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	220a      	movs	r2, #10
 8013500:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8013502:	4b03      	ldr	r3, [pc, #12]	; (8013510 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8013504:	4618      	mov	r0, r3
 8013506:	370c      	adds	r7, #12
 8013508:	46bd      	mov	sp, r7
 801350a:	bc80      	pop	{r7}
 801350c:	4770      	bx	lr
 801350e:	bf00      	nop
 8013510:	200000bc 	.word	0x200000bc

08013514 <USBD_MSC_RegisterStorage>:
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev,
                                 USBD_StorageTypeDef *fops)
{
 8013514:	b480      	push	{r7}
 8013516:	b083      	sub	sp, #12
 8013518:	af00      	add	r7, sp, #0
 801351a:	6078      	str	r0, [r7, #4]
 801351c:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 801351e:	683b      	ldr	r3, [r7, #0]
 8013520:	2b00      	cmp	r3, #0
 8013522:	d003      	beq.n	801352c <USBD_MSC_RegisterStorage+0x18>
  {
    pdev->pUserData = fops;
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	683a      	ldr	r2, [r7, #0]
 8013528:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return USBD_OK;
 801352c:	2300      	movs	r3, #0
}
 801352e:	4618      	mov	r0, r3
 8013530:	370c      	adds	r7, #12
 8013532:	46bd      	mov	sp, r7
 8013534:	bc80      	pop	{r7}
 8013536:	4770      	bx	lr

08013538 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef  *pdev)
{
 8013538:	b580      	push	{r7, lr}
 801353a:	b084      	sub	sp, #16
 801353c:	af00      	add	r7, sp, #0
 801353e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013546:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	2200      	movs	r2, #0
 801354c:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	2200      	movs	r2, #0
 8013552:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	2200      	movs	r2, #0
 8013558:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  hmsc->scsi_sense_head = 0U;
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	2200      	movs	r2, #0
 8013560:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801356a:	681b      	ldr	r3, [r3, #0]
 801356c:	2000      	movs	r0, #0
 801356e:	4798      	blx	r3

  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8013570:	2101      	movs	r1, #1
 8013572:	6878      	ldr	r0, [r7, #4]
 8013574:	f002 fb78 	bl	8015c68 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8013578:	2181      	movs	r1, #129	; 0x81
 801357a:	6878      	ldr	r0, [r7, #4]
 801357c:	f002 fb74 	bl	8015c68 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8013580:	68fb      	ldr	r3, [r7, #12]
 8013582:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8013586:	231f      	movs	r3, #31
 8013588:	2101      	movs	r1, #1
 801358a:	6878      	ldr	r0, [r7, #4]
 801358c:	f002 fc37 	bl	8015dfe <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8013590:	bf00      	nop
 8013592:	3710      	adds	r7, #16
 8013594:	46bd      	mov	sp, r7
 8013596:	bd80      	pop	{r7, pc}

08013598 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef  *pdev)
{
 8013598:	b580      	push	{r7, lr}
 801359a:	b084      	sub	sp, #16
 801359c:	af00      	add	r7, sp, #0
 801359e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80135a6:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	2200      	movs	r2, #0
 80135ac:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 80135ae:	68fb      	ldr	r3, [r7, #12]
 80135b0:	2201      	movs	r2, #1
 80135b2:	725a      	strb	r2, [r3, #9]

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 80135ba:	231f      	movs	r3, #31
 80135bc:	2101      	movs	r1, #1
 80135be:	6878      	ldr	r0, [r7, #4]
 80135c0:	f002 fc1d 	bl	8015dfe <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 80135c4:	bf00      	nop
 80135c6:	3710      	adds	r7, #16
 80135c8:	46bd      	mov	sp, r7
 80135ca:	bd80      	pop	{r7, pc}

080135cc <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 80135cc:	b480      	push	{r7}
 80135ce:	b085      	sub	sp, #20
 80135d0:	af00      	add	r7, sp, #0
 80135d2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80135da:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	2200      	movs	r2, #0
 80135e0:	721a      	strb	r2, [r3, #8]
}
 80135e2:	bf00      	nop
 80135e4:	3714      	adds	r7, #20
 80135e6:	46bd      	mov	sp, r7
 80135e8:	bc80      	pop	{r7}
 80135ea:	4770      	bx	lr

080135ec <MSC_BOT_DataIn>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef  *pdev,
                    uint8_t epnum)
{
 80135ec:	b580      	push	{r7, lr}
 80135ee:	b084      	sub	sp, #16
 80135f0:	af00      	add	r7, sp, #0
 80135f2:	6078      	str	r0, [r7, #4]
 80135f4:	460b      	mov	r3, r1
 80135f6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80135fe:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8013600:	68fb      	ldr	r3, [r7, #12]
 8013602:	7a1b      	ldrb	r3, [r3, #8]
 8013604:	2b02      	cmp	r3, #2
 8013606:	d005      	beq.n	8013614 <MSC_BOT_DataIn+0x28>
 8013608:	2b02      	cmp	r3, #2
 801360a:	db1a      	blt.n	8013642 <MSC_BOT_DataIn+0x56>
 801360c:	3b03      	subs	r3, #3
 801360e:	2b01      	cmp	r3, #1
 8013610:	d817      	bhi.n	8013642 <MSC_BOT_DataIn+0x56>
 8013612:	e011      	b.n	8013638 <MSC_BOT_DataIn+0x4c>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 801361a:	68fb      	ldr	r3, [r7, #12]
 801361c:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8013620:	461a      	mov	r2, r3
 8013622:	6878      	ldr	r0, [r7, #4]
 8013624:	f000 f97a 	bl	801391c <SCSI_ProcessCmd>
 8013628:	4603      	mov	r3, r0
 801362a:	2b00      	cmp	r3, #0
 801362c:	da0b      	bge.n	8013646 <MSC_BOT_DataIn+0x5a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801362e:	2101      	movs	r1, #1
 8013630:	6878      	ldr	r0, [r7, #4]
 8013632:	f000 f8f1 	bl	8013818 <MSC_BOT_SendCSW>
      }
      break;
 8013636:	e006      	b.n	8013646 <MSC_BOT_DataIn+0x5a>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8013638:	2100      	movs	r1, #0
 801363a:	6878      	ldr	r0, [r7, #4]
 801363c:	f000 f8ec 	bl	8013818 <MSC_BOT_SendCSW>
      break;
 8013640:	e002      	b.n	8013648 <MSC_BOT_DataIn+0x5c>

    default:
      break;
 8013642:	bf00      	nop
 8013644:	e000      	b.n	8013648 <MSC_BOT_DataIn+0x5c>
      break;
 8013646:	bf00      	nop
  }
}
 8013648:	bf00      	nop
 801364a:	3710      	adds	r7, #16
 801364c:	46bd      	mov	sp, r7
 801364e:	bd80      	pop	{r7, pc}

08013650 <MSC_BOT_DataOut>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef  *pdev,
                     uint8_t epnum)
{
 8013650:	b580      	push	{r7, lr}
 8013652:	b084      	sub	sp, #16
 8013654:	af00      	add	r7, sp, #0
 8013656:	6078      	str	r0, [r7, #4]
 8013658:	460b      	mov	r3, r1
 801365a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013662:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8013664:	68fb      	ldr	r3, [r7, #12]
 8013666:	7a1b      	ldrb	r3, [r3, #8]
 8013668:	2b00      	cmp	r3, #0
 801366a:	d002      	beq.n	8013672 <MSC_BOT_DataOut+0x22>
 801366c:	2b01      	cmp	r3, #1
 801366e:	d004      	beq.n	801367a <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8013670:	e015      	b.n	801369e <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 8013672:	6878      	ldr	r0, [r7, #4]
 8013674:	f000 f818 	bl	80136a8 <MSC_BOT_CBW_Decode>
      break;
 8013678:	e011      	b.n	801369e <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801367a:	68fb      	ldr	r3, [r7, #12]
 801367c:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8013686:	461a      	mov	r2, r3
 8013688:	6878      	ldr	r0, [r7, #4]
 801368a:	f000 f947 	bl	801391c <SCSI_ProcessCmd>
 801368e:	4603      	mov	r3, r0
 8013690:	2b00      	cmp	r3, #0
 8013692:	da03      	bge.n	801369c <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8013694:	2101      	movs	r1, #1
 8013696:	6878      	ldr	r0, [r7, #4]
 8013698:	f000 f8be 	bl	8013818 <MSC_BOT_SendCSW>
      break;
 801369c:	bf00      	nop
  }
}
 801369e:	bf00      	nop
 80136a0:	3710      	adds	r7, #16
 80136a2:	46bd      	mov	sp, r7
 80136a4:	bd80      	pop	{r7, pc}
	...

080136a8 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef  *pdev)
{
 80136a8:	b580      	push	{r7, lr}
 80136aa:	b084      	sub	sp, #16
 80136ac:	af00      	add	r7, sp, #0
 80136ae:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80136b6:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80136be:	68fb      	ldr	r3, [r7, #12]
 80136c0:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80136c4:	68fb      	ldr	r3, [r7, #12]
 80136c6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80136ca:	68fb      	ldr	r3, [r7, #12]
 80136cc:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80136d0:	2101      	movs	r1, #1
 80136d2:	6878      	ldr	r0, [r7, #4]
 80136d4:	f002 fbb6 	bl	8015e44 <USBD_LL_GetRxDataSize>
 80136d8:	4603      	mov	r3, r0
 80136da:	2b1f      	cmp	r3, #31
 80136dc:	d114      	bne.n	8013708 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80136de:	68fb      	ldr	r3, [r7, #12]
 80136e0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80136e4:	4a32      	ldr	r2, [pc, #200]	; (80137b0 <MSC_BOT_CBW_Decode+0x108>)
 80136e6:	4293      	cmp	r3, r2
 80136e8:	d10e      	bne.n	8013708 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) ||
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	f893 3219 	ldrb.w	r3, [r3, #537]	; 0x219
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80136f0:	2b01      	cmp	r3, #1
 80136f2:	d809      	bhi.n	8013708 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 80136f4:	68fb      	ldr	r3, [r7, #12]
 80136f6:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
      (hmsc->cbw.bLUN > 1U) ||
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d004      	beq.n	8013708 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 8013704:	2b10      	cmp	r3, #16
 8013706:	d90e      	bls.n	8013726 <MSC_BOT_CBW_Decode+0x7e>
  {

    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 801370e:	2320      	movs	r3, #32
 8013710:	2205      	movs	r2, #5
 8013712:	6878      	ldr	r0, [r7, #4]
 8013714:	f000 fc48 	bl	8013fa8 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8013718:	68fb      	ldr	r3, [r7, #12]
 801371a:	2202      	movs	r2, #2
 801371c:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 801371e:	6878      	ldr	r0, [r7, #4]
 8013720:	f000 f8a6 	bl	8013870 <MSC_BOT_Abort>
 8013724:	e041      	b.n	80137aa <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8013732:	461a      	mov	r2, r3
 8013734:	6878      	ldr	r0, [r7, #4]
 8013736:	f000 f8f1 	bl	801391c <SCSI_ProcessCmd>
 801373a:	4603      	mov	r3, r0
 801373c:	2b00      	cmp	r3, #0
 801373e:	da0c      	bge.n	801375a <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	7a1b      	ldrb	r3, [r3, #8]
 8013744:	2b05      	cmp	r3, #5
 8013746:	d104      	bne.n	8013752 <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8013748:	2101      	movs	r1, #1
 801374a:	6878      	ldr	r0, [r7, #4]
 801374c:	f000 f864 	bl	8013818 <MSC_BOT_SendCSW>
 8013750:	e02b      	b.n	80137aa <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8013752:	6878      	ldr	r0, [r7, #4]
 8013754:	f000 f88c 	bl	8013870 <MSC_BOT_Abort>
 8013758:	e027      	b.n	80137aa <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /*Burst xfer handled internally*/
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 801375a:	68fb      	ldr	r3, [r7, #12]
 801375c:	7a1b      	ldrb	r3, [r3, #8]
 801375e:	2b02      	cmp	r3, #2
 8013760:	d022      	beq.n	80137a8 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8013762:	68fb      	ldr	r3, [r7, #12]
 8013764:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8013766:	2b01      	cmp	r3, #1
 8013768:	d01e      	beq.n	80137a8 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 801376a:	68fb      	ldr	r3, [r7, #12]
 801376c:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 801376e:	2b03      	cmp	r3, #3
 8013770:	d01a      	beq.n	80137a8 <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 8013772:	68fb      	ldr	r3, [r7, #12]
 8013774:	895b      	ldrh	r3, [r3, #10]
 8013776:	2b00      	cmp	r3, #0
 8013778:	d009      	beq.n	801378e <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 801377a:	68fb      	ldr	r3, [r7, #12]
 801377c:	f103 010c 	add.w	r1, r3, #12
 8013780:	68fb      	ldr	r3, [r7, #12]
 8013782:	895b      	ldrh	r3, [r3, #10]
 8013784:	461a      	mov	r2, r3
 8013786:	6878      	ldr	r0, [r7, #4]
 8013788:	f000 f814 	bl	80137b4 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 801378c:	e00d      	b.n	80137aa <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	895b      	ldrh	r3, [r3, #10]
 8013792:	2b00      	cmp	r3, #0
 8013794:	d104      	bne.n	80137a0 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8013796:	2100      	movs	r1, #0
 8013798:	6878      	ldr	r0, [r7, #4]
 801379a:	f000 f83d 	bl	8013818 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 801379e:	e004      	b.n	80137aa <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80137a0:	6878      	ldr	r0, [r7, #4]
 80137a2:	f000 f865 	bl	8013870 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 80137a6:	e000      	b.n	80137aa <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 80137a8:	bf00      	nop
    }
  }
}
 80137aa:	3710      	adds	r7, #16
 80137ac:	46bd      	mov	sp, r7
 80137ae:	bd80      	pop	{r7, pc}
 80137b0:	43425355 	.word	0x43425355

080137b4 <MSC_BOT_SendData>:
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                              uint16_t len)
{
 80137b4:	b580      	push	{r7, lr}
 80137b6:	b086      	sub	sp, #24
 80137b8:	af00      	add	r7, sp, #0
 80137ba:	60f8      	str	r0, [r7, #12]
 80137bc:	60b9      	str	r1, [r7, #8]
 80137be:	4613      	mov	r3, r2
 80137c0:	80fb      	strh	r3, [r7, #6]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80137c2:	68fb      	ldr	r3, [r7, #12]
 80137c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80137c8:	617b      	str	r3, [r7, #20]

  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 80137ca:	697b      	ldr	r3, [r7, #20]
 80137cc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80137d0:	88fb      	ldrh	r3, [r7, #6]
 80137d2:	429a      	cmp	r2, r3
 80137d4:	d204      	bcs.n	80137e0 <MSC_BOT_SendData+0x2c>
 80137d6:	697b      	ldr	r3, [r7, #20]
 80137d8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80137dc:	b29b      	uxth	r3, r3
 80137de:	e000      	b.n	80137e2 <MSC_BOT_SendData+0x2e>
 80137e0:	88fb      	ldrh	r3, [r7, #6]
 80137e2:	827b      	strh	r3, [r7, #18]

  hmsc->csw.dDataResidue -= len;
 80137e4:	697b      	ldr	r3, [r7, #20]
 80137e6:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 80137ea:	88fb      	ldrh	r3, [r7, #6]
 80137ec:	1ad2      	subs	r2, r2, r3
 80137ee:	697b      	ldr	r3, [r7, #20]
 80137f0:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 80137f4:	697b      	ldr	r3, [r7, #20]
 80137f6:	2200      	movs	r2, #0
 80137f8:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 80137fc:	697b      	ldr	r3, [r7, #20]
 80137fe:	2204      	movs	r2, #4
 8013800:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8013802:	8a7b      	ldrh	r3, [r7, #18]
 8013804:	68ba      	ldr	r2, [r7, #8]
 8013806:	2181      	movs	r1, #129	; 0x81
 8013808:	68f8      	ldr	r0, [r7, #12]
 801380a:	f002 fad5 	bl	8015db8 <USBD_LL_Transmit>
}
 801380e:	bf00      	nop
 8013810:	3718      	adds	r7, #24
 8013812:	46bd      	mov	sp, r7
 8013814:	bd80      	pop	{r7, pc}
	...

08013818 <MSC_BOT_SendCSW>:
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef  *pdev,
                      uint8_t CSW_Status)
{
 8013818:	b580      	push	{r7, lr}
 801381a:	b084      	sub	sp, #16
 801381c:	af00      	add	r7, sp, #0
 801381e:	6078      	str	r0, [r7, #4]
 8013820:	460b      	mov	r3, r1
 8013822:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801382a:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 801382c:	68fb      	ldr	r3, [r7, #12]
 801382e:	4a0f      	ldr	r2, [pc, #60]	; (801386c <MSC_BOT_SendCSW+0x54>)
 8013830:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
  hmsc->csw.bStatus = CSW_Status;
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	78fa      	ldrb	r2, [r7, #3]
 8013838:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	2200      	movs	r2, #0
 8013840:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)(void *)&hmsc->csw,
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	f503 720b 	add.w	r2, r3, #556	; 0x22c
 8013848:	230d      	movs	r3, #13
 801384a:	2181      	movs	r1, #129	; 0x81
 801384c:	6878      	ldr	r0, [r7, #4]
 801384e:	f002 fab3 	bl	8015db8 <USBD_LL_Transmit>
                   USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8013858:	231f      	movs	r3, #31
 801385a:	2101      	movs	r1, #1
 801385c:	6878      	ldr	r0, [r7, #4]
 801385e:	f002 face 	bl	8015dfe <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8013862:	bf00      	nop
 8013864:	3710      	adds	r7, #16
 8013866:	46bd      	mov	sp, r7
 8013868:	bd80      	pop	{r7, pc}
 801386a:	bf00      	nop
 801386c:	53425355 	.word	0x53425355

08013870 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef  *pdev)
{
 8013870:	b580      	push	{r7, lr}
 8013872:	b084      	sub	sp, #16
 8013874:	af00      	add	r7, sp, #0
 8013876:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801387e:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 8013880:	68fb      	ldr	r3, [r7, #12]
 8013882:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8013886:	2b00      	cmp	r3, #0
 8013888:	d10c      	bne.n	80138a4 <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
  if ((hmsc->cbw.bmFlags == 0U) &&
 8013890:	2b00      	cmp	r3, #0
 8013892:	d007      	beq.n	80138a4 <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8013894:	68fb      	ldr	r3, [r7, #12]
 8013896:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8013898:	2b00      	cmp	r3, #0
 801389a:	d103      	bne.n	80138a4 <MSC_BOT_Abort+0x34>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 801389c:	2101      	movs	r1, #1
 801389e:	6878      	ldr	r0, [r7, #4]
 80138a0:	f002 fa01 	bl	8015ca6 <USBD_LL_StallEP>
  }

  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80138a4:	2181      	movs	r1, #129	; 0x81
 80138a6:	6878      	ldr	r0, [r7, #4]
 80138a8:	f002 f9fd 	bl	8015ca6 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 80138ac:	68fb      	ldr	r3, [r7, #12]
 80138ae:	7a5b      	ldrb	r3, [r3, #9]
 80138b0:	2b02      	cmp	r3, #2
 80138b2:	d107      	bne.n	80138c4 <MSC_BOT_Abort+0x54>
  {
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 80138b4:	68fb      	ldr	r3, [r7, #12]
 80138b6:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 80138ba:	231f      	movs	r3, #31
 80138bc:	2101      	movs	r1, #1
 80138be:	6878      	ldr	r0, [r7, #4]
 80138c0:	f002 fa9d 	bl	8015dfe <USBD_LL_PrepareReceive>
                           USBD_BOT_CBW_LENGTH);
  }
}
 80138c4:	bf00      	nop
 80138c6:	3710      	adds	r7, #16
 80138c8:	46bd      	mov	sp, r7
 80138ca:	bd80      	pop	{r7, pc}

080138cc <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 80138cc:	b580      	push	{r7, lr}
 80138ce:	b084      	sub	sp, #16
 80138d0:	af00      	add	r7, sp, #0
 80138d2:	6078      	str	r0, [r7, #4]
 80138d4:	460b      	mov	r3, r1
 80138d6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80138de:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	7a5b      	ldrb	r3, [r3, #9]
 80138e4:	2b02      	cmp	r3, #2
 80138e6:	d107      	bne.n	80138f8 <MSC_BOT_CplClrFeature+0x2c>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80138e8:	2181      	movs	r1, #129	; 0x81
 80138ea:	6878      	ldr	r0, [r7, #4]
 80138ec:	f002 f9db 	bl	8015ca6 <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	2200      	movs	r2, #0
 80138f4:	725a      	strb	r2, [r3, #9]
 80138f6:	e00d      	b.n	8013914 <MSC_BOT_CplClrFeature+0x48>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 80138f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	da08      	bge.n	8013912 <MSC_BOT_CplClrFeature+0x46>
 8013900:	68fb      	ldr	r3, [r7, #12]
 8013902:	7a5b      	ldrb	r3, [r3, #9]
 8013904:	2b01      	cmp	r3, #1
 8013906:	d004      	beq.n	8013912 <MSC_BOT_CplClrFeature+0x46>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8013908:	2101      	movs	r1, #1
 801390a:	6878      	ldr	r0, [r7, #4]
 801390c:	f7ff ff84 	bl	8013818 <MSC_BOT_SendCSW>
 8013910:	e000      	b.n	8013914 <MSC_BOT_CplClrFeature+0x48>
  }
  else
  {
    return;
 8013912:	bf00      	nop
  }
}
 8013914:	3710      	adds	r7, #16
 8013916:	46bd      	mov	sp, r7
 8013918:	bd80      	pop	{r7, pc}
	...

0801391c <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 801391c:	b580      	push	{r7, lr}
 801391e:	b084      	sub	sp, #16
 8013920:	af00      	add	r7, sp, #0
 8013922:	60f8      	str	r0, [r7, #12]
 8013924:	460b      	mov	r3, r1
 8013926:	607a      	str	r2, [r7, #4]
 8013928:	72fb      	strb	r3, [r7, #11]
  switch (cmd[0])
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	781b      	ldrb	r3, [r3, #0]
 801392e:	2b5a      	cmp	r3, #90	; 0x5a
 8013930:	f200 810e 	bhi.w	8013b50 <SCSI_ProcessCmd+0x234>
 8013934:	a201      	add	r2, pc, #4	; (adr r2, 801393c <SCSI_ProcessCmd+0x20>)
 8013936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801393a:	bf00      	nop
 801393c:	08013aa9 	.word	0x08013aa9
 8013940:	08013b51 	.word	0x08013b51
 8013944:	08013b51 	.word	0x08013b51
 8013948:	08013ab7 	.word	0x08013ab7
 801394c:	08013b51 	.word	0x08013b51
 8013950:	08013b51 	.word	0x08013b51
 8013954:	08013b51 	.word	0x08013b51
 8013958:	08013b51 	.word	0x08013b51
 801395c:	08013b51 	.word	0x08013b51
 8013960:	08013b51 	.word	0x08013b51
 8013964:	08013b51 	.word	0x08013b51
 8013968:	08013b51 	.word	0x08013b51
 801396c:	08013b51 	.word	0x08013b51
 8013970:	08013b51 	.word	0x08013b51
 8013974:	08013b51 	.word	0x08013b51
 8013978:	08013b51 	.word	0x08013b51
 801397c:	08013b51 	.word	0x08013b51
 8013980:	08013b51 	.word	0x08013b51
 8013984:	08013ac5 	.word	0x08013ac5
 8013988:	08013b51 	.word	0x08013b51
 801398c:	08013b51 	.word	0x08013b51
 8013990:	08013b51 	.word	0x08013b51
 8013994:	08013b51 	.word	0x08013b51
 8013998:	08013b51 	.word	0x08013b51
 801399c:	08013b51 	.word	0x08013b51
 80139a0:	08013b51 	.word	0x08013b51
 80139a4:	08013aef 	.word	0x08013aef
 80139a8:	08013ad3 	.word	0x08013ad3
 80139ac:	08013b51 	.word	0x08013b51
 80139b0:	08013b51 	.word	0x08013b51
 80139b4:	08013ae1 	.word	0x08013ae1
 80139b8:	08013b51 	.word	0x08013b51
 80139bc:	08013b51 	.word	0x08013b51
 80139c0:	08013b51 	.word	0x08013b51
 80139c4:	08013b51 	.word	0x08013b51
 80139c8:	08013b0b 	.word	0x08013b0b
 80139cc:	08013b51 	.word	0x08013b51
 80139d0:	08013b19 	.word	0x08013b19
 80139d4:	08013b51 	.word	0x08013b51
 80139d8:	08013b51 	.word	0x08013b51
 80139dc:	08013b27 	.word	0x08013b27
 80139e0:	08013b51 	.word	0x08013b51
 80139e4:	08013b35 	.word	0x08013b35
 80139e8:	08013b51 	.word	0x08013b51
 80139ec:	08013b51 	.word	0x08013b51
 80139f0:	08013b51 	.word	0x08013b51
 80139f4:	08013b51 	.word	0x08013b51
 80139f8:	08013b43 	.word	0x08013b43
 80139fc:	08013b51 	.word	0x08013b51
 8013a00:	08013b51 	.word	0x08013b51
 8013a04:	08013b51 	.word	0x08013b51
 8013a08:	08013b51 	.word	0x08013b51
 8013a0c:	08013b51 	.word	0x08013b51
 8013a10:	08013b51 	.word	0x08013b51
 8013a14:	08013b51 	.word	0x08013b51
 8013a18:	08013b51 	.word	0x08013b51
 8013a1c:	08013b51 	.word	0x08013b51
 8013a20:	08013b51 	.word	0x08013b51
 8013a24:	08013b51 	.word	0x08013b51
 8013a28:	08013b51 	.word	0x08013b51
 8013a2c:	08013b51 	.word	0x08013b51
 8013a30:	08013b51 	.word	0x08013b51
 8013a34:	08013b51 	.word	0x08013b51
 8013a38:	08013b51 	.word	0x08013b51
 8013a3c:	08013b51 	.word	0x08013b51
 8013a40:	08013b51 	.word	0x08013b51
 8013a44:	08013b51 	.word	0x08013b51
 8013a48:	08013b51 	.word	0x08013b51
 8013a4c:	08013b51 	.word	0x08013b51
 8013a50:	08013b51 	.word	0x08013b51
 8013a54:	08013b51 	.word	0x08013b51
 8013a58:	08013b51 	.word	0x08013b51
 8013a5c:	08013b51 	.word	0x08013b51
 8013a60:	08013b51 	.word	0x08013b51
 8013a64:	08013b51 	.word	0x08013b51
 8013a68:	08013b51 	.word	0x08013b51
 8013a6c:	08013b51 	.word	0x08013b51
 8013a70:	08013b51 	.word	0x08013b51
 8013a74:	08013b51 	.word	0x08013b51
 8013a78:	08013b51 	.word	0x08013b51
 8013a7c:	08013b51 	.word	0x08013b51
 8013a80:	08013b51 	.word	0x08013b51
 8013a84:	08013b51 	.word	0x08013b51
 8013a88:	08013b51 	.word	0x08013b51
 8013a8c:	08013b51 	.word	0x08013b51
 8013a90:	08013b51 	.word	0x08013b51
 8013a94:	08013b51 	.word	0x08013b51
 8013a98:	08013b51 	.word	0x08013b51
 8013a9c:	08013b51 	.word	0x08013b51
 8013aa0:	08013b51 	.word	0x08013b51
 8013aa4:	08013afd 	.word	0x08013afd
  {
    case SCSI_TEST_UNIT_READY:
      SCSI_TestUnitReady(pdev, lun, cmd);
 8013aa8:	7afb      	ldrb	r3, [r7, #11]
 8013aaa:	687a      	ldr	r2, [r7, #4]
 8013aac:	4619      	mov	r1, r3
 8013aae:	68f8      	ldr	r0, [r7, #12]
 8013ab0:	f000 f85c 	bl	8013b6c <SCSI_TestUnitReady>
      break;
 8013ab4:	e055      	b.n	8013b62 <SCSI_ProcessCmd+0x246>

    case SCSI_REQUEST_SENSE:
      SCSI_RequestSense(pdev, lun, cmd);
 8013ab6:	7afb      	ldrb	r3, [r7, #11]
 8013ab8:	687a      	ldr	r2, [r7, #4]
 8013aba:	4619      	mov	r1, r3
 8013abc:	68f8      	ldr	r0, [r7, #12]
 8013abe:	f000 fa09 	bl	8013ed4 <SCSI_RequestSense>
      break;
 8013ac2:	e04e      	b.n	8013b62 <SCSI_ProcessCmd+0x246>
    case SCSI_INQUIRY:
      SCSI_Inquiry(pdev, lun, cmd);
 8013ac4:	7afb      	ldrb	r3, [r7, #11]
 8013ac6:	687a      	ldr	r2, [r7, #4]
 8013ac8:	4619      	mov	r1, r3
 8013aca:	68f8      	ldr	r0, [r7, #12]
 8013acc:	f000 f888 	bl	8013be0 <SCSI_Inquiry>
      break;
 8013ad0:	e047      	b.n	8013b62 <SCSI_ProcessCmd+0x246>

    case SCSI_START_STOP_UNIT:
      SCSI_StartStopUnit(pdev, lun, cmd);
 8013ad2:	7afb      	ldrb	r3, [r7, #11]
 8013ad4:	687a      	ldr	r2, [r7, #4]
 8013ad6:	4619      	mov	r1, r3
 8013ad8:	68f8      	ldr	r0, [r7, #12]
 8013ada:	f000 fa9e 	bl	801401a <SCSI_StartStopUnit>
      break;
 8013ade:	e040      	b.n	8013b62 <SCSI_ProcessCmd+0x246>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      SCSI_StartStopUnit(pdev, lun, cmd);
 8013ae0:	7afb      	ldrb	r3, [r7, #11]
 8013ae2:	687a      	ldr	r2, [r7, #4]
 8013ae4:	4619      	mov	r1, r3
 8013ae6:	68f8      	ldr	r0, [r7, #12]
 8013ae8:	f000 fa97 	bl	801401a <SCSI_StartStopUnit>
      break;
 8013aec:	e039      	b.n	8013b62 <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE6:
      SCSI_ModeSense6(pdev, lun, cmd);
 8013aee:	7afb      	ldrb	r3, [r7, #11]
 8013af0:	687a      	ldr	r2, [r7, #4]
 8013af2:	4619      	mov	r1, r3
 8013af4:	68f8      	ldr	r0, [r7, #12]
 8013af6:	f000 f99d 	bl	8013e34 <SCSI_ModeSense6>
      break;
 8013afa:	e032      	b.n	8013b62 <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE10:
      SCSI_ModeSense10(pdev, lun, cmd);
 8013afc:	7afb      	ldrb	r3, [r7, #11]
 8013afe:	687a      	ldr	r2, [r7, #4]
 8013b00:	4619      	mov	r1, r3
 8013b02:	68f8      	ldr	r0, [r7, #12]
 8013b04:	f000 f9be 	bl	8013e84 <SCSI_ModeSense10>
      break;
 8013b08:	e02b      	b.n	8013b62 <SCSI_ProcessCmd+0x246>

    case SCSI_READ_FORMAT_CAPACITIES:
      SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8013b0a:	7afb      	ldrb	r3, [r7, #11]
 8013b0c:	687a      	ldr	r2, [r7, #4]
 8013b0e:	4619      	mov	r1, r3
 8013b10:	68f8      	ldr	r0, [r7, #12]
 8013b12:	f000 f92a 	bl	8013d6a <SCSI_ReadFormatCapacity>
      break;
 8013b16:	e024      	b.n	8013b62 <SCSI_ProcessCmd+0x246>

    case SCSI_READ_CAPACITY10:
      SCSI_ReadCapacity10(pdev, lun, cmd);
 8013b18:	7afb      	ldrb	r3, [r7, #11]
 8013b1a:	687a      	ldr	r2, [r7, #4]
 8013b1c:	4619      	mov	r1, r3
 8013b1e:	68f8      	ldr	r0, [r7, #12]
 8013b20:	f000 f8bc 	bl	8013c9c <SCSI_ReadCapacity10>
      break;
 8013b24:	e01d      	b.n	8013b62 <SCSI_ProcessCmd+0x246>

    case SCSI_READ10:
      SCSI_Read10(pdev, lun, cmd);
 8013b26:	7afb      	ldrb	r3, [r7, #11]
 8013b28:	687a      	ldr	r2, [r7, #4]
 8013b2a:	4619      	mov	r1, r3
 8013b2c:	68f8      	ldr	r0, [r7, #12]
 8013b2e:	f000 fa88 	bl	8014042 <SCSI_Read10>
      break;
 8013b32:	e016      	b.n	8013b62 <SCSI_ProcessCmd+0x246>

    case SCSI_WRITE10:
      SCSI_Write10(pdev, lun, cmd);
 8013b34:	7afb      	ldrb	r3, [r7, #11]
 8013b36:	687a      	ldr	r2, [r7, #4]
 8013b38:	4619      	mov	r1, r3
 8013b3a:	68f8      	ldr	r0, [r7, #12]
 8013b3c:	f000 fb0d 	bl	801415a <SCSI_Write10>
      break;
 8013b40:	e00f      	b.n	8013b62 <SCSI_ProcessCmd+0x246>

    case SCSI_VERIFY10:
      SCSI_Verify10(pdev, lun, cmd);
 8013b42:	7afb      	ldrb	r3, [r7, #11]
 8013b44:	687a      	ldr	r2, [r7, #4]
 8013b46:	4619      	mov	r1, r3
 8013b48:	68f8      	ldr	r0, [r7, #12]
 8013b4a:	f000 fbb6 	bl	80142ba <SCSI_Verify10>
      break;
 8013b4e:	e008      	b.n	8013b62 <SCSI_ProcessCmd+0x246>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8013b50:	7af9      	ldrb	r1, [r7, #11]
 8013b52:	2320      	movs	r3, #32
 8013b54:	2205      	movs	r2, #5
 8013b56:	68f8      	ldr	r0, [r7, #12]
 8013b58:	f000 fa26 	bl	8013fa8 <SCSI_SenseCode>
      return -1;
 8013b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8013b60:	e000      	b.n	8013b64 <SCSI_ProcessCmd+0x248>
  }

  return 0;
 8013b62:	2300      	movs	r3, #0
}
 8013b64:	4618      	mov	r0, r3
 8013b66:	3710      	adds	r7, #16
 8013b68:	46bd      	mov	sp, r7
 8013b6a:	bd80      	pop	{r7, pc}

08013b6c <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8013b6c:	b580      	push	{r7, lr}
 8013b6e:	b086      	sub	sp, #24
 8013b70:	af00      	add	r7, sp, #0
 8013b72:	60f8      	str	r0, [r7, #12]
 8013b74:	460b      	mov	r3, r1
 8013b76:	607a      	str	r2, [r7, #4]
 8013b78:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013b7a:	68fb      	ldr	r3, [r7, #12]
 8013b7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013b80:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8013b82:	697b      	ldr	r3, [r7, #20]
 8013b84:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d00a      	beq.n	8013ba2 <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013b8c:	697b      	ldr	r3, [r7, #20]
 8013b8e:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8013b92:	2320      	movs	r3, #32
 8013b94:	2205      	movs	r2, #5
 8013b96:	68f8      	ldr	r0, [r7, #12]
 8013b98:	f000 fa06 	bl	8013fa8 <SCSI_SenseCode>

    return -1;
 8013b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8013ba0:	e019      	b.n	8013bd6 <SCSI_TestUnitReady+0x6a>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8013ba2:	68fb      	ldr	r3, [r7, #12]
 8013ba4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013ba8:	689b      	ldr	r3, [r3, #8]
 8013baa:	7afa      	ldrb	r2, [r7, #11]
 8013bac:	4610      	mov	r0, r2
 8013bae:	4798      	blx	r3
 8013bb0:	4603      	mov	r3, r0
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d00b      	beq.n	8013bce <SCSI_TestUnitReady+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8013bb6:	7af9      	ldrb	r1, [r7, #11]
 8013bb8:	233a      	movs	r3, #58	; 0x3a
 8013bba:	2202      	movs	r2, #2
 8013bbc:	68f8      	ldr	r0, [r7, #12]
 8013bbe:	f000 f9f3 	bl	8013fa8 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8013bc2:	697b      	ldr	r3, [r7, #20]
 8013bc4:	2205      	movs	r2, #5
 8013bc6:	721a      	strb	r2, [r3, #8]

    return -1;
 8013bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8013bcc:	e003      	b.n	8013bd6 <SCSI_TestUnitReady+0x6a>
  }
  hmsc->bot_data_length = 0U;
 8013bce:	697b      	ldr	r3, [r7, #20]
 8013bd0:	2200      	movs	r2, #0
 8013bd2:	815a      	strh	r2, [r3, #10]

  return 0;
 8013bd4:	2300      	movs	r3, #0
}
 8013bd6:	4618      	mov	r0, r3
 8013bd8:	3718      	adds	r7, #24
 8013bda:	46bd      	mov	sp, r7
 8013bdc:	bd80      	pop	{r7, pc}
	...

08013be0 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8013be0:	b480      	push	{r7}
 8013be2:	b089      	sub	sp, #36	; 0x24
 8013be4:	af00      	add	r7, sp, #0
 8013be6:	60f8      	str	r0, [r7, #12]
 8013be8:	460b      	mov	r3, r1
 8013bea:	607a      	str	r2, [r7, #4]
 8013bec:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013bee:	68fb      	ldr	r3, [r7, #12]
 8013bf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013bf4:	61bb      	str	r3, [r7, #24]

  if (params[1] & 0x01U)/*Evpd is set*/
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	3301      	adds	r3, #1
 8013bfa:	781b      	ldrb	r3, [r3, #0]
 8013bfc:	f003 0301 	and.w	r3, r3, #1
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d014      	beq.n	8013c2e <SCSI_Inquiry+0x4e>
  {
    len = LENGTH_INQUIRY_PAGE00;
 8013c04:	2307      	movs	r3, #7
 8013c06:	83fb      	strh	r3, [r7, #30]
    hmsc->bot_data_length = len;
 8013c08:	69bb      	ldr	r3, [r7, #24]
 8013c0a:	8bfa      	ldrh	r2, [r7, #30]
 8013c0c:	815a      	strh	r2, [r3, #10]

    while (len)
 8013c0e:	e00a      	b.n	8013c26 <SCSI_Inquiry+0x46>
    {
      len--;
 8013c10:	8bfb      	ldrh	r3, [r7, #30]
 8013c12:	3b01      	subs	r3, #1
 8013c14:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = MSC_Page00_Inquiry_Data[len];
 8013c16:	8bfa      	ldrh	r2, [r7, #30]
 8013c18:	8bfb      	ldrh	r3, [r7, #30]
 8013c1a:	491f      	ldr	r1, [pc, #124]	; (8013c98 <SCSI_Inquiry+0xb8>)
 8013c1c:	5c89      	ldrb	r1, [r1, r2]
 8013c1e:	69ba      	ldr	r2, [r7, #24]
 8013c20:	4413      	add	r3, r2
 8013c22:	460a      	mov	r2, r1
 8013c24:	731a      	strb	r2, [r3, #12]
    while (len)
 8013c26:	8bfb      	ldrh	r3, [r7, #30]
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d1f1      	bne.n	8013c10 <SCSI_Inquiry+0x30>
 8013c2c:	e02e      	b.n	8013c8c <SCSI_Inquiry+0xac>
    }
  }
  else
  {
    pPage = (uint8_t *)(void *) & ((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8013c2e:	68fb      	ldr	r3, [r7, #12]
 8013c30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013c34:	69d9      	ldr	r1, [r3, #28]
 8013c36:	7afa      	ldrb	r2, [r7, #11]
 8013c38:	4613      	mov	r3, r2
 8013c3a:	00db      	lsls	r3, r3, #3
 8013c3c:	4413      	add	r3, r2
 8013c3e:	009b      	lsls	r3, r3, #2
 8013c40:	440b      	add	r3, r1
 8013c42:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8013c44:	697b      	ldr	r3, [r7, #20]
 8013c46:	3304      	adds	r3, #4
 8013c48:	781b      	ldrb	r3, [r3, #0]
 8013c4a:	b29b      	uxth	r3, r3
 8013c4c:	3305      	adds	r3, #5
 8013c4e:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	3304      	adds	r3, #4
 8013c54:	781b      	ldrb	r3, [r3, #0]
 8013c56:	b29b      	uxth	r3, r3
 8013c58:	8bfa      	ldrh	r2, [r7, #30]
 8013c5a:	429a      	cmp	r2, r3
 8013c5c:	d303      	bcc.n	8013c66 <SCSI_Inquiry+0x86>
    {
      len = params[4];
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	3304      	adds	r3, #4
 8013c62:	781b      	ldrb	r3, [r3, #0]
 8013c64:	83fb      	strh	r3, [r7, #30]
    }
    hmsc->bot_data_length = len;
 8013c66:	69bb      	ldr	r3, [r7, #24]
 8013c68:	8bfa      	ldrh	r2, [r7, #30]
 8013c6a:	815a      	strh	r2, [r3, #10]

    while (len)
 8013c6c:	e00b      	b.n	8013c86 <SCSI_Inquiry+0xa6>
    {
      len--;
 8013c6e:	8bfb      	ldrh	r3, [r7, #30]
 8013c70:	3b01      	subs	r3, #1
 8013c72:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = pPage[len];
 8013c74:	8bfb      	ldrh	r3, [r7, #30]
 8013c76:	697a      	ldr	r2, [r7, #20]
 8013c78:	441a      	add	r2, r3
 8013c7a:	8bfb      	ldrh	r3, [r7, #30]
 8013c7c:	7811      	ldrb	r1, [r2, #0]
 8013c7e:	69ba      	ldr	r2, [r7, #24]
 8013c80:	4413      	add	r3, r2
 8013c82:	460a      	mov	r2, r1
 8013c84:	731a      	strb	r2, [r3, #12]
    while (len)
 8013c86:	8bfb      	ldrh	r3, [r7, #30]
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d1f0      	bne.n	8013c6e <SCSI_Inquiry+0x8e>
    }
  }

  return 0;
 8013c8c:	2300      	movs	r3, #0
}
 8013c8e:	4618      	mov	r0, r3
 8013c90:	3724      	adds	r7, #36	; 0x24
 8013c92:	46bd      	mov	sp, r7
 8013c94:	bc80      	pop	{r7}
 8013c96:	4770      	bx	lr
 8013c98:	08016138 	.word	0x08016138

08013c9c <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8013c9c:	b580      	push	{r7, lr}
 8013c9e:	b086      	sub	sp, #24
 8013ca0:	af00      	add	r7, sp, #0
 8013ca2:	60f8      	str	r0, [r7, #12]
 8013ca4:	460b      	mov	r3, r1
 8013ca6:	607a      	str	r2, [r7, #4]
 8013ca8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013cb0:	617b      	str	r3, [r7, #20]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 8013cb2:	68fb      	ldr	r3, [r7, #12]
 8013cb4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013cb8:	685b      	ldr	r3, [r3, #4]
 8013cba:	697a      	ldr	r2, [r7, #20]
 8013cbc:	f502 7118 	add.w	r1, r2, #608	; 0x260
 8013cc0:	697a      	ldr	r2, [r7, #20]
 8013cc2:	f202 225e 	addw	r2, r2, #606	; 0x25e
 8013cc6:	7af8      	ldrb	r0, [r7, #11]
 8013cc8:	4798      	blx	r3
 8013cca:	4603      	mov	r3, r0
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d008      	beq.n	8013ce2 <SCSI_ReadCapacity10+0x46>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8013cd0:	7af9      	ldrb	r1, [r7, #11]
 8013cd2:	233a      	movs	r3, #58	; 0x3a
 8013cd4:	2202      	movs	r2, #2
 8013cd6:	68f8      	ldr	r0, [r7, #12]
 8013cd8:	f000 f966 	bl	8013fa8 <SCSI_SenseCode>
    return -1;
 8013cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8013ce0:	e03f      	b.n	8013d62 <SCSI_ReadCapacity10+0xc6>
  }
  else
  {

    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8013ce2:	697b      	ldr	r3, [r7, #20]
 8013ce4:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8013ce8:	3b01      	subs	r3, #1
 8013cea:	0e1b      	lsrs	r3, r3, #24
 8013cec:	b2da      	uxtb	r2, r3
 8013cee:	697b      	ldr	r3, [r7, #20]
 8013cf0:	731a      	strb	r2, [r3, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8013cf2:	697b      	ldr	r3, [r7, #20]
 8013cf4:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8013cf8:	3b01      	subs	r3, #1
 8013cfa:	0c1b      	lsrs	r3, r3, #16
 8013cfc:	b2da      	uxtb	r2, r3
 8013cfe:	697b      	ldr	r3, [r7, #20]
 8013d00:	735a      	strb	r2, [r3, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8013d02:	697b      	ldr	r3, [r7, #20]
 8013d04:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8013d08:	3b01      	subs	r3, #1
 8013d0a:	0a1b      	lsrs	r3, r3, #8
 8013d0c:	b2da      	uxtb	r2, r3
 8013d0e:	697b      	ldr	r3, [r7, #20]
 8013d10:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8013d12:	697b      	ldr	r3, [r7, #20]
 8013d14:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8013d18:	b2db      	uxtb	r3, r3
 8013d1a:	3b01      	subs	r3, #1
 8013d1c:	b2da      	uxtb	r2, r3
 8013d1e:	697b      	ldr	r3, [r7, #20]
 8013d20:	73da      	strb	r2, [r3, #15]

    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8013d22:	697b      	ldr	r3, [r7, #20]
 8013d24:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8013d28:	161b      	asrs	r3, r3, #24
 8013d2a:	b2da      	uxtb	r2, r3
 8013d2c:	697b      	ldr	r3, [r7, #20]
 8013d2e:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8013d30:	697b      	ldr	r3, [r7, #20]
 8013d32:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8013d36:	141b      	asrs	r3, r3, #16
 8013d38:	b2da      	uxtb	r2, r3
 8013d3a:	697b      	ldr	r3, [r7, #20]
 8013d3c:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8013d3e:	697b      	ldr	r3, [r7, #20]
 8013d40:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8013d44:	0a1b      	lsrs	r3, r3, #8
 8013d46:	b29b      	uxth	r3, r3
 8013d48:	b2da      	uxtb	r2, r3
 8013d4a:	697b      	ldr	r3, [r7, #20]
 8013d4c:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8013d4e:	697b      	ldr	r3, [r7, #20]
 8013d50:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8013d54:	b2da      	uxtb	r2, r3
 8013d56:	697b      	ldr	r3, [r7, #20]
 8013d58:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data_length = 8U;
 8013d5a:	697b      	ldr	r3, [r7, #20]
 8013d5c:	2208      	movs	r2, #8
 8013d5e:	815a      	strh	r2, [r3, #10]
    return 0;
 8013d60:	2300      	movs	r3, #0
  }
}
 8013d62:	4618      	mov	r0, r3
 8013d64:	3718      	adds	r7, #24
 8013d66:	46bd      	mov	sp, r7
 8013d68:	bd80      	pop	{r7, pc}

08013d6a <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8013d6a:	b580      	push	{r7, lr}
 8013d6c:	b088      	sub	sp, #32
 8013d6e:	af00      	add	r7, sp, #0
 8013d70:	60f8      	str	r0, [r7, #12]
 8013d72:	460b      	mov	r3, r1
 8013d74:	607a      	str	r2, [r7, #4]
 8013d76:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013d78:	68fb      	ldr	r3, [r7, #12]
 8013d7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013d7e:	61bb      	str	r3, [r7, #24]

  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;

  for (i = 0U; i < 12U ; i++)
 8013d80:	2300      	movs	r3, #0
 8013d82:	83fb      	strh	r3, [r7, #30]
 8013d84:	e007      	b.n	8013d96 <SCSI_ReadFormatCapacity+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 8013d86:	8bfb      	ldrh	r3, [r7, #30]
 8013d88:	69ba      	ldr	r2, [r7, #24]
 8013d8a:	4413      	add	r3, r2
 8013d8c:	2200      	movs	r2, #0
 8013d8e:	731a      	strb	r2, [r3, #12]
  for (i = 0U; i < 12U ; i++)
 8013d90:	8bfb      	ldrh	r3, [r7, #30]
 8013d92:	3301      	adds	r3, #1
 8013d94:	83fb      	strh	r3, [r7, #30]
 8013d96:	8bfb      	ldrh	r3, [r7, #30]
 8013d98:	2b0b      	cmp	r3, #11
 8013d9a:	d9f4      	bls.n	8013d86 <SCSI_ReadFormatCapacity+0x1c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0U)
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013da2:	685b      	ldr	r3, [r3, #4]
 8013da4:	f107 0216 	add.w	r2, r7, #22
 8013da8:	f107 0110 	add.w	r1, r7, #16
 8013dac:	7af8      	ldrb	r0, [r7, #11]
 8013dae:	4798      	blx	r3
 8013db0:	4603      	mov	r3, r0
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d008      	beq.n	8013dc8 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8013db6:	7af9      	ldrb	r1, [r7, #11]
 8013db8:	233a      	movs	r3, #58	; 0x3a
 8013dba:	2202      	movs	r2, #2
 8013dbc:	68f8      	ldr	r0, [r7, #12]
 8013dbe:	f000 f8f3 	bl	8013fa8 <SCSI_SenseCode>
    return -1;
 8013dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8013dc6:	e030      	b.n	8013e2a <SCSI_ReadFormatCapacity+0xc0>
  }
  else
  {
    hmsc->bot_data[3] = 0x08U;
 8013dc8:	69bb      	ldr	r3, [r7, #24]
 8013dca:	2208      	movs	r2, #8
 8013dcc:	73da      	strb	r2, [r3, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8013dce:	693b      	ldr	r3, [r7, #16]
 8013dd0:	3b01      	subs	r3, #1
 8013dd2:	0e1b      	lsrs	r3, r3, #24
 8013dd4:	b2da      	uxtb	r2, r3
 8013dd6:	69bb      	ldr	r3, [r7, #24]
 8013dd8:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8013dda:	693b      	ldr	r3, [r7, #16]
 8013ddc:	3b01      	subs	r3, #1
 8013dde:	0c1b      	lsrs	r3, r3, #16
 8013de0:	b2da      	uxtb	r2, r3
 8013de2:	69bb      	ldr	r3, [r7, #24]
 8013de4:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8013de6:	693b      	ldr	r3, [r7, #16]
 8013de8:	3b01      	subs	r3, #1
 8013dea:	0a1b      	lsrs	r3, r3, #8
 8013dec:	b2da      	uxtb	r2, r3
 8013dee:	69bb      	ldr	r3, [r7, #24]
 8013df0:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8013df2:	693b      	ldr	r3, [r7, #16]
 8013df4:	b2db      	uxtb	r3, r3
 8013df6:	3b01      	subs	r3, #1
 8013df8:	b2da      	uxtb	r2, r3
 8013dfa:	69bb      	ldr	r3, [r7, #24]
 8013dfc:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data[8] = 0x02U;
 8013dfe:	69bb      	ldr	r3, [r7, #24]
 8013e00:	2202      	movs	r2, #2
 8013e02:	751a      	strb	r2, [r3, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8013e04:	8afb      	ldrh	r3, [r7, #22]
 8013e06:	141b      	asrs	r3, r3, #16
 8013e08:	b2da      	uxtb	r2, r3
 8013e0a:	69bb      	ldr	r3, [r7, #24]
 8013e0c:	755a      	strb	r2, [r3, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8013e0e:	8afb      	ldrh	r3, [r7, #22]
 8013e10:	0a1b      	lsrs	r3, r3, #8
 8013e12:	b29b      	uxth	r3, r3
 8013e14:	b2da      	uxtb	r2, r3
 8013e16:	69bb      	ldr	r3, [r7, #24]
 8013e18:	759a      	strb	r2, [r3, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 8013e1a:	8afb      	ldrh	r3, [r7, #22]
 8013e1c:	b2da      	uxtb	r2, r3
 8013e1e:	69bb      	ldr	r3, [r7, #24]
 8013e20:	75da      	strb	r2, [r3, #23]

    hmsc->bot_data_length = 12U;
 8013e22:	69bb      	ldr	r3, [r7, #24]
 8013e24:	220c      	movs	r2, #12
 8013e26:	815a      	strh	r2, [r3, #10]
    return 0;
 8013e28:	2300      	movs	r3, #0
  }
}
 8013e2a:	4618      	mov	r0, r3
 8013e2c:	3720      	adds	r7, #32
 8013e2e:	46bd      	mov	sp, r7
 8013e30:	bd80      	pop	{r7, pc}
	...

08013e34 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8013e34:	b480      	push	{r7}
 8013e36:	b087      	sub	sp, #28
 8013e38:	af00      	add	r7, sp, #0
 8013e3a:	60f8      	str	r0, [r7, #12]
 8013e3c:	460b      	mov	r3, r1
 8013e3e:	607a      	str	r2, [r7, #4]
 8013e40:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013e42:	68fb      	ldr	r3, [r7, #12]
 8013e44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013e48:	613b      	str	r3, [r7, #16]
  uint16_t len = 8U;
 8013e4a:	2308      	movs	r3, #8
 8013e4c:	82fb      	strh	r3, [r7, #22]
  hmsc->bot_data_length = len;
 8013e4e:	693b      	ldr	r3, [r7, #16]
 8013e50:	8afa      	ldrh	r2, [r7, #22]
 8013e52:	815a      	strh	r2, [r3, #10]

  while (len)
 8013e54:	e00a      	b.n	8013e6c <SCSI_ModeSense6+0x38>
  {
    len--;
 8013e56:	8afb      	ldrh	r3, [r7, #22]
 8013e58:	3b01      	subs	r3, #1
 8013e5a:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 8013e5c:	8afa      	ldrh	r2, [r7, #22]
 8013e5e:	8afb      	ldrh	r3, [r7, #22]
 8013e60:	4907      	ldr	r1, [pc, #28]	; (8013e80 <SCSI_ModeSense6+0x4c>)
 8013e62:	5c89      	ldrb	r1, [r1, r2]
 8013e64:	693a      	ldr	r2, [r7, #16]
 8013e66:	4413      	add	r3, r2
 8013e68:	460a      	mov	r2, r1
 8013e6a:	731a      	strb	r2, [r3, #12]
  while (len)
 8013e6c:	8afb      	ldrh	r3, [r7, #22]
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d1f1      	bne.n	8013e56 <SCSI_ModeSense6+0x22>
  }
  return 0;
 8013e72:	2300      	movs	r3, #0
}
 8013e74:	4618      	mov	r0, r3
 8013e76:	371c      	adds	r7, #28
 8013e78:	46bd      	mov	sp, r7
 8013e7a:	bc80      	pop	{r7}
 8013e7c:	4770      	bx	lr
 8013e7e:	bf00      	nop
 8013e80:	08016140 	.word	0x08016140

08013e84 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8013e84:	b480      	push	{r7}
 8013e86:	b087      	sub	sp, #28
 8013e88:	af00      	add	r7, sp, #0
 8013e8a:	60f8      	str	r0, [r7, #12]
 8013e8c:	460b      	mov	r3, r1
 8013e8e:	607a      	str	r2, [r7, #4]
 8013e90:	72fb      	strb	r3, [r7, #11]
  uint16_t len = 8U;
 8013e92:	2308      	movs	r3, #8
 8013e94:	82fb      	strh	r3, [r7, #22]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013e96:	68fb      	ldr	r3, [r7, #12]
 8013e98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013e9c:	613b      	str	r3, [r7, #16]

  hmsc->bot_data_length = len;
 8013e9e:	693b      	ldr	r3, [r7, #16]
 8013ea0:	8afa      	ldrh	r2, [r7, #22]
 8013ea2:	815a      	strh	r2, [r3, #10]

  while (len)
 8013ea4:	e00a      	b.n	8013ebc <SCSI_ModeSense10+0x38>
  {
    len--;
 8013ea6:	8afb      	ldrh	r3, [r7, #22]
 8013ea8:	3b01      	subs	r3, #1
 8013eaa:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 8013eac:	8afa      	ldrh	r2, [r7, #22]
 8013eae:	8afb      	ldrh	r3, [r7, #22]
 8013eb0:	4907      	ldr	r1, [pc, #28]	; (8013ed0 <SCSI_ModeSense10+0x4c>)
 8013eb2:	5c89      	ldrb	r1, [r1, r2]
 8013eb4:	693a      	ldr	r2, [r7, #16]
 8013eb6:	4413      	add	r3, r2
 8013eb8:	460a      	mov	r2, r1
 8013eba:	731a      	strb	r2, [r3, #12]
  while (len)
 8013ebc:	8afb      	ldrh	r3, [r7, #22]
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	d1f1      	bne.n	8013ea6 <SCSI_ModeSense10+0x22>
  }

  return 0;
 8013ec2:	2300      	movs	r3, #0
}
 8013ec4:	4618      	mov	r0, r3
 8013ec6:	371c      	adds	r7, #28
 8013ec8:	46bd      	mov	sp, r7
 8013eca:	bc80      	pop	{r7}
 8013ecc:	4770      	bx	lr
 8013ece:	bf00      	nop
 8013ed0:	08016148 	.word	0x08016148

08013ed4 <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8013ed4:	b480      	push	{r7}
 8013ed6:	b087      	sub	sp, #28
 8013ed8:	af00      	add	r7, sp, #0
 8013eda:	60f8      	str	r0, [r7, #12]
 8013edc:	460b      	mov	r3, r1
 8013ede:	607a      	str	r2, [r7, #4]
 8013ee0:	72fb      	strb	r3, [r7, #11]
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013ee8:	613b      	str	r3, [r7, #16]

  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 8013eea:	2300      	movs	r3, #0
 8013eec:	75fb      	strb	r3, [r7, #23]
 8013eee:	e007      	b.n	8013f00 <SCSI_RequestSense+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 8013ef0:	7dfb      	ldrb	r3, [r7, #23]
 8013ef2:	693a      	ldr	r2, [r7, #16]
 8013ef4:	4413      	add	r3, r2
 8013ef6:	2200      	movs	r2, #0
 8013ef8:	731a      	strb	r2, [r3, #12]
  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 8013efa:	7dfb      	ldrb	r3, [r7, #23]
 8013efc:	3301      	adds	r3, #1
 8013efe:	75fb      	strb	r3, [r7, #23]
 8013f00:	7dfb      	ldrb	r3, [r7, #23]
 8013f02:	2b11      	cmp	r3, #17
 8013f04:	d9f4      	bls.n	8013ef0 <SCSI_RequestSense+0x1c>
  }

  hmsc->bot_data[0] = 0x70U;
 8013f06:	693b      	ldr	r3, [r7, #16]
 8013f08:	2270      	movs	r2, #112	; 0x70
 8013f0a:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8013f0c:	693b      	ldr	r3, [r7, #16]
 8013f0e:	220c      	movs	r2, #12
 8013f10:	74da      	strb	r2, [r3, #19]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8013f12:	693b      	ldr	r3, [r7, #16]
 8013f14:	f893 225c 	ldrb.w	r2, [r3, #604]	; 0x25c
 8013f18:	693b      	ldr	r3, [r7, #16]
 8013f1a:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8013f1e:	429a      	cmp	r2, r3
 8013f20:	d02e      	beq.n	8013f80 <SCSI_RequestSense+0xac>
  {

    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8013f22:	693b      	ldr	r3, [r7, #16]
 8013f24:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8013f28:	693a      	ldr	r2, [r7, #16]
 8013f2a:	3347      	adds	r3, #71	; 0x47
 8013f2c:	00db      	lsls	r3, r3, #3
 8013f2e:	4413      	add	r3, r2
 8013f30:	791a      	ldrb	r2, [r3, #4]
 8013f32:	693b      	ldr	r3, [r7, #16]
 8013f34:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8013f36:	693b      	ldr	r3, [r7, #16]
 8013f38:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8013f3c:	693a      	ldr	r2, [r7, #16]
 8013f3e:	3347      	adds	r3, #71	; 0x47
 8013f40:	00db      	lsls	r3, r3, #3
 8013f42:	4413      	add	r3, r2
 8013f44:	7a5a      	ldrb	r2, [r3, #9]
 8013f46:	693b      	ldr	r3, [r7, #16]
 8013f48:	761a      	strb	r2, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8013f4a:	693b      	ldr	r3, [r7, #16]
 8013f4c:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8013f50:	693a      	ldr	r2, [r7, #16]
 8013f52:	3347      	adds	r3, #71	; 0x47
 8013f54:	00db      	lsls	r3, r3, #3
 8013f56:	4413      	add	r3, r2
 8013f58:	7a1a      	ldrb	r2, [r3, #8]
 8013f5a:	693b      	ldr	r3, [r7, #16]
 8013f5c:	765a      	strb	r2, [r3, #25]
    hmsc->scsi_sense_head++;
 8013f5e:	693b      	ldr	r3, [r7, #16]
 8013f60:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8013f64:	3301      	adds	r3, #1
 8013f66:	b2da      	uxtb	r2, r3
 8013f68:	693b      	ldr	r3, [r7, #16]
 8013f6a:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8013f6e:	693b      	ldr	r3, [r7, #16]
 8013f70:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8013f74:	2b04      	cmp	r3, #4
 8013f76:	d103      	bne.n	8013f80 <SCSI_RequestSense+0xac>
    {
      hmsc->scsi_sense_head = 0U;
 8013f78:	693b      	ldr	r3, [r7, #16]
 8013f7a:	2200      	movs	r2, #0
 8013f7c:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8013f80:	693b      	ldr	r3, [r7, #16]
 8013f82:	2212      	movs	r2, #18
 8013f84:	815a      	strh	r2, [r3, #10]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	3304      	adds	r3, #4
 8013f8a:	781b      	ldrb	r3, [r3, #0]
 8013f8c:	2b12      	cmp	r3, #18
 8013f8e:	d805      	bhi.n	8013f9c <SCSI_RequestSense+0xc8>
  {
    hmsc->bot_data_length = params[4];
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	3304      	adds	r3, #4
 8013f94:	781b      	ldrb	r3, [r3, #0]
 8013f96:	b29a      	uxth	r2, r3
 8013f98:	693b      	ldr	r3, [r7, #16]
 8013f9a:	815a      	strh	r2, [r3, #10]
  }
  return 0;
 8013f9c:	2300      	movs	r3, #0
}
 8013f9e:	4618      	mov	r0, r3
 8013fa0:	371c      	adds	r7, #28
 8013fa2:	46bd      	mov	sp, r7
 8013fa4:	bc80      	pop	{r7}
 8013fa6:	4770      	bx	lr

08013fa8 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8013fa8:	b480      	push	{r7}
 8013faa:	b085      	sub	sp, #20
 8013fac:	af00      	add	r7, sp, #0
 8013fae:	6078      	str	r0, [r7, #4]
 8013fb0:	4608      	mov	r0, r1
 8013fb2:	4611      	mov	r1, r2
 8013fb4:	461a      	mov	r2, r3
 8013fb6:	4603      	mov	r3, r0
 8013fb8:	70fb      	strb	r3, [r7, #3]
 8013fba:	460b      	mov	r3, r1
 8013fbc:	70bb      	strb	r3, [r7, #2]
 8013fbe:	4613      	mov	r3, r2
 8013fc0:	707b      	strb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013fc8:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8013fca:	68fb      	ldr	r3, [r7, #12]
 8013fcc:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8013fd0:	68fa      	ldr	r2, [r7, #12]
 8013fd2:	3347      	adds	r3, #71	; 0x47
 8013fd4:	00db      	lsls	r3, r3, #3
 8013fd6:	4413      	add	r3, r2
 8013fd8:	78ba      	ldrb	r2, [r7, #2]
 8013fda:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8013fdc:	68fb      	ldr	r3, [r7, #12]
 8013fde:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8013fe2:	68fa      	ldr	r2, [r7, #12]
 8013fe4:	3347      	adds	r3, #71	; 0x47
 8013fe6:	00db      	lsls	r3, r3, #3
 8013fe8:	4413      	add	r3, r2
 8013fea:	2200      	movs	r2, #0
 8013fec:	721a      	strb	r2, [r3, #8]
  hmsc->scsi_sense_tail++;
 8013fee:	68fb      	ldr	r3, [r7, #12]
 8013ff0:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8013ff4:	3301      	adds	r3, #1
 8013ff6:	b2da      	uxtb	r2, r3
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8013ffe:	68fb      	ldr	r3, [r7, #12]
 8014000:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8014004:	2b04      	cmp	r3, #4
 8014006:	d103      	bne.n	8014010 <SCSI_SenseCode+0x68>
  {
    hmsc->scsi_sense_tail = 0U;
 8014008:	68fb      	ldr	r3, [r7, #12]
 801400a:	2200      	movs	r2, #0
 801400c:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  }
}
 8014010:	bf00      	nop
 8014012:	3714      	adds	r7, #20
 8014014:	46bd      	mov	sp, r7
 8014016:	bc80      	pop	{r7}
 8014018:	4770      	bx	lr

0801401a <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 801401a:	b480      	push	{r7}
 801401c:	b087      	sub	sp, #28
 801401e:	af00      	add	r7, sp, #0
 8014020:	60f8      	str	r0, [r7, #12]
 8014022:	460b      	mov	r3, r1
 8014024:	607a      	str	r2, [r7, #4]
 8014026:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8014028:	68fb      	ldr	r3, [r7, #12]
 801402a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801402e:	617b      	str	r3, [r7, #20]
  hmsc->bot_data_length = 0U;
 8014030:	697b      	ldr	r3, [r7, #20]
 8014032:	2200      	movs	r2, #0
 8014034:	815a      	strh	r2, [r3, #10]
  return 0;
 8014036:	2300      	movs	r3, #0
}
 8014038:	4618      	mov	r0, r3
 801403a:	371c      	adds	r7, #28
 801403c:	46bd      	mov	sp, r7
 801403e:	bc80      	pop	{r7}
 8014040:	4770      	bx	lr

08014042 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014042:	b580      	push	{r7, lr}
 8014044:	b086      	sub	sp, #24
 8014046:	af00      	add	r7, sp, #0
 8014048:	60f8      	str	r0, [r7, #12]
 801404a:	460b      	mov	r3, r1
 801404c:	607a      	str	r2, [r7, #4]
 801404e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8014050:	68fb      	ldr	r3, [r7, #12]
 8014052:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014056:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8014058:	697b      	ldr	r3, [r7, #20]
 801405a:	7a1b      	ldrb	r3, [r3, #8]
 801405c:	2b00      	cmp	r3, #0
 801405e:	d16e      	bne.n	801413e <SCSI_Read10+0xfc>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8014060:	697b      	ldr	r3, [r7, #20]
 8014062:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8014066:	b25b      	sxtb	r3, r3
 8014068:	2b00      	cmp	r3, #0
 801406a:	db0a      	blt.n	8014082 <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801406c:	697b      	ldr	r3, [r7, #20]
 801406e:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8014072:	2320      	movs	r3, #32
 8014074:	2205      	movs	r2, #5
 8014076:	68f8      	ldr	r0, [r7, #12]
 8014078:	f7ff ff96 	bl	8013fa8 <SCSI_SenseCode>
      return -1;
 801407c:	f04f 33ff 	mov.w	r3, #4294967295
 8014080:	e067      	b.n	8014152 <SCSI_Read10+0x110>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014088:	689b      	ldr	r3, [r3, #8]
 801408a:	7afa      	ldrb	r2, [r7, #11]
 801408c:	4610      	mov	r0, r2
 801408e:	4798      	blx	r3
 8014090:	4603      	mov	r3, r0
 8014092:	2b00      	cmp	r3, #0
 8014094:	d008      	beq.n	80140a8 <SCSI_Read10+0x66>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014096:	7af9      	ldrb	r1, [r7, #11]
 8014098:	233a      	movs	r3, #58	; 0x3a
 801409a:	2202      	movs	r2, #2
 801409c:	68f8      	ldr	r0, [r7, #12]
 801409e:	f7ff ff83 	bl	8013fa8 <SCSI_SenseCode>
      return -1;
 80140a2:	f04f 33ff 	mov.w	r3, #4294967295
 80140a6:	e054      	b.n	8014152 <SCSI_Read10+0x110>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	3302      	adds	r3, #2
 80140ac:	781b      	ldrb	r3, [r3, #0]
 80140ae:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	3303      	adds	r3, #3
 80140b4:	781b      	ldrb	r3, [r3, #0]
 80140b6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80140b8:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	3304      	adds	r3, #4
 80140be:	781b      	ldrb	r3, [r3, #0]
 80140c0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80140c2:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80140c4:	687a      	ldr	r2, [r7, #4]
 80140c6:	3205      	adds	r2, #5
 80140c8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80140ca:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80140cc:	697b      	ldr	r3, [r7, #20]
 80140ce:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	3307      	adds	r3, #7
 80140d6:	781b      	ldrb	r3, [r3, #0]
 80140d8:	021b      	lsls	r3, r3, #8
 80140da:	687a      	ldr	r2, [r7, #4]
 80140dc:	3208      	adds	r2, #8
 80140de:	7812      	ldrb	r2, [r2, #0]
 80140e0:	431a      	orrs	r2, r3
 80140e2:	697b      	ldr	r3, [r7, #20]
 80140e4:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80140e8:	697b      	ldr	r3, [r7, #20]
 80140ea:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 80140ee:	697b      	ldr	r3, [r7, #20]
 80140f0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80140f4:	7af9      	ldrb	r1, [r7, #11]
 80140f6:	68f8      	ldr	r0, [r7, #12]
 80140f8:	f000 f912 	bl	8014320 <SCSI_CheckAddressRange>
 80140fc:	4603      	mov	r3, r0
 80140fe:	2b00      	cmp	r3, #0
 8014100:	da02      	bge.n	8014108 <SCSI_Read10+0xc6>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8014102:	f04f 33ff 	mov.w	r3, #4294967295
 8014106:	e024      	b.n	8014152 <SCSI_Read10+0x110>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8014108:	697b      	ldr	r3, [r7, #20]
 801410a:	2202      	movs	r2, #2
 801410c:	721a      	strb	r2, [r3, #8]

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 801410e:	697b      	ldr	r3, [r7, #20]
 8014110:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8014114:	697b      	ldr	r3, [r7, #20]
 8014116:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801411a:	6979      	ldr	r1, [r7, #20]
 801411c:	f8b1 125e 	ldrh.w	r1, [r1, #606]	; 0x25e
 8014120:	fb01 f303 	mul.w	r3, r1, r3
 8014124:	429a      	cmp	r2, r3
 8014126:	d00a      	beq.n	801413e <SCSI_Read10+0xfc>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014128:	697b      	ldr	r3, [r7, #20]
 801412a:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 801412e:	2320      	movs	r3, #32
 8014130:	2205      	movs	r2, #5
 8014132:	68f8      	ldr	r0, [r7, #12]
 8014134:	f7ff ff38 	bl	8013fa8 <SCSI_SenseCode>
      return -1;
 8014138:	f04f 33ff 	mov.w	r3, #4294967295
 801413c:	e009      	b.n	8014152 <SCSI_Read10+0x110>
    }
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 801413e:	697b      	ldr	r3, [r7, #20]
 8014140:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014144:	815a      	strh	r2, [r3, #10]

  return SCSI_ProcessRead(pdev, lun);
 8014146:	7afb      	ldrb	r3, [r7, #11]
 8014148:	4619      	mov	r1, r3
 801414a:	68f8      	ldr	r0, [r7, #12]
 801414c:	f000 f90a 	bl	8014364 <SCSI_ProcessRead>
 8014150:	4603      	mov	r3, r0
}
 8014152:	4618      	mov	r0, r3
 8014154:	3718      	adds	r7, #24
 8014156:	46bd      	mov	sp, r7
 8014158:	bd80      	pop	{r7, pc}

0801415a <SCSI_Write10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Write10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 801415a:	b580      	push	{r7, lr}
 801415c:	b086      	sub	sp, #24
 801415e:	af00      	add	r7, sp, #0
 8014160:	60f8      	str	r0, [r7, #12]
 8014162:	460b      	mov	r3, r1
 8014164:	607a      	str	r2, [r7, #4]
 8014166:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801416e:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8014170:	697b      	ldr	r3, [r7, #20]
 8014172:	7a1b      	ldrb	r3, [r3, #8]
 8014174:	2b00      	cmp	r3, #0
 8014176:	f040 8096 	bne.w	80142a6 <SCSI_Write10+0x14c>
  {
    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 801417a:	697b      	ldr	r3, [r7, #20]
 801417c:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8014180:	b25b      	sxtb	r3, r3
 8014182:	2b00      	cmp	r3, #0
 8014184:	da0a      	bge.n	801419c <SCSI_Write10+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014186:	697b      	ldr	r3, [r7, #20]
 8014188:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 801418c:	2320      	movs	r3, #32
 801418e:	2205      	movs	r2, #5
 8014190:	68f8      	ldr	r0, [r7, #12]
 8014192:	f7ff ff09 	bl	8013fa8 <SCSI_SenseCode>
      return -1;
 8014196:	f04f 33ff 	mov.w	r3, #4294967295
 801419a:	e08a      	b.n	80142b2 <SCSI_Write10+0x158>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 801419c:	68fb      	ldr	r3, [r7, #12]
 801419e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80141a2:	689b      	ldr	r3, [r3, #8]
 80141a4:	7afa      	ldrb	r2, [r7, #11]
 80141a6:	4610      	mov	r0, r2
 80141a8:	4798      	blx	r3
 80141aa:	4603      	mov	r3, r0
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d008      	beq.n	80141c2 <SCSI_Write10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80141b0:	7af9      	ldrb	r1, [r7, #11]
 80141b2:	233a      	movs	r3, #58	; 0x3a
 80141b4:	2202      	movs	r2, #2
 80141b6:	68f8      	ldr	r0, [r7, #12]
 80141b8:	f7ff fef6 	bl	8013fa8 <SCSI_SenseCode>
      return -1;
 80141bc:	f04f 33ff 	mov.w	r3, #4294967295
 80141c0:	e077      	b.n	80142b2 <SCSI_Write10+0x158>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 80141c2:	68fb      	ldr	r3, [r7, #12]
 80141c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80141c8:	68db      	ldr	r3, [r3, #12]
 80141ca:	7afa      	ldrb	r2, [r7, #11]
 80141cc:	4610      	mov	r0, r2
 80141ce:	4798      	blx	r3
 80141d0:	4603      	mov	r3, r0
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d008      	beq.n	80141e8 <SCSI_Write10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80141d6:	7af9      	ldrb	r1, [r7, #11]
 80141d8:	2327      	movs	r3, #39	; 0x27
 80141da:	2202      	movs	r2, #2
 80141dc:	68f8      	ldr	r0, [r7, #12]
 80141de:	f7ff fee3 	bl	8013fa8 <SCSI_SenseCode>
      return -1;
 80141e2:	f04f 33ff 	mov.w	r3, #4294967295
 80141e6:	e064      	b.n	80142b2 <SCSI_Write10+0x158>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	3302      	adds	r3, #2
 80141ec:	781b      	ldrb	r3, [r3, #0]
 80141ee:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	3303      	adds	r3, #3
 80141f4:	781b      	ldrb	r3, [r3, #0]
 80141f6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80141f8:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	3304      	adds	r3, #4
 80141fe:	781b      	ldrb	r3, [r3, #0]
 8014200:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8014202:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8014204:	687a      	ldr	r2, [r7, #4]
 8014206:	3205      	adds	r2, #5
 8014208:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 801420a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801420c:	697b      	ldr	r3, [r7, #20]
 801420e:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	3307      	adds	r3, #7
 8014216:	781b      	ldrb	r3, [r3, #0]
 8014218:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 801421a:	687a      	ldr	r2, [r7, #4]
 801421c:	3208      	adds	r2, #8
 801421e:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8014220:	431a      	orrs	r2, r3
 8014222:	697b      	ldr	r3, [r7, #20]
 8014224:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8014228:	697b      	ldr	r3, [r7, #20]
 801422a:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 801422e:	697b      	ldr	r3, [r7, #20]
 8014230:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8014234:	7af9      	ldrb	r1, [r7, #11]
 8014236:	68f8      	ldr	r0, [r7, #12]
 8014238:	f000 f872 	bl	8014320 <SCSI_CheckAddressRange>
 801423c:	4603      	mov	r3, r0
 801423e:	2b00      	cmp	r3, #0
 8014240:	da02      	bge.n	8014248 <SCSI_Write10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8014242:	f04f 33ff 	mov.w	r3, #4294967295
 8014246:	e034      	b.n	80142b2 <SCSI_Write10+0x158>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8014248:	697b      	ldr	r3, [r7, #20]
 801424a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801424e:	697a      	ldr	r2, [r7, #20]
 8014250:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8014254:	fb02 f303 	mul.w	r3, r2, r3
 8014258:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 801425a:	697b      	ldr	r3, [r7, #20]
 801425c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014260:	693a      	ldr	r2, [r7, #16]
 8014262:	429a      	cmp	r2, r3
 8014264:	d00a      	beq.n	801427c <SCSI_Write10+0x122>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014266:	697b      	ldr	r3, [r7, #20]
 8014268:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 801426c:	2320      	movs	r3, #32
 801426e:	2205      	movs	r2, #5
 8014270:	68f8      	ldr	r0, [r7, #12]
 8014272:	f7ff fe99 	bl	8013fa8 <SCSI_SenseCode>
      return -1;
 8014276:	f04f 33ff 	mov.w	r3, #4294967295
 801427a:	e01a      	b.n	80142b2 <SCSI_Write10+0x158>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 801427c:	693b      	ldr	r3, [r7, #16]
 801427e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014282:	bf28      	it	cs
 8014284:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8014288:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 801428a:	697b      	ldr	r3, [r7, #20]
 801428c:	2201      	movs	r2, #1
 801428e:	721a      	strb	r2, [r3, #8]
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8014290:	697b      	ldr	r3, [r7, #20]
 8014292:	f103 020c 	add.w	r2, r3, #12
 8014296:	693b      	ldr	r3, [r7, #16]
 8014298:	b29b      	uxth	r3, r3
 801429a:	2101      	movs	r1, #1
 801429c:	68f8      	ldr	r0, [r7, #12]
 801429e:	f001 fdae 	bl	8015dfe <USBD_LL_PrepareReceive>
  }
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }
  return 0;
 80142a2:	2300      	movs	r3, #0
 80142a4:	e005      	b.n	80142b2 <SCSI_Write10+0x158>
    return SCSI_ProcessWrite(pdev, lun);
 80142a6:	7afb      	ldrb	r3, [r7, #11]
 80142a8:	4619      	mov	r1, r3
 80142aa:	68f8      	ldr	r0, [r7, #12]
 80142ac:	f000 f8ce 	bl	801444c <SCSI_ProcessWrite>
 80142b0:	4603      	mov	r3, r0
}
 80142b2:	4618      	mov	r0, r3
 80142b4:	3718      	adds	r7, #24
 80142b6:	46bd      	mov	sp, r7
 80142b8:	bd80      	pop	{r7, pc}

080142ba <SCSI_Verify10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Verify10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80142ba:	b580      	push	{r7, lr}
 80142bc:	b086      	sub	sp, #24
 80142be:	af00      	add	r7, sp, #0
 80142c0:	60f8      	str	r0, [r7, #12]
 80142c2:	460b      	mov	r3, r1
 80142c4:	607a      	str	r2, [r7, #4]
 80142c6:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80142c8:	68fb      	ldr	r3, [r7, #12]
 80142ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80142ce:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	3301      	adds	r3, #1
 80142d4:	781b      	ldrb	r3, [r3, #0]
 80142d6:	f003 0302 	and.w	r3, r3, #2
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d008      	beq.n	80142f0 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80142de:	7af9      	ldrb	r1, [r7, #11]
 80142e0:	2324      	movs	r3, #36	; 0x24
 80142e2:	2205      	movs	r2, #5
 80142e4:	68f8      	ldr	r0, [r7, #12]
 80142e6:	f7ff fe5f 	bl	8013fa8 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 80142ea:	f04f 33ff 	mov.w	r3, #4294967295
 80142ee:	e013      	b.n	8014318 <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80142f0:	697b      	ldr	r3, [r7, #20]
 80142f2:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 80142f6:	697b      	ldr	r3, [r7, #20]
 80142f8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80142fc:	7af9      	ldrb	r1, [r7, #11]
 80142fe:	68f8      	ldr	r0, [r7, #12]
 8014300:	f000 f80e 	bl	8014320 <SCSI_CheckAddressRange>
 8014304:	4603      	mov	r3, r0
 8014306:	2b00      	cmp	r3, #0
 8014308:	da02      	bge.n	8014310 <SCSI_Verify10+0x56>
                             hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */
 801430a:	f04f 33ff 	mov.w	r3, #4294967295
 801430e:	e003      	b.n	8014318 <SCSI_Verify10+0x5e>
  }
  hmsc->bot_data_length = 0U;
 8014310:	697b      	ldr	r3, [r7, #20]
 8014312:	2200      	movs	r2, #0
 8014314:	815a      	strh	r2, [r3, #10]
  return 0;
 8014316:	2300      	movs	r3, #0
}
 8014318:	4618      	mov	r0, r3
 801431a:	3718      	adds	r7, #24
 801431c:	46bd      	mov	sp, r7
 801431e:	bd80      	pop	{r7, pc}

08014320 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8014320:	b580      	push	{r7, lr}
 8014322:	b086      	sub	sp, #24
 8014324:	af00      	add	r7, sp, #0
 8014326:	60f8      	str	r0, [r7, #12]
 8014328:	607a      	str	r2, [r7, #4]
 801432a:	603b      	str	r3, [r7, #0]
 801432c:	460b      	mov	r3, r1
 801432e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8014330:	68fb      	ldr	r3, [r7, #12]
 8014332:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014336:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8014338:	687a      	ldr	r2, [r7, #4]
 801433a:	683b      	ldr	r3, [r7, #0]
 801433c:	441a      	add	r2, r3
 801433e:	697b      	ldr	r3, [r7, #20]
 8014340:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8014344:	429a      	cmp	r2, r3
 8014346:	d908      	bls.n	801435a <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8014348:	7af9      	ldrb	r1, [r7, #11]
 801434a:	2321      	movs	r3, #33	; 0x21
 801434c:	2205      	movs	r2, #5
 801434e:	68f8      	ldr	r0, [r7, #12]
 8014350:	f7ff fe2a 	bl	8013fa8 <SCSI_SenseCode>
    return -1;
 8014354:	f04f 33ff 	mov.w	r3, #4294967295
 8014358:	e000      	b.n	801435c <SCSI_CheckAddressRange+0x3c>
  }
  return 0;
 801435a:	2300      	movs	r3, #0
}
 801435c:	4618      	mov	r0, r3
 801435e:	3718      	adds	r7, #24
 8014360:	46bd      	mov	sp, r7
 8014362:	bd80      	pop	{r7, pc}

08014364 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8014364:	b590      	push	{r4, r7, lr}
 8014366:	b085      	sub	sp, #20
 8014368:	af00      	add	r7, sp, #0
 801436a:	6078      	str	r0, [r7, #4]
 801436c:	460b      	mov	r3, r1
 801436e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014376:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8014378:	68fb      	ldr	r3, [r7, #12]
 801437a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801437e:	68fa      	ldr	r2, [r7, #12]
 8014380:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8014384:	fb02 f303 	mul.w	r3, r2, r3
 8014388:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 801438a:	68bb      	ldr	r3, [r7, #8]
 801438c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014390:	bf28      	it	cs
 8014392:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8014396:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801439e:	691c      	ldr	r4, [r3, #16]
                                                     hmsc->bot_data,
 80143a0:	68fb      	ldr	r3, [r7, #12]
 80143a2:	f103 010c 	add.w	r1, r3, #12
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 80143a6:	68fb      	ldr	r3, [r7, #12]
 80143a8:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 80143ac:	68fb      	ldr	r3, [r7, #12]
 80143ae:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80143b2:	4618      	mov	r0, r3
 80143b4:	68bb      	ldr	r3, [r7, #8]
 80143b6:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 80143ba:	b29b      	uxth	r3, r3
 80143bc:	78f8      	ldrb	r0, [r7, #3]
 80143be:	47a0      	blx	r4
 80143c0:	4603      	mov	r3, r0
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	da08      	bge.n	80143d8 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 80143c6:	78f9      	ldrb	r1, [r7, #3]
 80143c8:	2311      	movs	r3, #17
 80143ca:	2204      	movs	r2, #4
 80143cc:	6878      	ldr	r0, [r7, #4]
 80143ce:	f7ff fdeb 	bl	8013fa8 <SCSI_SenseCode>
    return -1;
 80143d2:	f04f 33ff 	mov.w	r3, #4294967295
 80143d6:	e035      	b.n	8014444 <SCSI_ProcessRead+0xe0>
  }

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 80143d8:	68fb      	ldr	r3, [r7, #12]
 80143da:	f103 020c 	add.w	r2, r3, #12
 80143de:	68bb      	ldr	r3, [r7, #8]
 80143e0:	b29b      	uxth	r3, r3
 80143e2:	2181      	movs	r1, #129	; 0x81
 80143e4:	6878      	ldr	r0, [r7, #4]
 80143e6:	f001 fce7 	bl	8015db8 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80143ea:	68fb      	ldr	r3, [r7, #12]
 80143ec:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 80143f0:	68fb      	ldr	r3, [r7, #12]
 80143f2:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80143f6:	4619      	mov	r1, r3
 80143f8:	68bb      	ldr	r3, [r7, #8]
 80143fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80143fe:	441a      	add	r2, r3
 8014400:	68fb      	ldr	r3, [r7, #12]
 8014402:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 801440c:	68fb      	ldr	r3, [r7, #12]
 801440e:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8014412:	4619      	mov	r1, r3
 8014414:	68bb      	ldr	r3, [r7, #8]
 8014416:	fbb3 f3f1 	udiv	r3, r3, r1
 801441a:	1ad2      	subs	r2, r2, r3
 801441c:	68fb      	ldr	r3, [r7, #12]
 801441e:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8014422:	68fb      	ldr	r3, [r7, #12]
 8014424:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 8014428:	68bb      	ldr	r3, [r7, #8]
 801442a:	1ad2      	subs	r2, r2, r3
 801442c:	68fb      	ldr	r3, [r7, #12]
 801442e:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 8014432:	68fb      	ldr	r3, [r7, #12]
 8014434:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8014438:	2b00      	cmp	r3, #0
 801443a:	d102      	bne.n	8014442 <SCSI_ProcessRead+0xde>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 801443c:	68fb      	ldr	r3, [r7, #12]
 801443e:	2203      	movs	r2, #3
 8014440:	721a      	strb	r2, [r3, #8]
  }
  return 0;
 8014442:	2300      	movs	r3, #0
}
 8014444:	4618      	mov	r0, r3
 8014446:	3714      	adds	r7, #20
 8014448:	46bd      	mov	sp, r7
 801444a:	bd90      	pop	{r4, r7, pc}

0801444c <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 801444c:	b590      	push	{r4, r7, lr}
 801444e:	b085      	sub	sp, #20
 8014450:	af00      	add	r7, sp, #0
 8014452:	6078      	str	r0, [r7, #4]
 8014454:	460b      	mov	r3, r1
 8014456:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801445e:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8014460:	68fb      	ldr	r3, [r7, #12]
 8014462:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8014466:	68fa      	ldr	r2, [r7, #12]
 8014468:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 801446c:	fb02 f303 	mul.w	r3, r2, r3
 8014470:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8014472:	68bb      	ldr	r3, [r7, #8]
 8014474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014478:	bf28      	it	cs
 801447a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 801447e:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014486:	695c      	ldr	r4, [r3, #20]
 8014488:	68fb      	ldr	r3, [r7, #12]
 801448a:	f103 010c 	add.w	r1, r3, #12
 801448e:	68fb      	ldr	r3, [r7, #12]
 8014490:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8014494:	68fb      	ldr	r3, [r7, #12]
 8014496:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 801449a:	4618      	mov	r0, r3
 801449c:	68bb      	ldr	r3, [r7, #8]
 801449e:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80144a2:	b29b      	uxth	r3, r3
 80144a4:	78f8      	ldrb	r0, [r7, #3]
 80144a6:	47a0      	blx	r4
 80144a8:	4603      	mov	r3, r0
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	da08      	bge.n	80144c0 <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 80144ae:	78f9      	ldrb	r1, [r7, #3]
 80144b0:	2303      	movs	r3, #3
 80144b2:	2204      	movs	r2, #4
 80144b4:	6878      	ldr	r0, [r7, #4]
 80144b6:	f7ff fd77 	bl	8013fa8 <SCSI_SenseCode>

    return -1;
 80144ba:	f04f 33ff 	mov.w	r3, #4294967295
 80144be:	e045      	b.n	801454c <SCSI_ProcessWrite+0x100>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80144c0:	68fb      	ldr	r3, [r7, #12]
 80144c2:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80144cc:	4619      	mov	r1, r3
 80144ce:	68bb      	ldr	r3, [r7, #8]
 80144d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80144d4:	441a      	add	r2, r3
 80144d6:	68fb      	ldr	r3, [r7, #12]
 80144d8:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80144dc:	68fb      	ldr	r3, [r7, #12]
 80144de:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 80144e2:	68fb      	ldr	r3, [r7, #12]
 80144e4:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80144e8:	4619      	mov	r1, r3
 80144ea:	68bb      	ldr	r3, [r7, #8]
 80144ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80144f0:	1ad2      	subs	r2, r2, r3
 80144f2:	68fb      	ldr	r3, [r7, #12]
 80144f4:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 80144f8:	68fb      	ldr	r3, [r7, #12]
 80144fa:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 80144fe:	68bb      	ldr	r3, [r7, #8]
 8014500:	1ad2      	subs	r2, r2, r3
 8014502:	68fb      	ldr	r3, [r7, #12]
 8014504:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 8014508:	68fb      	ldr	r3, [r7, #12]
 801450a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801450e:	2b00      	cmp	r3, #0
 8014510:	d104      	bne.n	801451c <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8014512:	2100      	movs	r1, #0
 8014514:	6878      	ldr	r0, [r7, #4]
 8014516:	f7ff f97f 	bl	8013818 <MSC_BOT_SendCSW>
 801451a:	e016      	b.n	801454a <SCSI_ProcessWrite+0xfe>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 801451c:	68fb      	ldr	r3, [r7, #12]
 801451e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8014522:	68fa      	ldr	r2, [r7, #12]
 8014524:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8014528:	fb02 f303 	mul.w	r3, r2, r3
 801452c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014530:	bf28      	it	cs
 8014532:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8014536:	60bb      	str	r3, [r7, #8]
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8014538:	68fb      	ldr	r3, [r7, #12]
 801453a:	f103 020c 	add.w	r2, r3, #12
 801453e:	68bb      	ldr	r3, [r7, #8]
 8014540:	b29b      	uxth	r3, r3
 8014542:	2101      	movs	r1, #1
 8014544:	6878      	ldr	r0, [r7, #4]
 8014546:	f001 fc5a 	bl	8015dfe <USBD_LL_PrepareReceive>
  }

  return 0;
 801454a:	2300      	movs	r3, #0
}
 801454c:	4618      	mov	r0, r3
 801454e:	3714      	adds	r7, #20
 8014550:	46bd      	mov	sp, r7
 8014552:	bd90      	pop	{r4, r7, pc}

08014554 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8014554:	b580      	push	{r7, lr}
 8014556:	b084      	sub	sp, #16
 8014558:	af00      	add	r7, sp, #0
 801455a:	60f8      	str	r0, [r7, #12]
 801455c:	60b9      	str	r1, [r7, #8]
 801455e:	4613      	mov	r3, r2
 8014560:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8014562:	68fb      	ldr	r3, [r7, #12]
 8014564:	2b00      	cmp	r3, #0
 8014566:	d101      	bne.n	801456c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8014568:	2302      	movs	r3, #2
 801456a:	e01a      	b.n	80145a2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 801456c:	68fb      	ldr	r3, [r7, #12]
 801456e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014572:	2b00      	cmp	r3, #0
 8014574:	d003      	beq.n	801457e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8014576:	68fb      	ldr	r3, [r7, #12]
 8014578:	2200      	movs	r2, #0
 801457a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801457e:	68bb      	ldr	r3, [r7, #8]
 8014580:	2b00      	cmp	r3, #0
 8014582:	d003      	beq.n	801458c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8014584:	68fb      	ldr	r3, [r7, #12]
 8014586:	68ba      	ldr	r2, [r7, #8]
 8014588:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801458c:	68fb      	ldr	r3, [r7, #12]
 801458e:	2201      	movs	r2, #1
 8014590:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8014594:	68fb      	ldr	r3, [r7, #12]
 8014596:	79fa      	ldrb	r2, [r7, #7]
 8014598:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 801459a:	68f8      	ldr	r0, [r7, #12]
 801459c:	f001 fab4 	bl	8015b08 <USBD_LL_Init>

  return USBD_OK;
 80145a0:	2300      	movs	r3, #0
}
 80145a2:	4618      	mov	r0, r3
 80145a4:	3710      	adds	r7, #16
 80145a6:	46bd      	mov	sp, r7
 80145a8:	bd80      	pop	{r7, pc}

080145aa <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80145aa:	b480      	push	{r7}
 80145ac:	b085      	sub	sp, #20
 80145ae:	af00      	add	r7, sp, #0
 80145b0:	6078      	str	r0, [r7, #4]
 80145b2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80145b4:	2300      	movs	r3, #0
 80145b6:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80145b8:	683b      	ldr	r3, [r7, #0]
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d006      	beq.n	80145cc <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	683a      	ldr	r2, [r7, #0]
 80145c2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80145c6:	2300      	movs	r3, #0
 80145c8:	73fb      	strb	r3, [r7, #15]
 80145ca:	e001      	b.n	80145d0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80145cc:	2302      	movs	r3, #2
 80145ce:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80145d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80145d2:	4618      	mov	r0, r3
 80145d4:	3714      	adds	r7, #20
 80145d6:	46bd      	mov	sp, r7
 80145d8:	bc80      	pop	{r7}
 80145da:	4770      	bx	lr

080145dc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80145dc:	b580      	push	{r7, lr}
 80145de:	b082      	sub	sp, #8
 80145e0:	af00      	add	r7, sp, #0
 80145e2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80145e4:	6878      	ldr	r0, [r7, #4]
 80145e6:	f001 fadf 	bl	8015ba8 <USBD_LL_Start>

  return USBD_OK;
 80145ea:	2300      	movs	r3, #0
}
 80145ec:	4618      	mov	r0, r3
 80145ee:	3708      	adds	r7, #8
 80145f0:	46bd      	mov	sp, r7
 80145f2:	bd80      	pop	{r7, pc}

080145f4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80145f4:	b480      	push	{r7}
 80145f6:	b083      	sub	sp, #12
 80145f8:	af00      	add	r7, sp, #0
 80145fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80145fc:	2300      	movs	r3, #0
}
 80145fe:	4618      	mov	r0, r3
 8014600:	370c      	adds	r7, #12
 8014602:	46bd      	mov	sp, r7
 8014604:	bc80      	pop	{r7}
 8014606:	4770      	bx	lr

08014608 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8014608:	b580      	push	{r7, lr}
 801460a:	b084      	sub	sp, #16
 801460c:	af00      	add	r7, sp, #0
 801460e:	6078      	str	r0, [r7, #4]
 8014610:	460b      	mov	r3, r1
 8014612:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8014614:	2302      	movs	r3, #2
 8014616:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801461e:	2b00      	cmp	r3, #0
 8014620:	d00c      	beq.n	801463c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014628:	681b      	ldr	r3, [r3, #0]
 801462a:	78fa      	ldrb	r2, [r7, #3]
 801462c:	4611      	mov	r1, r2
 801462e:	6878      	ldr	r0, [r7, #4]
 8014630:	4798      	blx	r3
 8014632:	4603      	mov	r3, r0
 8014634:	2b00      	cmp	r3, #0
 8014636:	d101      	bne.n	801463c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8014638:	2300      	movs	r3, #0
 801463a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 801463c:	7bfb      	ldrb	r3, [r7, #15]
}
 801463e:	4618      	mov	r0, r3
 8014640:	3710      	adds	r7, #16
 8014642:	46bd      	mov	sp, r7
 8014644:	bd80      	pop	{r7, pc}

08014646 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8014646:	b580      	push	{r7, lr}
 8014648:	b082      	sub	sp, #8
 801464a:	af00      	add	r7, sp, #0
 801464c:	6078      	str	r0, [r7, #4]
 801464e:	460b      	mov	r3, r1
 8014650:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014658:	685b      	ldr	r3, [r3, #4]
 801465a:	78fa      	ldrb	r2, [r7, #3]
 801465c:	4611      	mov	r1, r2
 801465e:	6878      	ldr	r0, [r7, #4]
 8014660:	4798      	blx	r3

  return USBD_OK;
 8014662:	2300      	movs	r3, #0
}
 8014664:	4618      	mov	r0, r3
 8014666:	3708      	adds	r7, #8
 8014668:	46bd      	mov	sp, r7
 801466a:	bd80      	pop	{r7, pc}

0801466c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801466c:	b580      	push	{r7, lr}
 801466e:	b082      	sub	sp, #8
 8014670:	af00      	add	r7, sp, #0
 8014672:	6078      	str	r0, [r7, #4]
 8014674:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 801467c:	6839      	ldr	r1, [r7, #0]
 801467e:	4618      	mov	r0, r3
 8014680:	f000 fed7 	bl	8015432 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	2201      	movs	r2, #1
 8014688:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8014692:	461a      	mov	r2, r3
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80146a0:	f003 031f 	and.w	r3, r3, #31
 80146a4:	2b02      	cmp	r3, #2
 80146a6:	d016      	beq.n	80146d6 <USBD_LL_SetupStage+0x6a>
 80146a8:	2b02      	cmp	r3, #2
 80146aa:	d81c      	bhi.n	80146e6 <USBD_LL_SetupStage+0x7a>
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d002      	beq.n	80146b6 <USBD_LL_SetupStage+0x4a>
 80146b0:	2b01      	cmp	r3, #1
 80146b2:	d008      	beq.n	80146c6 <USBD_LL_SetupStage+0x5a>
 80146b4:	e017      	b.n	80146e6 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80146bc:	4619      	mov	r1, r3
 80146be:	6878      	ldr	r0, [r7, #4]
 80146c0:	f000 f9ca 	bl	8014a58 <USBD_StdDevReq>
      break;
 80146c4:	e01a      	b.n	80146fc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80146cc:	4619      	mov	r1, r3
 80146ce:	6878      	ldr	r0, [r7, #4]
 80146d0:	f000 fa2c 	bl	8014b2c <USBD_StdItfReq>
      break;
 80146d4:	e012      	b.n	80146fc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80146dc:	4619      	mov	r1, r3
 80146de:	6878      	ldr	r0, [r7, #4]
 80146e0:	f000 fa6c 	bl	8014bbc <USBD_StdEPReq>
      break;
 80146e4:	e00a      	b.n	80146fc <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80146ec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80146f0:	b2db      	uxtb	r3, r3
 80146f2:	4619      	mov	r1, r3
 80146f4:	6878      	ldr	r0, [r7, #4]
 80146f6:	f001 fad6 	bl	8015ca6 <USBD_LL_StallEP>
      break;
 80146fa:	bf00      	nop
  }

  return USBD_OK;
 80146fc:	2300      	movs	r3, #0
}
 80146fe:	4618      	mov	r0, r3
 8014700:	3708      	adds	r7, #8
 8014702:	46bd      	mov	sp, r7
 8014704:	bd80      	pop	{r7, pc}

08014706 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8014706:	b580      	push	{r7, lr}
 8014708:	b086      	sub	sp, #24
 801470a:	af00      	add	r7, sp, #0
 801470c:	60f8      	str	r0, [r7, #12]
 801470e:	460b      	mov	r3, r1
 8014710:	607a      	str	r2, [r7, #4]
 8014712:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8014714:	7afb      	ldrb	r3, [r7, #11]
 8014716:	2b00      	cmp	r3, #0
 8014718:	d14b      	bne.n	80147b2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 801471a:	68fb      	ldr	r3, [r7, #12]
 801471c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8014720:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8014728:	2b03      	cmp	r3, #3
 801472a:	d134      	bne.n	8014796 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 801472c:	697b      	ldr	r3, [r7, #20]
 801472e:	68da      	ldr	r2, [r3, #12]
 8014730:	697b      	ldr	r3, [r7, #20]
 8014732:	691b      	ldr	r3, [r3, #16]
 8014734:	429a      	cmp	r2, r3
 8014736:	d919      	bls.n	801476c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8014738:	697b      	ldr	r3, [r7, #20]
 801473a:	68da      	ldr	r2, [r3, #12]
 801473c:	697b      	ldr	r3, [r7, #20]
 801473e:	691b      	ldr	r3, [r3, #16]
 8014740:	1ad2      	subs	r2, r2, r3
 8014742:	697b      	ldr	r3, [r7, #20]
 8014744:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8014746:	697b      	ldr	r3, [r7, #20]
 8014748:	68da      	ldr	r2, [r3, #12]
 801474a:	697b      	ldr	r3, [r7, #20]
 801474c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801474e:	429a      	cmp	r2, r3
 8014750:	d203      	bcs.n	801475a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8014752:	697b      	ldr	r3, [r7, #20]
 8014754:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8014756:	b29b      	uxth	r3, r3
 8014758:	e002      	b.n	8014760 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801475a:	697b      	ldr	r3, [r7, #20]
 801475c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801475e:	b29b      	uxth	r3, r3
 8014760:	461a      	mov	r2, r3
 8014762:	6879      	ldr	r1, [r7, #4]
 8014764:	68f8      	ldr	r0, [r7, #12]
 8014766:	f000 ff38 	bl	80155da <USBD_CtlContinueRx>
 801476a:	e038      	b.n	80147de <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801476c:	68fb      	ldr	r3, [r7, #12]
 801476e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014772:	691b      	ldr	r3, [r3, #16]
 8014774:	2b00      	cmp	r3, #0
 8014776:	d00a      	beq.n	801478e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801477e:	2b03      	cmp	r3, #3
 8014780:	d105      	bne.n	801478e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8014782:	68fb      	ldr	r3, [r7, #12]
 8014784:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014788:	691b      	ldr	r3, [r3, #16]
 801478a:	68f8      	ldr	r0, [r7, #12]
 801478c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 801478e:	68f8      	ldr	r0, [r7, #12]
 8014790:	f000 ff35 	bl	80155fe <USBD_CtlSendStatus>
 8014794:	e023      	b.n	80147de <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8014796:	68fb      	ldr	r3, [r7, #12]
 8014798:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801479c:	2b05      	cmp	r3, #5
 801479e:	d11e      	bne.n	80147de <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80147a0:	68fb      	ldr	r3, [r7, #12]
 80147a2:	2200      	movs	r2, #0
 80147a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80147a8:	2100      	movs	r1, #0
 80147aa:	68f8      	ldr	r0, [r7, #12]
 80147ac:	f001 fa7b 	bl	8015ca6 <USBD_LL_StallEP>
 80147b0:	e015      	b.n	80147de <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80147b2:	68fb      	ldr	r3, [r7, #12]
 80147b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80147b8:	699b      	ldr	r3, [r3, #24]
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	d00d      	beq.n	80147da <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80147be:	68fb      	ldr	r3, [r7, #12]
 80147c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80147c4:	2b03      	cmp	r3, #3
 80147c6:	d108      	bne.n	80147da <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80147ce:	699b      	ldr	r3, [r3, #24]
 80147d0:	7afa      	ldrb	r2, [r7, #11]
 80147d2:	4611      	mov	r1, r2
 80147d4:	68f8      	ldr	r0, [r7, #12]
 80147d6:	4798      	blx	r3
 80147d8:	e001      	b.n	80147de <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80147da:	2302      	movs	r3, #2
 80147dc:	e000      	b.n	80147e0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80147de:	2300      	movs	r3, #0
}
 80147e0:	4618      	mov	r0, r3
 80147e2:	3718      	adds	r7, #24
 80147e4:	46bd      	mov	sp, r7
 80147e6:	bd80      	pop	{r7, pc}

080147e8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80147e8:	b580      	push	{r7, lr}
 80147ea:	b086      	sub	sp, #24
 80147ec:	af00      	add	r7, sp, #0
 80147ee:	60f8      	str	r0, [r7, #12]
 80147f0:	460b      	mov	r3, r1
 80147f2:	607a      	str	r2, [r7, #4]
 80147f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80147f6:	7afb      	ldrb	r3, [r7, #11]
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d17f      	bne.n	80148fc <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	3314      	adds	r3, #20
 8014800:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8014802:	68fb      	ldr	r3, [r7, #12]
 8014804:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8014808:	2b02      	cmp	r3, #2
 801480a:	d15c      	bne.n	80148c6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 801480c:	697b      	ldr	r3, [r7, #20]
 801480e:	68da      	ldr	r2, [r3, #12]
 8014810:	697b      	ldr	r3, [r7, #20]
 8014812:	691b      	ldr	r3, [r3, #16]
 8014814:	429a      	cmp	r2, r3
 8014816:	d915      	bls.n	8014844 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8014818:	697b      	ldr	r3, [r7, #20]
 801481a:	68da      	ldr	r2, [r3, #12]
 801481c:	697b      	ldr	r3, [r7, #20]
 801481e:	691b      	ldr	r3, [r3, #16]
 8014820:	1ad2      	subs	r2, r2, r3
 8014822:	697b      	ldr	r3, [r7, #20]
 8014824:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8014826:	697b      	ldr	r3, [r7, #20]
 8014828:	68db      	ldr	r3, [r3, #12]
 801482a:	b29b      	uxth	r3, r3
 801482c:	461a      	mov	r2, r3
 801482e:	6879      	ldr	r1, [r7, #4]
 8014830:	68f8      	ldr	r0, [r7, #12]
 8014832:	f000 fec0 	bl	80155b6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014836:	2300      	movs	r3, #0
 8014838:	2200      	movs	r2, #0
 801483a:	2100      	movs	r1, #0
 801483c:	68f8      	ldr	r0, [r7, #12]
 801483e:	f001 fade 	bl	8015dfe <USBD_LL_PrepareReceive>
 8014842:	e04e      	b.n	80148e2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8014844:	697b      	ldr	r3, [r7, #20]
 8014846:	689b      	ldr	r3, [r3, #8]
 8014848:	697a      	ldr	r2, [r7, #20]
 801484a:	6912      	ldr	r2, [r2, #16]
 801484c:	fbb3 f1f2 	udiv	r1, r3, r2
 8014850:	fb01 f202 	mul.w	r2, r1, r2
 8014854:	1a9b      	subs	r3, r3, r2
 8014856:	2b00      	cmp	r3, #0
 8014858:	d11c      	bne.n	8014894 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 801485a:	697b      	ldr	r3, [r7, #20]
 801485c:	689a      	ldr	r2, [r3, #8]
 801485e:	697b      	ldr	r3, [r7, #20]
 8014860:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8014862:	429a      	cmp	r2, r3
 8014864:	d316      	bcc.n	8014894 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8014866:	697b      	ldr	r3, [r7, #20]
 8014868:	689a      	ldr	r2, [r3, #8]
 801486a:	68fb      	ldr	r3, [r7, #12]
 801486c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8014870:	429a      	cmp	r2, r3
 8014872:	d20f      	bcs.n	8014894 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8014874:	2200      	movs	r2, #0
 8014876:	2100      	movs	r1, #0
 8014878:	68f8      	ldr	r0, [r7, #12]
 801487a:	f000 fe9c 	bl	80155b6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801487e:	68fb      	ldr	r3, [r7, #12]
 8014880:	2200      	movs	r2, #0
 8014882:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014886:	2300      	movs	r3, #0
 8014888:	2200      	movs	r2, #0
 801488a:	2100      	movs	r1, #0
 801488c:	68f8      	ldr	r0, [r7, #12]
 801488e:	f001 fab6 	bl	8015dfe <USBD_LL_PrepareReceive>
 8014892:	e026      	b.n	80148e2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801489a:	68db      	ldr	r3, [r3, #12]
 801489c:	2b00      	cmp	r3, #0
 801489e:	d00a      	beq.n	80148b6 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80148a0:	68fb      	ldr	r3, [r7, #12]
 80148a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80148a6:	2b03      	cmp	r3, #3
 80148a8:	d105      	bne.n	80148b6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80148b0:	68db      	ldr	r3, [r3, #12]
 80148b2:	68f8      	ldr	r0, [r7, #12]
 80148b4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80148b6:	2180      	movs	r1, #128	; 0x80
 80148b8:	68f8      	ldr	r0, [r7, #12]
 80148ba:	f001 f9f4 	bl	8015ca6 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80148be:	68f8      	ldr	r0, [r7, #12]
 80148c0:	f000 feb0 	bl	8015624 <USBD_CtlReceiveStatus>
 80148c4:	e00d      	b.n	80148e2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80148cc:	2b04      	cmp	r3, #4
 80148ce:	d004      	beq.n	80148da <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80148d0:	68fb      	ldr	r3, [r7, #12]
 80148d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d103      	bne.n	80148e2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80148da:	2180      	movs	r1, #128	; 0x80
 80148dc:	68f8      	ldr	r0, [r7, #12]
 80148de:	f001 f9e2 	bl	8015ca6 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80148e2:	68fb      	ldr	r3, [r7, #12]
 80148e4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80148e8:	2b01      	cmp	r3, #1
 80148ea:	d11d      	bne.n	8014928 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80148ec:	68f8      	ldr	r0, [r7, #12]
 80148ee:	f7ff fe81 	bl	80145f4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	2200      	movs	r2, #0
 80148f6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80148fa:	e015      	b.n	8014928 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014902:	695b      	ldr	r3, [r3, #20]
 8014904:	2b00      	cmp	r3, #0
 8014906:	d00d      	beq.n	8014924 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8014908:	68fb      	ldr	r3, [r7, #12]
 801490a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 801490e:	2b03      	cmp	r3, #3
 8014910:	d108      	bne.n	8014924 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014918:	695b      	ldr	r3, [r3, #20]
 801491a:	7afa      	ldrb	r2, [r7, #11]
 801491c:	4611      	mov	r1, r2
 801491e:	68f8      	ldr	r0, [r7, #12]
 8014920:	4798      	blx	r3
 8014922:	e001      	b.n	8014928 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8014924:	2302      	movs	r3, #2
 8014926:	e000      	b.n	801492a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8014928:	2300      	movs	r3, #0
}
 801492a:	4618      	mov	r0, r3
 801492c:	3718      	adds	r7, #24
 801492e:	46bd      	mov	sp, r7
 8014930:	bd80      	pop	{r7, pc}

08014932 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8014932:	b580      	push	{r7, lr}
 8014934:	b082      	sub	sp, #8
 8014936:	af00      	add	r7, sp, #0
 8014938:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801493a:	2340      	movs	r3, #64	; 0x40
 801493c:	2200      	movs	r2, #0
 801493e:	2100      	movs	r1, #0
 8014940:	6878      	ldr	r0, [r7, #4]
 8014942:	f001 f94c 	bl	8015bde <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	2201      	movs	r2, #1
 801494a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	2240      	movs	r2, #64	; 0x40
 8014952:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014956:	2340      	movs	r3, #64	; 0x40
 8014958:	2200      	movs	r2, #0
 801495a:	2180      	movs	r1, #128	; 0x80
 801495c:	6878      	ldr	r0, [r7, #4]
 801495e:	f001 f93e 	bl	8015bde <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	2201      	movs	r2, #1
 8014966:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	2240      	movs	r2, #64	; 0x40
 801496c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	2201      	movs	r2, #1
 8014972:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	2200      	movs	r2, #0
 801497a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	2200      	movs	r2, #0
 8014982:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	2200      	movs	r2, #0
 8014988:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014992:	2b00      	cmp	r3, #0
 8014994:	d009      	beq.n	80149aa <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801499c:	685b      	ldr	r3, [r3, #4]
 801499e:	687a      	ldr	r2, [r7, #4]
 80149a0:	6852      	ldr	r2, [r2, #4]
 80149a2:	b2d2      	uxtb	r2, r2
 80149a4:	4611      	mov	r1, r2
 80149a6:	6878      	ldr	r0, [r7, #4]
 80149a8:	4798      	blx	r3
  }

  return USBD_OK;
 80149aa:	2300      	movs	r3, #0
}
 80149ac:	4618      	mov	r0, r3
 80149ae:	3708      	adds	r7, #8
 80149b0:	46bd      	mov	sp, r7
 80149b2:	bd80      	pop	{r7, pc}

080149b4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80149b4:	b480      	push	{r7}
 80149b6:	b083      	sub	sp, #12
 80149b8:	af00      	add	r7, sp, #0
 80149ba:	6078      	str	r0, [r7, #4]
 80149bc:	460b      	mov	r3, r1
 80149be:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	78fa      	ldrb	r2, [r7, #3]
 80149c4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80149c6:	2300      	movs	r3, #0
}
 80149c8:	4618      	mov	r0, r3
 80149ca:	370c      	adds	r7, #12
 80149cc:	46bd      	mov	sp, r7
 80149ce:	bc80      	pop	{r7}
 80149d0:	4770      	bx	lr

080149d2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80149d2:	b480      	push	{r7}
 80149d4:	b083      	sub	sp, #12
 80149d6:	af00      	add	r7, sp, #0
 80149d8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	2204      	movs	r2, #4
 80149ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80149ee:	2300      	movs	r3, #0
}
 80149f0:	4618      	mov	r0, r3
 80149f2:	370c      	adds	r7, #12
 80149f4:	46bd      	mov	sp, r7
 80149f6:	bc80      	pop	{r7}
 80149f8:	4770      	bx	lr

080149fa <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80149fa:	b480      	push	{r7}
 80149fc:	b083      	sub	sp, #12
 80149fe:	af00      	add	r7, sp, #0
 8014a00:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a08:	2b04      	cmp	r3, #4
 8014a0a:	d105      	bne.n	8014a18 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8014a18:	2300      	movs	r3, #0
}
 8014a1a:	4618      	mov	r0, r3
 8014a1c:	370c      	adds	r7, #12
 8014a1e:	46bd      	mov	sp, r7
 8014a20:	bc80      	pop	{r7}
 8014a22:	4770      	bx	lr

08014a24 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8014a24:	b580      	push	{r7, lr}
 8014a26:	b082      	sub	sp, #8
 8014a28:	af00      	add	r7, sp, #0
 8014a2a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a32:	2b03      	cmp	r3, #3
 8014a34:	d10b      	bne.n	8014a4e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014a3c:	69db      	ldr	r3, [r3, #28]
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d005      	beq.n	8014a4e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014a48:	69db      	ldr	r3, [r3, #28]
 8014a4a:	6878      	ldr	r0, [r7, #4]
 8014a4c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8014a4e:	2300      	movs	r3, #0
}
 8014a50:	4618      	mov	r0, r3
 8014a52:	3708      	adds	r7, #8
 8014a54:	46bd      	mov	sp, r7
 8014a56:	bd80      	pop	{r7, pc}

08014a58 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8014a58:	b580      	push	{r7, lr}
 8014a5a:	b084      	sub	sp, #16
 8014a5c:	af00      	add	r7, sp, #0
 8014a5e:	6078      	str	r0, [r7, #4]
 8014a60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014a62:	2300      	movs	r3, #0
 8014a64:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014a66:	683b      	ldr	r3, [r7, #0]
 8014a68:	781b      	ldrb	r3, [r3, #0]
 8014a6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014a6e:	2b40      	cmp	r3, #64	; 0x40
 8014a70:	d005      	beq.n	8014a7e <USBD_StdDevReq+0x26>
 8014a72:	2b40      	cmp	r3, #64	; 0x40
 8014a74:	d84f      	bhi.n	8014b16 <USBD_StdDevReq+0xbe>
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	d009      	beq.n	8014a8e <USBD_StdDevReq+0x36>
 8014a7a:	2b20      	cmp	r3, #32
 8014a7c:	d14b      	bne.n	8014b16 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014a84:	689b      	ldr	r3, [r3, #8]
 8014a86:	6839      	ldr	r1, [r7, #0]
 8014a88:	6878      	ldr	r0, [r7, #4]
 8014a8a:	4798      	blx	r3
      break;
 8014a8c:	e048      	b.n	8014b20 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014a8e:	683b      	ldr	r3, [r7, #0]
 8014a90:	785b      	ldrb	r3, [r3, #1]
 8014a92:	2b09      	cmp	r3, #9
 8014a94:	d839      	bhi.n	8014b0a <USBD_StdDevReq+0xb2>
 8014a96:	a201      	add	r2, pc, #4	; (adr r2, 8014a9c <USBD_StdDevReq+0x44>)
 8014a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a9c:	08014aed 	.word	0x08014aed
 8014aa0:	08014b01 	.word	0x08014b01
 8014aa4:	08014b0b 	.word	0x08014b0b
 8014aa8:	08014af7 	.word	0x08014af7
 8014aac:	08014b0b 	.word	0x08014b0b
 8014ab0:	08014acf 	.word	0x08014acf
 8014ab4:	08014ac5 	.word	0x08014ac5
 8014ab8:	08014b0b 	.word	0x08014b0b
 8014abc:	08014ae3 	.word	0x08014ae3
 8014ac0:	08014ad9 	.word	0x08014ad9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8014ac4:	6839      	ldr	r1, [r7, #0]
 8014ac6:	6878      	ldr	r0, [r7, #4]
 8014ac8:	f000 f9dc 	bl	8014e84 <USBD_GetDescriptor>
          break;
 8014acc:	e022      	b.n	8014b14 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8014ace:	6839      	ldr	r1, [r7, #0]
 8014ad0:	6878      	ldr	r0, [r7, #4]
 8014ad2:	f000 fb3f 	bl	8015154 <USBD_SetAddress>
          break;
 8014ad6:	e01d      	b.n	8014b14 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8014ad8:	6839      	ldr	r1, [r7, #0]
 8014ada:	6878      	ldr	r0, [r7, #4]
 8014adc:	f000 fb7e 	bl	80151dc <USBD_SetConfig>
          break;
 8014ae0:	e018      	b.n	8014b14 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8014ae2:	6839      	ldr	r1, [r7, #0]
 8014ae4:	6878      	ldr	r0, [r7, #4]
 8014ae6:	f000 fc07 	bl	80152f8 <USBD_GetConfig>
          break;
 8014aea:	e013      	b.n	8014b14 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8014aec:	6839      	ldr	r1, [r7, #0]
 8014aee:	6878      	ldr	r0, [r7, #4]
 8014af0:	f000 fc37 	bl	8015362 <USBD_GetStatus>
          break;
 8014af4:	e00e      	b.n	8014b14 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8014af6:	6839      	ldr	r1, [r7, #0]
 8014af8:	6878      	ldr	r0, [r7, #4]
 8014afa:	f000 fc65 	bl	80153c8 <USBD_SetFeature>
          break;
 8014afe:	e009      	b.n	8014b14 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8014b00:	6839      	ldr	r1, [r7, #0]
 8014b02:	6878      	ldr	r0, [r7, #4]
 8014b04:	f000 fc74 	bl	80153f0 <USBD_ClrFeature>
          break;
 8014b08:	e004      	b.n	8014b14 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8014b0a:	6839      	ldr	r1, [r7, #0]
 8014b0c:	6878      	ldr	r0, [r7, #4]
 8014b0e:	f000 fccc 	bl	80154aa <USBD_CtlError>
          break;
 8014b12:	bf00      	nop
      }
      break;
 8014b14:	e004      	b.n	8014b20 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8014b16:	6839      	ldr	r1, [r7, #0]
 8014b18:	6878      	ldr	r0, [r7, #4]
 8014b1a:	f000 fcc6 	bl	80154aa <USBD_CtlError>
      break;
 8014b1e:	bf00      	nop
  }

  return ret;
 8014b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8014b22:	4618      	mov	r0, r3
 8014b24:	3710      	adds	r7, #16
 8014b26:	46bd      	mov	sp, r7
 8014b28:	bd80      	pop	{r7, pc}
 8014b2a:	bf00      	nop

08014b2c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8014b2c:	b580      	push	{r7, lr}
 8014b2e:	b084      	sub	sp, #16
 8014b30:	af00      	add	r7, sp, #0
 8014b32:	6078      	str	r0, [r7, #4]
 8014b34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014b36:	2300      	movs	r3, #0
 8014b38:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014b3a:	683b      	ldr	r3, [r7, #0]
 8014b3c:	781b      	ldrb	r3, [r3, #0]
 8014b3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014b42:	2b40      	cmp	r3, #64	; 0x40
 8014b44:	d005      	beq.n	8014b52 <USBD_StdItfReq+0x26>
 8014b46:	2b40      	cmp	r3, #64	; 0x40
 8014b48:	d82e      	bhi.n	8014ba8 <USBD_StdItfReq+0x7c>
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	d001      	beq.n	8014b52 <USBD_StdItfReq+0x26>
 8014b4e:	2b20      	cmp	r3, #32
 8014b50:	d12a      	bne.n	8014ba8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014b58:	3b01      	subs	r3, #1
 8014b5a:	2b02      	cmp	r3, #2
 8014b5c:	d81d      	bhi.n	8014b9a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8014b5e:	683b      	ldr	r3, [r7, #0]
 8014b60:	889b      	ldrh	r3, [r3, #4]
 8014b62:	b2db      	uxtb	r3, r3
 8014b64:	2b01      	cmp	r3, #1
 8014b66:	d813      	bhi.n	8014b90 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014b6e:	689b      	ldr	r3, [r3, #8]
 8014b70:	6839      	ldr	r1, [r7, #0]
 8014b72:	6878      	ldr	r0, [r7, #4]
 8014b74:	4798      	blx	r3
 8014b76:	4603      	mov	r3, r0
 8014b78:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8014b7a:	683b      	ldr	r3, [r7, #0]
 8014b7c:	88db      	ldrh	r3, [r3, #6]
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d110      	bne.n	8014ba4 <USBD_StdItfReq+0x78>
 8014b82:	7bfb      	ldrb	r3, [r7, #15]
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d10d      	bne.n	8014ba4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8014b88:	6878      	ldr	r0, [r7, #4]
 8014b8a:	f000 fd38 	bl	80155fe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8014b8e:	e009      	b.n	8014ba4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8014b90:	6839      	ldr	r1, [r7, #0]
 8014b92:	6878      	ldr	r0, [r7, #4]
 8014b94:	f000 fc89 	bl	80154aa <USBD_CtlError>
          break;
 8014b98:	e004      	b.n	8014ba4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8014b9a:	6839      	ldr	r1, [r7, #0]
 8014b9c:	6878      	ldr	r0, [r7, #4]
 8014b9e:	f000 fc84 	bl	80154aa <USBD_CtlError>
          break;
 8014ba2:	e000      	b.n	8014ba6 <USBD_StdItfReq+0x7a>
          break;
 8014ba4:	bf00      	nop
      }
      break;
 8014ba6:	e004      	b.n	8014bb2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8014ba8:	6839      	ldr	r1, [r7, #0]
 8014baa:	6878      	ldr	r0, [r7, #4]
 8014bac:	f000 fc7d 	bl	80154aa <USBD_CtlError>
      break;
 8014bb0:	bf00      	nop
  }

  return USBD_OK;
 8014bb2:	2300      	movs	r3, #0
}
 8014bb4:	4618      	mov	r0, r3
 8014bb6:	3710      	adds	r7, #16
 8014bb8:	46bd      	mov	sp, r7
 8014bba:	bd80      	pop	{r7, pc}

08014bbc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8014bbc:	b580      	push	{r7, lr}
 8014bbe:	b084      	sub	sp, #16
 8014bc0:	af00      	add	r7, sp, #0
 8014bc2:	6078      	str	r0, [r7, #4]
 8014bc4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8014bc6:	2300      	movs	r3, #0
 8014bc8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8014bca:	683b      	ldr	r3, [r7, #0]
 8014bcc:	889b      	ldrh	r3, [r3, #4]
 8014bce:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014bd0:	683b      	ldr	r3, [r7, #0]
 8014bd2:	781b      	ldrb	r3, [r3, #0]
 8014bd4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014bd8:	2b40      	cmp	r3, #64	; 0x40
 8014bda:	d007      	beq.n	8014bec <USBD_StdEPReq+0x30>
 8014bdc:	2b40      	cmp	r3, #64	; 0x40
 8014bde:	f200 8146 	bhi.w	8014e6e <USBD_StdEPReq+0x2b2>
 8014be2:	2b00      	cmp	r3, #0
 8014be4:	d00a      	beq.n	8014bfc <USBD_StdEPReq+0x40>
 8014be6:	2b20      	cmp	r3, #32
 8014be8:	f040 8141 	bne.w	8014e6e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014bf2:	689b      	ldr	r3, [r3, #8]
 8014bf4:	6839      	ldr	r1, [r7, #0]
 8014bf6:	6878      	ldr	r0, [r7, #4]
 8014bf8:	4798      	blx	r3
      break;
 8014bfa:	e13d      	b.n	8014e78 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8014bfc:	683b      	ldr	r3, [r7, #0]
 8014bfe:	781b      	ldrb	r3, [r3, #0]
 8014c00:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014c04:	2b20      	cmp	r3, #32
 8014c06:	d10a      	bne.n	8014c1e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014c0e:	689b      	ldr	r3, [r3, #8]
 8014c10:	6839      	ldr	r1, [r7, #0]
 8014c12:	6878      	ldr	r0, [r7, #4]
 8014c14:	4798      	blx	r3
 8014c16:	4603      	mov	r3, r0
 8014c18:	73fb      	strb	r3, [r7, #15]

        return ret;
 8014c1a:	7bfb      	ldrb	r3, [r7, #15]
 8014c1c:	e12d      	b.n	8014e7a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8014c1e:	683b      	ldr	r3, [r7, #0]
 8014c20:	785b      	ldrb	r3, [r3, #1]
 8014c22:	2b03      	cmp	r3, #3
 8014c24:	d007      	beq.n	8014c36 <USBD_StdEPReq+0x7a>
 8014c26:	2b03      	cmp	r3, #3
 8014c28:	f300 811b 	bgt.w	8014e62 <USBD_StdEPReq+0x2a6>
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d072      	beq.n	8014d16 <USBD_StdEPReq+0x15a>
 8014c30:	2b01      	cmp	r3, #1
 8014c32:	d03a      	beq.n	8014caa <USBD_StdEPReq+0xee>
 8014c34:	e115      	b.n	8014e62 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014c3c:	2b02      	cmp	r3, #2
 8014c3e:	d002      	beq.n	8014c46 <USBD_StdEPReq+0x8a>
 8014c40:	2b03      	cmp	r3, #3
 8014c42:	d015      	beq.n	8014c70 <USBD_StdEPReq+0xb4>
 8014c44:	e02b      	b.n	8014c9e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014c46:	7bbb      	ldrb	r3, [r7, #14]
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d00c      	beq.n	8014c66 <USBD_StdEPReq+0xaa>
 8014c4c:	7bbb      	ldrb	r3, [r7, #14]
 8014c4e:	2b80      	cmp	r3, #128	; 0x80
 8014c50:	d009      	beq.n	8014c66 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8014c52:	7bbb      	ldrb	r3, [r7, #14]
 8014c54:	4619      	mov	r1, r3
 8014c56:	6878      	ldr	r0, [r7, #4]
 8014c58:	f001 f825 	bl	8015ca6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8014c5c:	2180      	movs	r1, #128	; 0x80
 8014c5e:	6878      	ldr	r0, [r7, #4]
 8014c60:	f001 f821 	bl	8015ca6 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014c64:	e020      	b.n	8014ca8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8014c66:	6839      	ldr	r1, [r7, #0]
 8014c68:	6878      	ldr	r0, [r7, #4]
 8014c6a:	f000 fc1e 	bl	80154aa <USBD_CtlError>
              break;
 8014c6e:	e01b      	b.n	8014ca8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014c70:	683b      	ldr	r3, [r7, #0]
 8014c72:	885b      	ldrh	r3, [r3, #2]
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	d10e      	bne.n	8014c96 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8014c78:	7bbb      	ldrb	r3, [r7, #14]
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	d00b      	beq.n	8014c96 <USBD_StdEPReq+0xda>
 8014c7e:	7bbb      	ldrb	r3, [r7, #14]
 8014c80:	2b80      	cmp	r3, #128	; 0x80
 8014c82:	d008      	beq.n	8014c96 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8014c84:	683b      	ldr	r3, [r7, #0]
 8014c86:	88db      	ldrh	r3, [r3, #6]
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d104      	bne.n	8014c96 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8014c8c:	7bbb      	ldrb	r3, [r7, #14]
 8014c8e:	4619      	mov	r1, r3
 8014c90:	6878      	ldr	r0, [r7, #4]
 8014c92:	f001 f808 	bl	8015ca6 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8014c96:	6878      	ldr	r0, [r7, #4]
 8014c98:	f000 fcb1 	bl	80155fe <USBD_CtlSendStatus>

              break;
 8014c9c:	e004      	b.n	8014ca8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8014c9e:	6839      	ldr	r1, [r7, #0]
 8014ca0:	6878      	ldr	r0, [r7, #4]
 8014ca2:	f000 fc02 	bl	80154aa <USBD_CtlError>
              break;
 8014ca6:	bf00      	nop
          }
          break;
 8014ca8:	e0e0      	b.n	8014e6c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014cb0:	2b02      	cmp	r3, #2
 8014cb2:	d002      	beq.n	8014cba <USBD_StdEPReq+0xfe>
 8014cb4:	2b03      	cmp	r3, #3
 8014cb6:	d015      	beq.n	8014ce4 <USBD_StdEPReq+0x128>
 8014cb8:	e026      	b.n	8014d08 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014cba:	7bbb      	ldrb	r3, [r7, #14]
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	d00c      	beq.n	8014cda <USBD_StdEPReq+0x11e>
 8014cc0:	7bbb      	ldrb	r3, [r7, #14]
 8014cc2:	2b80      	cmp	r3, #128	; 0x80
 8014cc4:	d009      	beq.n	8014cda <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8014cc6:	7bbb      	ldrb	r3, [r7, #14]
 8014cc8:	4619      	mov	r1, r3
 8014cca:	6878      	ldr	r0, [r7, #4]
 8014ccc:	f000 ffeb 	bl	8015ca6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8014cd0:	2180      	movs	r1, #128	; 0x80
 8014cd2:	6878      	ldr	r0, [r7, #4]
 8014cd4:	f000 ffe7 	bl	8015ca6 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014cd8:	e01c      	b.n	8014d14 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8014cda:	6839      	ldr	r1, [r7, #0]
 8014cdc:	6878      	ldr	r0, [r7, #4]
 8014cde:	f000 fbe4 	bl	80154aa <USBD_CtlError>
              break;
 8014ce2:	e017      	b.n	8014d14 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014ce4:	683b      	ldr	r3, [r7, #0]
 8014ce6:	885b      	ldrh	r3, [r3, #2]
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d112      	bne.n	8014d12 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8014cec:	7bbb      	ldrb	r3, [r7, #14]
 8014cee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d004      	beq.n	8014d00 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8014cf6:	7bbb      	ldrb	r3, [r7, #14]
 8014cf8:	4619      	mov	r1, r3
 8014cfa:	6878      	ldr	r0, [r7, #4]
 8014cfc:	f000 fff2 	bl	8015ce4 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8014d00:	6878      	ldr	r0, [r7, #4]
 8014d02:	f000 fc7c 	bl	80155fe <USBD_CtlSendStatus>
              }
              break;
 8014d06:	e004      	b.n	8014d12 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8014d08:	6839      	ldr	r1, [r7, #0]
 8014d0a:	6878      	ldr	r0, [r7, #4]
 8014d0c:	f000 fbcd 	bl	80154aa <USBD_CtlError>
              break;
 8014d10:	e000      	b.n	8014d14 <USBD_StdEPReq+0x158>
              break;
 8014d12:	bf00      	nop
          }
          break;
 8014d14:	e0aa      	b.n	8014e6c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014d1c:	2b02      	cmp	r3, #2
 8014d1e:	d002      	beq.n	8014d26 <USBD_StdEPReq+0x16a>
 8014d20:	2b03      	cmp	r3, #3
 8014d22:	d032      	beq.n	8014d8a <USBD_StdEPReq+0x1ce>
 8014d24:	e097      	b.n	8014e56 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014d26:	7bbb      	ldrb	r3, [r7, #14]
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d007      	beq.n	8014d3c <USBD_StdEPReq+0x180>
 8014d2c:	7bbb      	ldrb	r3, [r7, #14]
 8014d2e:	2b80      	cmp	r3, #128	; 0x80
 8014d30:	d004      	beq.n	8014d3c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8014d32:	6839      	ldr	r1, [r7, #0]
 8014d34:	6878      	ldr	r0, [r7, #4]
 8014d36:	f000 fbb8 	bl	80154aa <USBD_CtlError>
                break;
 8014d3a:	e091      	b.n	8014e60 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014d3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	da0b      	bge.n	8014d5c <USBD_StdEPReq+0x1a0>
 8014d44:	7bbb      	ldrb	r3, [r7, #14]
 8014d46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014d4a:	4613      	mov	r3, r2
 8014d4c:	009b      	lsls	r3, r3, #2
 8014d4e:	4413      	add	r3, r2
 8014d50:	009b      	lsls	r3, r3, #2
 8014d52:	3310      	adds	r3, #16
 8014d54:	687a      	ldr	r2, [r7, #4]
 8014d56:	4413      	add	r3, r2
 8014d58:	3304      	adds	r3, #4
 8014d5a:	e00b      	b.n	8014d74 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014d5c:	7bbb      	ldrb	r3, [r7, #14]
 8014d5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014d62:	4613      	mov	r3, r2
 8014d64:	009b      	lsls	r3, r3, #2
 8014d66:	4413      	add	r3, r2
 8014d68:	009b      	lsls	r3, r3, #2
 8014d6a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014d6e:	687a      	ldr	r2, [r7, #4]
 8014d70:	4413      	add	r3, r2
 8014d72:	3304      	adds	r3, #4
 8014d74:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8014d76:	68bb      	ldr	r3, [r7, #8]
 8014d78:	2200      	movs	r2, #0
 8014d7a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8014d7c:	68bb      	ldr	r3, [r7, #8]
 8014d7e:	2202      	movs	r2, #2
 8014d80:	4619      	mov	r1, r3
 8014d82:	6878      	ldr	r0, [r7, #4]
 8014d84:	f000 fbfb 	bl	801557e <USBD_CtlSendData>
              break;
 8014d88:	e06a      	b.n	8014e60 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8014d8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	da11      	bge.n	8014db6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014d92:	7bbb      	ldrb	r3, [r7, #14]
 8014d94:	f003 020f 	and.w	r2, r3, #15
 8014d98:	6879      	ldr	r1, [r7, #4]
 8014d9a:	4613      	mov	r3, r2
 8014d9c:	009b      	lsls	r3, r3, #2
 8014d9e:	4413      	add	r3, r2
 8014da0:	009b      	lsls	r3, r3, #2
 8014da2:	440b      	add	r3, r1
 8014da4:	3318      	adds	r3, #24
 8014da6:	681b      	ldr	r3, [r3, #0]
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d117      	bne.n	8014ddc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8014dac:	6839      	ldr	r1, [r7, #0]
 8014dae:	6878      	ldr	r0, [r7, #4]
 8014db0:	f000 fb7b 	bl	80154aa <USBD_CtlError>
                  break;
 8014db4:	e054      	b.n	8014e60 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8014db6:	7bbb      	ldrb	r3, [r7, #14]
 8014db8:	f003 020f 	and.w	r2, r3, #15
 8014dbc:	6879      	ldr	r1, [r7, #4]
 8014dbe:	4613      	mov	r3, r2
 8014dc0:	009b      	lsls	r3, r3, #2
 8014dc2:	4413      	add	r3, r2
 8014dc4:	009b      	lsls	r3, r3, #2
 8014dc6:	440b      	add	r3, r1
 8014dc8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8014dcc:	681b      	ldr	r3, [r3, #0]
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	d104      	bne.n	8014ddc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8014dd2:	6839      	ldr	r1, [r7, #0]
 8014dd4:	6878      	ldr	r0, [r7, #4]
 8014dd6:	f000 fb68 	bl	80154aa <USBD_CtlError>
                  break;
 8014dda:	e041      	b.n	8014e60 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014ddc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	da0b      	bge.n	8014dfc <USBD_StdEPReq+0x240>
 8014de4:	7bbb      	ldrb	r3, [r7, #14]
 8014de6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014dea:	4613      	mov	r3, r2
 8014dec:	009b      	lsls	r3, r3, #2
 8014dee:	4413      	add	r3, r2
 8014df0:	009b      	lsls	r3, r3, #2
 8014df2:	3310      	adds	r3, #16
 8014df4:	687a      	ldr	r2, [r7, #4]
 8014df6:	4413      	add	r3, r2
 8014df8:	3304      	adds	r3, #4
 8014dfa:	e00b      	b.n	8014e14 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014dfc:	7bbb      	ldrb	r3, [r7, #14]
 8014dfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014e02:	4613      	mov	r3, r2
 8014e04:	009b      	lsls	r3, r3, #2
 8014e06:	4413      	add	r3, r2
 8014e08:	009b      	lsls	r3, r3, #2
 8014e0a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014e0e:	687a      	ldr	r2, [r7, #4]
 8014e10:	4413      	add	r3, r2
 8014e12:	3304      	adds	r3, #4
 8014e14:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014e16:	7bbb      	ldrb	r3, [r7, #14]
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	d002      	beq.n	8014e22 <USBD_StdEPReq+0x266>
 8014e1c:	7bbb      	ldrb	r3, [r7, #14]
 8014e1e:	2b80      	cmp	r3, #128	; 0x80
 8014e20:	d103      	bne.n	8014e2a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8014e22:	68bb      	ldr	r3, [r7, #8]
 8014e24:	2200      	movs	r2, #0
 8014e26:	601a      	str	r2, [r3, #0]
 8014e28:	e00e      	b.n	8014e48 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8014e2a:	7bbb      	ldrb	r3, [r7, #14]
 8014e2c:	4619      	mov	r1, r3
 8014e2e:	6878      	ldr	r0, [r7, #4]
 8014e30:	f000 ff77 	bl	8015d22 <USBD_LL_IsStallEP>
 8014e34:	4603      	mov	r3, r0
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	d003      	beq.n	8014e42 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8014e3a:	68bb      	ldr	r3, [r7, #8]
 8014e3c:	2201      	movs	r2, #1
 8014e3e:	601a      	str	r2, [r3, #0]
 8014e40:	e002      	b.n	8014e48 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8014e42:	68bb      	ldr	r3, [r7, #8]
 8014e44:	2200      	movs	r2, #0
 8014e46:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8014e48:	68bb      	ldr	r3, [r7, #8]
 8014e4a:	2202      	movs	r2, #2
 8014e4c:	4619      	mov	r1, r3
 8014e4e:	6878      	ldr	r0, [r7, #4]
 8014e50:	f000 fb95 	bl	801557e <USBD_CtlSendData>
              break;
 8014e54:	e004      	b.n	8014e60 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8014e56:	6839      	ldr	r1, [r7, #0]
 8014e58:	6878      	ldr	r0, [r7, #4]
 8014e5a:	f000 fb26 	bl	80154aa <USBD_CtlError>
              break;
 8014e5e:	bf00      	nop
          }
          break;
 8014e60:	e004      	b.n	8014e6c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8014e62:	6839      	ldr	r1, [r7, #0]
 8014e64:	6878      	ldr	r0, [r7, #4]
 8014e66:	f000 fb20 	bl	80154aa <USBD_CtlError>
          break;
 8014e6a:	bf00      	nop
      }
      break;
 8014e6c:	e004      	b.n	8014e78 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8014e6e:	6839      	ldr	r1, [r7, #0]
 8014e70:	6878      	ldr	r0, [r7, #4]
 8014e72:	f000 fb1a 	bl	80154aa <USBD_CtlError>
      break;
 8014e76:	bf00      	nop
  }

  return ret;
 8014e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8014e7a:	4618      	mov	r0, r3
 8014e7c:	3710      	adds	r7, #16
 8014e7e:	46bd      	mov	sp, r7
 8014e80:	bd80      	pop	{r7, pc}
	...

08014e84 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8014e84:	b580      	push	{r7, lr}
 8014e86:	b084      	sub	sp, #16
 8014e88:	af00      	add	r7, sp, #0
 8014e8a:	6078      	str	r0, [r7, #4]
 8014e8c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014e8e:	2300      	movs	r3, #0
 8014e90:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8014e92:	2300      	movs	r3, #0
 8014e94:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8014e96:	2300      	movs	r3, #0
 8014e98:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8014e9a:	683b      	ldr	r3, [r7, #0]
 8014e9c:	885b      	ldrh	r3, [r3, #2]
 8014e9e:	0a1b      	lsrs	r3, r3, #8
 8014ea0:	b29b      	uxth	r3, r3
 8014ea2:	3b01      	subs	r3, #1
 8014ea4:	2b06      	cmp	r3, #6
 8014ea6:	f200 8128 	bhi.w	80150fa <USBD_GetDescriptor+0x276>
 8014eaa:	a201      	add	r2, pc, #4	; (adr r2, 8014eb0 <USBD_GetDescriptor+0x2c>)
 8014eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014eb0:	08014ecd 	.word	0x08014ecd
 8014eb4:	08014ee5 	.word	0x08014ee5
 8014eb8:	08014f25 	.word	0x08014f25
 8014ebc:	080150fb 	.word	0x080150fb
 8014ec0:	080150fb 	.word	0x080150fb
 8014ec4:	0801509b 	.word	0x0801509b
 8014ec8:	080150c7 	.word	0x080150c7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014ed2:	681b      	ldr	r3, [r3, #0]
 8014ed4:	687a      	ldr	r2, [r7, #4]
 8014ed6:	7c12      	ldrb	r2, [r2, #16]
 8014ed8:	f107 0108 	add.w	r1, r7, #8
 8014edc:	4610      	mov	r0, r2
 8014ede:	4798      	blx	r3
 8014ee0:	60f8      	str	r0, [r7, #12]
      break;
 8014ee2:	e112      	b.n	801510a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	7c1b      	ldrb	r3, [r3, #16]
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d10d      	bne.n	8014f08 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014ef4:	f107 0208 	add.w	r2, r7, #8
 8014ef8:	4610      	mov	r0, r2
 8014efa:	4798      	blx	r3
 8014efc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014efe:	68fb      	ldr	r3, [r7, #12]
 8014f00:	3301      	adds	r3, #1
 8014f02:	2202      	movs	r2, #2
 8014f04:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8014f06:	e100      	b.n	801510a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f10:	f107 0208 	add.w	r2, r7, #8
 8014f14:	4610      	mov	r0, r2
 8014f16:	4798      	blx	r3
 8014f18:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014f1a:	68fb      	ldr	r3, [r7, #12]
 8014f1c:	3301      	adds	r3, #1
 8014f1e:	2202      	movs	r2, #2
 8014f20:	701a      	strb	r2, [r3, #0]
      break;
 8014f22:	e0f2      	b.n	801510a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8014f24:	683b      	ldr	r3, [r7, #0]
 8014f26:	885b      	ldrh	r3, [r3, #2]
 8014f28:	b2db      	uxtb	r3, r3
 8014f2a:	2b05      	cmp	r3, #5
 8014f2c:	f200 80ac 	bhi.w	8015088 <USBD_GetDescriptor+0x204>
 8014f30:	a201      	add	r2, pc, #4	; (adr r2, 8014f38 <USBD_GetDescriptor+0xb4>)
 8014f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f36:	bf00      	nop
 8014f38:	08014f51 	.word	0x08014f51
 8014f3c:	08014f85 	.word	0x08014f85
 8014f40:	08014fb9 	.word	0x08014fb9
 8014f44:	08014fed 	.word	0x08014fed
 8014f48:	08015021 	.word	0x08015021
 8014f4c:	08015055 	.word	0x08015055
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014f56:	685b      	ldr	r3, [r3, #4]
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	d00b      	beq.n	8014f74 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014f62:	685b      	ldr	r3, [r3, #4]
 8014f64:	687a      	ldr	r2, [r7, #4]
 8014f66:	7c12      	ldrb	r2, [r2, #16]
 8014f68:	f107 0108 	add.w	r1, r7, #8
 8014f6c:	4610      	mov	r0, r2
 8014f6e:	4798      	blx	r3
 8014f70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014f72:	e091      	b.n	8015098 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014f74:	6839      	ldr	r1, [r7, #0]
 8014f76:	6878      	ldr	r0, [r7, #4]
 8014f78:	f000 fa97 	bl	80154aa <USBD_CtlError>
            err++;
 8014f7c:	7afb      	ldrb	r3, [r7, #11]
 8014f7e:	3301      	adds	r3, #1
 8014f80:	72fb      	strb	r3, [r7, #11]
          break;
 8014f82:	e089      	b.n	8015098 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014f8a:	689b      	ldr	r3, [r3, #8]
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d00b      	beq.n	8014fa8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014f96:	689b      	ldr	r3, [r3, #8]
 8014f98:	687a      	ldr	r2, [r7, #4]
 8014f9a:	7c12      	ldrb	r2, [r2, #16]
 8014f9c:	f107 0108 	add.w	r1, r7, #8
 8014fa0:	4610      	mov	r0, r2
 8014fa2:	4798      	blx	r3
 8014fa4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014fa6:	e077      	b.n	8015098 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014fa8:	6839      	ldr	r1, [r7, #0]
 8014faa:	6878      	ldr	r0, [r7, #4]
 8014fac:	f000 fa7d 	bl	80154aa <USBD_CtlError>
            err++;
 8014fb0:	7afb      	ldrb	r3, [r7, #11]
 8014fb2:	3301      	adds	r3, #1
 8014fb4:	72fb      	strb	r3, [r7, #11]
          break;
 8014fb6:	e06f      	b.n	8015098 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014fbe:	68db      	ldr	r3, [r3, #12]
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	d00b      	beq.n	8014fdc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014fca:	68db      	ldr	r3, [r3, #12]
 8014fcc:	687a      	ldr	r2, [r7, #4]
 8014fce:	7c12      	ldrb	r2, [r2, #16]
 8014fd0:	f107 0108 	add.w	r1, r7, #8
 8014fd4:	4610      	mov	r0, r2
 8014fd6:	4798      	blx	r3
 8014fd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014fda:	e05d      	b.n	8015098 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014fdc:	6839      	ldr	r1, [r7, #0]
 8014fde:	6878      	ldr	r0, [r7, #4]
 8014fe0:	f000 fa63 	bl	80154aa <USBD_CtlError>
            err++;
 8014fe4:	7afb      	ldrb	r3, [r7, #11]
 8014fe6:	3301      	adds	r3, #1
 8014fe8:	72fb      	strb	r3, [r7, #11]
          break;
 8014fea:	e055      	b.n	8015098 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014ff2:	691b      	ldr	r3, [r3, #16]
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d00b      	beq.n	8015010 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014ffe:	691b      	ldr	r3, [r3, #16]
 8015000:	687a      	ldr	r2, [r7, #4]
 8015002:	7c12      	ldrb	r2, [r2, #16]
 8015004:	f107 0108 	add.w	r1, r7, #8
 8015008:	4610      	mov	r0, r2
 801500a:	4798      	blx	r3
 801500c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801500e:	e043      	b.n	8015098 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015010:	6839      	ldr	r1, [r7, #0]
 8015012:	6878      	ldr	r0, [r7, #4]
 8015014:	f000 fa49 	bl	80154aa <USBD_CtlError>
            err++;
 8015018:	7afb      	ldrb	r3, [r7, #11]
 801501a:	3301      	adds	r3, #1
 801501c:	72fb      	strb	r3, [r7, #11]
          break;
 801501e:	e03b      	b.n	8015098 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8015026:	695b      	ldr	r3, [r3, #20]
 8015028:	2b00      	cmp	r3, #0
 801502a:	d00b      	beq.n	8015044 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8015032:	695b      	ldr	r3, [r3, #20]
 8015034:	687a      	ldr	r2, [r7, #4]
 8015036:	7c12      	ldrb	r2, [r2, #16]
 8015038:	f107 0108 	add.w	r1, r7, #8
 801503c:	4610      	mov	r0, r2
 801503e:	4798      	blx	r3
 8015040:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015042:	e029      	b.n	8015098 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015044:	6839      	ldr	r1, [r7, #0]
 8015046:	6878      	ldr	r0, [r7, #4]
 8015048:	f000 fa2f 	bl	80154aa <USBD_CtlError>
            err++;
 801504c:	7afb      	ldrb	r3, [r7, #11]
 801504e:	3301      	adds	r3, #1
 8015050:	72fb      	strb	r3, [r7, #11]
          break;
 8015052:	e021      	b.n	8015098 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801505a:	699b      	ldr	r3, [r3, #24]
 801505c:	2b00      	cmp	r3, #0
 801505e:	d00b      	beq.n	8015078 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8015066:	699b      	ldr	r3, [r3, #24]
 8015068:	687a      	ldr	r2, [r7, #4]
 801506a:	7c12      	ldrb	r2, [r2, #16]
 801506c:	f107 0108 	add.w	r1, r7, #8
 8015070:	4610      	mov	r0, r2
 8015072:	4798      	blx	r3
 8015074:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015076:	e00f      	b.n	8015098 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015078:	6839      	ldr	r1, [r7, #0]
 801507a:	6878      	ldr	r0, [r7, #4]
 801507c:	f000 fa15 	bl	80154aa <USBD_CtlError>
            err++;
 8015080:	7afb      	ldrb	r3, [r7, #11]
 8015082:	3301      	adds	r3, #1
 8015084:	72fb      	strb	r3, [r7, #11]
          break;
 8015086:	e007      	b.n	8015098 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8015088:	6839      	ldr	r1, [r7, #0]
 801508a:	6878      	ldr	r0, [r7, #4]
 801508c:	f000 fa0d 	bl	80154aa <USBD_CtlError>
          err++;
 8015090:	7afb      	ldrb	r3, [r7, #11]
 8015092:	3301      	adds	r3, #1
 8015094:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8015096:	e038      	b.n	801510a <USBD_GetDescriptor+0x286>
 8015098:	e037      	b.n	801510a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	7c1b      	ldrb	r3, [r3, #16]
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d109      	bne.n	80150b6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80150a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80150aa:	f107 0208 	add.w	r2, r7, #8
 80150ae:	4610      	mov	r0, r2
 80150b0:	4798      	blx	r3
 80150b2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80150b4:	e029      	b.n	801510a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80150b6:	6839      	ldr	r1, [r7, #0]
 80150b8:	6878      	ldr	r0, [r7, #4]
 80150ba:	f000 f9f6 	bl	80154aa <USBD_CtlError>
        err++;
 80150be:	7afb      	ldrb	r3, [r7, #11]
 80150c0:	3301      	adds	r3, #1
 80150c2:	72fb      	strb	r3, [r7, #11]
      break;
 80150c4:	e021      	b.n	801510a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	7c1b      	ldrb	r3, [r3, #16]
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	d10d      	bne.n	80150ea <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80150d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80150d6:	f107 0208 	add.w	r2, r7, #8
 80150da:	4610      	mov	r0, r2
 80150dc:	4798      	blx	r3
 80150de:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80150e0:	68fb      	ldr	r3, [r7, #12]
 80150e2:	3301      	adds	r3, #1
 80150e4:	2207      	movs	r2, #7
 80150e6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80150e8:	e00f      	b.n	801510a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80150ea:	6839      	ldr	r1, [r7, #0]
 80150ec:	6878      	ldr	r0, [r7, #4]
 80150ee:	f000 f9dc 	bl	80154aa <USBD_CtlError>
        err++;
 80150f2:	7afb      	ldrb	r3, [r7, #11]
 80150f4:	3301      	adds	r3, #1
 80150f6:	72fb      	strb	r3, [r7, #11]
      break;
 80150f8:	e007      	b.n	801510a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80150fa:	6839      	ldr	r1, [r7, #0]
 80150fc:	6878      	ldr	r0, [r7, #4]
 80150fe:	f000 f9d4 	bl	80154aa <USBD_CtlError>
      err++;
 8015102:	7afb      	ldrb	r3, [r7, #11]
 8015104:	3301      	adds	r3, #1
 8015106:	72fb      	strb	r3, [r7, #11]
      break;
 8015108:	bf00      	nop
  }

  if (err != 0U)
 801510a:	7afb      	ldrb	r3, [r7, #11]
 801510c:	2b00      	cmp	r3, #0
 801510e:	d11c      	bne.n	801514a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8015110:	893b      	ldrh	r3, [r7, #8]
 8015112:	2b00      	cmp	r3, #0
 8015114:	d011      	beq.n	801513a <USBD_GetDescriptor+0x2b6>
 8015116:	683b      	ldr	r3, [r7, #0]
 8015118:	88db      	ldrh	r3, [r3, #6]
 801511a:	2b00      	cmp	r3, #0
 801511c:	d00d      	beq.n	801513a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 801511e:	683b      	ldr	r3, [r7, #0]
 8015120:	88da      	ldrh	r2, [r3, #6]
 8015122:	893b      	ldrh	r3, [r7, #8]
 8015124:	4293      	cmp	r3, r2
 8015126:	bf28      	it	cs
 8015128:	4613      	movcs	r3, r2
 801512a:	b29b      	uxth	r3, r3
 801512c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801512e:	893b      	ldrh	r3, [r7, #8]
 8015130:	461a      	mov	r2, r3
 8015132:	68f9      	ldr	r1, [r7, #12]
 8015134:	6878      	ldr	r0, [r7, #4]
 8015136:	f000 fa22 	bl	801557e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801513a:	683b      	ldr	r3, [r7, #0]
 801513c:	88db      	ldrh	r3, [r3, #6]
 801513e:	2b00      	cmp	r3, #0
 8015140:	d104      	bne.n	801514c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8015142:	6878      	ldr	r0, [r7, #4]
 8015144:	f000 fa5b 	bl	80155fe <USBD_CtlSendStatus>
 8015148:	e000      	b.n	801514c <USBD_GetDescriptor+0x2c8>
    return;
 801514a:	bf00      	nop
    }
  }
}
 801514c:	3710      	adds	r7, #16
 801514e:	46bd      	mov	sp, r7
 8015150:	bd80      	pop	{r7, pc}
 8015152:	bf00      	nop

08015154 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8015154:	b580      	push	{r7, lr}
 8015156:	b084      	sub	sp, #16
 8015158:	af00      	add	r7, sp, #0
 801515a:	6078      	str	r0, [r7, #4]
 801515c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801515e:	683b      	ldr	r3, [r7, #0]
 8015160:	889b      	ldrh	r3, [r3, #4]
 8015162:	2b00      	cmp	r3, #0
 8015164:	d130      	bne.n	80151c8 <USBD_SetAddress+0x74>
 8015166:	683b      	ldr	r3, [r7, #0]
 8015168:	88db      	ldrh	r3, [r3, #6]
 801516a:	2b00      	cmp	r3, #0
 801516c:	d12c      	bne.n	80151c8 <USBD_SetAddress+0x74>
 801516e:	683b      	ldr	r3, [r7, #0]
 8015170:	885b      	ldrh	r3, [r3, #2]
 8015172:	2b7f      	cmp	r3, #127	; 0x7f
 8015174:	d828      	bhi.n	80151c8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8015176:	683b      	ldr	r3, [r7, #0]
 8015178:	885b      	ldrh	r3, [r3, #2]
 801517a:	b2db      	uxtb	r3, r3
 801517c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015180:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015188:	2b03      	cmp	r3, #3
 801518a:	d104      	bne.n	8015196 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 801518c:	6839      	ldr	r1, [r7, #0]
 801518e:	6878      	ldr	r0, [r7, #4]
 8015190:	f000 f98b 	bl	80154aa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015194:	e01d      	b.n	80151d2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	7bfa      	ldrb	r2, [r7, #15]
 801519a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801519e:	7bfb      	ldrb	r3, [r7, #15]
 80151a0:	4619      	mov	r1, r3
 80151a2:	6878      	ldr	r0, [r7, #4]
 80151a4:	f000 fde9 	bl	8015d7a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80151a8:	6878      	ldr	r0, [r7, #4]
 80151aa:	f000 fa28 	bl	80155fe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80151ae:	7bfb      	ldrb	r3, [r7, #15]
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	d004      	beq.n	80151be <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	2202      	movs	r2, #2
 80151b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80151bc:	e009      	b.n	80151d2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	2201      	movs	r2, #1
 80151c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80151c6:	e004      	b.n	80151d2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80151c8:	6839      	ldr	r1, [r7, #0]
 80151ca:	6878      	ldr	r0, [r7, #4]
 80151cc:	f000 f96d 	bl	80154aa <USBD_CtlError>
  }
}
 80151d0:	bf00      	nop
 80151d2:	bf00      	nop
 80151d4:	3710      	adds	r7, #16
 80151d6:	46bd      	mov	sp, r7
 80151d8:	bd80      	pop	{r7, pc}
	...

080151dc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80151dc:	b580      	push	{r7, lr}
 80151de:	b082      	sub	sp, #8
 80151e0:	af00      	add	r7, sp, #0
 80151e2:	6078      	str	r0, [r7, #4]
 80151e4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80151e6:	683b      	ldr	r3, [r7, #0]
 80151e8:	885b      	ldrh	r3, [r3, #2]
 80151ea:	b2da      	uxtb	r2, r3
 80151ec:	4b41      	ldr	r3, [pc, #260]	; (80152f4 <USBD_SetConfig+0x118>)
 80151ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80151f0:	4b40      	ldr	r3, [pc, #256]	; (80152f4 <USBD_SetConfig+0x118>)
 80151f2:	781b      	ldrb	r3, [r3, #0]
 80151f4:	2b01      	cmp	r3, #1
 80151f6:	d904      	bls.n	8015202 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80151f8:	6839      	ldr	r1, [r7, #0]
 80151fa:	6878      	ldr	r0, [r7, #4]
 80151fc:	f000 f955 	bl	80154aa <USBD_CtlError>
 8015200:	e075      	b.n	80152ee <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015208:	2b02      	cmp	r3, #2
 801520a:	d002      	beq.n	8015212 <USBD_SetConfig+0x36>
 801520c:	2b03      	cmp	r3, #3
 801520e:	d023      	beq.n	8015258 <USBD_SetConfig+0x7c>
 8015210:	e062      	b.n	80152d8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8015212:	4b38      	ldr	r3, [pc, #224]	; (80152f4 <USBD_SetConfig+0x118>)
 8015214:	781b      	ldrb	r3, [r3, #0]
 8015216:	2b00      	cmp	r3, #0
 8015218:	d01a      	beq.n	8015250 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 801521a:	4b36      	ldr	r3, [pc, #216]	; (80152f4 <USBD_SetConfig+0x118>)
 801521c:	781b      	ldrb	r3, [r3, #0]
 801521e:	461a      	mov	r2, r3
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	2203      	movs	r2, #3
 8015228:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801522c:	4b31      	ldr	r3, [pc, #196]	; (80152f4 <USBD_SetConfig+0x118>)
 801522e:	781b      	ldrb	r3, [r3, #0]
 8015230:	4619      	mov	r1, r3
 8015232:	6878      	ldr	r0, [r7, #4]
 8015234:	f7ff f9e8 	bl	8014608 <USBD_SetClassConfig>
 8015238:	4603      	mov	r3, r0
 801523a:	2b02      	cmp	r3, #2
 801523c:	d104      	bne.n	8015248 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 801523e:	6839      	ldr	r1, [r7, #0]
 8015240:	6878      	ldr	r0, [r7, #4]
 8015242:	f000 f932 	bl	80154aa <USBD_CtlError>
            return;
 8015246:	e052      	b.n	80152ee <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8015248:	6878      	ldr	r0, [r7, #4]
 801524a:	f000 f9d8 	bl	80155fe <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801524e:	e04e      	b.n	80152ee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8015250:	6878      	ldr	r0, [r7, #4]
 8015252:	f000 f9d4 	bl	80155fe <USBD_CtlSendStatus>
        break;
 8015256:	e04a      	b.n	80152ee <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8015258:	4b26      	ldr	r3, [pc, #152]	; (80152f4 <USBD_SetConfig+0x118>)
 801525a:	781b      	ldrb	r3, [r3, #0]
 801525c:	2b00      	cmp	r3, #0
 801525e:	d112      	bne.n	8015286 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	2202      	movs	r2, #2
 8015264:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8015268:	4b22      	ldr	r3, [pc, #136]	; (80152f4 <USBD_SetConfig+0x118>)
 801526a:	781b      	ldrb	r3, [r3, #0]
 801526c:	461a      	mov	r2, r3
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8015272:	4b20      	ldr	r3, [pc, #128]	; (80152f4 <USBD_SetConfig+0x118>)
 8015274:	781b      	ldrb	r3, [r3, #0]
 8015276:	4619      	mov	r1, r3
 8015278:	6878      	ldr	r0, [r7, #4]
 801527a:	f7ff f9e4 	bl	8014646 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801527e:	6878      	ldr	r0, [r7, #4]
 8015280:	f000 f9bd 	bl	80155fe <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8015284:	e033      	b.n	80152ee <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8015286:	4b1b      	ldr	r3, [pc, #108]	; (80152f4 <USBD_SetConfig+0x118>)
 8015288:	781b      	ldrb	r3, [r3, #0]
 801528a:	461a      	mov	r2, r3
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	685b      	ldr	r3, [r3, #4]
 8015290:	429a      	cmp	r2, r3
 8015292:	d01d      	beq.n	80152d0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	685b      	ldr	r3, [r3, #4]
 8015298:	b2db      	uxtb	r3, r3
 801529a:	4619      	mov	r1, r3
 801529c:	6878      	ldr	r0, [r7, #4]
 801529e:	f7ff f9d2 	bl	8014646 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80152a2:	4b14      	ldr	r3, [pc, #80]	; (80152f4 <USBD_SetConfig+0x118>)
 80152a4:	781b      	ldrb	r3, [r3, #0]
 80152a6:	461a      	mov	r2, r3
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80152ac:	4b11      	ldr	r3, [pc, #68]	; (80152f4 <USBD_SetConfig+0x118>)
 80152ae:	781b      	ldrb	r3, [r3, #0]
 80152b0:	4619      	mov	r1, r3
 80152b2:	6878      	ldr	r0, [r7, #4]
 80152b4:	f7ff f9a8 	bl	8014608 <USBD_SetClassConfig>
 80152b8:	4603      	mov	r3, r0
 80152ba:	2b02      	cmp	r3, #2
 80152bc:	d104      	bne.n	80152c8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80152be:	6839      	ldr	r1, [r7, #0]
 80152c0:	6878      	ldr	r0, [r7, #4]
 80152c2:	f000 f8f2 	bl	80154aa <USBD_CtlError>
            return;
 80152c6:	e012      	b.n	80152ee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80152c8:	6878      	ldr	r0, [r7, #4]
 80152ca:	f000 f998 	bl	80155fe <USBD_CtlSendStatus>
        break;
 80152ce:	e00e      	b.n	80152ee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80152d0:	6878      	ldr	r0, [r7, #4]
 80152d2:	f000 f994 	bl	80155fe <USBD_CtlSendStatus>
        break;
 80152d6:	e00a      	b.n	80152ee <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80152d8:	6839      	ldr	r1, [r7, #0]
 80152da:	6878      	ldr	r0, [r7, #4]
 80152dc:	f000 f8e5 	bl	80154aa <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80152e0:	4b04      	ldr	r3, [pc, #16]	; (80152f4 <USBD_SetConfig+0x118>)
 80152e2:	781b      	ldrb	r3, [r3, #0]
 80152e4:	4619      	mov	r1, r3
 80152e6:	6878      	ldr	r0, [r7, #4]
 80152e8:	f7ff f9ad 	bl	8014646 <USBD_ClrClassConfig>
        break;
 80152ec:	bf00      	nop
    }
  }
}
 80152ee:	3708      	adds	r7, #8
 80152f0:	46bd      	mov	sp, r7
 80152f2:	bd80      	pop	{r7, pc}
 80152f4:	200001e0 	.word	0x200001e0

080152f8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80152f8:	b580      	push	{r7, lr}
 80152fa:	b082      	sub	sp, #8
 80152fc:	af00      	add	r7, sp, #0
 80152fe:	6078      	str	r0, [r7, #4]
 8015300:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8015302:	683b      	ldr	r3, [r7, #0]
 8015304:	88db      	ldrh	r3, [r3, #6]
 8015306:	2b01      	cmp	r3, #1
 8015308:	d004      	beq.n	8015314 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801530a:	6839      	ldr	r1, [r7, #0]
 801530c:	6878      	ldr	r0, [r7, #4]
 801530e:	f000 f8cc 	bl	80154aa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8015312:	e022      	b.n	801535a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801531a:	2b02      	cmp	r3, #2
 801531c:	dc02      	bgt.n	8015324 <USBD_GetConfig+0x2c>
 801531e:	2b00      	cmp	r3, #0
 8015320:	dc03      	bgt.n	801532a <USBD_GetConfig+0x32>
 8015322:	e015      	b.n	8015350 <USBD_GetConfig+0x58>
 8015324:	2b03      	cmp	r3, #3
 8015326:	d00b      	beq.n	8015340 <USBD_GetConfig+0x48>
 8015328:	e012      	b.n	8015350 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	2200      	movs	r2, #0
 801532e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	3308      	adds	r3, #8
 8015334:	2201      	movs	r2, #1
 8015336:	4619      	mov	r1, r3
 8015338:	6878      	ldr	r0, [r7, #4]
 801533a:	f000 f920 	bl	801557e <USBD_CtlSendData>
        break;
 801533e:	e00c      	b.n	801535a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	3304      	adds	r3, #4
 8015344:	2201      	movs	r2, #1
 8015346:	4619      	mov	r1, r3
 8015348:	6878      	ldr	r0, [r7, #4]
 801534a:	f000 f918 	bl	801557e <USBD_CtlSendData>
        break;
 801534e:	e004      	b.n	801535a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8015350:	6839      	ldr	r1, [r7, #0]
 8015352:	6878      	ldr	r0, [r7, #4]
 8015354:	f000 f8a9 	bl	80154aa <USBD_CtlError>
        break;
 8015358:	bf00      	nop
}
 801535a:	bf00      	nop
 801535c:	3708      	adds	r7, #8
 801535e:	46bd      	mov	sp, r7
 8015360:	bd80      	pop	{r7, pc}

08015362 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015362:	b580      	push	{r7, lr}
 8015364:	b082      	sub	sp, #8
 8015366:	af00      	add	r7, sp, #0
 8015368:	6078      	str	r0, [r7, #4]
 801536a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015372:	3b01      	subs	r3, #1
 8015374:	2b02      	cmp	r3, #2
 8015376:	d81e      	bhi.n	80153b6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8015378:	683b      	ldr	r3, [r7, #0]
 801537a:	88db      	ldrh	r3, [r3, #6]
 801537c:	2b02      	cmp	r3, #2
 801537e:	d004      	beq.n	801538a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8015380:	6839      	ldr	r1, [r7, #0]
 8015382:	6878      	ldr	r0, [r7, #4]
 8015384:	f000 f891 	bl	80154aa <USBD_CtlError>
        break;
 8015388:	e01a      	b.n	80153c0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	2201      	movs	r2, #1
 801538e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8015396:	2b00      	cmp	r3, #0
 8015398:	d005      	beq.n	80153a6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	68db      	ldr	r3, [r3, #12]
 801539e:	f043 0202 	orr.w	r2, r3, #2
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	330c      	adds	r3, #12
 80153aa:	2202      	movs	r2, #2
 80153ac:	4619      	mov	r1, r3
 80153ae:	6878      	ldr	r0, [r7, #4]
 80153b0:	f000 f8e5 	bl	801557e <USBD_CtlSendData>
      break;
 80153b4:	e004      	b.n	80153c0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80153b6:	6839      	ldr	r1, [r7, #0]
 80153b8:	6878      	ldr	r0, [r7, #4]
 80153ba:	f000 f876 	bl	80154aa <USBD_CtlError>
      break;
 80153be:	bf00      	nop
  }
}
 80153c0:	bf00      	nop
 80153c2:	3708      	adds	r7, #8
 80153c4:	46bd      	mov	sp, r7
 80153c6:	bd80      	pop	{r7, pc}

080153c8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80153c8:	b580      	push	{r7, lr}
 80153ca:	b082      	sub	sp, #8
 80153cc:	af00      	add	r7, sp, #0
 80153ce:	6078      	str	r0, [r7, #4]
 80153d0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80153d2:	683b      	ldr	r3, [r7, #0]
 80153d4:	885b      	ldrh	r3, [r3, #2]
 80153d6:	2b01      	cmp	r3, #1
 80153d8:	d106      	bne.n	80153e8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	2201      	movs	r2, #1
 80153de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80153e2:	6878      	ldr	r0, [r7, #4]
 80153e4:	f000 f90b 	bl	80155fe <USBD_CtlSendStatus>
  }
}
 80153e8:	bf00      	nop
 80153ea:	3708      	adds	r7, #8
 80153ec:	46bd      	mov	sp, r7
 80153ee:	bd80      	pop	{r7, pc}

080153f0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80153f0:	b580      	push	{r7, lr}
 80153f2:	b082      	sub	sp, #8
 80153f4:	af00      	add	r7, sp, #0
 80153f6:	6078      	str	r0, [r7, #4]
 80153f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015400:	3b01      	subs	r3, #1
 8015402:	2b02      	cmp	r3, #2
 8015404:	d80b      	bhi.n	801541e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015406:	683b      	ldr	r3, [r7, #0]
 8015408:	885b      	ldrh	r3, [r3, #2]
 801540a:	2b01      	cmp	r3, #1
 801540c:	d10c      	bne.n	8015428 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	2200      	movs	r2, #0
 8015412:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8015416:	6878      	ldr	r0, [r7, #4]
 8015418:	f000 f8f1 	bl	80155fe <USBD_CtlSendStatus>
      }
      break;
 801541c:	e004      	b.n	8015428 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 801541e:	6839      	ldr	r1, [r7, #0]
 8015420:	6878      	ldr	r0, [r7, #4]
 8015422:	f000 f842 	bl	80154aa <USBD_CtlError>
      break;
 8015426:	e000      	b.n	801542a <USBD_ClrFeature+0x3a>
      break;
 8015428:	bf00      	nop
  }
}
 801542a:	bf00      	nop
 801542c:	3708      	adds	r7, #8
 801542e:	46bd      	mov	sp, r7
 8015430:	bd80      	pop	{r7, pc}

08015432 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8015432:	b480      	push	{r7}
 8015434:	b083      	sub	sp, #12
 8015436:	af00      	add	r7, sp, #0
 8015438:	6078      	str	r0, [r7, #4]
 801543a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 801543c:	683b      	ldr	r3, [r7, #0]
 801543e:	781a      	ldrb	r2, [r3, #0]
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8015444:	683b      	ldr	r3, [r7, #0]
 8015446:	785a      	ldrb	r2, [r3, #1]
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 801544c:	683b      	ldr	r3, [r7, #0]
 801544e:	3302      	adds	r3, #2
 8015450:	781b      	ldrb	r3, [r3, #0]
 8015452:	b29a      	uxth	r2, r3
 8015454:	683b      	ldr	r3, [r7, #0]
 8015456:	3303      	adds	r3, #3
 8015458:	781b      	ldrb	r3, [r3, #0]
 801545a:	b29b      	uxth	r3, r3
 801545c:	021b      	lsls	r3, r3, #8
 801545e:	b29b      	uxth	r3, r3
 8015460:	4413      	add	r3, r2
 8015462:	b29a      	uxth	r2, r3
 8015464:	687b      	ldr	r3, [r7, #4]
 8015466:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8015468:	683b      	ldr	r3, [r7, #0]
 801546a:	3304      	adds	r3, #4
 801546c:	781b      	ldrb	r3, [r3, #0]
 801546e:	b29a      	uxth	r2, r3
 8015470:	683b      	ldr	r3, [r7, #0]
 8015472:	3305      	adds	r3, #5
 8015474:	781b      	ldrb	r3, [r3, #0]
 8015476:	b29b      	uxth	r3, r3
 8015478:	021b      	lsls	r3, r3, #8
 801547a:	b29b      	uxth	r3, r3
 801547c:	4413      	add	r3, r2
 801547e:	b29a      	uxth	r2, r3
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8015484:	683b      	ldr	r3, [r7, #0]
 8015486:	3306      	adds	r3, #6
 8015488:	781b      	ldrb	r3, [r3, #0]
 801548a:	b29a      	uxth	r2, r3
 801548c:	683b      	ldr	r3, [r7, #0]
 801548e:	3307      	adds	r3, #7
 8015490:	781b      	ldrb	r3, [r3, #0]
 8015492:	b29b      	uxth	r3, r3
 8015494:	021b      	lsls	r3, r3, #8
 8015496:	b29b      	uxth	r3, r3
 8015498:	4413      	add	r3, r2
 801549a:	b29a      	uxth	r2, r3
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	80da      	strh	r2, [r3, #6]

}
 80154a0:	bf00      	nop
 80154a2:	370c      	adds	r7, #12
 80154a4:	46bd      	mov	sp, r7
 80154a6:	bc80      	pop	{r7}
 80154a8:	4770      	bx	lr

080154aa <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80154aa:	b580      	push	{r7, lr}
 80154ac:	b082      	sub	sp, #8
 80154ae:	af00      	add	r7, sp, #0
 80154b0:	6078      	str	r0, [r7, #4]
 80154b2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80154b4:	2180      	movs	r1, #128	; 0x80
 80154b6:	6878      	ldr	r0, [r7, #4]
 80154b8:	f000 fbf5 	bl	8015ca6 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80154bc:	2100      	movs	r1, #0
 80154be:	6878      	ldr	r0, [r7, #4]
 80154c0:	f000 fbf1 	bl	8015ca6 <USBD_LL_StallEP>
}
 80154c4:	bf00      	nop
 80154c6:	3708      	adds	r7, #8
 80154c8:	46bd      	mov	sp, r7
 80154ca:	bd80      	pop	{r7, pc}

080154cc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80154cc:	b580      	push	{r7, lr}
 80154ce:	b086      	sub	sp, #24
 80154d0:	af00      	add	r7, sp, #0
 80154d2:	60f8      	str	r0, [r7, #12]
 80154d4:	60b9      	str	r1, [r7, #8]
 80154d6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80154d8:	2300      	movs	r3, #0
 80154da:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80154dc:	68fb      	ldr	r3, [r7, #12]
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d032      	beq.n	8015548 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80154e2:	68f8      	ldr	r0, [r7, #12]
 80154e4:	f000 f834 	bl	8015550 <USBD_GetLen>
 80154e8:	4603      	mov	r3, r0
 80154ea:	3301      	adds	r3, #1
 80154ec:	b29b      	uxth	r3, r3
 80154ee:	005b      	lsls	r3, r3, #1
 80154f0:	b29a      	uxth	r2, r3
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80154f6:	7dfb      	ldrb	r3, [r7, #23]
 80154f8:	1c5a      	adds	r2, r3, #1
 80154fa:	75fa      	strb	r2, [r7, #23]
 80154fc:	461a      	mov	r2, r3
 80154fe:	68bb      	ldr	r3, [r7, #8]
 8015500:	4413      	add	r3, r2
 8015502:	687a      	ldr	r2, [r7, #4]
 8015504:	7812      	ldrb	r2, [r2, #0]
 8015506:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8015508:	7dfb      	ldrb	r3, [r7, #23]
 801550a:	1c5a      	adds	r2, r3, #1
 801550c:	75fa      	strb	r2, [r7, #23]
 801550e:	461a      	mov	r2, r3
 8015510:	68bb      	ldr	r3, [r7, #8]
 8015512:	4413      	add	r3, r2
 8015514:	2203      	movs	r2, #3
 8015516:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8015518:	e012      	b.n	8015540 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 801551a:	68fb      	ldr	r3, [r7, #12]
 801551c:	1c5a      	adds	r2, r3, #1
 801551e:	60fa      	str	r2, [r7, #12]
 8015520:	7dfa      	ldrb	r2, [r7, #23]
 8015522:	1c51      	adds	r1, r2, #1
 8015524:	75f9      	strb	r1, [r7, #23]
 8015526:	4611      	mov	r1, r2
 8015528:	68ba      	ldr	r2, [r7, #8]
 801552a:	440a      	add	r2, r1
 801552c:	781b      	ldrb	r3, [r3, #0]
 801552e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8015530:	7dfb      	ldrb	r3, [r7, #23]
 8015532:	1c5a      	adds	r2, r3, #1
 8015534:	75fa      	strb	r2, [r7, #23]
 8015536:	461a      	mov	r2, r3
 8015538:	68bb      	ldr	r3, [r7, #8]
 801553a:	4413      	add	r3, r2
 801553c:	2200      	movs	r2, #0
 801553e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8015540:	68fb      	ldr	r3, [r7, #12]
 8015542:	781b      	ldrb	r3, [r3, #0]
 8015544:	2b00      	cmp	r3, #0
 8015546:	d1e8      	bne.n	801551a <USBD_GetString+0x4e>
    }
  }
}
 8015548:	bf00      	nop
 801554a:	3718      	adds	r7, #24
 801554c:	46bd      	mov	sp, r7
 801554e:	bd80      	pop	{r7, pc}

08015550 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8015550:	b480      	push	{r7}
 8015552:	b085      	sub	sp, #20
 8015554:	af00      	add	r7, sp, #0
 8015556:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8015558:	2300      	movs	r3, #0
 801555a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 801555c:	e005      	b.n	801556a <USBD_GetLen+0x1a>
  {
    len++;
 801555e:	7bfb      	ldrb	r3, [r7, #15]
 8015560:	3301      	adds	r3, #1
 8015562:	73fb      	strb	r3, [r7, #15]
    buf++;
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	3301      	adds	r3, #1
 8015568:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	781b      	ldrb	r3, [r3, #0]
 801556e:	2b00      	cmp	r3, #0
 8015570:	d1f5      	bne.n	801555e <USBD_GetLen+0xe>
  }

  return len;
 8015572:	7bfb      	ldrb	r3, [r7, #15]
}
 8015574:	4618      	mov	r0, r3
 8015576:	3714      	adds	r7, #20
 8015578:	46bd      	mov	sp, r7
 801557a:	bc80      	pop	{r7}
 801557c:	4770      	bx	lr

0801557e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 801557e:	b580      	push	{r7, lr}
 8015580:	b084      	sub	sp, #16
 8015582:	af00      	add	r7, sp, #0
 8015584:	60f8      	str	r0, [r7, #12]
 8015586:	60b9      	str	r1, [r7, #8]
 8015588:	4613      	mov	r3, r2
 801558a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801558c:	68fb      	ldr	r3, [r7, #12]
 801558e:	2202      	movs	r2, #2
 8015590:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8015594:	88fa      	ldrh	r2, [r7, #6]
 8015596:	68fb      	ldr	r3, [r7, #12]
 8015598:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 801559a:	88fa      	ldrh	r2, [r7, #6]
 801559c:	68fb      	ldr	r3, [r7, #12]
 801559e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80155a0:	88fb      	ldrh	r3, [r7, #6]
 80155a2:	68ba      	ldr	r2, [r7, #8]
 80155a4:	2100      	movs	r1, #0
 80155a6:	68f8      	ldr	r0, [r7, #12]
 80155a8:	f000 fc06 	bl	8015db8 <USBD_LL_Transmit>

  return USBD_OK;
 80155ac:	2300      	movs	r3, #0
}
 80155ae:	4618      	mov	r0, r3
 80155b0:	3710      	adds	r7, #16
 80155b2:	46bd      	mov	sp, r7
 80155b4:	bd80      	pop	{r7, pc}

080155b6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80155b6:	b580      	push	{r7, lr}
 80155b8:	b084      	sub	sp, #16
 80155ba:	af00      	add	r7, sp, #0
 80155bc:	60f8      	str	r0, [r7, #12]
 80155be:	60b9      	str	r1, [r7, #8]
 80155c0:	4613      	mov	r3, r2
 80155c2:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80155c4:	88fb      	ldrh	r3, [r7, #6]
 80155c6:	68ba      	ldr	r2, [r7, #8]
 80155c8:	2100      	movs	r1, #0
 80155ca:	68f8      	ldr	r0, [r7, #12]
 80155cc:	f000 fbf4 	bl	8015db8 <USBD_LL_Transmit>

  return USBD_OK;
 80155d0:	2300      	movs	r3, #0
}
 80155d2:	4618      	mov	r0, r3
 80155d4:	3710      	adds	r7, #16
 80155d6:	46bd      	mov	sp, r7
 80155d8:	bd80      	pop	{r7, pc}

080155da <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80155da:	b580      	push	{r7, lr}
 80155dc:	b084      	sub	sp, #16
 80155de:	af00      	add	r7, sp, #0
 80155e0:	60f8      	str	r0, [r7, #12]
 80155e2:	60b9      	str	r1, [r7, #8]
 80155e4:	4613      	mov	r3, r2
 80155e6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80155e8:	88fb      	ldrh	r3, [r7, #6]
 80155ea:	68ba      	ldr	r2, [r7, #8]
 80155ec:	2100      	movs	r1, #0
 80155ee:	68f8      	ldr	r0, [r7, #12]
 80155f0:	f000 fc05 	bl	8015dfe <USBD_LL_PrepareReceive>

  return USBD_OK;
 80155f4:	2300      	movs	r3, #0
}
 80155f6:	4618      	mov	r0, r3
 80155f8:	3710      	adds	r7, #16
 80155fa:	46bd      	mov	sp, r7
 80155fc:	bd80      	pop	{r7, pc}

080155fe <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80155fe:	b580      	push	{r7, lr}
 8015600:	b082      	sub	sp, #8
 8015602:	af00      	add	r7, sp, #0
 8015604:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	2204      	movs	r2, #4
 801560a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801560e:	2300      	movs	r3, #0
 8015610:	2200      	movs	r2, #0
 8015612:	2100      	movs	r1, #0
 8015614:	6878      	ldr	r0, [r7, #4]
 8015616:	f000 fbcf 	bl	8015db8 <USBD_LL_Transmit>

  return USBD_OK;
 801561a:	2300      	movs	r3, #0
}
 801561c:	4618      	mov	r0, r3
 801561e:	3708      	adds	r7, #8
 8015620:	46bd      	mov	sp, r7
 8015622:	bd80      	pop	{r7, pc}

08015624 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8015624:	b580      	push	{r7, lr}
 8015626:	b082      	sub	sp, #8
 8015628:	af00      	add	r7, sp, #0
 801562a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	2205      	movs	r2, #5
 8015630:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015634:	2300      	movs	r3, #0
 8015636:	2200      	movs	r2, #0
 8015638:	2100      	movs	r1, #0
 801563a:	6878      	ldr	r0, [r7, #4]
 801563c:	f000 fbdf 	bl	8015dfe <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015640:	2300      	movs	r3, #0
}
 8015642:	4618      	mov	r0, r3
 8015644:	3708      	adds	r7, #8
 8015646:	46bd      	mov	sp, r7
 8015648:	bd80      	pop	{r7, pc}
	...

0801564c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801564c:	b580      	push	{r7, lr}
 801564e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8015650:	2200      	movs	r2, #0
 8015652:	4912      	ldr	r1, [pc, #72]	; (801569c <MX_USB_DEVICE_Init+0x50>)
 8015654:	4812      	ldr	r0, [pc, #72]	; (80156a0 <MX_USB_DEVICE_Init+0x54>)
 8015656:	f7fe ff7d 	bl	8014554 <USBD_Init>
 801565a:	4603      	mov	r3, r0
 801565c:	2b00      	cmp	r3, #0
 801565e:	d001      	beq.n	8015664 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8015660:	f7f8 f856 	bl	800d710 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8015664:	490f      	ldr	r1, [pc, #60]	; (80156a4 <MX_USB_DEVICE_Init+0x58>)
 8015666:	480e      	ldr	r0, [pc, #56]	; (80156a0 <MX_USB_DEVICE_Init+0x54>)
 8015668:	f7fe ff9f 	bl	80145aa <USBD_RegisterClass>
 801566c:	4603      	mov	r3, r0
 801566e:	2b00      	cmp	r3, #0
 8015670:	d001      	beq.n	8015676 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8015672:	f7f8 f84d 	bl	800d710 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8015676:	490c      	ldr	r1, [pc, #48]	; (80156a8 <MX_USB_DEVICE_Init+0x5c>)
 8015678:	4809      	ldr	r0, [pc, #36]	; (80156a0 <MX_USB_DEVICE_Init+0x54>)
 801567a:	f7fd ff4b 	bl	8013514 <USBD_MSC_RegisterStorage>
 801567e:	4603      	mov	r3, r0
 8015680:	2b00      	cmp	r3, #0
 8015682:	d001      	beq.n	8015688 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8015684:	f7f8 f844 	bl	800d710 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8015688:	4805      	ldr	r0, [pc, #20]	; (80156a0 <MX_USB_DEVICE_Init+0x54>)
 801568a:	f7fe ffa7 	bl	80145dc <USBD_Start>
 801568e:	4603      	mov	r3, r0
 8015690:	2b00      	cmp	r3, #0
 8015692:	d001      	beq.n	8015698 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8015694:	f7f8 f83c 	bl	800d710 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8015698:	bf00      	nop
 801569a:	bd80      	pop	{r7, pc}
 801569c:	200000c8 	.word	0x200000c8
 80156a0:	200001e4 	.word	0x200001e4
 80156a4:	20000024 	.word	0x20000024
 80156a8:	20000118 	.word	0x20000118

080156ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80156ac:	b480      	push	{r7}
 80156ae:	b083      	sub	sp, #12
 80156b0:	af00      	add	r7, sp, #0
 80156b2:	4603      	mov	r3, r0
 80156b4:	6039      	str	r1, [r7, #0]
 80156b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80156b8:	683b      	ldr	r3, [r7, #0]
 80156ba:	2212      	movs	r2, #18
 80156bc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80156be:	4b03      	ldr	r3, [pc, #12]	; (80156cc <USBD_FS_DeviceDescriptor+0x20>)
}
 80156c0:	4618      	mov	r0, r3
 80156c2:	370c      	adds	r7, #12
 80156c4:	46bd      	mov	sp, r7
 80156c6:	bc80      	pop	{r7}
 80156c8:	4770      	bx	lr
 80156ca:	bf00      	nop
 80156cc:	200000e4 	.word	0x200000e4

080156d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80156d0:	b480      	push	{r7}
 80156d2:	b083      	sub	sp, #12
 80156d4:	af00      	add	r7, sp, #0
 80156d6:	4603      	mov	r3, r0
 80156d8:	6039      	str	r1, [r7, #0]
 80156da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80156dc:	683b      	ldr	r3, [r7, #0]
 80156de:	2204      	movs	r2, #4
 80156e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80156e2:	4b03      	ldr	r3, [pc, #12]	; (80156f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80156e4:	4618      	mov	r0, r3
 80156e6:	370c      	adds	r7, #12
 80156e8:	46bd      	mov	sp, r7
 80156ea:	bc80      	pop	{r7}
 80156ec:	4770      	bx	lr
 80156ee:	bf00      	nop
 80156f0:	200000f8 	.word	0x200000f8

080156f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80156f4:	b580      	push	{r7, lr}
 80156f6:	b082      	sub	sp, #8
 80156f8:	af00      	add	r7, sp, #0
 80156fa:	4603      	mov	r3, r0
 80156fc:	6039      	str	r1, [r7, #0]
 80156fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015700:	79fb      	ldrb	r3, [r7, #7]
 8015702:	2b00      	cmp	r3, #0
 8015704:	d105      	bne.n	8015712 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015706:	683a      	ldr	r2, [r7, #0]
 8015708:	4907      	ldr	r1, [pc, #28]	; (8015728 <USBD_FS_ProductStrDescriptor+0x34>)
 801570a:	4808      	ldr	r0, [pc, #32]	; (801572c <USBD_FS_ProductStrDescriptor+0x38>)
 801570c:	f7ff fede 	bl	80154cc <USBD_GetString>
 8015710:	e004      	b.n	801571c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015712:	683a      	ldr	r2, [r7, #0]
 8015714:	4904      	ldr	r1, [pc, #16]	; (8015728 <USBD_FS_ProductStrDescriptor+0x34>)
 8015716:	4805      	ldr	r0, [pc, #20]	; (801572c <USBD_FS_ProductStrDescriptor+0x38>)
 8015718:	f7ff fed8 	bl	80154cc <USBD_GetString>
  }
  return USBD_StrDesc;
 801571c:	4b02      	ldr	r3, [pc, #8]	; (8015728 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801571e:	4618      	mov	r0, r3
 8015720:	3708      	adds	r7, #8
 8015722:	46bd      	mov	sp, r7
 8015724:	bd80      	pop	{r7, pc}
 8015726:	bf00      	nop
 8015728:	200004a8 	.word	0x200004a8
 801572c:	08015f74 	.word	0x08015f74

08015730 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015730:	b580      	push	{r7, lr}
 8015732:	b082      	sub	sp, #8
 8015734:	af00      	add	r7, sp, #0
 8015736:	4603      	mov	r3, r0
 8015738:	6039      	str	r1, [r7, #0]
 801573a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801573c:	683a      	ldr	r2, [r7, #0]
 801573e:	4904      	ldr	r1, [pc, #16]	; (8015750 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8015740:	4804      	ldr	r0, [pc, #16]	; (8015754 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8015742:	f7ff fec3 	bl	80154cc <USBD_GetString>
  return USBD_StrDesc;
 8015746:	4b02      	ldr	r3, [pc, #8]	; (8015750 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015748:	4618      	mov	r0, r3
 801574a:	3708      	adds	r7, #8
 801574c:	46bd      	mov	sp, r7
 801574e:	bd80      	pop	{r7, pc}
 8015750:	200004a8 	.word	0x200004a8
 8015754:	08015f88 	.word	0x08015f88

08015758 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015758:	b580      	push	{r7, lr}
 801575a:	b082      	sub	sp, #8
 801575c:	af00      	add	r7, sp, #0
 801575e:	4603      	mov	r3, r0
 8015760:	6039      	str	r1, [r7, #0]
 8015762:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015764:	683b      	ldr	r3, [r7, #0]
 8015766:	221a      	movs	r2, #26
 8015768:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801576a:	f000 f843 	bl	80157f4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801576e:	4b02      	ldr	r3, [pc, #8]	; (8015778 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8015770:	4618      	mov	r0, r3
 8015772:	3708      	adds	r7, #8
 8015774:	46bd      	mov	sp, r7
 8015776:	bd80      	pop	{r7, pc}
 8015778:	200000fc 	.word	0x200000fc

0801577c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801577c:	b580      	push	{r7, lr}
 801577e:	b082      	sub	sp, #8
 8015780:	af00      	add	r7, sp, #0
 8015782:	4603      	mov	r3, r0
 8015784:	6039      	str	r1, [r7, #0]
 8015786:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015788:	79fb      	ldrb	r3, [r7, #7]
 801578a:	2b00      	cmp	r3, #0
 801578c:	d105      	bne.n	801579a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801578e:	683a      	ldr	r2, [r7, #0]
 8015790:	4907      	ldr	r1, [pc, #28]	; (80157b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015792:	4808      	ldr	r0, [pc, #32]	; (80157b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015794:	f7ff fe9a 	bl	80154cc <USBD_GetString>
 8015798:	e004      	b.n	80157a4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801579a:	683a      	ldr	r2, [r7, #0]
 801579c:	4904      	ldr	r1, [pc, #16]	; (80157b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 801579e:	4805      	ldr	r0, [pc, #20]	; (80157b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80157a0:	f7ff fe94 	bl	80154cc <USBD_GetString>
  }
  return USBD_StrDesc;
 80157a4:	4b02      	ldr	r3, [pc, #8]	; (80157b0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80157a6:	4618      	mov	r0, r3
 80157a8:	3708      	adds	r7, #8
 80157aa:	46bd      	mov	sp, r7
 80157ac:	bd80      	pop	{r7, pc}
 80157ae:	bf00      	nop
 80157b0:	200004a8 	.word	0x200004a8
 80157b4:	08015f9c 	.word	0x08015f9c

080157b8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80157b8:	b580      	push	{r7, lr}
 80157ba:	b082      	sub	sp, #8
 80157bc:	af00      	add	r7, sp, #0
 80157be:	4603      	mov	r3, r0
 80157c0:	6039      	str	r1, [r7, #0]
 80157c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80157c4:	79fb      	ldrb	r3, [r7, #7]
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	d105      	bne.n	80157d6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80157ca:	683a      	ldr	r2, [r7, #0]
 80157cc:	4907      	ldr	r1, [pc, #28]	; (80157ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80157ce:	4808      	ldr	r0, [pc, #32]	; (80157f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80157d0:	f7ff fe7c 	bl	80154cc <USBD_GetString>
 80157d4:	e004      	b.n	80157e0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80157d6:	683a      	ldr	r2, [r7, #0]
 80157d8:	4904      	ldr	r1, [pc, #16]	; (80157ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80157da:	4805      	ldr	r0, [pc, #20]	; (80157f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80157dc:	f7ff fe76 	bl	80154cc <USBD_GetString>
  }
  return USBD_StrDesc;
 80157e0:	4b02      	ldr	r3, [pc, #8]	; (80157ec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80157e2:	4618      	mov	r0, r3
 80157e4:	3708      	adds	r7, #8
 80157e6:	46bd      	mov	sp, r7
 80157e8:	bd80      	pop	{r7, pc}
 80157ea:	bf00      	nop
 80157ec:	200004a8 	.word	0x200004a8
 80157f0:	08015fa8 	.word	0x08015fa8

080157f4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80157f4:	b580      	push	{r7, lr}
 80157f6:	b084      	sub	sp, #16
 80157f8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80157fa:	4b0f      	ldr	r3, [pc, #60]	; (8015838 <Get_SerialNum+0x44>)
 80157fc:	681b      	ldr	r3, [r3, #0]
 80157fe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015800:	4b0e      	ldr	r3, [pc, #56]	; (801583c <Get_SerialNum+0x48>)
 8015802:	681b      	ldr	r3, [r3, #0]
 8015804:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8015806:	4b0e      	ldr	r3, [pc, #56]	; (8015840 <Get_SerialNum+0x4c>)
 8015808:	681b      	ldr	r3, [r3, #0]
 801580a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801580c:	68fa      	ldr	r2, [r7, #12]
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	4413      	add	r3, r2
 8015812:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015814:	68fb      	ldr	r3, [r7, #12]
 8015816:	2b00      	cmp	r3, #0
 8015818:	d009      	beq.n	801582e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801581a:	2208      	movs	r2, #8
 801581c:	4909      	ldr	r1, [pc, #36]	; (8015844 <Get_SerialNum+0x50>)
 801581e:	68f8      	ldr	r0, [r7, #12]
 8015820:	f000 f814 	bl	801584c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015824:	2204      	movs	r2, #4
 8015826:	4908      	ldr	r1, [pc, #32]	; (8015848 <Get_SerialNum+0x54>)
 8015828:	68b8      	ldr	r0, [r7, #8]
 801582a:	f000 f80f 	bl	801584c <IntToUnicode>
  }
}
 801582e:	bf00      	nop
 8015830:	3710      	adds	r7, #16
 8015832:	46bd      	mov	sp, r7
 8015834:	bd80      	pop	{r7, pc}
 8015836:	bf00      	nop
 8015838:	1ffff7e8 	.word	0x1ffff7e8
 801583c:	1ffff7ec 	.word	0x1ffff7ec
 8015840:	1ffff7f0 	.word	0x1ffff7f0
 8015844:	200000fe 	.word	0x200000fe
 8015848:	2000010e 	.word	0x2000010e

0801584c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801584c:	b480      	push	{r7}
 801584e:	b087      	sub	sp, #28
 8015850:	af00      	add	r7, sp, #0
 8015852:	60f8      	str	r0, [r7, #12]
 8015854:	60b9      	str	r1, [r7, #8]
 8015856:	4613      	mov	r3, r2
 8015858:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801585a:	2300      	movs	r3, #0
 801585c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801585e:	2300      	movs	r3, #0
 8015860:	75fb      	strb	r3, [r7, #23]
 8015862:	e027      	b.n	80158b4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015864:	68fb      	ldr	r3, [r7, #12]
 8015866:	0f1b      	lsrs	r3, r3, #28
 8015868:	2b09      	cmp	r3, #9
 801586a:	d80b      	bhi.n	8015884 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801586c:	68fb      	ldr	r3, [r7, #12]
 801586e:	0f1b      	lsrs	r3, r3, #28
 8015870:	b2da      	uxtb	r2, r3
 8015872:	7dfb      	ldrb	r3, [r7, #23]
 8015874:	005b      	lsls	r3, r3, #1
 8015876:	4619      	mov	r1, r3
 8015878:	68bb      	ldr	r3, [r7, #8]
 801587a:	440b      	add	r3, r1
 801587c:	3230      	adds	r2, #48	; 0x30
 801587e:	b2d2      	uxtb	r2, r2
 8015880:	701a      	strb	r2, [r3, #0]
 8015882:	e00a      	b.n	801589a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015884:	68fb      	ldr	r3, [r7, #12]
 8015886:	0f1b      	lsrs	r3, r3, #28
 8015888:	b2da      	uxtb	r2, r3
 801588a:	7dfb      	ldrb	r3, [r7, #23]
 801588c:	005b      	lsls	r3, r3, #1
 801588e:	4619      	mov	r1, r3
 8015890:	68bb      	ldr	r3, [r7, #8]
 8015892:	440b      	add	r3, r1
 8015894:	3237      	adds	r2, #55	; 0x37
 8015896:	b2d2      	uxtb	r2, r2
 8015898:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801589a:	68fb      	ldr	r3, [r7, #12]
 801589c:	011b      	lsls	r3, r3, #4
 801589e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80158a0:	7dfb      	ldrb	r3, [r7, #23]
 80158a2:	005b      	lsls	r3, r3, #1
 80158a4:	3301      	adds	r3, #1
 80158a6:	68ba      	ldr	r2, [r7, #8]
 80158a8:	4413      	add	r3, r2
 80158aa:	2200      	movs	r2, #0
 80158ac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80158ae:	7dfb      	ldrb	r3, [r7, #23]
 80158b0:	3301      	adds	r3, #1
 80158b2:	75fb      	strb	r3, [r7, #23]
 80158b4:	7dfa      	ldrb	r2, [r7, #23]
 80158b6:	79fb      	ldrb	r3, [r7, #7]
 80158b8:	429a      	cmp	r2, r3
 80158ba:	d3d3      	bcc.n	8015864 <IntToUnicode+0x18>
  }
}
 80158bc:	bf00      	nop
 80158be:	bf00      	nop
 80158c0:	371c      	adds	r7, #28
 80158c2:	46bd      	mov	sp, r7
 80158c4:	bc80      	pop	{r7}
 80158c6:	4770      	bx	lr

080158c8 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 80158c8:	b480      	push	{r7}
 80158ca:	b083      	sub	sp, #12
 80158cc:	af00      	add	r7, sp, #0
 80158ce:	4603      	mov	r3, r0
 80158d0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 80158d2:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 80158d4:	4618      	mov	r0, r3
 80158d6:	370c      	adds	r7, #12
 80158d8:	46bd      	mov	sp, r7
 80158da:	bc80      	pop	{r7}
 80158dc:	4770      	bx	lr

080158de <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 80158de:	b480      	push	{r7}
 80158e0:	b085      	sub	sp, #20
 80158e2:	af00      	add	r7, sp, #0
 80158e4:	4603      	mov	r3, r0
 80158e6:	60b9      	str	r1, [r7, #8]
 80158e8:	607a      	str	r2, [r7, #4]
 80158ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 80158ec:	68bb      	ldr	r3, [r7, #8]
 80158ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80158f2:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80158fa:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 80158fc:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80158fe:	4618      	mov	r0, r3
 8015900:	3714      	adds	r7, #20
 8015902:	46bd      	mov	sp, r7
 8015904:	bc80      	pop	{r7}
 8015906:	4770      	bx	lr

08015908 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8015908:	b480      	push	{r7}
 801590a:	b083      	sub	sp, #12
 801590c:	af00      	add	r7, sp, #0
 801590e:	4603      	mov	r3, r0
 8015910:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8015912:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8015914:	4618      	mov	r0, r3
 8015916:	370c      	adds	r7, #12
 8015918:	46bd      	mov	sp, r7
 801591a:	bc80      	pop	{r7}
 801591c:	4770      	bx	lr

0801591e <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 801591e:	b480      	push	{r7}
 8015920:	b083      	sub	sp, #12
 8015922:	af00      	add	r7, sp, #0
 8015924:	4603      	mov	r3, r0
 8015926:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8015928:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801592a:	4618      	mov	r0, r3
 801592c:	370c      	adds	r7, #12
 801592e:	46bd      	mov	sp, r7
 8015930:	bc80      	pop	{r7}
 8015932:	4770      	bx	lr

08015934 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8015934:	b480      	push	{r7}
 8015936:	b085      	sub	sp, #20
 8015938:	af00      	add	r7, sp, #0
 801593a:	60b9      	str	r1, [r7, #8]
 801593c:	607a      	str	r2, [r7, #4]
 801593e:	461a      	mov	r2, r3
 8015940:	4603      	mov	r3, r0
 8015942:	73fb      	strb	r3, [r7, #15]
 8015944:	4613      	mov	r3, r2
 8015946:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8015948:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801594a:	4618      	mov	r0, r3
 801594c:	3714      	adds	r7, #20
 801594e:	46bd      	mov	sp, r7
 8015950:	bc80      	pop	{r7}
 8015952:	4770      	bx	lr

08015954 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8015954:	b480      	push	{r7}
 8015956:	b085      	sub	sp, #20
 8015958:	af00      	add	r7, sp, #0
 801595a:	60b9      	str	r1, [r7, #8]
 801595c:	607a      	str	r2, [r7, #4]
 801595e:	461a      	mov	r2, r3
 8015960:	4603      	mov	r3, r0
 8015962:	73fb      	strb	r3, [r7, #15]
 8015964:	4613      	mov	r3, r2
 8015966:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
 8015968:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 801596a:	4618      	mov	r0, r3
 801596c:	3714      	adds	r7, #20
 801596e:	46bd      	mov	sp, r7
 8015970:	bc80      	pop	{r7}
 8015972:	4770      	bx	lr

08015974 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8015974:	b480      	push	{r7}
 8015976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8015978:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801597a:	4618      	mov	r0, r3
 801597c:	46bd      	mov	sp, r7
 801597e:	bc80      	pop	{r7}
 8015980:	4770      	bx	lr
	...

08015984 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8015984:	b580      	push	{r7, lr}
 8015986:	b084      	sub	sp, #16
 8015988:	af00      	add	r7, sp, #0
 801598a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	681b      	ldr	r3, [r3, #0]
 8015990:	4a0d      	ldr	r2, [pc, #52]	; (80159c8 <HAL_PCD_MspInit+0x44>)
 8015992:	4293      	cmp	r3, r2
 8015994:	d113      	bne.n	80159be <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8015996:	4b0d      	ldr	r3, [pc, #52]	; (80159cc <HAL_PCD_MspInit+0x48>)
 8015998:	69db      	ldr	r3, [r3, #28]
 801599a:	4a0c      	ldr	r2, [pc, #48]	; (80159cc <HAL_PCD_MspInit+0x48>)
 801599c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80159a0:	61d3      	str	r3, [r2, #28]
 80159a2:	4b0a      	ldr	r3, [pc, #40]	; (80159cc <HAL_PCD_MspInit+0x48>)
 80159a4:	69db      	ldr	r3, [r3, #28]
 80159a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80159aa:	60fb      	str	r3, [r7, #12]
 80159ac:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 1, 0);
 80159ae:	2200      	movs	r2, #0
 80159b0:	2101      	movs	r1, #1
 80159b2:	2014      	movs	r0, #20
 80159b4:	f7f8 faf9 	bl	800dfaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80159b8:	2014      	movs	r0, #20
 80159ba:	f7f8 fb12 	bl	800dfe2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80159be:	bf00      	nop
 80159c0:	3710      	adds	r7, #16
 80159c2:	46bd      	mov	sp, r7
 80159c4:	bd80      	pop	{r7, pc}
 80159c6:	bf00      	nop
 80159c8:	40005c00 	.word	0x40005c00
 80159cc:	40021000 	.word	0x40021000

080159d0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80159d0:	b580      	push	{r7, lr}
 80159d2:	b082      	sub	sp, #8
 80159d4:	af00      	add	r7, sp, #0
 80159d6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80159e4:	4619      	mov	r1, r3
 80159e6:	4610      	mov	r0, r2
 80159e8:	f7fe fe40 	bl	801466c <USBD_LL_SetupStage>
}
 80159ec:	bf00      	nop
 80159ee:	3708      	adds	r7, #8
 80159f0:	46bd      	mov	sp, r7
 80159f2:	bd80      	pop	{r7, pc}

080159f4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80159f4:	b580      	push	{r7, lr}
 80159f6:	b082      	sub	sp, #8
 80159f8:	af00      	add	r7, sp, #0
 80159fa:	6078      	str	r0, [r7, #4]
 80159fc:	460b      	mov	r3, r1
 80159fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8015a06:	78fa      	ldrb	r2, [r7, #3]
 8015a08:	6879      	ldr	r1, [r7, #4]
 8015a0a:	4613      	mov	r3, r2
 8015a0c:	009b      	lsls	r3, r3, #2
 8015a0e:	4413      	add	r3, r2
 8015a10:	00db      	lsls	r3, r3, #3
 8015a12:	440b      	add	r3, r1
 8015a14:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8015a18:	681a      	ldr	r2, [r3, #0]
 8015a1a:	78fb      	ldrb	r3, [r7, #3]
 8015a1c:	4619      	mov	r1, r3
 8015a1e:	f7fe fe72 	bl	8014706 <USBD_LL_DataOutStage>
}
 8015a22:	bf00      	nop
 8015a24:	3708      	adds	r7, #8
 8015a26:	46bd      	mov	sp, r7
 8015a28:	bd80      	pop	{r7, pc}

08015a2a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015a2a:	b580      	push	{r7, lr}
 8015a2c:	b082      	sub	sp, #8
 8015a2e:	af00      	add	r7, sp, #0
 8015a30:	6078      	str	r0, [r7, #4]
 8015a32:	460b      	mov	r3, r1
 8015a34:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8015a3c:	78fa      	ldrb	r2, [r7, #3]
 8015a3e:	6879      	ldr	r1, [r7, #4]
 8015a40:	4613      	mov	r3, r2
 8015a42:	009b      	lsls	r3, r3, #2
 8015a44:	4413      	add	r3, r2
 8015a46:	00db      	lsls	r3, r3, #3
 8015a48:	440b      	add	r3, r1
 8015a4a:	333c      	adds	r3, #60	; 0x3c
 8015a4c:	681a      	ldr	r2, [r3, #0]
 8015a4e:	78fb      	ldrb	r3, [r7, #3]
 8015a50:	4619      	mov	r1, r3
 8015a52:	f7fe fec9 	bl	80147e8 <USBD_LL_DataInStage>
}
 8015a56:	bf00      	nop
 8015a58:	3708      	adds	r7, #8
 8015a5a:	46bd      	mov	sp, r7
 8015a5c:	bd80      	pop	{r7, pc}

08015a5e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015a5e:	b580      	push	{r7, lr}
 8015a60:	b082      	sub	sp, #8
 8015a62:	af00      	add	r7, sp, #0
 8015a64:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8015a6c:	4618      	mov	r0, r3
 8015a6e:	f7fe ffd9 	bl	8014a24 <USBD_LL_SOF>
}
 8015a72:	bf00      	nop
 8015a74:	3708      	adds	r7, #8
 8015a76:	46bd      	mov	sp, r7
 8015a78:	bd80      	pop	{r7, pc}

08015a7a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015a7a:	b580      	push	{r7, lr}
 8015a7c:	b084      	sub	sp, #16
 8015a7e:	af00      	add	r7, sp, #0
 8015a80:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015a82:	2301      	movs	r3, #1
 8015a84:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	689b      	ldr	r3, [r3, #8]
 8015a8a:	2b02      	cmp	r3, #2
 8015a8c:	d001      	beq.n	8015a92 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8015a8e:	f7f7 fe3f 	bl	800d710 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8015a98:	7bfa      	ldrb	r2, [r7, #15]
 8015a9a:	4611      	mov	r1, r2
 8015a9c:	4618      	mov	r0, r3
 8015a9e:	f7fe ff89 	bl	80149b4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8015aa8:	4618      	mov	r0, r3
 8015aaa:	f7fe ff42 	bl	8014932 <USBD_LL_Reset>
}
 8015aae:	bf00      	nop
 8015ab0:	3710      	adds	r7, #16
 8015ab2:	46bd      	mov	sp, r7
 8015ab4:	bd80      	pop	{r7, pc}
	...

08015ab8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015ab8:	b580      	push	{r7, lr}
 8015aba:	b082      	sub	sp, #8
 8015abc:	af00      	add	r7, sp, #0
 8015abe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8015ac6:	4618      	mov	r0, r3
 8015ac8:	f7fe ff83 	bl	80149d2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	699b      	ldr	r3, [r3, #24]
 8015ad0:	2b00      	cmp	r3, #0
 8015ad2:	d005      	beq.n	8015ae0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015ad4:	4b04      	ldr	r3, [pc, #16]	; (8015ae8 <HAL_PCD_SuspendCallback+0x30>)
 8015ad6:	691b      	ldr	r3, [r3, #16]
 8015ad8:	4a03      	ldr	r2, [pc, #12]	; (8015ae8 <HAL_PCD_SuspendCallback+0x30>)
 8015ada:	f043 0306 	orr.w	r3, r3, #6
 8015ade:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8015ae0:	bf00      	nop
 8015ae2:	3708      	adds	r7, #8
 8015ae4:	46bd      	mov	sp, r7
 8015ae6:	bd80      	pop	{r7, pc}
 8015ae8:	e000ed00 	.word	0xe000ed00

08015aec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015aec:	b580      	push	{r7, lr}
 8015aee:	b082      	sub	sp, #8
 8015af0:	af00      	add	r7, sp, #0
 8015af2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8015afa:	4618      	mov	r0, r3
 8015afc:	f7fe ff7d 	bl	80149fa <USBD_LL_Resume>
}
 8015b00:	bf00      	nop
 8015b02:	3708      	adds	r7, #8
 8015b04:	46bd      	mov	sp, r7
 8015b06:	bd80      	pop	{r7, pc}

08015b08 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015b08:	b580      	push	{r7, lr}
 8015b0a:	b082      	sub	sp, #8
 8015b0c:	af00      	add	r7, sp, #0
 8015b0e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8015b10:	4a23      	ldr	r2, [pc, #140]	; (8015ba0 <USBD_LL_Init+0x98>)
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	4a21      	ldr	r2, [pc, #132]	; (8015ba0 <USBD_LL_Init+0x98>)
 8015b1c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8015b20:	4b1f      	ldr	r3, [pc, #124]	; (8015ba0 <USBD_LL_Init+0x98>)
 8015b22:	4a20      	ldr	r2, [pc, #128]	; (8015ba4 <USBD_LL_Init+0x9c>)
 8015b24:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8015b26:	4b1e      	ldr	r3, [pc, #120]	; (8015ba0 <USBD_LL_Init+0x98>)
 8015b28:	2208      	movs	r2, #8
 8015b2a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8015b2c:	4b1c      	ldr	r3, [pc, #112]	; (8015ba0 <USBD_LL_Init+0x98>)
 8015b2e:	2202      	movs	r2, #2
 8015b30:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8015b32:	4b1b      	ldr	r3, [pc, #108]	; (8015ba0 <USBD_LL_Init+0x98>)
 8015b34:	2200      	movs	r2, #0
 8015b36:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8015b38:	4b19      	ldr	r3, [pc, #100]	; (8015ba0 <USBD_LL_Init+0x98>)
 8015b3a:	2200      	movs	r2, #0
 8015b3c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8015b3e:	4b18      	ldr	r3, [pc, #96]	; (8015ba0 <USBD_LL_Init+0x98>)
 8015b40:	2200      	movs	r2, #0
 8015b42:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8015b44:	4816      	ldr	r0, [pc, #88]	; (8015ba0 <USBD_LL_Init+0x98>)
 8015b46:	f7f8 fa66 	bl	800e016 <HAL_PCD_Init>
 8015b4a:	4603      	mov	r3, r0
 8015b4c:	2b00      	cmp	r3, #0
 8015b4e:	d001      	beq.n	8015b54 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8015b50:	f7f7 fdde 	bl	800d710 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8015b5a:	2318      	movs	r3, #24
 8015b5c:	2200      	movs	r2, #0
 8015b5e:	2100      	movs	r1, #0
 8015b60:	f7f9 ffb2 	bl	800fac8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8015b6a:	2358      	movs	r3, #88	; 0x58
 8015b6c:	2200      	movs	r2, #0
 8015b6e:	2180      	movs	r1, #128	; 0x80
 8015b70:	f7f9 ffaa 	bl	800fac8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_MSC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x98);
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8015b7a:	2398      	movs	r3, #152	; 0x98
 8015b7c:	2200      	movs	r2, #0
 8015b7e:	2181      	movs	r1, #129	; 0x81
 8015b80:	f7f9 ffa2 	bl	800fac8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0xD8);
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8015b8a:	23d8      	movs	r3, #216	; 0xd8
 8015b8c:	2200      	movs	r2, #0
 8015b8e:	2101      	movs	r1, #1
 8015b90:	f7f9 ff9a 	bl	800fac8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_MSC */
  return USBD_OK;
 8015b94:	2300      	movs	r3, #0
}
 8015b96:	4618      	mov	r0, r3
 8015b98:	3708      	adds	r7, #8
 8015b9a:	46bd      	mov	sp, r7
 8015b9c:	bd80      	pop	{r7, pc}
 8015b9e:	bf00      	nop
 8015ba0:	200006a8 	.word	0x200006a8
 8015ba4:	40005c00 	.word	0x40005c00

08015ba8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015ba8:	b580      	push	{r7, lr}
 8015baa:	b084      	sub	sp, #16
 8015bac:	af00      	add	r7, sp, #0
 8015bae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015bb0:	2300      	movs	r3, #0
 8015bb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015bb4:	2300      	movs	r3, #0
 8015bb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015bbe:	4618      	mov	r0, r3
 8015bc0:	f7f8 fb28 	bl	800e214 <HAL_PCD_Start>
 8015bc4:	4603      	mov	r3, r0
 8015bc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015bc8:	7bfb      	ldrb	r3, [r7, #15]
 8015bca:	4618      	mov	r0, r3
 8015bcc:	f000 f96e 	bl	8015eac <USBD_Get_USB_Status>
 8015bd0:	4603      	mov	r3, r0
 8015bd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015bd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8015bd6:	4618      	mov	r0, r3
 8015bd8:	3710      	adds	r7, #16
 8015bda:	46bd      	mov	sp, r7
 8015bdc:	bd80      	pop	{r7, pc}

08015bde <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015bde:	b580      	push	{r7, lr}
 8015be0:	b084      	sub	sp, #16
 8015be2:	af00      	add	r7, sp, #0
 8015be4:	6078      	str	r0, [r7, #4]
 8015be6:	4608      	mov	r0, r1
 8015be8:	4611      	mov	r1, r2
 8015bea:	461a      	mov	r2, r3
 8015bec:	4603      	mov	r3, r0
 8015bee:	70fb      	strb	r3, [r7, #3]
 8015bf0:	460b      	mov	r3, r1
 8015bf2:	70bb      	strb	r3, [r7, #2]
 8015bf4:	4613      	mov	r3, r2
 8015bf6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015bf8:	2300      	movs	r3, #0
 8015bfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015bfc:	2300      	movs	r3, #0
 8015bfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8015c06:	78bb      	ldrb	r3, [r7, #2]
 8015c08:	883a      	ldrh	r2, [r7, #0]
 8015c0a:	78f9      	ldrb	r1, [r7, #3]
 8015c0c:	f7f8 fc7d 	bl	800e50a <HAL_PCD_EP_Open>
 8015c10:	4603      	mov	r3, r0
 8015c12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015c14:	7bfb      	ldrb	r3, [r7, #15]
 8015c16:	4618      	mov	r0, r3
 8015c18:	f000 f948 	bl	8015eac <USBD_Get_USB_Status>
 8015c1c:	4603      	mov	r3, r0
 8015c1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015c20:	7bbb      	ldrb	r3, [r7, #14]
}
 8015c22:	4618      	mov	r0, r3
 8015c24:	3710      	adds	r7, #16
 8015c26:	46bd      	mov	sp, r7
 8015c28:	bd80      	pop	{r7, pc}

08015c2a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015c2a:	b580      	push	{r7, lr}
 8015c2c:	b084      	sub	sp, #16
 8015c2e:	af00      	add	r7, sp, #0
 8015c30:	6078      	str	r0, [r7, #4]
 8015c32:	460b      	mov	r3, r1
 8015c34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015c36:	2300      	movs	r3, #0
 8015c38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c3a:	2300      	movs	r3, #0
 8015c3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015c44:	78fa      	ldrb	r2, [r7, #3]
 8015c46:	4611      	mov	r1, r2
 8015c48:	4618      	mov	r0, r3
 8015c4a:	f7f8 fcbb 	bl	800e5c4 <HAL_PCD_EP_Close>
 8015c4e:	4603      	mov	r3, r0
 8015c50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015c52:	7bfb      	ldrb	r3, [r7, #15]
 8015c54:	4618      	mov	r0, r3
 8015c56:	f000 f929 	bl	8015eac <USBD_Get_USB_Status>
 8015c5a:	4603      	mov	r3, r0
 8015c5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015c5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8015c60:	4618      	mov	r0, r3
 8015c62:	3710      	adds	r7, #16
 8015c64:	46bd      	mov	sp, r7
 8015c66:	bd80      	pop	{r7, pc}

08015c68 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015c68:	b580      	push	{r7, lr}
 8015c6a:	b084      	sub	sp, #16
 8015c6c:	af00      	add	r7, sp, #0
 8015c6e:	6078      	str	r0, [r7, #4]
 8015c70:	460b      	mov	r3, r1
 8015c72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015c74:	2300      	movs	r3, #0
 8015c76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c78:	2300      	movs	r3, #0
 8015c7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015c82:	78fa      	ldrb	r2, [r7, #3]
 8015c84:	4611      	mov	r1, r2
 8015c86:	4618      	mov	r0, r3
 8015c88:	f7f8 fe17 	bl	800e8ba <HAL_PCD_EP_Flush>
 8015c8c:	4603      	mov	r3, r0
 8015c8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015c90:	7bfb      	ldrb	r3, [r7, #15]
 8015c92:	4618      	mov	r0, r3
 8015c94:	f000 f90a 	bl	8015eac <USBD_Get_USB_Status>
 8015c98:	4603      	mov	r3, r0
 8015c9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015c9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8015c9e:	4618      	mov	r0, r3
 8015ca0:	3710      	adds	r7, #16
 8015ca2:	46bd      	mov	sp, r7
 8015ca4:	bd80      	pop	{r7, pc}

08015ca6 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015ca6:	b580      	push	{r7, lr}
 8015ca8:	b084      	sub	sp, #16
 8015caa:	af00      	add	r7, sp, #0
 8015cac:	6078      	str	r0, [r7, #4]
 8015cae:	460b      	mov	r3, r1
 8015cb0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015cb2:	2300      	movs	r3, #0
 8015cb4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015cb6:	2300      	movs	r3, #0
 8015cb8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015cc0:	78fa      	ldrb	r2, [r7, #3]
 8015cc2:	4611      	mov	r1, r2
 8015cc4:	4618      	mov	r0, r3
 8015cc6:	f7f8 fd44 	bl	800e752 <HAL_PCD_EP_SetStall>
 8015cca:	4603      	mov	r3, r0
 8015ccc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015cce:	7bfb      	ldrb	r3, [r7, #15]
 8015cd0:	4618      	mov	r0, r3
 8015cd2:	f000 f8eb 	bl	8015eac <USBD_Get_USB_Status>
 8015cd6:	4603      	mov	r3, r0
 8015cd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015cda:	7bbb      	ldrb	r3, [r7, #14]
}
 8015cdc:	4618      	mov	r0, r3
 8015cde:	3710      	adds	r7, #16
 8015ce0:	46bd      	mov	sp, r7
 8015ce2:	bd80      	pop	{r7, pc}

08015ce4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015ce4:	b580      	push	{r7, lr}
 8015ce6:	b084      	sub	sp, #16
 8015ce8:	af00      	add	r7, sp, #0
 8015cea:	6078      	str	r0, [r7, #4]
 8015cec:	460b      	mov	r3, r1
 8015cee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015cf0:	2300      	movs	r3, #0
 8015cf2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015cf4:	2300      	movs	r3, #0
 8015cf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015cfe:	78fa      	ldrb	r2, [r7, #3]
 8015d00:	4611      	mov	r1, r2
 8015d02:	4618      	mov	r0, r3
 8015d04:	f7f8 fd85 	bl	800e812 <HAL_PCD_EP_ClrStall>
 8015d08:	4603      	mov	r3, r0
 8015d0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015d0c:	7bfb      	ldrb	r3, [r7, #15]
 8015d0e:	4618      	mov	r0, r3
 8015d10:	f000 f8cc 	bl	8015eac <USBD_Get_USB_Status>
 8015d14:	4603      	mov	r3, r0
 8015d16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015d18:	7bbb      	ldrb	r3, [r7, #14]
}
 8015d1a:	4618      	mov	r0, r3
 8015d1c:	3710      	adds	r7, #16
 8015d1e:	46bd      	mov	sp, r7
 8015d20:	bd80      	pop	{r7, pc}

08015d22 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015d22:	b480      	push	{r7}
 8015d24:	b085      	sub	sp, #20
 8015d26:	af00      	add	r7, sp, #0
 8015d28:	6078      	str	r0, [r7, #4]
 8015d2a:	460b      	mov	r3, r1
 8015d2c:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015d34:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015d36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	da0c      	bge.n	8015d58 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015d3e:	78fb      	ldrb	r3, [r7, #3]
 8015d40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015d44:	68f9      	ldr	r1, [r7, #12]
 8015d46:	1c5a      	adds	r2, r3, #1
 8015d48:	4613      	mov	r3, r2
 8015d4a:	009b      	lsls	r3, r3, #2
 8015d4c:	4413      	add	r3, r2
 8015d4e:	00db      	lsls	r3, r3, #3
 8015d50:	440b      	add	r3, r1
 8015d52:	3302      	adds	r3, #2
 8015d54:	781b      	ldrb	r3, [r3, #0]
 8015d56:	e00b      	b.n	8015d70 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015d58:	78fb      	ldrb	r3, [r7, #3]
 8015d5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015d5e:	68f9      	ldr	r1, [r7, #12]
 8015d60:	4613      	mov	r3, r2
 8015d62:	009b      	lsls	r3, r3, #2
 8015d64:	4413      	add	r3, r2
 8015d66:	00db      	lsls	r3, r3, #3
 8015d68:	440b      	add	r3, r1
 8015d6a:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8015d6e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015d70:	4618      	mov	r0, r3
 8015d72:	3714      	adds	r7, #20
 8015d74:	46bd      	mov	sp, r7
 8015d76:	bc80      	pop	{r7}
 8015d78:	4770      	bx	lr

08015d7a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015d7a:	b580      	push	{r7, lr}
 8015d7c:	b084      	sub	sp, #16
 8015d7e:	af00      	add	r7, sp, #0
 8015d80:	6078      	str	r0, [r7, #4]
 8015d82:	460b      	mov	r3, r1
 8015d84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015d86:	2300      	movs	r3, #0
 8015d88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015d8a:	2300      	movs	r3, #0
 8015d8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015d94:	78fa      	ldrb	r2, [r7, #3]
 8015d96:	4611      	mov	r1, r2
 8015d98:	4618      	mov	r0, r3
 8015d9a:	f7f8 fb91 	bl	800e4c0 <HAL_PCD_SetAddress>
 8015d9e:	4603      	mov	r3, r0
 8015da0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015da2:	7bfb      	ldrb	r3, [r7, #15]
 8015da4:	4618      	mov	r0, r3
 8015da6:	f000 f881 	bl	8015eac <USBD_Get_USB_Status>
 8015daa:	4603      	mov	r3, r0
 8015dac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015dae:	7bbb      	ldrb	r3, [r7, #14]
}
 8015db0:	4618      	mov	r0, r3
 8015db2:	3710      	adds	r7, #16
 8015db4:	46bd      	mov	sp, r7
 8015db6:	bd80      	pop	{r7, pc}

08015db8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8015db8:	b580      	push	{r7, lr}
 8015dba:	b086      	sub	sp, #24
 8015dbc:	af00      	add	r7, sp, #0
 8015dbe:	60f8      	str	r0, [r7, #12]
 8015dc0:	607a      	str	r2, [r7, #4]
 8015dc2:	461a      	mov	r2, r3
 8015dc4:	460b      	mov	r3, r1
 8015dc6:	72fb      	strb	r3, [r7, #11]
 8015dc8:	4613      	mov	r3, r2
 8015dca:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015dcc:	2300      	movs	r3, #0
 8015dce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015dd0:	2300      	movs	r3, #0
 8015dd2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015dd4:	68fb      	ldr	r3, [r7, #12]
 8015dd6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8015dda:	893b      	ldrh	r3, [r7, #8]
 8015ddc:	7af9      	ldrb	r1, [r7, #11]
 8015dde:	687a      	ldr	r2, [r7, #4]
 8015de0:	f7f8 fc80 	bl	800e6e4 <HAL_PCD_EP_Transmit>
 8015de4:	4603      	mov	r3, r0
 8015de6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015de8:	7dfb      	ldrb	r3, [r7, #23]
 8015dea:	4618      	mov	r0, r3
 8015dec:	f000 f85e 	bl	8015eac <USBD_Get_USB_Status>
 8015df0:	4603      	mov	r3, r0
 8015df2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015df4:	7dbb      	ldrb	r3, [r7, #22]
}
 8015df6:	4618      	mov	r0, r3
 8015df8:	3718      	adds	r7, #24
 8015dfa:	46bd      	mov	sp, r7
 8015dfc:	bd80      	pop	{r7, pc}

08015dfe <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8015dfe:	b580      	push	{r7, lr}
 8015e00:	b086      	sub	sp, #24
 8015e02:	af00      	add	r7, sp, #0
 8015e04:	60f8      	str	r0, [r7, #12]
 8015e06:	607a      	str	r2, [r7, #4]
 8015e08:	461a      	mov	r2, r3
 8015e0a:	460b      	mov	r3, r1
 8015e0c:	72fb      	strb	r3, [r7, #11]
 8015e0e:	4613      	mov	r3, r2
 8015e10:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015e12:	2300      	movs	r3, #0
 8015e14:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015e16:	2300      	movs	r3, #0
 8015e18:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015e1a:	68fb      	ldr	r3, [r7, #12]
 8015e1c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8015e20:	893b      	ldrh	r3, [r7, #8]
 8015e22:	7af9      	ldrb	r1, [r7, #11]
 8015e24:	687a      	ldr	r2, [r7, #4]
 8015e26:	f7f8 fc15 	bl	800e654 <HAL_PCD_EP_Receive>
 8015e2a:	4603      	mov	r3, r0
 8015e2c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015e2e:	7dfb      	ldrb	r3, [r7, #23]
 8015e30:	4618      	mov	r0, r3
 8015e32:	f000 f83b 	bl	8015eac <USBD_Get_USB_Status>
 8015e36:	4603      	mov	r3, r0
 8015e38:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015e3a:	7dbb      	ldrb	r3, [r7, #22]
}
 8015e3c:	4618      	mov	r0, r3
 8015e3e:	3718      	adds	r7, #24
 8015e40:	46bd      	mov	sp, r7
 8015e42:	bd80      	pop	{r7, pc}

08015e44 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015e44:	b580      	push	{r7, lr}
 8015e46:	b082      	sub	sp, #8
 8015e48:	af00      	add	r7, sp, #0
 8015e4a:	6078      	str	r0, [r7, #4]
 8015e4c:	460b      	mov	r3, r1
 8015e4e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015e56:	78fa      	ldrb	r2, [r7, #3]
 8015e58:	4611      	mov	r1, r2
 8015e5a:	4618      	mov	r0, r3
 8015e5c:	f7f8 fc2b 	bl	800e6b6 <HAL_PCD_EP_GetRxCount>
 8015e60:	4603      	mov	r3, r0
}
 8015e62:	4618      	mov	r0, r3
 8015e64:	3708      	adds	r7, #8
 8015e66:	46bd      	mov	sp, r7
 8015e68:	bd80      	pop	{r7, pc}
	...

08015e6c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8015e6c:	b480      	push	{r7}
 8015e6e:	b083      	sub	sp, #12
 8015e70:	af00      	add	r7, sp, #0
 8015e72:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8015e74:	4b02      	ldr	r3, [pc, #8]	; (8015e80 <USBD_static_malloc+0x14>)
}
 8015e76:	4618      	mov	r0, r3
 8015e78:	370c      	adds	r7, #12
 8015e7a:	46bd      	mov	sp, r7
 8015e7c:	bc80      	pop	{r7}
 8015e7e:	4770      	bx	lr
 8015e80:	20000998 	.word	0x20000998

08015e84 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8015e84:	b480      	push	{r7}
 8015e86:	b083      	sub	sp, #12
 8015e88:	af00      	add	r7, sp, #0
 8015e8a:	6078      	str	r0, [r7, #4]

}
 8015e8c:	bf00      	nop
 8015e8e:	370c      	adds	r7, #12
 8015e90:	46bd      	mov	sp, r7
 8015e92:	bc80      	pop	{r7}
 8015e94:	4770      	bx	lr

08015e96 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015e96:	b480      	push	{r7}
 8015e98:	b083      	sub	sp, #12
 8015e9a:	af00      	add	r7, sp, #0
 8015e9c:	6078      	str	r0, [r7, #4]
 8015e9e:	460b      	mov	r3, r1
 8015ea0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8015ea2:	bf00      	nop
 8015ea4:	370c      	adds	r7, #12
 8015ea6:	46bd      	mov	sp, r7
 8015ea8:	bc80      	pop	{r7}
 8015eaa:	4770      	bx	lr

08015eac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015eac:	b480      	push	{r7}
 8015eae:	b085      	sub	sp, #20
 8015eb0:	af00      	add	r7, sp, #0
 8015eb2:	4603      	mov	r3, r0
 8015eb4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015eb6:	2300      	movs	r3, #0
 8015eb8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015eba:	79fb      	ldrb	r3, [r7, #7]
 8015ebc:	2b03      	cmp	r3, #3
 8015ebe:	d817      	bhi.n	8015ef0 <USBD_Get_USB_Status+0x44>
 8015ec0:	a201      	add	r2, pc, #4	; (adr r2, 8015ec8 <USBD_Get_USB_Status+0x1c>)
 8015ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ec6:	bf00      	nop
 8015ec8:	08015ed9 	.word	0x08015ed9
 8015ecc:	08015edf 	.word	0x08015edf
 8015ed0:	08015ee5 	.word	0x08015ee5
 8015ed4:	08015eeb 	.word	0x08015eeb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015ed8:	2300      	movs	r3, #0
 8015eda:	73fb      	strb	r3, [r7, #15]
    break;
 8015edc:	e00b      	b.n	8015ef6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015ede:	2302      	movs	r3, #2
 8015ee0:	73fb      	strb	r3, [r7, #15]
    break;
 8015ee2:	e008      	b.n	8015ef6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015ee4:	2301      	movs	r3, #1
 8015ee6:	73fb      	strb	r3, [r7, #15]
    break;
 8015ee8:	e005      	b.n	8015ef6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015eea:	2302      	movs	r3, #2
 8015eec:	73fb      	strb	r3, [r7, #15]
    break;
 8015eee:	e002      	b.n	8015ef6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015ef0:	2302      	movs	r3, #2
 8015ef2:	73fb      	strb	r3, [r7, #15]
    break;
 8015ef4:	bf00      	nop
  }
  return usb_status;
 8015ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8015ef8:	4618      	mov	r0, r3
 8015efa:	3714      	adds	r7, #20
 8015efc:	46bd      	mov	sp, r7
 8015efe:	bc80      	pop	{r7}
 8015f00:	4770      	bx	lr
 8015f02:	bf00      	nop

08015f04 <memset>:
 8015f04:	4603      	mov	r3, r0
 8015f06:	4402      	add	r2, r0
 8015f08:	4293      	cmp	r3, r2
 8015f0a:	d100      	bne.n	8015f0e <memset+0xa>
 8015f0c:	4770      	bx	lr
 8015f0e:	f803 1b01 	strb.w	r1, [r3], #1
 8015f12:	e7f9      	b.n	8015f08 <memset+0x4>

08015f14 <__libc_init_array>:
 8015f14:	b570      	push	{r4, r5, r6, lr}
 8015f16:	2600      	movs	r6, #0
 8015f18:	4d0c      	ldr	r5, [pc, #48]	; (8015f4c <__libc_init_array+0x38>)
 8015f1a:	4c0d      	ldr	r4, [pc, #52]	; (8015f50 <__libc_init_array+0x3c>)
 8015f1c:	1b64      	subs	r4, r4, r5
 8015f1e:	10a4      	asrs	r4, r4, #2
 8015f20:	42a6      	cmp	r6, r4
 8015f22:	d109      	bne.n	8015f38 <__libc_init_array+0x24>
 8015f24:	f000 f81a 	bl	8015f5c <_init>
 8015f28:	2600      	movs	r6, #0
 8015f2a:	4d0a      	ldr	r5, [pc, #40]	; (8015f54 <__libc_init_array+0x40>)
 8015f2c:	4c0a      	ldr	r4, [pc, #40]	; (8015f58 <__libc_init_array+0x44>)
 8015f2e:	1b64      	subs	r4, r4, r5
 8015f30:	10a4      	asrs	r4, r4, #2
 8015f32:	42a6      	cmp	r6, r4
 8015f34:	d105      	bne.n	8015f42 <__libc_init_array+0x2e>
 8015f36:	bd70      	pop	{r4, r5, r6, pc}
 8015f38:	f855 3b04 	ldr.w	r3, [r5], #4
 8015f3c:	4798      	blx	r3
 8015f3e:	3601      	adds	r6, #1
 8015f40:	e7ee      	b.n	8015f20 <__libc_init_array+0xc>
 8015f42:	f855 3b04 	ldr.w	r3, [r5], #4
 8015f46:	4798      	blx	r3
 8015f48:	3601      	adds	r6, #1
 8015f4a:	e7f2      	b.n	8015f32 <__libc_init_array+0x1e>
 8015f4c:	08016174 	.word	0x08016174
 8015f50:	08016174 	.word	0x08016174
 8015f54:	08016174 	.word	0x08016174
 8015f58:	08016178 	.word	0x08016178

08015f5c <_init>:
 8015f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f5e:	bf00      	nop
 8015f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015f62:	bc08      	pop	{r3}
 8015f64:	469e      	mov	lr, r3
 8015f66:	4770      	bx	lr

08015f68 <_fini>:
 8015f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f6a:	bf00      	nop
 8015f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015f6e:	bc08      	pop	{r3}
 8015f70:	469e      	mov	lr, r3
 8015f72:	4770      	bx	lr
