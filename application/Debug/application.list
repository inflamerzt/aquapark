
application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  0800c000  0800c000  0000c000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f44  0800c1e4  0800c1e4  0000c1e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08015128  08015128  00015128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080151c8  080151c8  00020160  2**0
                  CONTENTS
  4 .ARM          00000000  080151c8  080151c8  00020160  2**0
                  CONTENTS
  5 .preinit_array 00000000  080151c8  080151c8  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080151c8  080151c8  000151c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080151cc  080151cc  000151cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  080151d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a8c  20000160  08015330  00020160  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bec  08015330  00020bec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020189  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001036f  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032c3  00000000  00000000  0003053b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f80  00000000  00000000  00033800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b59  00000000  00000000  00034780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e2d7  00000000  00000000  000352d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012af7  00000000  00000000  000535b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009e813  00000000  00000000  000660a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003eb0  00000000  00000000  001048bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0010876c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800c1e4 <__do_global_dtors_aux>:
 800c1e4:	b510      	push	{r4, lr}
 800c1e6:	4c05      	ldr	r4, [pc, #20]	; (800c1fc <__do_global_dtors_aux+0x18>)
 800c1e8:	7823      	ldrb	r3, [r4, #0]
 800c1ea:	b933      	cbnz	r3, 800c1fa <__do_global_dtors_aux+0x16>
 800c1ec:	4b04      	ldr	r3, [pc, #16]	; (800c200 <__do_global_dtors_aux+0x1c>)
 800c1ee:	b113      	cbz	r3, 800c1f6 <__do_global_dtors_aux+0x12>
 800c1f0:	4804      	ldr	r0, [pc, #16]	; (800c204 <__do_global_dtors_aux+0x20>)
 800c1f2:	f3af 8000 	nop.w
 800c1f6:	2301      	movs	r3, #1
 800c1f8:	7023      	strb	r3, [r4, #0]
 800c1fa:	bd10      	pop	{r4, pc}
 800c1fc:	20000160 	.word	0x20000160
 800c200:	00000000 	.word	0x00000000
 800c204:	08015110 	.word	0x08015110

0800c208 <frame_dummy>:
 800c208:	b508      	push	{r3, lr}
 800c20a:	4b03      	ldr	r3, [pc, #12]	; (800c218 <frame_dummy+0x10>)
 800c20c:	b11b      	cbz	r3, 800c216 <frame_dummy+0xe>
 800c20e:	4903      	ldr	r1, [pc, #12]	; (800c21c <frame_dummy+0x14>)
 800c210:	4803      	ldr	r0, [pc, #12]	; (800c220 <frame_dummy+0x18>)
 800c212:	f3af 8000 	nop.w
 800c216:	bd08      	pop	{r3, pc}
 800c218:	00000000 	.word	0x00000000
 800c21c:	20000164 	.word	0x20000164
 800c220:	08015110 	.word	0x08015110

0800c224 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800c224:	b480      	push	{r7}
 800c226:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c228:	4b04      	ldr	r3, [pc, #16]	; (800c23c <__NVIC_GetPriorityGrouping+0x18>)
 800c22a:	68db      	ldr	r3, [r3, #12]
 800c22c:	0a1b      	lsrs	r3, r3, #8
 800c22e:	f003 0307 	and.w	r3, r3, #7
}
 800c232:	4618      	mov	r0, r3
 800c234:	46bd      	mov	sp, r7
 800c236:	bc80      	pop	{r7}
 800c238:	4770      	bx	lr
 800c23a:	bf00      	nop
 800c23c:	e000ed00 	.word	0xe000ed00

0800c240 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c240:	b480      	push	{r7}
 800c242:	b083      	sub	sp, #12
 800c244:	af00      	add	r7, sp, #0
 800c246:	4603      	mov	r3, r0
 800c248:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c24a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	db0b      	blt.n	800c26a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c252:	79fb      	ldrb	r3, [r7, #7]
 800c254:	f003 021f 	and.w	r2, r3, #31
 800c258:	4906      	ldr	r1, [pc, #24]	; (800c274 <__NVIC_EnableIRQ+0x34>)
 800c25a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c25e:	095b      	lsrs	r3, r3, #5
 800c260:	2001      	movs	r0, #1
 800c262:	fa00 f202 	lsl.w	r2, r0, r2
 800c266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800c26a:	bf00      	nop
 800c26c:	370c      	adds	r7, #12
 800c26e:	46bd      	mov	sp, r7
 800c270:	bc80      	pop	{r7}
 800c272:	4770      	bx	lr
 800c274:	e000e100 	.word	0xe000e100

0800c278 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c278:	b480      	push	{r7}
 800c27a:	b083      	sub	sp, #12
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	4603      	mov	r3, r0
 800c280:	6039      	str	r1, [r7, #0]
 800c282:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	db0a      	blt.n	800c2a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	b2da      	uxtb	r2, r3
 800c290:	490c      	ldr	r1, [pc, #48]	; (800c2c4 <__NVIC_SetPriority+0x4c>)
 800c292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c296:	0112      	lsls	r2, r2, #4
 800c298:	b2d2      	uxtb	r2, r2
 800c29a:	440b      	add	r3, r1
 800c29c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800c2a0:	e00a      	b.n	800c2b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	b2da      	uxtb	r2, r3
 800c2a6:	4908      	ldr	r1, [pc, #32]	; (800c2c8 <__NVIC_SetPriority+0x50>)
 800c2a8:	79fb      	ldrb	r3, [r7, #7]
 800c2aa:	f003 030f 	and.w	r3, r3, #15
 800c2ae:	3b04      	subs	r3, #4
 800c2b0:	0112      	lsls	r2, r2, #4
 800c2b2:	b2d2      	uxtb	r2, r2
 800c2b4:	440b      	add	r3, r1
 800c2b6:	761a      	strb	r2, [r3, #24]
}
 800c2b8:	bf00      	nop
 800c2ba:	370c      	adds	r7, #12
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bc80      	pop	{r7}
 800c2c0:	4770      	bx	lr
 800c2c2:	bf00      	nop
 800c2c4:	e000e100 	.word	0xe000e100
 800c2c8:	e000ed00 	.word	0xe000ed00

0800c2cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c2cc:	b480      	push	{r7}
 800c2ce:	b089      	sub	sp, #36	; 0x24
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	60f8      	str	r0, [r7, #12]
 800c2d4:	60b9      	str	r1, [r7, #8]
 800c2d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	f003 0307 	and.w	r3, r3, #7
 800c2de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c2e0:	69fb      	ldr	r3, [r7, #28]
 800c2e2:	f1c3 0307 	rsb	r3, r3, #7
 800c2e6:	2b04      	cmp	r3, #4
 800c2e8:	bf28      	it	cs
 800c2ea:	2304      	movcs	r3, #4
 800c2ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c2ee:	69fb      	ldr	r3, [r7, #28]
 800c2f0:	3304      	adds	r3, #4
 800c2f2:	2b06      	cmp	r3, #6
 800c2f4:	d902      	bls.n	800c2fc <NVIC_EncodePriority+0x30>
 800c2f6:	69fb      	ldr	r3, [r7, #28]
 800c2f8:	3b03      	subs	r3, #3
 800c2fa:	e000      	b.n	800c2fe <NVIC_EncodePriority+0x32>
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c300:	f04f 32ff 	mov.w	r2, #4294967295
 800c304:	69bb      	ldr	r3, [r7, #24]
 800c306:	fa02 f303 	lsl.w	r3, r2, r3
 800c30a:	43da      	mvns	r2, r3
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	401a      	ands	r2, r3
 800c310:	697b      	ldr	r3, [r7, #20]
 800c312:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c314:	f04f 31ff 	mov.w	r1, #4294967295
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	fa01 f303 	lsl.w	r3, r1, r3
 800c31e:	43d9      	mvns	r1, r3
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c324:	4313      	orrs	r3, r2
         );
}
 800c326:	4618      	mov	r0, r3
 800c328:	3724      	adds	r7, #36	; 0x24
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bc80      	pop	{r7}
 800c32e:	4770      	bx	lr

0800c330 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 800c330:	b480      	push	{r7}
 800c332:	b085      	sub	sp, #20
 800c334:	af00      	add	r7, sp, #0
 800c336:	60f8      	str	r0, [r7, #12]
 800c338:	60b9      	str	r1, [r7, #8]
 800c33a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	3b01      	subs	r3, #1
 800c340:	4a0c      	ldr	r2, [pc, #48]	; (800c374 <LL_DMA_SetDataTransferDirection+0x44>)
 800c342:	5cd3      	ldrb	r3, [r2, r3]
 800c344:	461a      	mov	r2, r3
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	4413      	add	r3, r2
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c350:	f023 0310 	bic.w	r3, r3, #16
 800c354:	68ba      	ldr	r2, [r7, #8]
 800c356:	3a01      	subs	r2, #1
 800c358:	4906      	ldr	r1, [pc, #24]	; (800c374 <LL_DMA_SetDataTransferDirection+0x44>)
 800c35a:	5c8a      	ldrb	r2, [r1, r2]
 800c35c:	4611      	mov	r1, r2
 800c35e:	68fa      	ldr	r2, [r7, #12]
 800c360:	440a      	add	r2, r1
 800c362:	4611      	mov	r1, r2
 800c364:	687a      	ldr	r2, [r7, #4]
 800c366:	4313      	orrs	r3, r2
 800c368:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 800c36a:	bf00      	nop
 800c36c:	3714      	adds	r7, #20
 800c36e:	46bd      	mov	sp, r7
 800c370:	bc80      	pop	{r7}
 800c372:	4770      	bx	lr
 800c374:	0801516c 	.word	0x0801516c

0800c378 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 800c378:	b480      	push	{r7}
 800c37a:	b085      	sub	sp, #20
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	60f8      	str	r0, [r7, #12]
 800c380:	60b9      	str	r1, [r7, #8]
 800c382:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	3b01      	subs	r3, #1
 800c388:	4a0b      	ldr	r2, [pc, #44]	; (800c3b8 <LL_DMA_SetMode+0x40>)
 800c38a:	5cd3      	ldrb	r3, [r2, r3]
 800c38c:	461a      	mov	r2, r3
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	4413      	add	r3, r2
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	f023 0220 	bic.w	r2, r3, #32
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	3b01      	subs	r3, #1
 800c39c:	4906      	ldr	r1, [pc, #24]	; (800c3b8 <LL_DMA_SetMode+0x40>)
 800c39e:	5ccb      	ldrb	r3, [r1, r3]
 800c3a0:	4619      	mov	r1, r3
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	440b      	add	r3, r1
 800c3a6:	4619      	mov	r1, r3
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	4313      	orrs	r3, r2
 800c3ac:	600b      	str	r3, [r1, #0]
             Mode);
}
 800c3ae:	bf00      	nop
 800c3b0:	3714      	adds	r7, #20
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bc80      	pop	{r7}
 800c3b6:	4770      	bx	lr
 800c3b8:	0801516c 	.word	0x0801516c

0800c3bc <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 800c3bc:	b480      	push	{r7}
 800c3be:	b085      	sub	sp, #20
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	60f8      	str	r0, [r7, #12]
 800c3c4:	60b9      	str	r1, [r7, #8]
 800c3c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	3b01      	subs	r3, #1
 800c3cc:	4a0b      	ldr	r2, [pc, #44]	; (800c3fc <LL_DMA_SetPeriphIncMode+0x40>)
 800c3ce:	5cd3      	ldrb	r3, [r2, r3]
 800c3d0:	461a      	mov	r2, r3
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	4413      	add	r3, r2
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	3b01      	subs	r3, #1
 800c3e0:	4906      	ldr	r1, [pc, #24]	; (800c3fc <LL_DMA_SetPeriphIncMode+0x40>)
 800c3e2:	5ccb      	ldrb	r3, [r1, r3]
 800c3e4:	4619      	mov	r1, r3
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	440b      	add	r3, r1
 800c3ea:	4619      	mov	r1, r3
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	4313      	orrs	r3, r2
 800c3f0:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 800c3f2:	bf00      	nop
 800c3f4:	3714      	adds	r7, #20
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bc80      	pop	{r7}
 800c3fa:	4770      	bx	lr
 800c3fc:	0801516c 	.word	0x0801516c

0800c400 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 800c400:	b480      	push	{r7}
 800c402:	b085      	sub	sp, #20
 800c404:	af00      	add	r7, sp, #0
 800c406:	60f8      	str	r0, [r7, #12]
 800c408:	60b9      	str	r1, [r7, #8]
 800c40a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 800c40c:	68bb      	ldr	r3, [r7, #8]
 800c40e:	3b01      	subs	r3, #1
 800c410:	4a0b      	ldr	r2, [pc, #44]	; (800c440 <LL_DMA_SetMemoryIncMode+0x40>)
 800c412:	5cd3      	ldrb	r3, [r2, r3]
 800c414:	461a      	mov	r2, r3
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	4413      	add	r3, r2
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c420:	68bb      	ldr	r3, [r7, #8]
 800c422:	3b01      	subs	r3, #1
 800c424:	4906      	ldr	r1, [pc, #24]	; (800c440 <LL_DMA_SetMemoryIncMode+0x40>)
 800c426:	5ccb      	ldrb	r3, [r1, r3]
 800c428:	4619      	mov	r1, r3
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	440b      	add	r3, r1
 800c42e:	4619      	mov	r1, r3
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	4313      	orrs	r3, r2
 800c434:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 800c436:	bf00      	nop
 800c438:	3714      	adds	r7, #20
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bc80      	pop	{r7}
 800c43e:	4770      	bx	lr
 800c440:	0801516c 	.word	0x0801516c

0800c444 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 800c444:	b480      	push	{r7}
 800c446:	b085      	sub	sp, #20
 800c448:	af00      	add	r7, sp, #0
 800c44a:	60f8      	str	r0, [r7, #12]
 800c44c:	60b9      	str	r1, [r7, #8]
 800c44e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 800c450:	68bb      	ldr	r3, [r7, #8]
 800c452:	3b01      	subs	r3, #1
 800c454:	4a0b      	ldr	r2, [pc, #44]	; (800c484 <LL_DMA_SetPeriphSize+0x40>)
 800c456:	5cd3      	ldrb	r3, [r2, r3]
 800c458:	461a      	mov	r2, r3
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	4413      	add	r3, r2
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	3b01      	subs	r3, #1
 800c468:	4906      	ldr	r1, [pc, #24]	; (800c484 <LL_DMA_SetPeriphSize+0x40>)
 800c46a:	5ccb      	ldrb	r3, [r1, r3]
 800c46c:	4619      	mov	r1, r3
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	440b      	add	r3, r1
 800c472:	4619      	mov	r1, r3
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	4313      	orrs	r3, r2
 800c478:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 800c47a:	bf00      	nop
 800c47c:	3714      	adds	r7, #20
 800c47e:	46bd      	mov	sp, r7
 800c480:	bc80      	pop	{r7}
 800c482:	4770      	bx	lr
 800c484:	0801516c 	.word	0x0801516c

0800c488 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 800c488:	b480      	push	{r7}
 800c48a:	b085      	sub	sp, #20
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	60f8      	str	r0, [r7, #12]
 800c490:	60b9      	str	r1, [r7, #8]
 800c492:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	3b01      	subs	r3, #1
 800c498:	4a0b      	ldr	r2, [pc, #44]	; (800c4c8 <LL_DMA_SetMemorySize+0x40>)
 800c49a:	5cd3      	ldrb	r3, [r2, r3]
 800c49c:	461a      	mov	r2, r3
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	4413      	add	r3, r2
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	3b01      	subs	r3, #1
 800c4ac:	4906      	ldr	r1, [pc, #24]	; (800c4c8 <LL_DMA_SetMemorySize+0x40>)
 800c4ae:	5ccb      	ldrb	r3, [r1, r3]
 800c4b0:	4619      	mov	r1, r3
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	440b      	add	r3, r1
 800c4b6:	4619      	mov	r1, r3
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	4313      	orrs	r3, r2
 800c4bc:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 800c4be:	bf00      	nop
 800c4c0:	3714      	adds	r7, #20
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bc80      	pop	{r7}
 800c4c6:	4770      	bx	lr
 800c4c8:	0801516c 	.word	0x0801516c

0800c4cc <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 800c4cc:	b480      	push	{r7}
 800c4ce:	b085      	sub	sp, #20
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	60f8      	str	r0, [r7, #12]
 800c4d4:	60b9      	str	r1, [r7, #8]
 800c4d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 800c4d8:	68bb      	ldr	r3, [r7, #8]
 800c4da:	3b01      	subs	r3, #1
 800c4dc:	4a0b      	ldr	r2, [pc, #44]	; (800c50c <LL_DMA_SetChannelPriorityLevel+0x40>)
 800c4de:	5cd3      	ldrb	r3, [r2, r3]
 800c4e0:	461a      	mov	r2, r3
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	4413      	add	r3, r2
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	3b01      	subs	r3, #1
 800c4f0:	4906      	ldr	r1, [pc, #24]	; (800c50c <LL_DMA_SetChannelPriorityLevel+0x40>)
 800c4f2:	5ccb      	ldrb	r3, [r1, r3]
 800c4f4:	4619      	mov	r1, r3
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	440b      	add	r3, r1
 800c4fa:	4619      	mov	r1, r3
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	4313      	orrs	r3, r2
 800c500:	600b      	str	r3, [r1, #0]
             Priority);
}
 800c502:	bf00      	nop
 800c504:	3714      	adds	r7, #20
 800c506:	46bd      	mov	sp, r7
 800c508:	bc80      	pop	{r7}
 800c50a:	4770      	bx	lr
 800c50c:	0801516c 	.word	0x0801516c

0800c510 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 800c510:	b480      	push	{r7}
 800c512:	b085      	sub	sp, #20
 800c514:	af00      	add	r7, sp, #0
 800c516:	60f8      	str	r0, [r7, #12]
 800c518:	60b9      	str	r1, [r7, #8]
 800c51a:	607a      	str	r2, [r7, #4]
 800c51c:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 800c51e:	69bb      	ldr	r3, [r7, #24]
 800c520:	2b10      	cmp	r3, #16
 800c522:	d114      	bne.n	800c54e <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 800c524:	68bb      	ldr	r3, [r7, #8]
 800c526:	3b01      	subs	r3, #1
 800c528:	4a15      	ldr	r2, [pc, #84]	; (800c580 <LL_DMA_ConfigAddresses+0x70>)
 800c52a:	5cd3      	ldrb	r3, [r2, r3]
 800c52c:	461a      	mov	r2, r3
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	4413      	add	r3, r2
 800c532:	461a      	mov	r2, r3
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 800c538:	68bb      	ldr	r3, [r7, #8]
 800c53a:	3b01      	subs	r3, #1
 800c53c:	4a10      	ldr	r2, [pc, #64]	; (800c580 <LL_DMA_ConfigAddresses+0x70>)
 800c53e:	5cd3      	ldrb	r3, [r2, r3]
 800c540:	461a      	mov	r2, r3
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	4413      	add	r3, r2
 800c546:	461a      	mov	r2, r3
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
  }
}
 800c54c:	e013      	b.n	800c576 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	3b01      	subs	r3, #1
 800c552:	4a0b      	ldr	r2, [pc, #44]	; (800c580 <LL_DMA_ConfigAddresses+0x70>)
 800c554:	5cd3      	ldrb	r3, [r2, r3]
 800c556:	461a      	mov	r2, r3
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	4413      	add	r3, r2
 800c55c:	461a      	mov	r2, r3
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 800c562:	68bb      	ldr	r3, [r7, #8]
 800c564:	3b01      	subs	r3, #1
 800c566:	4a06      	ldr	r2, [pc, #24]	; (800c580 <LL_DMA_ConfigAddresses+0x70>)
 800c568:	5cd3      	ldrb	r3, [r2, r3]
 800c56a:	461a      	mov	r2, r3
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	4413      	add	r3, r2
 800c570:	461a      	mov	r2, r3
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	60d3      	str	r3, [r2, #12]
}
 800c576:	bf00      	nop
 800c578:	3714      	adds	r7, #20
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bc80      	pop	{r7}
 800c57e:	4770      	bx	lr
 800c580:	0801516c 	.word	0x0801516c

0800c584 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800c584:	b480      	push	{r7}
 800c586:	b083      	sub	sp, #12
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
 800c58c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	3b01      	subs	r3, #1
 800c592:	4a0a      	ldr	r2, [pc, #40]	; (800c5bc <LL_DMA_EnableIT_TC+0x38>)
 800c594:	5cd3      	ldrb	r3, [r2, r3]
 800c596:	461a      	mov	r2, r3
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	4413      	add	r3, r2
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	683a      	ldr	r2, [r7, #0]
 800c5a0:	3a01      	subs	r2, #1
 800c5a2:	4906      	ldr	r1, [pc, #24]	; (800c5bc <LL_DMA_EnableIT_TC+0x38>)
 800c5a4:	5c8a      	ldrb	r2, [r1, r2]
 800c5a6:	4611      	mov	r1, r2
 800c5a8:	687a      	ldr	r2, [r7, #4]
 800c5aa:	440a      	add	r2, r1
 800c5ac:	f043 0302 	orr.w	r3, r3, #2
 800c5b0:	6013      	str	r3, [r2, #0]
}
 800c5b2:	bf00      	nop
 800c5b4:	370c      	adds	r7, #12
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	bc80      	pop	{r7}
 800c5ba:	4770      	bx	lr
 800c5bc:	0801516c 	.word	0x0801516c

0800c5c0 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800c5c0:	b480      	push	{r7}
 800c5c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800c5c4:	4b04      	ldr	r3, [pc, #16]	; (800c5d8 <LL_RCC_HSE_Enable+0x18>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	4a03      	ldr	r2, [pc, #12]	; (800c5d8 <LL_RCC_HSE_Enable+0x18>)
 800c5ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c5ce:	6013      	str	r3, [r2, #0]
}
 800c5d0:	bf00      	nop
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bc80      	pop	{r7}
 800c5d6:	4770      	bx	lr
 800c5d8:	40021000 	.word	0x40021000

0800c5dc <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800c5dc:	b480      	push	{r7}
 800c5de:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 800c5e0:	4b06      	ldr	r3, [pc, #24]	; (800c5fc <LL_RCC_HSE_IsReady+0x20>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c5ec:	bf0c      	ite	eq
 800c5ee:	2301      	moveq	r3, #1
 800c5f0:	2300      	movne	r3, #0
 800c5f2:	b2db      	uxtb	r3, r3
}
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bc80      	pop	{r7}
 800c5fa:	4770      	bx	lr
 800c5fc:	40021000 	.word	0x40021000

0800c600 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800c600:	b480      	push	{r7}
 800c602:	b083      	sub	sp, #12
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800c608:	4b06      	ldr	r3, [pc, #24]	; (800c624 <LL_RCC_SetSysClkSource+0x24>)
 800c60a:	685b      	ldr	r3, [r3, #4]
 800c60c:	f023 0203 	bic.w	r2, r3, #3
 800c610:	4904      	ldr	r1, [pc, #16]	; (800c624 <LL_RCC_SetSysClkSource+0x24>)
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	4313      	orrs	r3, r2
 800c616:	604b      	str	r3, [r1, #4]
}
 800c618:	bf00      	nop
 800c61a:	370c      	adds	r7, #12
 800c61c:	46bd      	mov	sp, r7
 800c61e:	bc80      	pop	{r7}
 800c620:	4770      	bx	lr
 800c622:	bf00      	nop
 800c624:	40021000 	.word	0x40021000

0800c628 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800c628:	b480      	push	{r7}
 800c62a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800c62c:	4b03      	ldr	r3, [pc, #12]	; (800c63c <LL_RCC_GetSysClkSource+0x14>)
 800c62e:	685b      	ldr	r3, [r3, #4]
 800c630:	f003 030c 	and.w	r3, r3, #12
}
 800c634:	4618      	mov	r0, r3
 800c636:	46bd      	mov	sp, r7
 800c638:	bc80      	pop	{r7}
 800c63a:	4770      	bx	lr
 800c63c:	40021000 	.word	0x40021000

0800c640 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800c640:	b480      	push	{r7}
 800c642:	b083      	sub	sp, #12
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800c648:	4b06      	ldr	r3, [pc, #24]	; (800c664 <LL_RCC_SetAHBPrescaler+0x24>)
 800c64a:	685b      	ldr	r3, [r3, #4]
 800c64c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c650:	4904      	ldr	r1, [pc, #16]	; (800c664 <LL_RCC_SetAHBPrescaler+0x24>)
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	4313      	orrs	r3, r2
 800c656:	604b      	str	r3, [r1, #4]
}
 800c658:	bf00      	nop
 800c65a:	370c      	adds	r7, #12
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bc80      	pop	{r7}
 800c660:	4770      	bx	lr
 800c662:	bf00      	nop
 800c664:	40021000 	.word	0x40021000

0800c668 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800c668:	b480      	push	{r7}
 800c66a:	b083      	sub	sp, #12
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800c670:	4b06      	ldr	r3, [pc, #24]	; (800c68c <LL_RCC_SetAPB1Prescaler+0x24>)
 800c672:	685b      	ldr	r3, [r3, #4]
 800c674:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c678:	4904      	ldr	r1, [pc, #16]	; (800c68c <LL_RCC_SetAPB1Prescaler+0x24>)
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	4313      	orrs	r3, r2
 800c67e:	604b      	str	r3, [r1, #4]
}
 800c680:	bf00      	nop
 800c682:	370c      	adds	r7, #12
 800c684:	46bd      	mov	sp, r7
 800c686:	bc80      	pop	{r7}
 800c688:	4770      	bx	lr
 800c68a:	bf00      	nop
 800c68c:	40021000 	.word	0x40021000

0800c690 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800c690:	b480      	push	{r7}
 800c692:	b083      	sub	sp, #12
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800c698:	4b06      	ldr	r3, [pc, #24]	; (800c6b4 <LL_RCC_SetAPB2Prescaler+0x24>)
 800c69a:	685b      	ldr	r3, [r3, #4]
 800c69c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800c6a0:	4904      	ldr	r1, [pc, #16]	; (800c6b4 <LL_RCC_SetAPB2Prescaler+0x24>)
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	4313      	orrs	r3, r2
 800c6a6:	604b      	str	r3, [r1, #4]
}
 800c6a8:	bf00      	nop
 800c6aa:	370c      	adds	r7, #12
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bc80      	pop	{r7}
 800c6b0:	4770      	bx	lr
 800c6b2:	bf00      	nop
 800c6b4:	40021000 	.word	0x40021000

0800c6b8 <LL_RCC_SetUSBClockSource>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSBClockSource(uint32_t USBxSource)
{
 800c6b8:	b480      	push	{r7}
 800c6ba:	b083      	sub	sp, #12
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
#if defined(RCC_CFGR_USBPRE)
  MODIFY_REG(RCC->CFGR, RCC_CFGR_USBPRE, USBxSource);
 800c6c0:	4b06      	ldr	r3, [pc, #24]	; (800c6dc <LL_RCC_SetUSBClockSource+0x24>)
 800c6c2:	685b      	ldr	r3, [r3, #4]
 800c6c4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800c6c8:	4904      	ldr	r1, [pc, #16]	; (800c6dc <LL_RCC_SetUSBClockSource+0x24>)
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	4313      	orrs	r3, r2
 800c6ce:	604b      	str	r3, [r1, #4]
#else /*RCC_CFGR_OTGFSPRE*/
  MODIFY_REG(RCC->CFGR, RCC_CFGR_OTGFSPRE, USBxSource);
#endif /*RCC_CFGR_USBPRE*/
}
 800c6d0:	bf00      	nop
 800c6d2:	370c      	adds	r7, #12
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bc80      	pop	{r7}
 800c6d8:	4770      	bx	lr
 800c6da:	bf00      	nop
 800c6dc:	40021000 	.word	0x40021000

0800c6e0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800c6e4:	4b04      	ldr	r3, [pc, #16]	; (800c6f8 <LL_RCC_PLL_Enable+0x18>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	4a03      	ldr	r2, [pc, #12]	; (800c6f8 <LL_RCC_PLL_Enable+0x18>)
 800c6ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c6ee:	6013      	str	r3, [r2, #0]
}
 800c6f0:	bf00      	nop
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bc80      	pop	{r7}
 800c6f6:	4770      	bx	lr
 800c6f8:	40021000 	.word	0x40021000

0800c6fc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800c6fc:	b480      	push	{r7}
 800c6fe:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800c700:	4b06      	ldr	r3, [pc, #24]	; (800c71c <LL_RCC_PLL_IsReady+0x20>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c708:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c70c:	bf0c      	ite	eq
 800c70e:	2301      	moveq	r3, #1
 800c710:	2300      	movne	r3, #0
 800c712:	b2db      	uxtb	r3, r3
}
 800c714:	4618      	mov	r0, r3
 800c716:	46bd      	mov	sp, r7
 800c718:	bc80      	pop	{r7}
 800c71a:	4770      	bx	lr
 800c71c:	40021000 	.word	0x40021000

0800c720 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 800c720:	b480      	push	{r7}
 800c722:	b083      	sub	sp, #12
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
 800c728:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 800c72a:	4b08      	ldr	r3, [pc, #32]	; (800c74c <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 800c72c:	685b      	ldr	r3, [r3, #4]
 800c72e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	430b      	orrs	r3, r1
 800c73c:	4903      	ldr	r1, [pc, #12]	; (800c74c <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 800c73e:	4313      	orrs	r3, r2
 800c740:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 800c742:	bf00      	nop
 800c744:	370c      	adds	r7, #12
 800c746:	46bd      	mov	sp, r7
 800c748:	bc80      	pop	{r7}
 800c74a:	4770      	bx	lr
 800c74c:	40021000 	.word	0x40021000

0800c750 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800c750:	b480      	push	{r7}
 800c752:	b085      	sub	sp, #20
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 800c758:	4b08      	ldr	r3, [pc, #32]	; (800c77c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800c75a:	695a      	ldr	r2, [r3, #20]
 800c75c:	4907      	ldr	r1, [pc, #28]	; (800c77c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	4313      	orrs	r3, r2
 800c762:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800c764:	4b05      	ldr	r3, [pc, #20]	; (800c77c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800c766:	695a      	ldr	r2, [r3, #20]
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	4013      	ands	r3, r2
 800c76c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c76e:	68fb      	ldr	r3, [r7, #12]
}
 800c770:	bf00      	nop
 800c772:	3714      	adds	r7, #20
 800c774:	46bd      	mov	sp, r7
 800c776:	bc80      	pop	{r7}
 800c778:	4770      	bx	lr
 800c77a:	bf00      	nop
 800c77c:	40021000 	.word	0x40021000

0800c780 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800c780:	b480      	push	{r7}
 800c782:	b085      	sub	sp, #20
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800c788:	4b08      	ldr	r3, [pc, #32]	; (800c7ac <LL_APB1_GRP1_EnableClock+0x2c>)
 800c78a:	69da      	ldr	r2, [r3, #28]
 800c78c:	4907      	ldr	r1, [pc, #28]	; (800c7ac <LL_APB1_GRP1_EnableClock+0x2c>)
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	4313      	orrs	r3, r2
 800c792:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800c794:	4b05      	ldr	r3, [pc, #20]	; (800c7ac <LL_APB1_GRP1_EnableClock+0x2c>)
 800c796:	69da      	ldr	r2, [r3, #28]
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	4013      	ands	r3, r2
 800c79c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c79e:	68fb      	ldr	r3, [r7, #12]
}
 800c7a0:	bf00      	nop
 800c7a2:	3714      	adds	r7, #20
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bc80      	pop	{r7}
 800c7a8:	4770      	bx	lr
 800c7aa:	bf00      	nop
 800c7ac:	40021000 	.word	0x40021000

0800c7b0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800c7b0:	b480      	push	{r7}
 800c7b2:	b085      	sub	sp, #20
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800c7b8:	4b08      	ldr	r3, [pc, #32]	; (800c7dc <LL_APB2_GRP1_EnableClock+0x2c>)
 800c7ba:	699a      	ldr	r2, [r3, #24]
 800c7bc:	4907      	ldr	r1, [pc, #28]	; (800c7dc <LL_APB2_GRP1_EnableClock+0x2c>)
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	4313      	orrs	r3, r2
 800c7c2:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800c7c4:	4b05      	ldr	r3, [pc, #20]	; (800c7dc <LL_APB2_GRP1_EnableClock+0x2c>)
 800c7c6:	699a      	ldr	r2, [r3, #24]
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	4013      	ands	r3, r2
 800c7cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
}
 800c7d0:	bf00      	nop
 800c7d2:	3714      	adds	r7, #20
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bc80      	pop	{r7}
 800c7d8:	4770      	bx	lr
 800c7da:	bf00      	nop
 800c7dc:	40021000 	.word	0x40021000

0800c7e0 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 800c7e0:	b480      	push	{r7}
 800c7e2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800c7e4:	4b04      	ldr	r3, [pc, #16]	; (800c7f8 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 800c7e6:	685b      	ldr	r3, [r3, #4]
 800c7e8:	4a03      	ldr	r2, [pc, #12]	; (800c7f8 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 800c7ea:	f043 0301 	orr.w	r3, r3, #1
 800c7ee:	6053      	str	r3, [r2, #4]
}
 800c7f0:	bf00      	nop
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bc80      	pop	{r7}
 800c7f6:	4770      	bx	lr
 800c7f8:	e0042000 	.word	0xe0042000

0800c7fc <LL_DBGMCU_APB1_GRP1_FreezePeriph>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB1_GRP1_FreezePeriph(uint32_t Periphs)
{
 800c7fc:	b480      	push	{r7}
 800c7fe:	b083      	sub	sp, #12
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
  SET_BIT(DBGMCU->CR, Periphs);
 800c804:	4b05      	ldr	r3, [pc, #20]	; (800c81c <LL_DBGMCU_APB1_GRP1_FreezePeriph+0x20>)
 800c806:	685a      	ldr	r2, [r3, #4]
 800c808:	4904      	ldr	r1, [pc, #16]	; (800c81c <LL_DBGMCU_APB1_GRP1_FreezePeriph+0x20>)
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	4313      	orrs	r3, r2
 800c80e:	604b      	str	r3, [r1, #4]
}
 800c810:	bf00      	nop
 800c812:	370c      	adds	r7, #12
 800c814:	46bd      	mov	sp, r7
 800c816:	bc80      	pop	{r7}
 800c818:	4770      	bx	lr
 800c81a:	bf00      	nop
 800c81c:	e0042000 	.word	0xe0042000

0800c820 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800c820:	b480      	push	{r7}
 800c822:	b083      	sub	sp, #12
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800c828:	4b06      	ldr	r3, [pc, #24]	; (800c844 <LL_FLASH_SetLatency+0x24>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	f023 0207 	bic.w	r2, r3, #7
 800c830:	4904      	ldr	r1, [pc, #16]	; (800c844 <LL_FLASH_SetLatency+0x24>)
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	4313      	orrs	r3, r2
 800c836:	600b      	str	r3, [r1, #0]
}
 800c838:	bf00      	nop
 800c83a:	370c      	adds	r7, #12
 800c83c:	46bd      	mov	sp, r7
 800c83e:	bc80      	pop	{r7}
 800c840:	4770      	bx	lr
 800c842:	bf00      	nop
 800c844:	40022000 	.word	0x40022000

0800c848 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800c848:	b480      	push	{r7}
 800c84a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800c84c:	4b03      	ldr	r3, [pc, #12]	; (800c85c <LL_FLASH_GetLatency+0x14>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	f003 0307 	and.w	r3, r3, #7
}
 800c854:	4618      	mov	r0, r3
 800c856:	46bd      	mov	sp, r7
 800c858:	bc80      	pop	{r7}
 800c85a:	4770      	bx	lr
 800c85c:	40022000 	.word	0x40022000

0800c860 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 800c860:	b480      	push	{r7}
 800c862:	b083      	sub	sp, #12
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	601a      	str	r2, [r3, #0]
}
 800c874:	bf00      	nop
 800c876:	370c      	adds	r7, #12
 800c878:	46bd      	mov	sp, r7
 800c87a:	bc80      	pop	{r7}
 800c87c:	4770      	bx	lr

0800c87e <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(SPI_TypeDef *SPIx)
{
 800c87e:	b480      	push	{r7}
 800c880:	b083      	sub	sp, #12
 800c882:	af00      	add	r7, sp, #0
 800c884:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	689b      	ldr	r3, [r3, #8]
 800c88a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c88e:	2b80      	cmp	r3, #128	; 0x80
 800c890:	d101      	bne.n	800c896 <LL_SPI_IsActiveFlag_BSY+0x18>
 800c892:	2301      	movs	r3, #1
 800c894:	e000      	b.n	800c898 <LL_SPI_IsActiveFlag_BSY+0x1a>
 800c896:	2300      	movs	r3, #0
}
 800c898:	4618      	mov	r0, r3
 800c89a:	370c      	adds	r7, #12
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bc80      	pop	{r7}
 800c8a0:	4770      	bx	lr

0800c8a2 <LL_SPI_EnableDMAReq_TX>:
  * @rmtoll CR2          TXDMAEN       LL_SPI_EnableDMAReq_TX
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableDMAReq_TX(SPI_TypeDef *SPIx)
{
 800c8a2:	b480      	push	{r7}
 800c8a4:	b083      	sub	sp, #12
 800c8a6:	af00      	add	r7, sp, #0
 800c8a8:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	685b      	ldr	r3, [r3, #4]
 800c8ae:	f043 0202 	orr.w	r2, r3, #2
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	605a      	str	r2, [r3, #4]
}
 800c8b6:	bf00      	nop
 800c8b8:	370c      	adds	r7, #12
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bc80      	pop	{r7}
 800c8be:	4770      	bx	lr

0800c8c0 <LL_SPI_DMA_GetRegAddr>:
  * @rmtoll DR           DR            LL_SPI_DMA_GetRegAddr
  * @param  SPIx SPI Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_SPI_DMA_GetRegAddr(SPI_TypeDef *SPIx)
{
 800c8c0:	b480      	push	{r7}
 800c8c2:	b083      	sub	sp, #12
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
  return (uint32_t) &(SPIx->DR);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	330c      	adds	r3, #12
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	370c      	adds	r7, #12
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bc80      	pop	{r7}
 800c8d4:	4770      	bx	lr

0800c8d6 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 800c8d6:	b480      	push	{r7}
 800c8d8:	b083      	sub	sp, #12
 800c8da:	af00      	add	r7, sp, #0
 800c8dc:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	f043 0201 	orr.w	r2, r3, #1
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	601a      	str	r2, [r3, #0]
}
 800c8ea:	bf00      	nop
 800c8ec:	370c      	adds	r7, #12
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bc80      	pop	{r7}
 800c8f2:	4770      	bx	lr

0800c8f4 <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 800c8f4:	b480      	push	{r7}
 800c8f6:	b083      	sub	sp, #12
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	601a      	str	r2, [r3, #0]
}
 800c908:	bf00      	nop
 800c90a:	370c      	adds	r7, #12
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bc80      	pop	{r7}
 800c910:	4770      	bx	lr

0800c912 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 800c912:	b480      	push	{r7}
 800c914:	b083      	sub	sp, #12
 800c916:	af00      	add	r7, sp, #0
 800c918:	6078      	str	r0, [r7, #4]
 800c91a:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	6a1a      	ldr	r2, [r3, #32]
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	431a      	orrs	r2, r3
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	621a      	str	r2, [r3, #32]
}
 800c928:	bf00      	nop
 800c92a:	370c      	adds	r7, #12
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bc80      	pop	{r7}
 800c930:	4770      	bx	lr
	...

0800c934 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 800c934:	b480      	push	{r7}
 800c936:	b085      	sub	sp, #20
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
 800c93c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	2b01      	cmp	r3, #1
 800c942:	d01c      	beq.n	800c97e <LL_TIM_OC_DisableFast+0x4a>
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	2b04      	cmp	r3, #4
 800c948:	d017      	beq.n	800c97a <LL_TIM_OC_DisableFast+0x46>
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	2b10      	cmp	r3, #16
 800c94e:	d012      	beq.n	800c976 <LL_TIM_OC_DisableFast+0x42>
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	2b40      	cmp	r3, #64	; 0x40
 800c954:	d00d      	beq.n	800c972 <LL_TIM_OC_DisableFast+0x3e>
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c95c:	d007      	beq.n	800c96e <LL_TIM_OC_DisableFast+0x3a>
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c964:	d101      	bne.n	800c96a <LL_TIM_OC_DisableFast+0x36>
 800c966:	2305      	movs	r3, #5
 800c968:	e00a      	b.n	800c980 <LL_TIM_OC_DisableFast+0x4c>
 800c96a:	2306      	movs	r3, #6
 800c96c:	e008      	b.n	800c980 <LL_TIM_OC_DisableFast+0x4c>
 800c96e:	2304      	movs	r3, #4
 800c970:	e006      	b.n	800c980 <LL_TIM_OC_DisableFast+0x4c>
 800c972:	2303      	movs	r3, #3
 800c974:	e004      	b.n	800c980 <LL_TIM_OC_DisableFast+0x4c>
 800c976:	2302      	movs	r3, #2
 800c978:	e002      	b.n	800c980 <LL_TIM_OC_DisableFast+0x4c>
 800c97a:	2301      	movs	r3, #1
 800c97c:	e000      	b.n	800c980 <LL_TIM_OC_DisableFast+0x4c>
 800c97e:	2300      	movs	r3, #0
 800c980:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	3318      	adds	r3, #24
 800c986:	4619      	mov	r1, r3
 800c988:	7bfb      	ldrb	r3, [r7, #15]
 800c98a:	4a0a      	ldr	r2, [pc, #40]	; (800c9b4 <LL_TIM_OC_DisableFast+0x80>)
 800c98c:	5cd3      	ldrb	r3, [r2, r3]
 800c98e:	440b      	add	r3, r1
 800c990:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	681a      	ldr	r2, [r3, #0]
 800c996:	7bfb      	ldrb	r3, [r7, #15]
 800c998:	4907      	ldr	r1, [pc, #28]	; (800c9b8 <LL_TIM_OC_DisableFast+0x84>)
 800c99a:	5ccb      	ldrb	r3, [r1, r3]
 800c99c:	4619      	mov	r1, r3
 800c99e:	2304      	movs	r3, #4
 800c9a0:	408b      	lsls	r3, r1
 800c9a2:	43db      	mvns	r3, r3
 800c9a4:	401a      	ands	r2, r3
 800c9a6:	68bb      	ldr	r3, [r7, #8]
 800c9a8:	601a      	str	r2, [r3, #0]

}
 800c9aa:	bf00      	nop
 800c9ac:	3714      	adds	r7, #20
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bc80      	pop	{r7}
 800c9b2:	4770      	bx	lr
 800c9b4:	08015174 	.word	0x08015174
 800c9b8:	0801517c 	.word	0x0801517c

0800c9bc <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 800c9bc:	b480      	push	{r7}
 800c9be:	b085      	sub	sp, #20
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
 800c9c4:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	2b01      	cmp	r3, #1
 800c9ca:	d01c      	beq.n	800ca06 <LL_TIM_OC_EnablePreload+0x4a>
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	2b04      	cmp	r3, #4
 800c9d0:	d017      	beq.n	800ca02 <LL_TIM_OC_EnablePreload+0x46>
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	2b10      	cmp	r3, #16
 800c9d6:	d012      	beq.n	800c9fe <LL_TIM_OC_EnablePreload+0x42>
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	2b40      	cmp	r3, #64	; 0x40
 800c9dc:	d00d      	beq.n	800c9fa <LL_TIM_OC_EnablePreload+0x3e>
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9e4:	d007      	beq.n	800c9f6 <LL_TIM_OC_EnablePreload+0x3a>
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c9ec:	d101      	bne.n	800c9f2 <LL_TIM_OC_EnablePreload+0x36>
 800c9ee:	2305      	movs	r3, #5
 800c9f0:	e00a      	b.n	800ca08 <LL_TIM_OC_EnablePreload+0x4c>
 800c9f2:	2306      	movs	r3, #6
 800c9f4:	e008      	b.n	800ca08 <LL_TIM_OC_EnablePreload+0x4c>
 800c9f6:	2304      	movs	r3, #4
 800c9f8:	e006      	b.n	800ca08 <LL_TIM_OC_EnablePreload+0x4c>
 800c9fa:	2303      	movs	r3, #3
 800c9fc:	e004      	b.n	800ca08 <LL_TIM_OC_EnablePreload+0x4c>
 800c9fe:	2302      	movs	r3, #2
 800ca00:	e002      	b.n	800ca08 <LL_TIM_OC_EnablePreload+0x4c>
 800ca02:	2301      	movs	r3, #1
 800ca04:	e000      	b.n	800ca08 <LL_TIM_OC_EnablePreload+0x4c>
 800ca06:	2300      	movs	r3, #0
 800ca08:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	3318      	adds	r3, #24
 800ca0e:	4619      	mov	r1, r3
 800ca10:	7bfb      	ldrb	r3, [r7, #15]
 800ca12:	4a0a      	ldr	r2, [pc, #40]	; (800ca3c <LL_TIM_OC_EnablePreload+0x80>)
 800ca14:	5cd3      	ldrb	r3, [r2, r3]
 800ca16:	440b      	add	r3, r1
 800ca18:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	681a      	ldr	r2, [r3, #0]
 800ca1e:	7bfb      	ldrb	r3, [r7, #15]
 800ca20:	4907      	ldr	r1, [pc, #28]	; (800ca40 <LL_TIM_OC_EnablePreload+0x84>)
 800ca22:	5ccb      	ldrb	r3, [r1, r3]
 800ca24:	4619      	mov	r1, r3
 800ca26:	2308      	movs	r3, #8
 800ca28:	408b      	lsls	r3, r1
 800ca2a:	431a      	orrs	r2, r3
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	601a      	str	r2, [r3, #0]
}
 800ca30:	bf00      	nop
 800ca32:	3714      	adds	r7, #20
 800ca34:	46bd      	mov	sp, r7
 800ca36:	bc80      	pop	{r7}
 800ca38:	4770      	bx	lr
 800ca3a:	bf00      	nop
 800ca3c:	08015174 	.word	0x08015174
 800ca40:	0801517c 	.word	0x0801517c

0800ca44 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800ca44:	b480      	push	{r7}
 800ca46:	b083      	sub	sp, #12
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
 800ca4c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	683a      	ldr	r2, [r7, #0]
 800ca52:	641a      	str	r2, [r3, #64]	; 0x40
}
 800ca54:	bf00      	nop
 800ca56:	370c      	adds	r7, #12
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bc80      	pop	{r7}
 800ca5c:	4770      	bx	lr

0800ca5e <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 800ca5e:	b480      	push	{r7}
 800ca60:	b083      	sub	sp, #12
 800ca62:	af00      	add	r7, sp, #0
 800ca64:	6078      	str	r0, [r7, #4]
 800ca66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	689b      	ldr	r3, [r3, #8]
 800ca6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ca70:	f023 0307 	bic.w	r3, r3, #7
 800ca74:	683a      	ldr	r2, [r7, #0]
 800ca76:	431a      	orrs	r2, r3
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	609a      	str	r2, [r3, #8]
}
 800ca7c:	bf00      	nop
 800ca7e:	370c      	adds	r7, #12
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bc80      	pop	{r7}
 800ca84:	4770      	bx	lr

0800ca86 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 800ca86:	b480      	push	{r7}
 800ca88:	b083      	sub	sp, #12
 800ca8a:	af00      	add	r7, sp, #0
 800ca8c:	6078      	str	r0, [r7, #4]
 800ca8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	685b      	ldr	r3, [r3, #4]
 800ca94:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	431a      	orrs	r2, r3
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	605a      	str	r2, [r3, #4]
}
 800caa0:	bf00      	nop
 800caa2:	370c      	adds	r7, #12
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bc80      	pop	{r7}
 800caa8:	4770      	bx	lr

0800caaa <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 800caaa:	b480      	push	{r7}
 800caac:	b083      	sub	sp, #12
 800caae:	af00      	add	r7, sp, #0
 800cab0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	689b      	ldr	r3, [r3, #8]
 800cab6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	609a      	str	r2, [r3, #8]
}
 800cabe:	bf00      	nop
 800cac0:	370c      	adds	r7, #12
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bc80      	pop	{r7}
 800cac6:	4770      	bx	lr

0800cac8 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 800cac8:	b480      	push	{r7}
 800caca:	b083      	sub	sp, #12
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f06f 0201 	mvn.w	r2, #1
 800cad6:	611a      	str	r2, [r3, #16]
}
 800cad8:	bf00      	nop
 800cada:	370c      	adds	r7, #12
 800cadc:	46bd      	mov	sp, r7
 800cade:	bc80      	pop	{r7}
 800cae0:	4770      	bx	lr

0800cae2 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 800cae2:	b480      	push	{r7}
 800cae4:	b083      	sub	sp, #12
 800cae6:	af00      	add	r7, sp, #0
 800cae8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	68db      	ldr	r3, [r3, #12]
 800caee:	f043 0201 	orr.w	r2, r3, #1
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	60da      	str	r2, [r3, #12]
}
 800caf6:	bf00      	nop
 800caf8:	370c      	adds	r7, #12
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bc80      	pop	{r7}
 800cafe:	4770      	bx	lr

0800cb00 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800cb00:	b480      	push	{r7}
 800cb02:	b083      	sub	sp, #12
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
 800cb08:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	0a1b      	lsrs	r3, r3, #8
 800cb0e:	b29a      	uxth	r2, r3
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	611a      	str	r2, [r3, #16]
}
 800cb14:	bf00      	nop
 800cb16:	370c      	adds	r7, #12
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bc80      	pop	{r7}
 800cb1c:	4770      	bx	lr

0800cb1e <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800cb1e:	b480      	push	{r7}
 800cb20:	b083      	sub	sp, #12
 800cb22:	af00      	add	r7, sp, #0
 800cb24:	6078      	str	r0, [r7, #4]
 800cb26:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	0a1b      	lsrs	r3, r3, #8
 800cb2c:	b29a      	uxth	r2, r3
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	615a      	str	r2, [r3, #20]
}
 800cb32:	bf00      	nop
 800cb34:	370c      	adds	r7, #12
 800cb36:	46bd      	mov	sp, r7
 800cb38:	bc80      	pop	{r7}
 800cb3a:	4770      	bx	lr

0800cb3c <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800cb3c:	b480      	push	{r7}
 800cb3e:	b085      	sub	sp, #20
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
 800cb44:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	68db      	ldr	r3, [r3, #12]
 800cb4a:	60fb      	str	r3, [r7, #12]
  uint32_t pinmask = ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	0a1b      	lsrs	r3, r3, #8
 800cb50:	b29b      	uxth	r3, r3
 800cb52:	60bb      	str	r3, [r7, #8]
  WRITE_REG(GPIOx->BSRR, ((odr & pinmask) << 16u) | (~odr & pinmask));
 800cb54:	68fa      	ldr	r2, [r7, #12]
 800cb56:	68bb      	ldr	r3, [r7, #8]
 800cb58:	4013      	ands	r3, r2
 800cb5a:	041a      	lsls	r2, r3, #16
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	43d9      	mvns	r1, r3
 800cb60:	68bb      	ldr	r3, [r7, #8]
 800cb62:	400b      	ands	r3, r1
 800cb64:	431a      	orrs	r2, r3
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	611a      	str	r2, [r3, #16]
}
 800cb6a:	bf00      	nop
 800cb6c:	3714      	adds	r7, #20
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bc80      	pop	{r7}
 800cb72:	4770      	bx	lr

0800cb74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800cb74:	b590      	push	{r4, r7, lr}
 800cb76:	b085      	sub	sp, #20
 800cb78:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800cb7a:	f000 fc81 	bl	800d480 <HAL_Init>

  /* USER CODE BEGIN Init */
  LL_DBGMCU_EnableDBGSleepMode();
 800cb7e:	f7ff fe2f 	bl	800c7e0 <LL_DBGMCU_EnableDBGSleepMode>
  LL_DBGMCU_APB1_GRP1_FreezePeriph(LL_DBGMCU_APB1_GRP1_TIM3_STOP | LL_DBGMCU_APB1_GRP1_TIM4_STOP);
 800cb82:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 800cb86:	f7ff fe39 	bl	800c7fc <LL_DBGMCU_APB1_GRP1_FreezePeriph>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800cb8a:	f000 f8a3 	bl	800ccd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800cb8e:	f000 f9f1 	bl	800cf74 <MX_GPIO_Init>
  MX_DMA_Init();
 800cb92:	f000 f9d7 	bl	800cf44 <MX_DMA_Init>
  MX_SPI1_Init();
 800cb96:	f000 f8e3 	bl	800cd60 <MX_SPI1_Init>
  MX_TIM3_Init();
 800cb9a:	f000 f953 	bl	800ce44 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 800cb9e:	f007 fe2f 	bl	8014800 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  LL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800cba2:	4944      	ldr	r1, [pc, #272]	; (800ccb4 <main+0x140>)
 800cba4:	4844      	ldr	r0, [pc, #272]	; (800ccb8 <main+0x144>)
 800cba6:	f7ff ffc9 	bl	800cb3c <LL_GPIO_TogglePin>


  LL_TIM_EnableCounter(TIM3);
 800cbaa:	4844      	ldr	r0, [pc, #272]	; (800ccbc <main+0x148>)
 800cbac:	f7ff fe93 	bl	800c8d6 <LL_TIM_EnableCounter>
  LL_TIM_ClearFlag_UPDATE(TIM3);
 800cbb0:	4842      	ldr	r0, [pc, #264]	; (800ccbc <main+0x148>)
 800cbb2:	f7ff ff89 	bl	800cac8 <LL_TIM_ClearFlag_UPDATE>
  LL_TIM_EnableIT_UPDATE(TIM3);
 800cbb6:	4841      	ldr	r0, [pc, #260]	; (800ccbc <main+0x148>)
 800cbb8:	f7ff ff93 	bl	800cae2 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800cbbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800cbc0:	483e      	ldr	r0, [pc, #248]	; (800ccbc <main+0x148>)
 800cbc2:	f7ff fea6 	bl	800c912 <LL_TIM_CC_EnableChannel>
  LL_TIM_OC_SetCompareCH4(TIM3, 170);//14000);
 800cbc6:	21aa      	movs	r1, #170	; 0xaa
 800cbc8:	483c      	ldr	r0, [pc, #240]	; (800ccbc <main+0x148>)
 800cbca:	f7ff ff3b 	bl	800ca44 <LL_TIM_OC_SetCompareCH4>


  //update buffer
  //nthStr - 2*16 + (nth+8)Str - 2*16
  for (uint8_t i=0;i<8;i++){
 800cbce:	2300      	movs	r3, #0
 800cbd0:	71fb      	strb	r3, [r7, #7]
 800cbd2:	e02e      	b.n	800cc32 <main+0xbe>
	  LP_buffer [4*i] = display_buffer[i+8][0];
 800cbd4:	79fb      	ldrb	r3, [r7, #7]
 800cbd6:	f103 0208 	add.w	r2, r3, #8
 800cbda:	79fb      	ldrb	r3, [r7, #7]
 800cbdc:	009b      	lsls	r3, r3, #2
 800cbde:	4938      	ldr	r1, [pc, #224]	; (800ccc0 <main+0x14c>)
 800cbe0:	f831 1022 	ldrh.w	r1, [r1, r2, lsl #2]
 800cbe4:	4a37      	ldr	r2, [pc, #220]	; (800ccc4 <main+0x150>)
 800cbe6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  LP_buffer [4*i+1] = display_buffer[i+8][1];
 800cbea:	79fb      	ldrb	r3, [r7, #7]
 800cbec:	3308      	adds	r3, #8
 800cbee:	79fa      	ldrb	r2, [r7, #7]
 800cbf0:	0092      	lsls	r2, r2, #2
 800cbf2:	3201      	adds	r2, #1
 800cbf4:	4932      	ldr	r1, [pc, #200]	; (800ccc0 <main+0x14c>)
 800cbf6:	009b      	lsls	r3, r3, #2
 800cbf8:	440b      	add	r3, r1
 800cbfa:	8859      	ldrh	r1, [r3, #2]
 800cbfc:	4b31      	ldr	r3, [pc, #196]	; (800ccc4 <main+0x150>)
 800cbfe:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  LP_buffer [4*i+2] = display_buffer[i][0];
 800cc02:	79fa      	ldrb	r2, [r7, #7]
 800cc04:	79fb      	ldrb	r3, [r7, #7]
 800cc06:	009b      	lsls	r3, r3, #2
 800cc08:	3302      	adds	r3, #2
 800cc0a:	492d      	ldr	r1, [pc, #180]	; (800ccc0 <main+0x14c>)
 800cc0c:	f831 1022 	ldrh.w	r1, [r1, r2, lsl #2]
 800cc10:	4a2c      	ldr	r2, [pc, #176]	; (800ccc4 <main+0x150>)
 800cc12:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  LP_buffer [4*i+3] = display_buffer[i][1];
 800cc16:	79fb      	ldrb	r3, [r7, #7]
 800cc18:	79fa      	ldrb	r2, [r7, #7]
 800cc1a:	0092      	lsls	r2, r2, #2
 800cc1c:	3203      	adds	r2, #3
 800cc1e:	4928      	ldr	r1, [pc, #160]	; (800ccc0 <main+0x14c>)
 800cc20:	009b      	lsls	r3, r3, #2
 800cc22:	440b      	add	r3, r1
 800cc24:	8859      	ldrh	r1, [r3, #2]
 800cc26:	4b27      	ldr	r3, [pc, #156]	; (800ccc4 <main+0x150>)
 800cc28:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for (uint8_t i=0;i<8;i++){
 800cc2c:	79fb      	ldrb	r3, [r7, #7]
 800cc2e:	3301      	adds	r3, #1
 800cc30:	71fb      	strb	r3, [r7, #7]
 800cc32:	79fb      	ldrb	r3, [r7, #7]
 800cc34:	2b07      	cmp	r3, #7
 800cc36:	d9cd      	bls.n	800cbd4 <main+0x60>
  };


  //LL_DMA_ConfigTransfer(DMAx, Channel, Configuration)
  LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_3, (uint32_t)&LP_buffer[4],LL_SPI_DMA_GetRegAddr(SPI1) ,LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800cc38:	4c23      	ldr	r4, [pc, #140]	; (800ccc8 <main+0x154>)
 800cc3a:	4824      	ldr	r0, [pc, #144]	; (800cccc <main+0x158>)
 800cc3c:	f7ff fe40 	bl	800c8c0 <LL_SPI_DMA_GetRegAddr>
 800cc40:	4603      	mov	r3, r0
 800cc42:	2210      	movs	r2, #16
 800cc44:	9200      	str	r2, [sp, #0]
 800cc46:	4622      	mov	r2, r4
 800cc48:	2103      	movs	r1, #3
 800cc4a:	4821      	ldr	r0, [pc, #132]	; (800ccd0 <main+0x15c>)
 800cc4c:	f7ff fc60 	bl	800c510 <LL_DMA_ConfigAddresses>

  //LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_3, (uint32_t *)LP_buffer);
  //LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_3, 4);

  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_3);
 800cc50:	2103      	movs	r1, #3
 800cc52:	481f      	ldr	r0, [pc, #124]	; (800ccd0 <main+0x15c>)
 800cc54:	f7ff fc96 	bl	800c584 <LL_DMA_EnableIT_TC>
  LL_SPI_EnableDMAReq_TX(SPI1);
 800cc58:	481c      	ldr	r0, [pc, #112]	; (800cccc <main+0x158>)
 800cc5a:	f7ff fe22 	bl	800c8a2 <LL_SPI_EnableDMAReq_TX>
  //LL_SPI_EnableIT_TXE(SPI1);

  LL_SPI_Enable(SPI1);
 800cc5e:	481b      	ldr	r0, [pc, #108]	; (800cccc <main+0x158>)
 800cc60:	f7ff fdfe 	bl	800c860 <LL_SPI_Enable>

  //LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_3);

  __WFI();
 800cc64:	bf30      	wfi
  while(LL_SPI_IsActiveFlag_BSY(SPI1));
 800cc66:	bf00      	nop
 800cc68:	4818      	ldr	r0, [pc, #96]	; (800cccc <main+0x158>)
 800cc6a:	f7ff fe08 	bl	800c87e <LL_SPI_IsActiveFlag_BSY>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d1f9      	bne.n	800cc68 <main+0xf4>
  LL_GPIO_SetOutputPin(LP_LE_GPIO_Port, LP_LE_Pin);
 800cc74:	f240 1101 	movw	r1, #257	; 0x101
 800cc78:	480f      	ldr	r0, [pc, #60]	; (800ccb8 <main+0x144>)
 800cc7a:	f7ff ff41 	bl	800cb00 <LL_GPIO_SetOutputPin>
  asm("nop");
 800cc7e:	bf00      	nop

  LL_GPIO_ResetOutputPin(LP_LE_GPIO_Port, LP_LE_Pin);
 800cc80:	f240 1101 	movw	r1, #257	; 0x101
 800cc84:	480c      	ldr	r0, [pc, #48]	; (800ccb8 <main+0x144>)
 800cc86:	f7ff ff4a 	bl	800cb1e <LL_GPIO_ResetOutputPin>



  for (uint8_t str_cnt = 0;str_cnt < 8; str_cnt++){
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	71bb      	strb	r3, [r7, #6]
 800cc8e:	e00b      	b.n	800cca8 <main+0x134>

	GPIOB->BSRR = (str_cnt << 12u) | ((0x7-str_cnt) << (12u+16u));
 800cc90:	79bb      	ldrb	r3, [r7, #6]
 800cc92:	031a      	lsls	r2, r3, #12
 800cc94:	79bb      	ldrb	r3, [r7, #6]
 800cc96:	f1c3 0307 	rsb	r3, r3, #7
 800cc9a:	071b      	lsls	r3, r3, #28
 800cc9c:	431a      	orrs	r2, r3
 800cc9e:	4b06      	ldr	r3, [pc, #24]	; (800ccb8 <main+0x144>)
 800cca0:	611a      	str	r2, [r3, #16]
  for (uint8_t str_cnt = 0;str_cnt < 8; str_cnt++){
 800cca2:	79bb      	ldrb	r3, [r7, #6]
 800cca4:	3301      	adds	r3, #1
 800cca6:	71bb      	strb	r3, [r7, #6]
 800cca8:	79bb      	ldrb	r3, [r7, #6]
 800ccaa:	2b07      	cmp	r3, #7
 800ccac:	d9f0      	bls.n	800cc90 <main+0x11c>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  __WFI();
 800ccae:	bf30      	wfi
	  __NOP();
 800ccb0:	bf00      	nop
	  __WFI();
 800ccb2:	e7fc      	b.n	800ccae <main+0x13a>
 800ccb4:	04020002 	.word	0x04020002
 800ccb8:	40010c00 	.word	0x40010c00
 800ccbc:	40000400 	.word	0x40000400
 800ccc0:	20000000 	.word	0x20000000
 800ccc4:	20000180 	.word	0x20000180
 800ccc8:	20000188 	.word	0x20000188
 800cccc:	40013000 	.word	0x40013000
 800ccd0:	40020000 	.word	0x40020000

0800ccd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 800ccd8:	2002      	movs	r0, #2
 800ccda:	f7ff fda1 	bl	800c820 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 800ccde:	bf00      	nop
 800cce0:	f7ff fdb2 	bl	800c848 <LL_FLASH_GetLatency>
 800cce4:	4603      	mov	r3, r0
 800cce6:	2b02      	cmp	r3, #2
 800cce8:	d1fa      	bne.n	800cce0 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 800ccea:	f7ff fc69 	bl	800c5c0 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 800ccee:	bf00      	nop
 800ccf0:	f7ff fc74 	bl	800c5dc <LL_RCC_HSE_IsReady>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	2b01      	cmp	r3, #1
 800ccf8:	d1fa      	bne.n	800ccf0 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 800ccfa:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 800ccfe:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800cd02:	f7ff fd0d 	bl	800c720 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 800cd06:	f7ff fceb 	bl	800c6e0 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800cd0a:	bf00      	nop
 800cd0c:	f7ff fcf6 	bl	800c6fc <LL_RCC_PLL_IsReady>
 800cd10:	4603      	mov	r3, r0
 800cd12:	2b01      	cmp	r3, #1
 800cd14:	d1fa      	bne.n	800cd0c <SystemClock_Config+0x38>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800cd16:	2000      	movs	r0, #0
 800cd18:	f7ff fc92 	bl	800c640 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 800cd1c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800cd20:	f7ff fca2 	bl	800c668 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800cd24:	2000      	movs	r0, #0
 800cd26:	f7ff fcb3 	bl	800c690 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800cd2a:	2002      	movs	r0, #2
 800cd2c:	f7ff fc68 	bl	800c600 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800cd30:	bf00      	nop
 800cd32:	f7ff fc79 	bl	800c628 <LL_RCC_GetSysClkSource>
 800cd36:	4603      	mov	r3, r0
 800cd38:	2b08      	cmp	r3, #8
 800cd3a:	d1fa      	bne.n	800cd32 <SystemClock_Config+0x5e>
  {

  }
  LL_SetSystemCoreClock(72000000);
 800cd3c:	4807      	ldr	r0, [pc, #28]	; (800cd5c <SystemClock_Config+0x88>)
 800cd3e:	f005 faa9 	bl	8012294 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 800cd42:	200f      	movs	r0, #15
 800cd44:	f000 fbb2 	bl	800d4ac <HAL_InitTick>
 800cd48:	4603      	mov	r3, r0
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d001      	beq.n	800cd52 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800cd4e:	f000 f93d 	bl	800cfcc <Error_Handler>
  }
  LL_RCC_SetUSBClockSource(LL_RCC_USB_CLKSOURCE_PLL_DIV_1_5);
 800cd52:	2000      	movs	r0, #0
 800cd54:	f7ff fcb0 	bl	800c6b8 <LL_RCC_SetUSBClockSource>
}
 800cd58:	bf00      	nop
 800cd5a:	bd80      	pop	{r7, pc}
 800cd5c:	044aa200 	.word	0x044aa200

0800cd60 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b090      	sub	sp, #64	; 0x40
 800cd64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800cd66:	f107 0318 	add.w	r3, r7, #24
 800cd6a:	2228      	movs	r2, #40	; 0x28
 800cd6c:	2100      	movs	r1, #0
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f008 f9a2 	bl	80150b8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cd74:	1d3b      	adds	r3, r7, #4
 800cd76:	2200      	movs	r2, #0
 800cd78:	601a      	str	r2, [r3, #0]
 800cd7a:	605a      	str	r2, [r3, #4]
 800cd7c:	609a      	str	r2, [r3, #8]
 800cd7e:	60da      	str	r2, [r3, #12]
 800cd80:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 800cd82:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800cd86:	f7ff fd13 	bl	800c7b0 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800cd8a:	2004      	movs	r0, #4
 800cd8c:	f7ff fd10 	bl	800c7b0 <LL_APB2_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_7;
 800cd90:	f24a 03a0 	movw	r3, #41120	; 0xa0a0
 800cd94:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800cd96:	2309      	movs	r3, #9
 800cd98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800cd9a:	2303      	movs	r3, #3
 800cd9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800cd9e:	2300      	movs	r3, #0
 800cda0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cda2:	1d3b      	adds	r3, r7, #4
 800cda4:	4619      	mov	r1, r3
 800cda6:	4824      	ldr	r0, [pc, #144]	; (800ce38 <MX_SPI1_Init+0xd8>)
 800cda8:	f002 fb22 	bl	800f3f0 <LL_GPIO_Init>

  /* SPI1 DMA Init */

  /* SPI1_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800cdac:	2210      	movs	r2, #16
 800cdae:	2103      	movs	r1, #3
 800cdb0:	4822      	ldr	r0, [pc, #136]	; (800ce3c <MX_SPI1_Init+0xdc>)
 800cdb2:	f7ff fabd 	bl	800c330 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PRIORITY_LOW);
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	2103      	movs	r1, #3
 800cdba:	4820      	ldr	r0, [pc, #128]	; (800ce3c <MX_SPI1_Init+0xdc>)
 800cdbc:	f7ff fb86 	bl	800c4cc <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MODE_NORMAL);
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	2103      	movs	r1, #3
 800cdc4:	481d      	ldr	r0, [pc, #116]	; (800ce3c <MX_SPI1_Init+0xdc>)
 800cdc6:	f7ff fad7 	bl	800c378 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PERIPH_NOINCREMENT);
 800cdca:	2200      	movs	r2, #0
 800cdcc:	2103      	movs	r1, #3
 800cdce:	481b      	ldr	r0, [pc, #108]	; (800ce3c <MX_SPI1_Init+0xdc>)
 800cdd0:	f7ff faf4 	bl	800c3bc <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MEMORY_INCREMENT);
 800cdd4:	2280      	movs	r2, #128	; 0x80
 800cdd6:	2103      	movs	r1, #3
 800cdd8:	4818      	ldr	r0, [pc, #96]	; (800ce3c <MX_SPI1_Init+0xdc>)
 800cdda:	f7ff fb11 	bl	800c400 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_HALFWORD);
 800cdde:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cde2:	2103      	movs	r1, #3
 800cde4:	4815      	ldr	r0, [pc, #84]	; (800ce3c <MX_SPI1_Init+0xdc>)
 800cde6:	f7ff fb2d 	bl	800c444 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_HALFWORD);
 800cdea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cdee:	2103      	movs	r1, #3
 800cdf0:	4812      	ldr	r0, [pc, #72]	; (800ce3c <MX_SPI1_Init+0xdc>)
 800cdf2:	f7ff fb49 	bl	800c488 <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800cdfa:	f44f 7382 	mov.w	r3, #260	; 0x104
 800cdfe:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_16BIT;
 800ce00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ce04:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 800ce06:	2300      	movs	r3, #0
 800ce08:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800ce0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ce12:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 800ce14:	2310      	movs	r3, #16
 800ce16:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800ce18:	2300      	movs	r3, #0
 800ce1a:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 800ce20:	230a      	movs	r3, #10
 800ce22:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 800ce24:	f107 0318 	add.w	r3, r7, #24
 800ce28:	4619      	mov	r1, r3
 800ce2a:	4805      	ldr	r0, [pc, #20]	; (800ce40 <MX_SPI1_Init+0xe0>)
 800ce2c:	f002 fb67 	bl	800f4fe <LL_SPI_Init>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800ce30:	bf00      	nop
 800ce32:	3740      	adds	r7, #64	; 0x40
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}
 800ce38:	40010800 	.word	0x40010800
 800ce3c:	40020000 	.word	0x40020000
 800ce40:	40013000 	.word	0x40013000

0800ce44 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b092      	sub	sp, #72	; 0x48
 800ce48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800ce4a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ce4e:	2200      	movs	r2, #0
 800ce50:	601a      	str	r2, [r3, #0]
 800ce52:	605a      	str	r2, [r3, #4]
 800ce54:	609a      	str	r2, [r3, #8]
 800ce56:	60da      	str	r2, [r3, #12]
 800ce58:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800ce5a:	f107 0314 	add.w	r3, r7, #20
 800ce5e:	2220      	movs	r2, #32
 800ce60:	2100      	movs	r1, #0
 800ce62:	4618      	mov	r0, r3
 800ce64:	f008 f928 	bl	80150b8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ce68:	463b      	mov	r3, r7
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	601a      	str	r2, [r3, #0]
 800ce6e:	605a      	str	r2, [r3, #4]
 800ce70:	609a      	str	r2, [r3, #8]
 800ce72:	60da      	str	r2, [r3, #12]
 800ce74:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 800ce76:	2002      	movs	r0, #2
 800ce78:	f7ff fc82 	bl	800c780 <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800ce7c:	f7ff f9d2 	bl	800c224 <__NVIC_GetPriorityGrouping>
 800ce80:	4603      	mov	r3, r0
 800ce82:	2200      	movs	r2, #0
 800ce84:	2100      	movs	r1, #0
 800ce86:	4618      	mov	r0, r3
 800ce88:	f7ff fa20 	bl	800c2cc <NVIC_EncodePriority>
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	4619      	mov	r1, r3
 800ce90:	201d      	movs	r0, #29
 800ce92:	f7ff f9f1 	bl	800c278 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 800ce96:	201d      	movs	r0, #29
 800ce98:	f7ff f9d2 	bl	800c240 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	86bb      	strh	r3, [r7, #52]	; 0x34
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800cea0:	2300      	movs	r3, #0
 800cea2:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_InitStruct.Autoreload = 30000-LL_TIM_IC_FILTER_FDIV1_N2;
 800cea4:	4b24      	ldr	r3, [pc, #144]	; (800cf38 <MX_TIM3_Init+0xf4>)
 800cea6:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800cea8:	2300      	movs	r3, #0
 800ceaa:	643b      	str	r3, [r7, #64]	; 0x40
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 800ceac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ceb0:	4619      	mov	r1, r3
 800ceb2:	4822      	ldr	r0, [pc, #136]	; (800cf3c <MX_TIM3_Init+0xf8>)
 800ceb4:	f002 fbe0 	bl	800f678 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 800ceb8:	4820      	ldr	r0, [pc, #128]	; (800cf3c <MX_TIM3_Init+0xf8>)
 800ceba:	f7ff fd1b 	bl	800c8f4 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 800cebe:	2100      	movs	r1, #0
 800cec0:	481e      	ldr	r0, [pc, #120]	; (800cf3c <MX_TIM3_Init+0xf8>)
 800cec2:	f7ff fdcc 	bl	800ca5e <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 800cec6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ceca:	481c      	ldr	r0, [pc, #112]	; (800cf3c <MX_TIM3_Init+0xf8>)
 800cecc:	f7ff fd76 	bl	800c9bc <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800ced0:	2360      	movs	r3, #96	; 0x60
 800ced2:	617b      	str	r3, [r7, #20]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800ced4:	2300      	movs	r3, #0
 800ced6:	61bb      	str	r3, [r7, #24]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800ced8:	2300      	movs	r3, #0
 800ceda:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.CompareValue = 10000;
 800cedc:	f242 7310 	movw	r3, #10000	; 0x2710
 800cee0:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800cee2:	2300      	movs	r3, #0
 800cee4:	627b      	str	r3, [r7, #36]	; 0x24
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 800cee6:	f107 0314 	add.w	r3, r7, #20
 800ceea:	461a      	mov	r2, r3
 800ceec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800cef0:	4812      	ldr	r0, [pc, #72]	; (800cf3c <MX_TIM3_Init+0xf8>)
 800cef2:	f002 fc37 	bl	800f764 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH4);
 800cef6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800cefa:	4810      	ldr	r0, [pc, #64]	; (800cf3c <MX_TIM3_Init+0xf8>)
 800cefc:	f7ff fd1a 	bl	800c934 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 800cf00:	2100      	movs	r1, #0
 800cf02:	480e      	ldr	r0, [pc, #56]	; (800cf3c <MX_TIM3_Init+0xf8>)
 800cf04:	f7ff fdbf 	bl	800ca86 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 800cf08:	480c      	ldr	r0, [pc, #48]	; (800cf3c <MX_TIM3_Init+0xf8>)
 800cf0a:	f7ff fdce 	bl	800caaa <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 800cf0e:	2008      	movs	r0, #8
 800cf10:	f7ff fc4e 	bl	800c7b0 <LL_APB2_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PB1   ------> TIM3_CH4
  */
  GPIO_InitStruct.Pin = LP_nOE_T3C4_Pin;
 800cf14:	f240 2302 	movw	r3, #514	; 0x202
 800cf18:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800cf1a:	2309      	movs	r3, #9
 800cf1c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800cf1e:	2302      	movs	r3, #2
 800cf20:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800cf22:	2300      	movs	r3, #0
 800cf24:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(LP_nOE_T3C4_GPIO_Port, &GPIO_InitStruct);
 800cf26:	463b      	mov	r3, r7
 800cf28:	4619      	mov	r1, r3
 800cf2a:	4805      	ldr	r0, [pc, #20]	; (800cf40 <MX_TIM3_Init+0xfc>)
 800cf2c:	f002 fa60 	bl	800f3f0 <LL_GPIO_Init>

}
 800cf30:	bf00      	nop
 800cf32:	3748      	adds	r7, #72	; 0x48
 800cf34:	46bd      	mov	sp, r7
 800cf36:	bd80      	pop	{r7, pc}
 800cf38:	fff07530 	.word	0xfff07530
 800cf3c:	40000400 	.word	0x40000400
 800cf40:	40010c00 	.word	0x40010c00

0800cf44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 800cf48:	2001      	movs	r0, #1
 800cf4a:	f7ff fc01 	bl	800c750 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800cf4e:	f7ff f969 	bl	800c224 <__NVIC_GetPriorityGrouping>
 800cf52:	4603      	mov	r3, r0
 800cf54:	2200      	movs	r2, #0
 800cf56:	2100      	movs	r1, #0
 800cf58:	4618      	mov	r0, r3
 800cf5a:	f7ff f9b7 	bl	800c2cc <NVIC_EncodePriority>
 800cf5e:	4603      	mov	r3, r0
 800cf60:	4619      	mov	r1, r3
 800cf62:	200d      	movs	r0, #13
 800cf64:	f7ff f988 	bl	800c278 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800cf68:	200d      	movs	r0, #13
 800cf6a:	f7ff f969 	bl	800c240 <__NVIC_EnableIRQ>

}
 800cf6e:	bf00      	nop
 800cf70:	bd80      	pop	{r7, pc}
	...

0800cf74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b086      	sub	sp, #24
 800cf78:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cf7a:	1d3b      	adds	r3, r7, #4
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	601a      	str	r2, [r3, #0]
 800cf80:	605a      	str	r2, [r3, #4]
 800cf82:	609a      	str	r2, [r3, #8]
 800cf84:	60da      	str	r2, [r3, #12]
 800cf86:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 800cf88:	2020      	movs	r0, #32
 800cf8a:	f7ff fc11 	bl	800c7b0 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800cf8e:	2004      	movs	r0, #4
 800cf90:	f7ff fc0e 	bl	800c7b0 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 800cf94:	2008      	movs	r0, #8
 800cf96:	f7ff fc0b 	bl	800c7b0 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LP_LE_Pin|LP_MUX_A_Pin|LP_MUX_B_Pin|LP_MUX_BB14_Pin
 800cf9a:	490a      	ldr	r1, [pc, #40]	; (800cfc4 <MX_GPIO_Init+0x50>)
 800cf9c:	480a      	ldr	r0, [pc, #40]	; (800cfc8 <MX_GPIO_Init+0x54>)
 800cf9e:	f7ff fdbe 	bl	800cb1e <LL_GPIO_ResetOutputPin>
                          |LED_Pin);

  /**/
  GPIO_InitStruct.Pin = LP_LE_Pin|LP_MUX_A_Pin|LP_MUX_B_Pin|LP_MUX_BB14_Pin
 800cfa2:	4b08      	ldr	r3, [pc, #32]	; (800cfc4 <MX_GPIO_Init+0x50>)
 800cfa4:	607b      	str	r3, [r7, #4]
                          |LED_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800cfa6:	2301      	movs	r3, #1
 800cfa8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800cfaa:	2302      	movs	r3, #2
 800cfac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800cfae:	2300      	movs	r3, #0
 800cfb0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cfb2:	1d3b      	adds	r3, r7, #4
 800cfb4:	4619      	mov	r1, r3
 800cfb6:	4804      	ldr	r0, [pc, #16]	; (800cfc8 <MX_GPIO_Init+0x54>)
 800cfb8:	f002 fa1a 	bl	800f3f0 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800cfbc:	bf00      	nop
 800cfbe:	3718      	adds	r7, #24
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	bd80      	pop	{r7, pc}
 800cfc4:	04720173 	.word	0x04720173
 800cfc8:	40010c00 	.word	0x40010c00

0800cfcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800cfcc:	b480      	push	{r7}
 800cfce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800cfd0:	b672      	cpsid	i
}
 800cfd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800cfd4:	e7fe      	b.n	800cfd4 <Error_Handler+0x8>
	...

0800cfd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800cfd8:	b480      	push	{r7}
 800cfda:	b085      	sub	sp, #20
 800cfdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800cfde:	4b15      	ldr	r3, [pc, #84]	; (800d034 <HAL_MspInit+0x5c>)
 800cfe0:	699b      	ldr	r3, [r3, #24]
 800cfe2:	4a14      	ldr	r2, [pc, #80]	; (800d034 <HAL_MspInit+0x5c>)
 800cfe4:	f043 0301 	orr.w	r3, r3, #1
 800cfe8:	6193      	str	r3, [r2, #24]
 800cfea:	4b12      	ldr	r3, [pc, #72]	; (800d034 <HAL_MspInit+0x5c>)
 800cfec:	699b      	ldr	r3, [r3, #24]
 800cfee:	f003 0301 	and.w	r3, r3, #1
 800cff2:	60bb      	str	r3, [r7, #8]
 800cff4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800cff6:	4b0f      	ldr	r3, [pc, #60]	; (800d034 <HAL_MspInit+0x5c>)
 800cff8:	69db      	ldr	r3, [r3, #28]
 800cffa:	4a0e      	ldr	r2, [pc, #56]	; (800d034 <HAL_MspInit+0x5c>)
 800cffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d000:	61d3      	str	r3, [r2, #28]
 800d002:	4b0c      	ldr	r3, [pc, #48]	; (800d034 <HAL_MspInit+0x5c>)
 800d004:	69db      	ldr	r3, [r3, #28]
 800d006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d00a:	607b      	str	r3, [r7, #4]
 800d00c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800d00e:	4b0a      	ldr	r3, [pc, #40]	; (800d038 <HAL_MspInit+0x60>)
 800d010:	685b      	ldr	r3, [r3, #4]
 800d012:	60fb      	str	r3, [r7, #12]
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800d01a:	60fb      	str	r3, [r7, #12]
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800d022:	60fb      	str	r3, [r7, #12]
 800d024:	4a04      	ldr	r2, [pc, #16]	; (800d038 <HAL_MspInit+0x60>)
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d02a:	bf00      	nop
 800d02c:	3714      	adds	r7, #20
 800d02e:	46bd      	mov	sp, r7
 800d030:	bc80      	pop	{r7}
 800d032:	4770      	bx	lr
 800d034:	40021000 	.word	0x40021000
 800d038:	40010000 	.word	0x40010000

0800d03c <LL_DMA_EnableChannel>:
{
 800d03c:	b480      	push	{r7}
 800d03e:	b083      	sub	sp, #12
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
 800d044:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	3b01      	subs	r3, #1
 800d04a:	4a0a      	ldr	r2, [pc, #40]	; (800d074 <LL_DMA_EnableChannel+0x38>)
 800d04c:	5cd3      	ldrb	r3, [r2, r3]
 800d04e:	461a      	mov	r2, r3
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	4413      	add	r3, r2
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	683a      	ldr	r2, [r7, #0]
 800d058:	3a01      	subs	r2, #1
 800d05a:	4906      	ldr	r1, [pc, #24]	; (800d074 <LL_DMA_EnableChannel+0x38>)
 800d05c:	5c8a      	ldrb	r2, [r1, r2]
 800d05e:	4611      	mov	r1, r2
 800d060:	687a      	ldr	r2, [r7, #4]
 800d062:	440a      	add	r2, r1
 800d064:	f043 0301 	orr.w	r3, r3, #1
 800d068:	6013      	str	r3, [r2, #0]
}
 800d06a:	bf00      	nop
 800d06c:	370c      	adds	r7, #12
 800d06e:	46bd      	mov	sp, r7
 800d070:	bc80      	pop	{r7}
 800d072:	4770      	bx	lr
 800d074:	08015184 	.word	0x08015184

0800d078 <LL_DMA_DisableChannel>:
{
 800d078:	b480      	push	{r7}
 800d07a:	b083      	sub	sp, #12
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
 800d080:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800d082:	683b      	ldr	r3, [r7, #0]
 800d084:	3b01      	subs	r3, #1
 800d086:	4a0a      	ldr	r2, [pc, #40]	; (800d0b0 <LL_DMA_DisableChannel+0x38>)
 800d088:	5cd3      	ldrb	r3, [r2, r3]
 800d08a:	461a      	mov	r2, r3
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	4413      	add	r3, r2
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	683a      	ldr	r2, [r7, #0]
 800d094:	3a01      	subs	r2, #1
 800d096:	4906      	ldr	r1, [pc, #24]	; (800d0b0 <LL_DMA_DisableChannel+0x38>)
 800d098:	5c8a      	ldrb	r2, [r1, r2]
 800d09a:	4611      	mov	r1, r2
 800d09c:	687a      	ldr	r2, [r7, #4]
 800d09e:	440a      	add	r2, r1
 800d0a0:	f023 0301 	bic.w	r3, r3, #1
 800d0a4:	6013      	str	r3, [r2, #0]
}
 800d0a6:	bf00      	nop
 800d0a8:	370c      	adds	r7, #12
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	bc80      	pop	{r7}
 800d0ae:	4770      	bx	lr
 800d0b0:	08015184 	.word	0x08015184

0800d0b4 <LL_DMA_SetDataLength>:
{
 800d0b4:	b480      	push	{r7}
 800d0b6:	b085      	sub	sp, #20
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	60f8      	str	r0, [r7, #12]
 800d0bc:	60b9      	str	r1, [r7, #8]
 800d0be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 800d0c0:	68bb      	ldr	r3, [r7, #8]
 800d0c2:	3b01      	subs	r3, #1
 800d0c4:	4a0b      	ldr	r2, [pc, #44]	; (800d0f4 <LL_DMA_SetDataLength+0x40>)
 800d0c6:	5cd3      	ldrb	r3, [r2, r3]
 800d0c8:	461a      	mov	r2, r3
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	4413      	add	r3, r2
 800d0ce:	685b      	ldr	r3, [r3, #4]
 800d0d0:	0c1b      	lsrs	r3, r3, #16
 800d0d2:	041b      	lsls	r3, r3, #16
 800d0d4:	68ba      	ldr	r2, [r7, #8]
 800d0d6:	3a01      	subs	r2, #1
 800d0d8:	4906      	ldr	r1, [pc, #24]	; (800d0f4 <LL_DMA_SetDataLength+0x40>)
 800d0da:	5c8a      	ldrb	r2, [r1, r2]
 800d0dc:	4611      	mov	r1, r2
 800d0de:	68fa      	ldr	r2, [r7, #12]
 800d0e0:	440a      	add	r2, r1
 800d0e2:	4611      	mov	r1, r2
 800d0e4:	687a      	ldr	r2, [r7, #4]
 800d0e6:	4313      	orrs	r3, r2
 800d0e8:	604b      	str	r3, [r1, #4]
}
 800d0ea:	bf00      	nop
 800d0ec:	3714      	adds	r7, #20
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bc80      	pop	{r7}
 800d0f2:	4770      	bx	lr
 800d0f4:	08015184 	.word	0x08015184

0800d0f8 <LL_DMA_ConfigAddresses>:
{
 800d0f8:	b480      	push	{r7}
 800d0fa:	b085      	sub	sp, #20
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	60f8      	str	r0, [r7, #12]
 800d100:	60b9      	str	r1, [r7, #8]
 800d102:	607a      	str	r2, [r7, #4]
 800d104:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 800d106:	69bb      	ldr	r3, [r7, #24]
 800d108:	2b10      	cmp	r3, #16
 800d10a:	d114      	bne.n	800d136 <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 800d10c:	68bb      	ldr	r3, [r7, #8]
 800d10e:	3b01      	subs	r3, #1
 800d110:	4a15      	ldr	r2, [pc, #84]	; (800d168 <LL_DMA_ConfigAddresses+0x70>)
 800d112:	5cd3      	ldrb	r3, [r2, r3]
 800d114:	461a      	mov	r2, r3
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	4413      	add	r3, r2
 800d11a:	461a      	mov	r2, r3
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 800d120:	68bb      	ldr	r3, [r7, #8]
 800d122:	3b01      	subs	r3, #1
 800d124:	4a10      	ldr	r2, [pc, #64]	; (800d168 <LL_DMA_ConfigAddresses+0x70>)
 800d126:	5cd3      	ldrb	r3, [r2, r3]
 800d128:	461a      	mov	r2, r3
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	4413      	add	r3, r2
 800d12e:	461a      	mov	r2, r3
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	6093      	str	r3, [r2, #8]
}
 800d134:	e013      	b.n	800d15e <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 800d136:	68bb      	ldr	r3, [r7, #8]
 800d138:	3b01      	subs	r3, #1
 800d13a:	4a0b      	ldr	r2, [pc, #44]	; (800d168 <LL_DMA_ConfigAddresses+0x70>)
 800d13c:	5cd3      	ldrb	r3, [r2, r3]
 800d13e:	461a      	mov	r2, r3
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	4413      	add	r3, r2
 800d144:	461a      	mov	r2, r3
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 800d14a:	68bb      	ldr	r3, [r7, #8]
 800d14c:	3b01      	subs	r3, #1
 800d14e:	4a06      	ldr	r2, [pc, #24]	; (800d168 <LL_DMA_ConfigAddresses+0x70>)
 800d150:	5cd3      	ldrb	r3, [r2, r3]
 800d152:	461a      	mov	r2, r3
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	4413      	add	r3, r2
 800d158:	461a      	mov	r2, r3
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	60d3      	str	r3, [r2, #12]
}
 800d15e:	bf00      	nop
 800d160:	3714      	adds	r7, #20
 800d162:	46bd      	mov	sp, r7
 800d164:	bc80      	pop	{r7}
 800d166:	4770      	bx	lr
 800d168:	08015184 	.word	0x08015184

0800d16c <LL_DMA_IsActiveFlag_TC3>:
{
 800d16c:	b480      	push	{r7}
 800d16e:	b083      	sub	sp, #12
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF3) == (DMA_ISR_TCIF3));
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d17c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d180:	bf0c      	ite	eq
 800d182:	2301      	moveq	r3, #1
 800d184:	2300      	movne	r3, #0
 800d186:	b2db      	uxtb	r3, r3
}
 800d188:	4618      	mov	r0, r3
 800d18a:	370c      	adds	r7, #12
 800d18c:	46bd      	mov	sp, r7
 800d18e:	bc80      	pop	{r7}
 800d190:	4770      	bx	lr

0800d192 <LL_DMA_ClearFlag_TC3>:
{
 800d192:	b480      	push	{r7}
 800d194:	b083      	sub	sp, #12
 800d196:	af00      	add	r7, sp, #0
 800d198:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF3);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d1a0:	605a      	str	r2, [r3, #4]
}
 800d1a2:	bf00      	nop
 800d1a4:	370c      	adds	r7, #12
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	bc80      	pop	{r7}
 800d1aa:	4770      	bx	lr

0800d1ac <LL_SPI_IsActiveFlag_BSY>:
{
 800d1ac:	b480      	push	{r7}
 800d1ae:	b083      	sub	sp, #12
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	689b      	ldr	r3, [r3, #8]
 800d1b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1bc:	2b80      	cmp	r3, #128	; 0x80
 800d1be:	d101      	bne.n	800d1c4 <LL_SPI_IsActiveFlag_BSY+0x18>
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	e000      	b.n	800d1c6 <LL_SPI_IsActiveFlag_BSY+0x1a>
 800d1c4:	2300      	movs	r3, #0
}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	370c      	adds	r7, #12
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bc80      	pop	{r7}
 800d1ce:	4770      	bx	lr

0800d1d0 <LL_SPI_DMA_GetRegAddr>:
{
 800d1d0:	b480      	push	{r7}
 800d1d2:	b083      	sub	sp, #12
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
  return (uint32_t) &(SPIx->DR);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	330c      	adds	r3, #12
}
 800d1dc:	4618      	mov	r0, r3
 800d1de:	370c      	adds	r7, #12
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	bc80      	pop	{r7}
 800d1e4:	4770      	bx	lr

0800d1e6 <LL_TIM_ClearFlag_UPDATE>:
{
 800d1e6:	b480      	push	{r7}
 800d1e8:	b083      	sub	sp, #12
 800d1ea:	af00      	add	r7, sp, #0
 800d1ec:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	f06f 0201 	mvn.w	r2, #1
 800d1f4:	611a      	str	r2, [r3, #16]
}
 800d1f6:	bf00      	nop
 800d1f8:	370c      	adds	r7, #12
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	bc80      	pop	{r7}
 800d1fe:	4770      	bx	lr

0800d200 <LL_TIM_IsActiveFlag_UPDATE>:
{
 800d200:	b480      	push	{r7}
 800d202:	b083      	sub	sp, #12
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	691b      	ldr	r3, [r3, #16]
 800d20c:	f003 0301 	and.w	r3, r3, #1
 800d210:	2b01      	cmp	r3, #1
 800d212:	d101      	bne.n	800d218 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800d214:	2301      	movs	r3, #1
 800d216:	e000      	b.n	800d21a <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 800d218:	2300      	movs	r3, #0
}
 800d21a:	4618      	mov	r0, r3
 800d21c:	370c      	adds	r7, #12
 800d21e:	46bd      	mov	sp, r7
 800d220:	bc80      	pop	{r7}
 800d222:	4770      	bx	lr

0800d224 <LL_TIM_ClearFlag_CC4>:
{
 800d224:	b480      	push	{r7}
 800d226:	b083      	sub	sp, #12
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC4IF));
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	f06f 0210 	mvn.w	r2, #16
 800d232:	611a      	str	r2, [r3, #16]
}
 800d234:	bf00      	nop
 800d236:	370c      	adds	r7, #12
 800d238:	46bd      	mov	sp, r7
 800d23a:	bc80      	pop	{r7}
 800d23c:	4770      	bx	lr

0800d23e <LL_TIM_IsActiveFlag_CC4>:
{
 800d23e:	b480      	push	{r7}
 800d240:	b083      	sub	sp, #12
 800d242:	af00      	add	r7, sp, #0
 800d244:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC4IF) == (TIM_SR_CC4IF)) ? 1UL : 0UL);
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	691b      	ldr	r3, [r3, #16]
 800d24a:	f003 0310 	and.w	r3, r3, #16
 800d24e:	2b10      	cmp	r3, #16
 800d250:	d101      	bne.n	800d256 <LL_TIM_IsActiveFlag_CC4+0x18>
 800d252:	2301      	movs	r3, #1
 800d254:	e000      	b.n	800d258 <LL_TIM_IsActiveFlag_CC4+0x1a>
 800d256:	2300      	movs	r3, #0
}
 800d258:	4618      	mov	r0, r3
 800d25a:	370c      	adds	r7, #12
 800d25c:	46bd      	mov	sp, r7
 800d25e:	bc80      	pop	{r7}
 800d260:	4770      	bx	lr

0800d262 <LL_GPIO_SetOutputPin>:
{
 800d262:	b480      	push	{r7}
 800d264:	b083      	sub	sp, #12
 800d266:	af00      	add	r7, sp, #0
 800d268:	6078      	str	r0, [r7, #4]
 800d26a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800d26c:	683b      	ldr	r3, [r7, #0]
 800d26e:	0a1b      	lsrs	r3, r3, #8
 800d270:	b29a      	uxth	r2, r3
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	611a      	str	r2, [r3, #16]
}
 800d276:	bf00      	nop
 800d278:	370c      	adds	r7, #12
 800d27a:	46bd      	mov	sp, r7
 800d27c:	bc80      	pop	{r7}
 800d27e:	4770      	bx	lr

0800d280 <LL_GPIO_ResetOutputPin>:
{
 800d280:	b480      	push	{r7}
 800d282:	b083      	sub	sp, #12
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
 800d288:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	0a1b      	lsrs	r3, r3, #8
 800d28e:	b29a      	uxth	r2, r3
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	615a      	str	r2, [r3, #20]
}
 800d294:	bf00      	nop
 800d296:	370c      	adds	r7, #12
 800d298:	46bd      	mov	sp, r7
 800d29a:	bc80      	pop	{r7}
 800d29c:	4770      	bx	lr

0800d29e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800d29e:	b480      	push	{r7}
 800d2a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800d2a2:	e7fe      	b.n	800d2a2 <NMI_Handler+0x4>

0800d2a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d2a4:	b480      	push	{r7}
 800d2a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800d2a8:	e7fe      	b.n	800d2a8 <HardFault_Handler+0x4>

0800d2aa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800d2aa:	b480      	push	{r7}
 800d2ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800d2ae:	e7fe      	b.n	800d2ae <MemManage_Handler+0x4>

0800d2b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800d2b0:	b480      	push	{r7}
 800d2b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800d2b4:	e7fe      	b.n	800d2b4 <BusFault_Handler+0x4>

0800d2b6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800d2b6:	b480      	push	{r7}
 800d2b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800d2ba:	e7fe      	b.n	800d2ba <UsageFault_Handler+0x4>

0800d2bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800d2bc:	b480      	push	{r7}
 800d2be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800d2c0:	bf00      	nop
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	bc80      	pop	{r7}
 800d2c6:	4770      	bx	lr

0800d2c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800d2c8:	b480      	push	{r7}
 800d2ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800d2cc:	bf00      	nop
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bc80      	pop	{r7}
 800d2d2:	4770      	bx	lr

0800d2d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800d2d4:	b480      	push	{r7}
 800d2d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800d2d8:	bf00      	nop
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	bc80      	pop	{r7}
 800d2de:	4770      	bx	lr

0800d2e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800d2e4:	f000 f912 	bl	800d50c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800d2e8:	bf00      	nop
 800d2ea:	bd80      	pop	{r7, pc}

0800d2ec <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC3(DMA1)){
 800d2f0:	480a      	ldr	r0, [pc, #40]	; (800d31c <DMA1_Channel3_IRQHandler+0x30>)
 800d2f2:	f7ff ff3b 	bl	800d16c <LL_DMA_IsActiveFlag_TC3>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d00c      	beq.n	800d316 <DMA1_Channel3_IRQHandler+0x2a>
		LL_DMA_ClearFlag_TC3(DMA1);
 800d2fc:	4807      	ldr	r0, [pc, #28]	; (800d31c <DMA1_Channel3_IRQHandler+0x30>)
 800d2fe:	f7ff ff48 	bl	800d192 <LL_DMA_ClearFlag_TC3>
		  while(LL_SPI_IsActiveFlag_BSY(SPI1));
 800d302:	bf00      	nop
 800d304:	4806      	ldr	r0, [pc, #24]	; (800d320 <DMA1_Channel3_IRQHandler+0x34>)
 800d306:	f7ff ff51 	bl	800d1ac <LL_SPI_IsActiveFlag_BSY>
 800d30a:	4603      	mov	r3, r0
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d1f9      	bne.n	800d304 <DMA1_Channel3_IRQHandler+0x18>
		  LP_lock = 0;
 800d310:	4b04      	ldr	r3, [pc, #16]	; (800d324 <DMA1_Channel3_IRQHandler+0x38>)
 800d312:	2200      	movs	r2, #0
 800d314:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA1_Channel3_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800d316:	bf00      	nop
 800d318:	bd80      	pop	{r7, pc}
 800d31a:	bf00      	nop
 800d31c:	40020000 	.word	0x40020000
 800d320:	40013000 	.word	0x40013000
 800d324:	2000017d 	.word	0x2000017d

0800d328 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800d32c:	4802      	ldr	r0, [pc, #8]	; (800d338 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800d32e:	f000 fb31 	bl	800d994 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800d332:	bf00      	nop
 800d334:	bd80      	pop	{r7, pc}
 800d336:	bf00      	nop
 800d338:	2000068c 	.word	0x2000068c

0800d33c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800d33c:	b590      	push	{r4, r7, lr}
 800d33e:	b083      	sub	sp, #12
 800d340:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM3)){
 800d342:	482d      	ldr	r0, [pc, #180]	; (800d3f8 <TIM3_IRQHandler+0xbc>)
 800d344:	f7ff ff5c 	bl	800d200 <LL_TIM_IsActiveFlag_UPDATE>
 800d348:	4603      	mov	r3, r0
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d046      	beq.n	800d3dc <TIM3_IRQHandler+0xa0>

		LL_GPIO_SetOutputPin(LP_LE_GPIO_Port, LP_LE_Pin);
 800d34e:	f240 1101 	movw	r1, #257	; 0x101
 800d352:	482a      	ldr	r0, [pc, #168]	; (800d3fc <TIM3_IRQHandler+0xc0>)
 800d354:	f7ff ff85 	bl	800d262 <LL_GPIO_SetOutputPin>

		//LL_TIM_OC_SetMode(TIM3, LL_TIM_CHANNEL_CH4, LL_TIM_OCMODE_INACTIVE);
		GPIOB->BSRR = (str_cnt << 12u) | ((0x7-str_cnt) << (12u+16u));
 800d358:	4b29      	ldr	r3, [pc, #164]	; (800d400 <TIM3_IRQHandler+0xc4>)
 800d35a:	781b      	ldrb	r3, [r3, #0]
 800d35c:	031a      	lsls	r2, r3, #12
 800d35e:	4b28      	ldr	r3, [pc, #160]	; (800d400 <TIM3_IRQHandler+0xc4>)
 800d360:	781b      	ldrb	r3, [r3, #0]
 800d362:	f1c3 0307 	rsb	r3, r3, #7
 800d366:	071b      	lsls	r3, r3, #28
 800d368:	431a      	orrs	r2, r3
 800d36a:	4b24      	ldr	r3, [pc, #144]	; (800d3fc <TIM3_IRQHandler+0xc0>)
 800d36c:	611a      	str	r2, [r3, #16]

		LL_TIM_ClearFlag_UPDATE(TIM3);
 800d36e:	4822      	ldr	r0, [pc, #136]	; (800d3f8 <TIM3_IRQHandler+0xbc>)
 800d370:	f7ff ff39 	bl	800d1e6 <LL_TIM_ClearFlag_UPDATE>

		LL_GPIO_ResetOutputPin(LP_LE_GPIO_Port, LP_LE_Pin);
 800d374:	f240 1101 	movw	r1, #257	; 0x101
 800d378:	4820      	ldr	r0, [pc, #128]	; (800d3fc <TIM3_IRQHandler+0xc0>)
 800d37a:	f7ff ff81 	bl	800d280 <LL_GPIO_ResetOutputPin>

		str_cnt++;
 800d37e:	4b20      	ldr	r3, [pc, #128]	; (800d400 <TIM3_IRQHandler+0xc4>)
 800d380:	781b      	ldrb	r3, [r3, #0]
 800d382:	3301      	adds	r3, #1
 800d384:	b2da      	uxtb	r2, r3
 800d386:	4b1e      	ldr	r3, [pc, #120]	; (800d400 <TIM3_IRQHandler+0xc4>)
 800d388:	701a      	strb	r2, [r3, #0]
		if (str_cnt >7) str_cnt = 0;
 800d38a:	4b1d      	ldr	r3, [pc, #116]	; (800d400 <TIM3_IRQHandler+0xc4>)
 800d38c:	781b      	ldrb	r3, [r3, #0]
 800d38e:	2b07      	cmp	r3, #7
 800d390:	d902      	bls.n	800d398 <TIM3_IRQHandler+0x5c>
 800d392:	4b1b      	ldr	r3, [pc, #108]	; (800d400 <TIM3_IRQHandler+0xc4>)
 800d394:	2200      	movs	r2, #0
 800d396:	701a      	strb	r2, [r3, #0]
		LP_lock = 1;
 800d398:	4b1a      	ldr	r3, [pc, #104]	; (800d404 <TIM3_IRQHandler+0xc8>)
 800d39a:	2201      	movs	r2, #1
 800d39c:	701a      	strb	r2, [r3, #0]
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_3);
 800d39e:	2103      	movs	r1, #3
 800d3a0:	4819      	ldr	r0, [pc, #100]	; (800d408 <TIM3_IRQHandler+0xcc>)
 800d3a2:	f7ff fe69 	bl	800d078 <LL_DMA_DisableChannel>
		LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_3, (uint32_t)&LP_buffer[4*str_cnt],LL_SPI_DMA_GetRegAddr(SPI1) ,LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800d3a6:	4b16      	ldr	r3, [pc, #88]	; (800d400 <TIM3_IRQHandler+0xc4>)
 800d3a8:	781b      	ldrb	r3, [r3, #0]
 800d3aa:	009b      	lsls	r3, r3, #2
 800d3ac:	005b      	lsls	r3, r3, #1
 800d3ae:	4a17      	ldr	r2, [pc, #92]	; (800d40c <TIM3_IRQHandler+0xd0>)
 800d3b0:	4413      	add	r3, r2
 800d3b2:	461c      	mov	r4, r3
 800d3b4:	4816      	ldr	r0, [pc, #88]	; (800d410 <TIM3_IRQHandler+0xd4>)
 800d3b6:	f7ff ff0b 	bl	800d1d0 <LL_SPI_DMA_GetRegAddr>
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	2210      	movs	r2, #16
 800d3be:	9200      	str	r2, [sp, #0]
 800d3c0:	4622      	mov	r2, r4
 800d3c2:	2103      	movs	r1, #3
 800d3c4:	4810      	ldr	r0, [pc, #64]	; (800d408 <TIM3_IRQHandler+0xcc>)
 800d3c6:	f7ff fe97 	bl	800d0f8 <LL_DMA_ConfigAddresses>
		LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_3, 4);
 800d3ca:	2204      	movs	r2, #4
 800d3cc:	2103      	movs	r1, #3
 800d3ce:	480e      	ldr	r0, [pc, #56]	; (800d408 <TIM3_IRQHandler+0xcc>)
 800d3d0:	f7ff fe70 	bl	800d0b4 <LL_DMA_SetDataLength>
		LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_3);
 800d3d4:	2103      	movs	r1, #3
 800d3d6:	480c      	ldr	r0, [pc, #48]	; (800d408 <TIM3_IRQHandler+0xcc>)
 800d3d8:	f7ff fe30 	bl	800d03c <LL_DMA_EnableChannel>




	};
	if(LL_TIM_IsActiveFlag_CC4(TIM4)){
 800d3dc:	480d      	ldr	r0, [pc, #52]	; (800d414 <TIM3_IRQHandler+0xd8>)
 800d3de:	f7ff ff2e 	bl	800d23e <LL_TIM_IsActiveFlag_CC4>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d002      	beq.n	800d3ee <TIM3_IRQHandler+0xb2>
		LL_TIM_ClearFlag_CC4(TIM3);
 800d3e8:	4803      	ldr	r0, [pc, #12]	; (800d3f8 <TIM3_IRQHandler+0xbc>)
 800d3ea:	f7ff ff1b 	bl	800d224 <LL_TIM_ClearFlag_CC4>

  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800d3ee:	bf00      	nop
 800d3f0:	3704      	adds	r7, #4
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	bd90      	pop	{r4, r7, pc}
 800d3f6:	bf00      	nop
 800d3f8:	40000400 	.word	0x40000400
 800d3fc:	40010c00 	.word	0x40010c00
 800d400:	2000017c 	.word	0x2000017c
 800d404:	2000017d 	.word	0x2000017d
 800d408:	40020000 	.word	0x40020000
 800d40c:	20000180 	.word	0x20000180
 800d410:	40013000 	.word	0x40013000
 800d414:	40000800 	.word	0x40000800

0800d418 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800d418:	b480      	push	{r7}
 800d41a:	af00      	add	r7, sp, #0
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 800d41c:	4b03      	ldr	r3, [pc, #12]	; (800d42c <SystemInit+0x14>)
 800d41e:	4a04      	ldr	r2, [pc, #16]	; (800d430 <SystemInit+0x18>)
 800d420:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 800d422:	bf00      	nop
 800d424:	46bd      	mov	sp, r7
 800d426:	bc80      	pop	{r7}
 800d428:	4770      	bx	lr
 800d42a:	bf00      	nop
 800d42c:	e000ed00 	.word	0xe000ed00
 800d430:	0800c000 	.word	0x0800c000

0800d434 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800d434:	f7ff fff0 	bl	800d418 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800d438:	480b      	ldr	r0, [pc, #44]	; (800d468 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800d43a:	490c      	ldr	r1, [pc, #48]	; (800d46c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800d43c:	4a0c      	ldr	r2, [pc, #48]	; (800d470 <LoopFillZerobss+0x16>)
  movs r3, #0
 800d43e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800d440:	e002      	b.n	800d448 <LoopCopyDataInit>

0800d442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800d442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800d444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800d446:	3304      	adds	r3, #4

0800d448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800d448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800d44a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800d44c:	d3f9      	bcc.n	800d442 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800d44e:	4a09      	ldr	r2, [pc, #36]	; (800d474 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800d450:	4c09      	ldr	r4, [pc, #36]	; (800d478 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800d452:	2300      	movs	r3, #0
  b LoopFillZerobss
 800d454:	e001      	b.n	800d45a <LoopFillZerobss>

0800d456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800d456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800d458:	3204      	adds	r2, #4

0800d45a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800d45a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800d45c:	d3fb      	bcc.n	800d456 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800d45e:	f007 fe33 	bl	80150c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800d462:	f7ff fb87 	bl	800cb74 <main>
  bx lr
 800d466:	4770      	bx	lr
  ldr r0, =_sdata
 800d468:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800d46c:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 800d470:	080151d0 	.word	0x080151d0
  ldr r2, =_sbss
 800d474:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 800d478:	20000bec 	.word	0x20000bec

0800d47c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800d47c:	e7fe      	b.n	800d47c <ADC1_2_IRQHandler>
	...

0800d480 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800d480:	b580      	push	{r7, lr}
 800d482:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800d484:	4b08      	ldr	r3, [pc, #32]	; (800d4a8 <HAL_Init+0x28>)
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	4a07      	ldr	r2, [pc, #28]	; (800d4a8 <HAL_Init+0x28>)
 800d48a:	f043 0310 	orr.w	r3, r3, #16
 800d48e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800d490:	2003      	movs	r0, #3
 800d492:	f000 f919 	bl	800d6c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800d496:	200f      	movs	r0, #15
 800d498:	f000 f808 	bl	800d4ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800d49c:	f7ff fd9c 	bl	800cfd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800d4a0:	2300      	movs	r3, #0
}
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	bd80      	pop	{r7, pc}
 800d4a6:	bf00      	nop
 800d4a8:	40022000 	.word	0x40022000

0800d4ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b082      	sub	sp, #8
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800d4b4:	4b12      	ldr	r3, [pc, #72]	; (800d500 <HAL_InitTick+0x54>)
 800d4b6:	681a      	ldr	r2, [r3, #0]
 800d4b8:	4b12      	ldr	r3, [pc, #72]	; (800d504 <HAL_InitTick+0x58>)
 800d4ba:	781b      	ldrb	r3, [r3, #0]
 800d4bc:	4619      	mov	r1, r3
 800d4be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d4c2:	fbb3 f3f1 	udiv	r3, r3, r1
 800d4c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	f000 f931 	bl	800d732 <HAL_SYSTICK_Config>
 800d4d0:	4603      	mov	r3, r0
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d001      	beq.n	800d4da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800d4d6:	2301      	movs	r3, #1
 800d4d8:	e00e      	b.n	800d4f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	2b0f      	cmp	r3, #15
 800d4de:	d80a      	bhi.n	800d4f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	6879      	ldr	r1, [r7, #4]
 800d4e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d4e8:	f000 f8f9 	bl	800d6de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800d4ec:	4a06      	ldr	r2, [pc, #24]	; (800d508 <HAL_InitTick+0x5c>)
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	e000      	b.n	800d4f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800d4f6:	2301      	movs	r3, #1
}
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	3708      	adds	r7, #8
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	bd80      	pop	{r7, pc}
 800d500:	20000040 	.word	0x20000040
 800d504:	20000048 	.word	0x20000048
 800d508:	20000044 	.word	0x20000044

0800d50c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800d50c:	b480      	push	{r7}
 800d50e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800d510:	4b05      	ldr	r3, [pc, #20]	; (800d528 <HAL_IncTick+0x1c>)
 800d512:	781b      	ldrb	r3, [r3, #0]
 800d514:	461a      	mov	r2, r3
 800d516:	4b05      	ldr	r3, [pc, #20]	; (800d52c <HAL_IncTick+0x20>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	4413      	add	r3, r2
 800d51c:	4a03      	ldr	r2, [pc, #12]	; (800d52c <HAL_IncTick+0x20>)
 800d51e:	6013      	str	r3, [r2, #0]
}
 800d520:	bf00      	nop
 800d522:	46bd      	mov	sp, r7
 800d524:	bc80      	pop	{r7}
 800d526:	4770      	bx	lr
 800d528:	20000048 	.word	0x20000048
 800d52c:	200001c0 	.word	0x200001c0

0800d530 <__NVIC_SetPriorityGrouping>:
{
 800d530:	b480      	push	{r7}
 800d532:	b085      	sub	sp, #20
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	f003 0307 	and.w	r3, r3, #7
 800d53e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800d540:	4b0c      	ldr	r3, [pc, #48]	; (800d574 <__NVIC_SetPriorityGrouping+0x44>)
 800d542:	68db      	ldr	r3, [r3, #12]
 800d544:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800d546:	68ba      	ldr	r2, [r7, #8]
 800d548:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800d54c:	4013      	ands	r3, r2
 800d54e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800d554:	68bb      	ldr	r3, [r7, #8]
 800d556:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800d558:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800d55c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d560:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800d562:	4a04      	ldr	r2, [pc, #16]	; (800d574 <__NVIC_SetPriorityGrouping+0x44>)
 800d564:	68bb      	ldr	r3, [r7, #8]
 800d566:	60d3      	str	r3, [r2, #12]
}
 800d568:	bf00      	nop
 800d56a:	3714      	adds	r7, #20
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bc80      	pop	{r7}
 800d570:	4770      	bx	lr
 800d572:	bf00      	nop
 800d574:	e000ed00 	.word	0xe000ed00

0800d578 <__NVIC_GetPriorityGrouping>:
{
 800d578:	b480      	push	{r7}
 800d57a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800d57c:	4b04      	ldr	r3, [pc, #16]	; (800d590 <__NVIC_GetPriorityGrouping+0x18>)
 800d57e:	68db      	ldr	r3, [r3, #12]
 800d580:	0a1b      	lsrs	r3, r3, #8
 800d582:	f003 0307 	and.w	r3, r3, #7
}
 800d586:	4618      	mov	r0, r3
 800d588:	46bd      	mov	sp, r7
 800d58a:	bc80      	pop	{r7}
 800d58c:	4770      	bx	lr
 800d58e:	bf00      	nop
 800d590:	e000ed00 	.word	0xe000ed00

0800d594 <__NVIC_EnableIRQ>:
{
 800d594:	b480      	push	{r7}
 800d596:	b083      	sub	sp, #12
 800d598:	af00      	add	r7, sp, #0
 800d59a:	4603      	mov	r3, r0
 800d59c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d59e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	db0b      	blt.n	800d5be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d5a6:	79fb      	ldrb	r3, [r7, #7]
 800d5a8:	f003 021f 	and.w	r2, r3, #31
 800d5ac:	4906      	ldr	r1, [pc, #24]	; (800d5c8 <__NVIC_EnableIRQ+0x34>)
 800d5ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d5b2:	095b      	lsrs	r3, r3, #5
 800d5b4:	2001      	movs	r0, #1
 800d5b6:	fa00 f202 	lsl.w	r2, r0, r2
 800d5ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800d5be:	bf00      	nop
 800d5c0:	370c      	adds	r7, #12
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	bc80      	pop	{r7}
 800d5c6:	4770      	bx	lr
 800d5c8:	e000e100 	.word	0xe000e100

0800d5cc <__NVIC_SetPriority>:
{
 800d5cc:	b480      	push	{r7}
 800d5ce:	b083      	sub	sp, #12
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	4603      	mov	r3, r0
 800d5d4:	6039      	str	r1, [r7, #0]
 800d5d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d5d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	db0a      	blt.n	800d5f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d5e0:	683b      	ldr	r3, [r7, #0]
 800d5e2:	b2da      	uxtb	r2, r3
 800d5e4:	490c      	ldr	r1, [pc, #48]	; (800d618 <__NVIC_SetPriority+0x4c>)
 800d5e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d5ea:	0112      	lsls	r2, r2, #4
 800d5ec:	b2d2      	uxtb	r2, r2
 800d5ee:	440b      	add	r3, r1
 800d5f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d5f4:	e00a      	b.n	800d60c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	b2da      	uxtb	r2, r3
 800d5fa:	4908      	ldr	r1, [pc, #32]	; (800d61c <__NVIC_SetPriority+0x50>)
 800d5fc:	79fb      	ldrb	r3, [r7, #7]
 800d5fe:	f003 030f 	and.w	r3, r3, #15
 800d602:	3b04      	subs	r3, #4
 800d604:	0112      	lsls	r2, r2, #4
 800d606:	b2d2      	uxtb	r2, r2
 800d608:	440b      	add	r3, r1
 800d60a:	761a      	strb	r2, [r3, #24]
}
 800d60c:	bf00      	nop
 800d60e:	370c      	adds	r7, #12
 800d610:	46bd      	mov	sp, r7
 800d612:	bc80      	pop	{r7}
 800d614:	4770      	bx	lr
 800d616:	bf00      	nop
 800d618:	e000e100 	.word	0xe000e100
 800d61c:	e000ed00 	.word	0xe000ed00

0800d620 <NVIC_EncodePriority>:
{
 800d620:	b480      	push	{r7}
 800d622:	b089      	sub	sp, #36	; 0x24
 800d624:	af00      	add	r7, sp, #0
 800d626:	60f8      	str	r0, [r7, #12]
 800d628:	60b9      	str	r1, [r7, #8]
 800d62a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	f003 0307 	and.w	r3, r3, #7
 800d632:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800d634:	69fb      	ldr	r3, [r7, #28]
 800d636:	f1c3 0307 	rsb	r3, r3, #7
 800d63a:	2b04      	cmp	r3, #4
 800d63c:	bf28      	it	cs
 800d63e:	2304      	movcs	r3, #4
 800d640:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800d642:	69fb      	ldr	r3, [r7, #28]
 800d644:	3304      	adds	r3, #4
 800d646:	2b06      	cmp	r3, #6
 800d648:	d902      	bls.n	800d650 <NVIC_EncodePriority+0x30>
 800d64a:	69fb      	ldr	r3, [r7, #28]
 800d64c:	3b03      	subs	r3, #3
 800d64e:	e000      	b.n	800d652 <NVIC_EncodePriority+0x32>
 800d650:	2300      	movs	r3, #0
 800d652:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d654:	f04f 32ff 	mov.w	r2, #4294967295
 800d658:	69bb      	ldr	r3, [r7, #24]
 800d65a:	fa02 f303 	lsl.w	r3, r2, r3
 800d65e:	43da      	mvns	r2, r3
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	401a      	ands	r2, r3
 800d664:	697b      	ldr	r3, [r7, #20]
 800d666:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800d668:	f04f 31ff 	mov.w	r1, #4294967295
 800d66c:	697b      	ldr	r3, [r7, #20]
 800d66e:	fa01 f303 	lsl.w	r3, r1, r3
 800d672:	43d9      	mvns	r1, r3
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d678:	4313      	orrs	r3, r2
}
 800d67a:	4618      	mov	r0, r3
 800d67c:	3724      	adds	r7, #36	; 0x24
 800d67e:	46bd      	mov	sp, r7
 800d680:	bc80      	pop	{r7}
 800d682:	4770      	bx	lr

0800d684 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b082      	sub	sp, #8
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	3b01      	subs	r3, #1
 800d690:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d694:	d301      	bcc.n	800d69a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800d696:	2301      	movs	r3, #1
 800d698:	e00f      	b.n	800d6ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800d69a:	4a0a      	ldr	r2, [pc, #40]	; (800d6c4 <SysTick_Config+0x40>)
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	3b01      	subs	r3, #1
 800d6a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800d6a2:	210f      	movs	r1, #15
 800d6a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d6a8:	f7ff ff90 	bl	800d5cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800d6ac:	4b05      	ldr	r3, [pc, #20]	; (800d6c4 <SysTick_Config+0x40>)
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800d6b2:	4b04      	ldr	r3, [pc, #16]	; (800d6c4 <SysTick_Config+0x40>)
 800d6b4:	2207      	movs	r2, #7
 800d6b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800d6b8:	2300      	movs	r3, #0
}
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	3708      	adds	r7, #8
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	bd80      	pop	{r7, pc}
 800d6c2:	bf00      	nop
 800d6c4:	e000e010 	.word	0xe000e010

0800d6c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b082      	sub	sp, #8
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800d6d0:	6878      	ldr	r0, [r7, #4]
 800d6d2:	f7ff ff2d 	bl	800d530 <__NVIC_SetPriorityGrouping>
}
 800d6d6:	bf00      	nop
 800d6d8:	3708      	adds	r7, #8
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	bd80      	pop	{r7, pc}

0800d6de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800d6de:	b580      	push	{r7, lr}
 800d6e0:	b086      	sub	sp, #24
 800d6e2:	af00      	add	r7, sp, #0
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	60b9      	str	r1, [r7, #8]
 800d6e8:	607a      	str	r2, [r7, #4]
 800d6ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800d6f0:	f7ff ff42 	bl	800d578 <__NVIC_GetPriorityGrouping>
 800d6f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800d6f6:	687a      	ldr	r2, [r7, #4]
 800d6f8:	68b9      	ldr	r1, [r7, #8]
 800d6fa:	6978      	ldr	r0, [r7, #20]
 800d6fc:	f7ff ff90 	bl	800d620 <NVIC_EncodePriority>
 800d700:	4602      	mov	r2, r0
 800d702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d706:	4611      	mov	r1, r2
 800d708:	4618      	mov	r0, r3
 800d70a:	f7ff ff5f 	bl	800d5cc <__NVIC_SetPriority>
}
 800d70e:	bf00      	nop
 800d710:	3718      	adds	r7, #24
 800d712:	46bd      	mov	sp, r7
 800d714:	bd80      	pop	{r7, pc}

0800d716 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800d716:	b580      	push	{r7, lr}
 800d718:	b082      	sub	sp, #8
 800d71a:	af00      	add	r7, sp, #0
 800d71c:	4603      	mov	r3, r0
 800d71e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800d720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d724:	4618      	mov	r0, r3
 800d726:	f7ff ff35 	bl	800d594 <__NVIC_EnableIRQ>
}
 800d72a:	bf00      	nop
 800d72c:	3708      	adds	r7, #8
 800d72e:	46bd      	mov	sp, r7
 800d730:	bd80      	pop	{r7, pc}

0800d732 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800d732:	b580      	push	{r7, lr}
 800d734:	b082      	sub	sp, #8
 800d736:	af00      	add	r7, sp, #0
 800d738:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800d73a:	6878      	ldr	r0, [r7, #4]
 800d73c:	f7ff ffa2 	bl	800d684 <SysTick_Config>
 800d740:	4603      	mov	r3, r0
}
 800d742:	4618      	mov	r0, r3
 800d744:	3708      	adds	r7, #8
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}

0800d74a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800d74a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d74c:	b08b      	sub	sp, #44	; 0x2c
 800d74e:	af06      	add	r7, sp, #24
 800d750:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d101      	bne.n	800d75c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800d758:	2301      	movs	r3, #1
 800d75a:	e0f1      	b.n	800d940 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800d762:	b2db      	uxtb	r3, r3
 800d764:	2b00      	cmp	r3, #0
 800d766:	d106      	bne.n	800d776 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	2200      	movs	r2, #0
 800d76c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800d770:	6878      	ldr	r0, [r7, #4]
 800d772:	f007 f9e1 	bl	8014b38 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	2203      	movs	r2, #3
 800d77a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	4618      	mov	r0, r3
 800d784:	f002 f9fa 	bl	800fb7c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	603b      	str	r3, [r7, #0]
 800d78e:	687e      	ldr	r6, [r7, #4]
 800d790:	466d      	mov	r5, sp
 800d792:	f106 0410 	add.w	r4, r6, #16
 800d796:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d798:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d79a:	6823      	ldr	r3, [r4, #0]
 800d79c:	602b      	str	r3, [r5, #0]
 800d79e:	1d33      	adds	r3, r6, #4
 800d7a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d7a2:	6838      	ldr	r0, [r7, #0]
 800d7a4:	f002 f9c4 	bl	800fb30 <USB_CoreInit>
 800d7a8:	4603      	mov	r3, r0
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d005      	beq.n	800d7ba <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	2202      	movs	r2, #2
 800d7b2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800d7b6:	2301      	movs	r3, #1
 800d7b8:	e0c2      	b.n	800d940 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	2100      	movs	r1, #0
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	f002 f9f5 	bl	800fbb0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	73fb      	strb	r3, [r7, #15]
 800d7ca:	e040      	b.n	800d84e <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800d7cc:	7bfb      	ldrb	r3, [r7, #15]
 800d7ce:	6879      	ldr	r1, [r7, #4]
 800d7d0:	1c5a      	adds	r2, r3, #1
 800d7d2:	4613      	mov	r3, r2
 800d7d4:	009b      	lsls	r3, r3, #2
 800d7d6:	4413      	add	r3, r2
 800d7d8:	00db      	lsls	r3, r3, #3
 800d7da:	440b      	add	r3, r1
 800d7dc:	3301      	adds	r3, #1
 800d7de:	2201      	movs	r2, #1
 800d7e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800d7e2:	7bfb      	ldrb	r3, [r7, #15]
 800d7e4:	6879      	ldr	r1, [r7, #4]
 800d7e6:	1c5a      	adds	r2, r3, #1
 800d7e8:	4613      	mov	r3, r2
 800d7ea:	009b      	lsls	r3, r3, #2
 800d7ec:	4413      	add	r3, r2
 800d7ee:	00db      	lsls	r3, r3, #3
 800d7f0:	440b      	add	r3, r1
 800d7f2:	7bfa      	ldrb	r2, [r7, #15]
 800d7f4:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800d7f6:	7bfb      	ldrb	r3, [r7, #15]
 800d7f8:	6879      	ldr	r1, [r7, #4]
 800d7fa:	1c5a      	adds	r2, r3, #1
 800d7fc:	4613      	mov	r3, r2
 800d7fe:	009b      	lsls	r3, r3, #2
 800d800:	4413      	add	r3, r2
 800d802:	00db      	lsls	r3, r3, #3
 800d804:	440b      	add	r3, r1
 800d806:	3303      	adds	r3, #3
 800d808:	2200      	movs	r2, #0
 800d80a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800d80c:	7bfa      	ldrb	r2, [r7, #15]
 800d80e:	6879      	ldr	r1, [r7, #4]
 800d810:	4613      	mov	r3, r2
 800d812:	009b      	lsls	r3, r3, #2
 800d814:	4413      	add	r3, r2
 800d816:	00db      	lsls	r3, r3, #3
 800d818:	440b      	add	r3, r1
 800d81a:	3338      	adds	r3, #56	; 0x38
 800d81c:	2200      	movs	r2, #0
 800d81e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800d820:	7bfa      	ldrb	r2, [r7, #15]
 800d822:	6879      	ldr	r1, [r7, #4]
 800d824:	4613      	mov	r3, r2
 800d826:	009b      	lsls	r3, r3, #2
 800d828:	4413      	add	r3, r2
 800d82a:	00db      	lsls	r3, r3, #3
 800d82c:	440b      	add	r3, r1
 800d82e:	333c      	adds	r3, #60	; 0x3c
 800d830:	2200      	movs	r2, #0
 800d832:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800d834:	7bfa      	ldrb	r2, [r7, #15]
 800d836:	6879      	ldr	r1, [r7, #4]
 800d838:	4613      	mov	r3, r2
 800d83a:	009b      	lsls	r3, r3, #2
 800d83c:	4413      	add	r3, r2
 800d83e:	00db      	lsls	r3, r3, #3
 800d840:	440b      	add	r3, r1
 800d842:	3340      	adds	r3, #64	; 0x40
 800d844:	2200      	movs	r2, #0
 800d846:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d848:	7bfb      	ldrb	r3, [r7, #15]
 800d84a:	3301      	adds	r3, #1
 800d84c:	73fb      	strb	r3, [r7, #15]
 800d84e:	7bfa      	ldrb	r2, [r7, #15]
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	685b      	ldr	r3, [r3, #4]
 800d854:	429a      	cmp	r2, r3
 800d856:	d3b9      	bcc.n	800d7cc <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d858:	2300      	movs	r3, #0
 800d85a:	73fb      	strb	r3, [r7, #15]
 800d85c:	e044      	b.n	800d8e8 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800d85e:	7bfa      	ldrb	r2, [r7, #15]
 800d860:	6879      	ldr	r1, [r7, #4]
 800d862:	4613      	mov	r3, r2
 800d864:	009b      	lsls	r3, r3, #2
 800d866:	4413      	add	r3, r2
 800d868:	00db      	lsls	r3, r3, #3
 800d86a:	440b      	add	r3, r1
 800d86c:	f203 1369 	addw	r3, r3, #361	; 0x169
 800d870:	2200      	movs	r2, #0
 800d872:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800d874:	7bfa      	ldrb	r2, [r7, #15]
 800d876:	6879      	ldr	r1, [r7, #4]
 800d878:	4613      	mov	r3, r2
 800d87a:	009b      	lsls	r3, r3, #2
 800d87c:	4413      	add	r3, r2
 800d87e:	00db      	lsls	r3, r3, #3
 800d880:	440b      	add	r3, r1
 800d882:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800d886:	7bfa      	ldrb	r2, [r7, #15]
 800d888:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800d88a:	7bfa      	ldrb	r2, [r7, #15]
 800d88c:	6879      	ldr	r1, [r7, #4]
 800d88e:	4613      	mov	r3, r2
 800d890:	009b      	lsls	r3, r3, #2
 800d892:	4413      	add	r3, r2
 800d894:	00db      	lsls	r3, r3, #3
 800d896:	440b      	add	r3, r1
 800d898:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800d89c:	2200      	movs	r2, #0
 800d89e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800d8a0:	7bfa      	ldrb	r2, [r7, #15]
 800d8a2:	6879      	ldr	r1, [r7, #4]
 800d8a4:	4613      	mov	r3, r2
 800d8a6:	009b      	lsls	r3, r3, #2
 800d8a8:	4413      	add	r3, r2
 800d8aa:	00db      	lsls	r3, r3, #3
 800d8ac:	440b      	add	r3, r1
 800d8ae:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800d8b6:	7bfa      	ldrb	r2, [r7, #15]
 800d8b8:	6879      	ldr	r1, [r7, #4]
 800d8ba:	4613      	mov	r3, r2
 800d8bc:	009b      	lsls	r3, r3, #2
 800d8be:	4413      	add	r3, r2
 800d8c0:	00db      	lsls	r3, r3, #3
 800d8c2:	440b      	add	r3, r1
 800d8c4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800d8cc:	7bfa      	ldrb	r2, [r7, #15]
 800d8ce:	6879      	ldr	r1, [r7, #4]
 800d8d0:	4613      	mov	r3, r2
 800d8d2:	009b      	lsls	r3, r3, #2
 800d8d4:	4413      	add	r3, r2
 800d8d6:	00db      	lsls	r3, r3, #3
 800d8d8:	440b      	add	r3, r1
 800d8da:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800d8de:	2200      	movs	r2, #0
 800d8e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d8e2:	7bfb      	ldrb	r3, [r7, #15]
 800d8e4:	3301      	adds	r3, #1
 800d8e6:	73fb      	strb	r3, [r7, #15]
 800d8e8:	7bfa      	ldrb	r2, [r7, #15]
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	685b      	ldr	r3, [r3, #4]
 800d8ee:	429a      	cmp	r2, r3
 800d8f0:	d3b5      	bcc.n	800d85e <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	603b      	str	r3, [r7, #0]
 800d8f8:	687e      	ldr	r6, [r7, #4]
 800d8fa:	466d      	mov	r5, sp
 800d8fc:	f106 0410 	add.w	r4, r6, #16
 800d900:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d902:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d904:	6823      	ldr	r3, [r4, #0]
 800d906:	602b      	str	r3, [r5, #0]
 800d908:	1d33      	adds	r3, r6, #4
 800d90a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d90c:	6838      	ldr	r0, [r7, #0]
 800d90e:	f002 f95b 	bl	800fbc8 <USB_DevInit>
 800d912:	4603      	mov	r3, r0
 800d914:	2b00      	cmp	r3, #0
 800d916:	d005      	beq.n	800d924 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	2202      	movs	r2, #2
 800d91c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800d920:	2301      	movs	r3, #1
 800d922:	e00d      	b.n	800d940 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2200      	movs	r2, #0
 800d928:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2201      	movs	r2, #1
 800d930:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	4618      	mov	r0, r3
 800d93a:	f004 fbf2 	bl	8012122 <USB_DevDisconnect>

  return HAL_OK;
 800d93e:	2300      	movs	r3, #0
}
 800d940:	4618      	mov	r0, r3
 800d942:	3714      	adds	r7, #20
 800d944:	46bd      	mov	sp, r7
 800d946:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d948 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b082      	sub	sp, #8
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800d956:	2b01      	cmp	r3, #1
 800d958:	d101      	bne.n	800d95e <HAL_PCD_Start+0x16>
 800d95a:	2302      	movs	r3, #2
 800d95c:	e016      	b.n	800d98c <HAL_PCD_Start+0x44>
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	2201      	movs	r2, #1
 800d962:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	4618      	mov	r0, r3
 800d96c:	f002 f8f0 	bl	800fb50 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800d970:	2101      	movs	r1, #1
 800d972:	6878      	ldr	r0, [r7, #4]
 800d974:	f007 fb69 	bl	801504a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	4618      	mov	r0, r3
 800d97e:	f004 fbc6 	bl	801210e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2200      	movs	r2, #0
 800d986:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800d98a:	2300      	movs	r3, #0
}
 800d98c:	4618      	mov	r0, r3
 800d98e:	3708      	adds	r7, #8
 800d990:	46bd      	mov	sp, r7
 800d992:	bd80      	pop	{r7, pc}

0800d994 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b088      	sub	sp, #32
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	f004 fbc8 	bl	8012136 <USB_ReadInterrupts>
 800d9a6:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800d9a8:	69bb      	ldr	r3, [r7, #24]
 800d9aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d003      	beq.n	800d9ba <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800d9b2:	6878      	ldr	r0, [r7, #4]
 800d9b4:	f000 fb48 	bl	800e048 <PCD_EP_ISR_Handler>

    return;
 800d9b8:	e119      	b.n	800dbee <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800d9ba:	69bb      	ldr	r3, [r7, #24]
 800d9bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d013      	beq.n	800d9ec <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800d9cc:	b29a      	uxth	r2, r3
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d9d6:	b292      	uxth	r2, r2
 800d9d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800d9dc:	6878      	ldr	r0, [r7, #4]
 800d9de:	f007 f926 	bl	8014c2e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800d9e2:	2100      	movs	r1, #0
 800d9e4:	6878      	ldr	r0, [r7, #4]
 800d9e6:	f000 f905 	bl	800dbf4 <HAL_PCD_SetAddress>

    return;
 800d9ea:	e100      	b.n	800dbee <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800d9ec:	69bb      	ldr	r3, [r7, #24]
 800d9ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d00c      	beq.n	800da10 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800d9fe:	b29a      	uxth	r2, r3
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800da08:	b292      	uxth	r2, r2
 800da0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800da0e:	e0ee      	b.n	800dbee <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800da10:	69bb      	ldr	r3, [r7, #24]
 800da12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800da16:	2b00      	cmp	r3, #0
 800da18:	d00c      	beq.n	800da34 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800da22:	b29a      	uxth	r2, r3
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800da2c:	b292      	uxth	r2, r2
 800da2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800da32:	e0dc      	b.n	800dbee <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800da34:	69bb      	ldr	r3, [r7, #24]
 800da36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d027      	beq.n	800da8e <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800da46:	b29a      	uxth	r2, r3
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	f022 0204 	bic.w	r2, r2, #4
 800da50:	b292      	uxth	r2, r2
 800da52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800da5e:	b29a      	uxth	r2, r3
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	f022 0208 	bic.w	r2, r2, #8
 800da68:	b292      	uxth	r2, r2
 800da6a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800da6e:	6878      	ldr	r0, [r7, #4]
 800da70:	f007 f916 	bl	8014ca0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800da7c:	b29a      	uxth	r2, r3
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800da86:	b292      	uxth	r2, r2
 800da88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800da8c:	e0af      	b.n	800dbee <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800da8e:	69bb      	ldr	r3, [r7, #24]
 800da90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800da94:	2b00      	cmp	r3, #0
 800da96:	f000 8083 	beq.w	800dba0 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800da9a:	2300      	movs	r3, #0
 800da9c:	77fb      	strb	r3, [r7, #31]
 800da9e:	e010      	b.n	800dac2 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	461a      	mov	r2, r3
 800daa6:	7ffb      	ldrb	r3, [r7, #31]
 800daa8:	009b      	lsls	r3, r3, #2
 800daaa:	441a      	add	r2, r3
 800daac:	7ffb      	ldrb	r3, [r7, #31]
 800daae:	8812      	ldrh	r2, [r2, #0]
 800dab0:	b292      	uxth	r2, r2
 800dab2:	005b      	lsls	r3, r3, #1
 800dab4:	3320      	adds	r3, #32
 800dab6:	443b      	add	r3, r7
 800dab8:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800dabc:	7ffb      	ldrb	r3, [r7, #31]
 800dabe:	3301      	adds	r3, #1
 800dac0:	77fb      	strb	r3, [r7, #31]
 800dac2:	7ffb      	ldrb	r3, [r7, #31]
 800dac4:	2b07      	cmp	r3, #7
 800dac6:	d9eb      	bls.n	800daa0 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800dad0:	b29a      	uxth	r2, r3
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	f042 0201 	orr.w	r2, r2, #1
 800dada:	b292      	uxth	r2, r2
 800dadc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800dae8:	b29a      	uxth	r2, r3
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	f022 0201 	bic.w	r2, r2, #1
 800daf2:	b292      	uxth	r2, r2
 800daf4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800daf8:	bf00      	nop
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800db02:	b29b      	uxth	r3, r3
 800db04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d0f6      	beq.n	800dafa <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800db14:	b29a      	uxth	r2, r3
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800db1e:	b292      	uxth	r2, r2
 800db20:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800db24:	2300      	movs	r3, #0
 800db26:	77fb      	strb	r3, [r7, #31]
 800db28:	e00f      	b.n	800db4a <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800db2a:	7ffb      	ldrb	r3, [r7, #31]
 800db2c:	687a      	ldr	r2, [r7, #4]
 800db2e:	6812      	ldr	r2, [r2, #0]
 800db30:	4611      	mov	r1, r2
 800db32:	7ffa      	ldrb	r2, [r7, #31]
 800db34:	0092      	lsls	r2, r2, #2
 800db36:	440a      	add	r2, r1
 800db38:	005b      	lsls	r3, r3, #1
 800db3a:	3320      	adds	r3, #32
 800db3c:	443b      	add	r3, r7
 800db3e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800db42:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800db44:	7ffb      	ldrb	r3, [r7, #31]
 800db46:	3301      	adds	r3, #1
 800db48:	77fb      	strb	r3, [r7, #31]
 800db4a:	7ffb      	ldrb	r3, [r7, #31]
 800db4c:	2b07      	cmp	r3, #7
 800db4e:	d9ec      	bls.n	800db2a <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800db58:	b29a      	uxth	r2, r3
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	f042 0208 	orr.w	r2, r2, #8
 800db62:	b292      	uxth	r2, r2
 800db64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800db70:	b29a      	uxth	r2, r3
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800db7a:	b292      	uxth	r2, r2
 800db7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800db88:	b29a      	uxth	r2, r3
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	f042 0204 	orr.w	r2, r2, #4
 800db92:	b292      	uxth	r2, r2
 800db94:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800db98:	6878      	ldr	r0, [r7, #4]
 800db9a:	f007 f867 	bl	8014c6c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800db9e:	e026      	b.n	800dbee <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800dba0:	69bb      	ldr	r3, [r7, #24]
 800dba2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d00f      	beq.n	800dbca <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800dbb2:	b29a      	uxth	r2, r3
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800dbbc:	b292      	uxth	r2, r2
 800dbbe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800dbc2:	6878      	ldr	r0, [r7, #4]
 800dbc4:	f007 f825 	bl	8014c12 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800dbc8:	e011      	b.n	800dbee <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800dbca:	69bb      	ldr	r3, [r7, #24]
 800dbcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d00c      	beq.n	800dbee <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800dbdc:	b29a      	uxth	r2, r3
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800dbe6:	b292      	uxth	r2, r2
 800dbe8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800dbec:	bf00      	nop
  }
}
 800dbee:	3720      	adds	r7, #32
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	bd80      	pop	{r7, pc}

0800dbf4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b082      	sub	sp, #8
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
 800dbfc:	460b      	mov	r3, r1
 800dbfe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800dc06:	2b01      	cmp	r3, #1
 800dc08:	d101      	bne.n	800dc0e <HAL_PCD_SetAddress+0x1a>
 800dc0a:	2302      	movs	r3, #2
 800dc0c:	e013      	b.n	800dc36 <HAL_PCD_SetAddress+0x42>
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	2201      	movs	r2, #1
 800dc12:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	78fa      	ldrb	r2, [r7, #3]
 800dc1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	78fa      	ldrb	r2, [r7, #3]
 800dc24:	4611      	mov	r1, r2
 800dc26:	4618      	mov	r0, r3
 800dc28:	f004 fa5e 	bl	80120e8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	2200      	movs	r2, #0
 800dc30:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800dc34:	2300      	movs	r3, #0
}
 800dc36:	4618      	mov	r0, r3
 800dc38:	3708      	adds	r7, #8
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	bd80      	pop	{r7, pc}

0800dc3e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800dc3e:	b580      	push	{r7, lr}
 800dc40:	b084      	sub	sp, #16
 800dc42:	af00      	add	r7, sp, #0
 800dc44:	6078      	str	r0, [r7, #4]
 800dc46:	4608      	mov	r0, r1
 800dc48:	4611      	mov	r1, r2
 800dc4a:	461a      	mov	r2, r3
 800dc4c:	4603      	mov	r3, r0
 800dc4e:	70fb      	strb	r3, [r7, #3]
 800dc50:	460b      	mov	r3, r1
 800dc52:	803b      	strh	r3, [r7, #0]
 800dc54:	4613      	mov	r3, r2
 800dc56:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800dc58:	2300      	movs	r3, #0
 800dc5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800dc5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	da0e      	bge.n	800dc82 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800dc64:	78fb      	ldrb	r3, [r7, #3]
 800dc66:	f003 0307 	and.w	r3, r3, #7
 800dc6a:	1c5a      	adds	r2, r3, #1
 800dc6c:	4613      	mov	r3, r2
 800dc6e:	009b      	lsls	r3, r3, #2
 800dc70:	4413      	add	r3, r2
 800dc72:	00db      	lsls	r3, r3, #3
 800dc74:	687a      	ldr	r2, [r7, #4]
 800dc76:	4413      	add	r3, r2
 800dc78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	2201      	movs	r2, #1
 800dc7e:	705a      	strb	r2, [r3, #1]
 800dc80:	e00e      	b.n	800dca0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800dc82:	78fb      	ldrb	r3, [r7, #3]
 800dc84:	f003 0207 	and.w	r2, r3, #7
 800dc88:	4613      	mov	r3, r2
 800dc8a:	009b      	lsls	r3, r3, #2
 800dc8c:	4413      	add	r3, r2
 800dc8e:	00db      	lsls	r3, r3, #3
 800dc90:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800dc94:	687a      	ldr	r2, [r7, #4]
 800dc96:	4413      	add	r3, r2
 800dc98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800dca0:	78fb      	ldrb	r3, [r7, #3]
 800dca2:	f003 0307 	and.w	r3, r3, #7
 800dca6:	b2da      	uxtb	r2, r3
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800dcac:	883a      	ldrh	r2, [r7, #0]
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	78ba      	ldrb	r2, [r7, #2]
 800dcb6:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800dcb8:	78bb      	ldrb	r3, [r7, #2]
 800dcba:	2b02      	cmp	r3, #2
 800dcbc:	d102      	bne.n	800dcc4 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800dcca:	2b01      	cmp	r3, #1
 800dccc:	d101      	bne.n	800dcd2 <HAL_PCD_EP_Open+0x94>
 800dcce:	2302      	movs	r3, #2
 800dcd0:	e00e      	b.n	800dcf0 <HAL_PCD_EP_Open+0xb2>
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	2201      	movs	r2, #1
 800dcd6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	68f9      	ldr	r1, [r7, #12]
 800dce0:	4618      	mov	r0, r3
 800dce2:	f001 ffa7 	bl	800fc34 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	2200      	movs	r2, #0
 800dcea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800dcee:	7afb      	ldrb	r3, [r7, #11]
}
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	3710      	adds	r7, #16
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	bd80      	pop	{r7, pc}

0800dcf8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b084      	sub	sp, #16
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
 800dd00:	460b      	mov	r3, r1
 800dd02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800dd04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	da0e      	bge.n	800dd2a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800dd0c:	78fb      	ldrb	r3, [r7, #3]
 800dd0e:	f003 0307 	and.w	r3, r3, #7
 800dd12:	1c5a      	adds	r2, r3, #1
 800dd14:	4613      	mov	r3, r2
 800dd16:	009b      	lsls	r3, r3, #2
 800dd18:	4413      	add	r3, r2
 800dd1a:	00db      	lsls	r3, r3, #3
 800dd1c:	687a      	ldr	r2, [r7, #4]
 800dd1e:	4413      	add	r3, r2
 800dd20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	2201      	movs	r2, #1
 800dd26:	705a      	strb	r2, [r3, #1]
 800dd28:	e00e      	b.n	800dd48 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800dd2a:	78fb      	ldrb	r3, [r7, #3]
 800dd2c:	f003 0207 	and.w	r2, r3, #7
 800dd30:	4613      	mov	r3, r2
 800dd32:	009b      	lsls	r3, r3, #2
 800dd34:	4413      	add	r3, r2
 800dd36:	00db      	lsls	r3, r3, #3
 800dd38:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800dd3c:	687a      	ldr	r2, [r7, #4]
 800dd3e:	4413      	add	r3, r2
 800dd40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	2200      	movs	r2, #0
 800dd46:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800dd48:	78fb      	ldrb	r3, [r7, #3]
 800dd4a:	f003 0307 	and.w	r3, r3, #7
 800dd4e:	b2da      	uxtb	r2, r3
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800dd5a:	2b01      	cmp	r3, #1
 800dd5c:	d101      	bne.n	800dd62 <HAL_PCD_EP_Close+0x6a>
 800dd5e:	2302      	movs	r3, #2
 800dd60:	e00e      	b.n	800dd80 <HAL_PCD_EP_Close+0x88>
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	2201      	movs	r2, #1
 800dd66:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	68f9      	ldr	r1, [r7, #12]
 800dd70:	4618      	mov	r0, r3
 800dd72:	f002 fb1f 	bl	80103b4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	2200      	movs	r2, #0
 800dd7a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800dd7e:	2300      	movs	r3, #0
}
 800dd80:	4618      	mov	r0, r3
 800dd82:	3710      	adds	r7, #16
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd80      	pop	{r7, pc}

0800dd88 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b086      	sub	sp, #24
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	60f8      	str	r0, [r7, #12]
 800dd90:	607a      	str	r2, [r7, #4]
 800dd92:	603b      	str	r3, [r7, #0]
 800dd94:	460b      	mov	r3, r1
 800dd96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800dd98:	7afb      	ldrb	r3, [r7, #11]
 800dd9a:	f003 0207 	and.w	r2, r3, #7
 800dd9e:	4613      	mov	r3, r2
 800dda0:	009b      	lsls	r3, r3, #2
 800dda2:	4413      	add	r3, r2
 800dda4:	00db      	lsls	r3, r3, #3
 800dda6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800ddaa:	68fa      	ldr	r2, [r7, #12]
 800ddac:	4413      	add	r3, r2
 800ddae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ddb0:	697b      	ldr	r3, [r7, #20]
 800ddb2:	687a      	ldr	r2, [r7, #4]
 800ddb4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800ddb6:	697b      	ldr	r3, [r7, #20]
 800ddb8:	683a      	ldr	r2, [r7, #0]
 800ddba:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800ddbc:	697b      	ldr	r3, [r7, #20]
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800ddc2:	697b      	ldr	r3, [r7, #20]
 800ddc4:	2200      	movs	r2, #0
 800ddc6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ddc8:	7afb      	ldrb	r3, [r7, #11]
 800ddca:	f003 0307 	and.w	r3, r3, #7
 800ddce:	b2da      	uxtb	r2, r3
 800ddd0:	697b      	ldr	r3, [r7, #20]
 800ddd2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	6979      	ldr	r1, [r7, #20]
 800ddda:	4618      	mov	r0, r3
 800dddc:	f002 fcd6 	bl	801078c <USB_EPStartXfer>

  return HAL_OK;
 800dde0:	2300      	movs	r3, #0
}
 800dde2:	4618      	mov	r0, r3
 800dde4:	3718      	adds	r7, #24
 800dde6:	46bd      	mov	sp, r7
 800dde8:	bd80      	pop	{r7, pc}

0800ddea <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800ddea:	b480      	push	{r7}
 800ddec:	b083      	sub	sp, #12
 800ddee:	af00      	add	r7, sp, #0
 800ddf0:	6078      	str	r0, [r7, #4]
 800ddf2:	460b      	mov	r3, r1
 800ddf4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800ddf6:	78fb      	ldrb	r3, [r7, #3]
 800ddf8:	f003 0207 	and.w	r2, r3, #7
 800ddfc:	6879      	ldr	r1, [r7, #4]
 800ddfe:	4613      	mov	r3, r2
 800de00:	009b      	lsls	r3, r3, #2
 800de02:	4413      	add	r3, r2
 800de04:	00db      	lsls	r3, r3, #3
 800de06:	440b      	add	r3, r1
 800de08:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800de0c:	681b      	ldr	r3, [r3, #0]
}
 800de0e:	4618      	mov	r0, r3
 800de10:	370c      	adds	r7, #12
 800de12:	46bd      	mov	sp, r7
 800de14:	bc80      	pop	{r7}
 800de16:	4770      	bx	lr

0800de18 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800de18:	b580      	push	{r7, lr}
 800de1a:	b086      	sub	sp, #24
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	60f8      	str	r0, [r7, #12]
 800de20:	607a      	str	r2, [r7, #4]
 800de22:	603b      	str	r3, [r7, #0]
 800de24:	460b      	mov	r3, r1
 800de26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800de28:	7afb      	ldrb	r3, [r7, #11]
 800de2a:	f003 0307 	and.w	r3, r3, #7
 800de2e:	1c5a      	adds	r2, r3, #1
 800de30:	4613      	mov	r3, r2
 800de32:	009b      	lsls	r3, r3, #2
 800de34:	4413      	add	r3, r2
 800de36:	00db      	lsls	r3, r3, #3
 800de38:	68fa      	ldr	r2, [r7, #12]
 800de3a:	4413      	add	r3, r2
 800de3c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800de3e:	697b      	ldr	r3, [r7, #20]
 800de40:	687a      	ldr	r2, [r7, #4]
 800de42:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800de44:	697b      	ldr	r3, [r7, #20]
 800de46:	683a      	ldr	r2, [r7, #0]
 800de48:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800de4a:	697b      	ldr	r3, [r7, #20]
 800de4c:	2201      	movs	r2, #1
 800de4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800de52:	697b      	ldr	r3, [r7, #20]
 800de54:	683a      	ldr	r2, [r7, #0]
 800de56:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800de58:	697b      	ldr	r3, [r7, #20]
 800de5a:	2200      	movs	r2, #0
 800de5c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800de5e:	697b      	ldr	r3, [r7, #20]
 800de60:	2201      	movs	r2, #1
 800de62:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800de64:	7afb      	ldrb	r3, [r7, #11]
 800de66:	f003 0307 	and.w	r3, r3, #7
 800de6a:	b2da      	uxtb	r2, r3
 800de6c:	697b      	ldr	r3, [r7, #20]
 800de6e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	6979      	ldr	r1, [r7, #20]
 800de76:	4618      	mov	r0, r3
 800de78:	f002 fc88 	bl	801078c <USB_EPStartXfer>

  return HAL_OK;
 800de7c:	2300      	movs	r3, #0
}
 800de7e:	4618      	mov	r0, r3
 800de80:	3718      	adds	r7, #24
 800de82:	46bd      	mov	sp, r7
 800de84:	bd80      	pop	{r7, pc}

0800de86 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800de86:	b580      	push	{r7, lr}
 800de88:	b084      	sub	sp, #16
 800de8a:	af00      	add	r7, sp, #0
 800de8c:	6078      	str	r0, [r7, #4]
 800de8e:	460b      	mov	r3, r1
 800de90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800de92:	78fb      	ldrb	r3, [r7, #3]
 800de94:	f003 0207 	and.w	r2, r3, #7
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	685b      	ldr	r3, [r3, #4]
 800de9c:	429a      	cmp	r2, r3
 800de9e:	d901      	bls.n	800dea4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800dea0:	2301      	movs	r3, #1
 800dea2:	e04c      	b.n	800df3e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800dea4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	da0e      	bge.n	800deca <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800deac:	78fb      	ldrb	r3, [r7, #3]
 800deae:	f003 0307 	and.w	r3, r3, #7
 800deb2:	1c5a      	adds	r2, r3, #1
 800deb4:	4613      	mov	r3, r2
 800deb6:	009b      	lsls	r3, r3, #2
 800deb8:	4413      	add	r3, r2
 800deba:	00db      	lsls	r3, r3, #3
 800debc:	687a      	ldr	r2, [r7, #4]
 800debe:	4413      	add	r3, r2
 800dec0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	2201      	movs	r2, #1
 800dec6:	705a      	strb	r2, [r3, #1]
 800dec8:	e00c      	b.n	800dee4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800deca:	78fa      	ldrb	r2, [r7, #3]
 800decc:	4613      	mov	r3, r2
 800dece:	009b      	lsls	r3, r3, #2
 800ded0:	4413      	add	r3, r2
 800ded2:	00db      	lsls	r3, r3, #3
 800ded4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800ded8:	687a      	ldr	r2, [r7, #4]
 800deda:	4413      	add	r3, r2
 800dedc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	2200      	movs	r2, #0
 800dee2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	2201      	movs	r2, #1
 800dee8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800deea:	78fb      	ldrb	r3, [r7, #3]
 800deec:	f003 0307 	and.w	r3, r3, #7
 800def0:	b2da      	uxtb	r2, r3
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800defc:	2b01      	cmp	r3, #1
 800defe:	d101      	bne.n	800df04 <HAL_PCD_EP_SetStall+0x7e>
 800df00:	2302      	movs	r3, #2
 800df02:	e01c      	b.n	800df3e <HAL_PCD_EP_SetStall+0xb8>
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	2201      	movs	r2, #1
 800df08:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	68f9      	ldr	r1, [r7, #12]
 800df12:	4618      	mov	r0, r3
 800df14:	f003 ffeb 	bl	8011eee <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800df18:	78fb      	ldrb	r3, [r7, #3]
 800df1a:	f003 0307 	and.w	r3, r3, #7
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d108      	bne.n	800df34 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	681a      	ldr	r2, [r3, #0]
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800df2c:	4619      	mov	r1, r3
 800df2e:	4610      	mov	r0, r2
 800df30:	f004 f910 	bl	8012154 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	2200      	movs	r2, #0
 800df38:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800df3c:	2300      	movs	r3, #0
}
 800df3e:	4618      	mov	r0, r3
 800df40:	3710      	adds	r7, #16
 800df42:	46bd      	mov	sp, r7
 800df44:	bd80      	pop	{r7, pc}

0800df46 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800df46:	b580      	push	{r7, lr}
 800df48:	b084      	sub	sp, #16
 800df4a:	af00      	add	r7, sp, #0
 800df4c:	6078      	str	r0, [r7, #4]
 800df4e:	460b      	mov	r3, r1
 800df50:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800df52:	78fb      	ldrb	r3, [r7, #3]
 800df54:	f003 020f 	and.w	r2, r3, #15
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	685b      	ldr	r3, [r3, #4]
 800df5c:	429a      	cmp	r2, r3
 800df5e:	d901      	bls.n	800df64 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800df60:	2301      	movs	r3, #1
 800df62:	e040      	b.n	800dfe6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800df64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	da0e      	bge.n	800df8a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800df6c:	78fb      	ldrb	r3, [r7, #3]
 800df6e:	f003 0307 	and.w	r3, r3, #7
 800df72:	1c5a      	adds	r2, r3, #1
 800df74:	4613      	mov	r3, r2
 800df76:	009b      	lsls	r3, r3, #2
 800df78:	4413      	add	r3, r2
 800df7a:	00db      	lsls	r3, r3, #3
 800df7c:	687a      	ldr	r2, [r7, #4]
 800df7e:	4413      	add	r3, r2
 800df80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	2201      	movs	r2, #1
 800df86:	705a      	strb	r2, [r3, #1]
 800df88:	e00e      	b.n	800dfa8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800df8a:	78fb      	ldrb	r3, [r7, #3]
 800df8c:	f003 0207 	and.w	r2, r3, #7
 800df90:	4613      	mov	r3, r2
 800df92:	009b      	lsls	r3, r3, #2
 800df94:	4413      	add	r3, r2
 800df96:	00db      	lsls	r3, r3, #3
 800df98:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800df9c:	687a      	ldr	r2, [r7, #4]
 800df9e:	4413      	add	r3, r2
 800dfa0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	2200      	movs	r2, #0
 800dfac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800dfae:	78fb      	ldrb	r3, [r7, #3]
 800dfb0:	f003 0307 	and.w	r3, r3, #7
 800dfb4:	b2da      	uxtb	r2, r3
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800dfc0:	2b01      	cmp	r3, #1
 800dfc2:	d101      	bne.n	800dfc8 <HAL_PCD_EP_ClrStall+0x82>
 800dfc4:	2302      	movs	r3, #2
 800dfc6:	e00e      	b.n	800dfe6 <HAL_PCD_EP_ClrStall+0xa0>
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	2201      	movs	r2, #1
 800dfcc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	68f9      	ldr	r1, [r7, #12]
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	f003 ffd9 	bl	8011f8e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	2200      	movs	r2, #0
 800dfe0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800dfe4:	2300      	movs	r3, #0
}
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	3710      	adds	r7, #16
 800dfea:	46bd      	mov	sp, r7
 800dfec:	bd80      	pop	{r7, pc}

0800dfee <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800dfee:	b580      	push	{r7, lr}
 800dff0:	b082      	sub	sp, #8
 800dff2:	af00      	add	r7, sp, #0
 800dff4:	6078      	str	r0, [r7, #4]
 800dff6:	460b      	mov	r3, r1
 800dff8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800e000:	2b01      	cmp	r3, #1
 800e002:	d101      	bne.n	800e008 <HAL_PCD_EP_Flush+0x1a>
 800e004:	2302      	movs	r3, #2
 800e006:	e01b      	b.n	800e040 <HAL_PCD_EP_Flush+0x52>
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	2201      	movs	r2, #1
 800e00c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  if ((ep_addr & 0x80U) == 0x80U)
 800e010:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e014:	2b00      	cmp	r3, #0
 800e016:	da09      	bge.n	800e02c <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681a      	ldr	r2, [r3, #0]
 800e01c:	78fb      	ldrb	r3, [r7, #3]
 800e01e:	f003 0307 	and.w	r3, r3, #7
 800e022:	4619      	mov	r1, r3
 800e024:	4610      	mov	r0, r2
 800e026:	f001 fdef 	bl	800fc08 <USB_FlushTxFifo>
 800e02a:	e004      	b.n	800e036 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	4618      	mov	r0, r3
 800e032:	f001 fdf4 	bl	800fc1e <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	2200      	movs	r2, #0
 800e03a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800e03e:	2300      	movs	r3, #0
}
 800e040:	4618      	mov	r0, r3
 800e042:	3708      	adds	r7, #8
 800e044:	46bd      	mov	sp, r7
 800e046:	bd80      	pop	{r7, pc}

0800e048 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b096      	sub	sp, #88	; 0x58
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800e050:	e3bf      	b.n	800e7d2 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800e05a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800e05e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e062:	b2db      	uxtb	r3, r3
 800e064:	f003 030f 	and.w	r3, r3, #15
 800e068:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800e06c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800e070:	2b00      	cmp	r3, #0
 800e072:	f040 8179 	bne.w	800e368 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800e076:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e07a:	f003 0310 	and.w	r3, r3, #16
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d152      	bne.n	800e128 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	881b      	ldrh	r3, [r3, #0]
 800e088:	b29b      	uxth	r3, r3
 800e08a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800e08e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e092:	81fb      	strh	r3, [r7, #14]
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	681a      	ldr	r2, [r3, #0]
 800e098:	89fb      	ldrh	r3, [r7, #14]
 800e09a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e09e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e0a2:	b29b      	uxth	r3, r3
 800e0a4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	3328      	adds	r3, #40	; 0x28
 800e0aa:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e0b4:	b29b      	uxth	r3, r3
 800e0b6:	461a      	mov	r2, r3
 800e0b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e0ba:	781b      	ldrb	r3, [r3, #0]
 800e0bc:	00db      	lsls	r3, r3, #3
 800e0be:	4413      	add	r3, r2
 800e0c0:	3302      	adds	r3, #2
 800e0c2:	005b      	lsls	r3, r3, #1
 800e0c4:	687a      	ldr	r2, [r7, #4]
 800e0c6:	6812      	ldr	r2, [r2, #0]
 800e0c8:	4413      	add	r3, r2
 800e0ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e0ce:	881b      	ldrh	r3, [r3, #0]
 800e0d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800e0d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e0d6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800e0d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e0da:	695a      	ldr	r2, [r3, #20]
 800e0dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e0de:	69db      	ldr	r3, [r3, #28]
 800e0e0:	441a      	add	r2, r3
 800e0e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e0e4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800e0e6:	2100      	movs	r1, #0
 800e0e8:	6878      	ldr	r0, [r7, #4]
 800e0ea:	f006 fd78 	bl	8014bde <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e0f4:	b2db      	uxtb	r3, r3
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	f000 836b 	beq.w	800e7d2 <PCD_EP_ISR_Handler+0x78a>
 800e0fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e0fe:	699b      	ldr	r3, [r3, #24]
 800e100:	2b00      	cmp	r3, #0
 800e102:	f040 8366 	bne.w	800e7d2 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e10c:	b2db      	uxtb	r3, r3
 800e10e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e112:	b2da      	uxtb	r2, r3
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	b292      	uxth	r2, r2
 800e11a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	2200      	movs	r2, #0
 800e122:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800e126:	e354      	b.n	800e7d2 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800e12e:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	881b      	ldrh	r3, [r3, #0]
 800e136:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800e13a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800e13e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e142:	2b00      	cmp	r3, #0
 800e144:	d034      	beq.n	800e1b0 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e14e:	b29b      	uxth	r3, r3
 800e150:	461a      	mov	r2, r3
 800e152:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e154:	781b      	ldrb	r3, [r3, #0]
 800e156:	00db      	lsls	r3, r3, #3
 800e158:	4413      	add	r3, r2
 800e15a:	3306      	adds	r3, #6
 800e15c:	005b      	lsls	r3, r3, #1
 800e15e:	687a      	ldr	r2, [r7, #4]
 800e160:	6812      	ldr	r2, [r2, #0]
 800e162:	4413      	add	r3, r2
 800e164:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e168:	881b      	ldrh	r3, [r3, #0]
 800e16a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800e16e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e170:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	6818      	ldr	r0, [r3, #0]
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800e17c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e17e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800e180:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e182:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800e184:	b29b      	uxth	r3, r3
 800e186:	f004 f835 	bl	80121f4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	881b      	ldrh	r3, [r3, #0]
 800e190:	b29a      	uxth	r2, r3
 800e192:	f640 738f 	movw	r3, #3983	; 0xf8f
 800e196:	4013      	ands	r3, r2
 800e198:	823b      	strh	r3, [r7, #16]
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	8a3a      	ldrh	r2, [r7, #16]
 800e1a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e1a4:	b292      	uxth	r2, r2
 800e1a6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800e1a8:	6878      	ldr	r0, [r7, #4]
 800e1aa:	f006 fceb 	bl	8014b84 <HAL_PCD_SetupStageCallback>
 800e1ae:	e310      	b.n	800e7d2 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800e1b0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	f280 830c 	bge.w	800e7d2 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	881b      	ldrh	r3, [r3, #0]
 800e1c0:	b29a      	uxth	r2, r3
 800e1c2:	f640 738f 	movw	r3, #3983	; 0xf8f
 800e1c6:	4013      	ands	r3, r2
 800e1c8:	83fb      	strh	r3, [r7, #30]
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	8bfa      	ldrh	r2, [r7, #30]
 800e1d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e1d4:	b292      	uxth	r2, r2
 800e1d6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e1e0:	b29b      	uxth	r3, r3
 800e1e2:	461a      	mov	r2, r3
 800e1e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e1e6:	781b      	ldrb	r3, [r3, #0]
 800e1e8:	00db      	lsls	r3, r3, #3
 800e1ea:	4413      	add	r3, r2
 800e1ec:	3306      	adds	r3, #6
 800e1ee:	005b      	lsls	r3, r3, #1
 800e1f0:	687a      	ldr	r2, [r7, #4]
 800e1f2:	6812      	ldr	r2, [r2, #0]
 800e1f4:	4413      	add	r3, r2
 800e1f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e1fa:	881b      	ldrh	r3, [r3, #0]
 800e1fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800e200:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e202:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800e204:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e206:	69db      	ldr	r3, [r3, #28]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d019      	beq.n	800e240 <PCD_EP_ISR_Handler+0x1f8>
 800e20c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e20e:	695b      	ldr	r3, [r3, #20]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d015      	beq.n	800e240 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	6818      	ldr	r0, [r3, #0]
 800e218:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e21a:	6959      	ldr	r1, [r3, #20]
 800e21c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e21e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800e220:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e222:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800e224:	b29b      	uxth	r3, r3
 800e226:	f003 ffe5 	bl	80121f4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800e22a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e22c:	695a      	ldr	r2, [r3, #20]
 800e22e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e230:	69db      	ldr	r3, [r3, #28]
 800e232:	441a      	add	r2, r3
 800e234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e236:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800e238:	2100      	movs	r1, #0
 800e23a:	6878      	ldr	r0, [r7, #4]
 800e23c:	f006 fcb4 	bl	8014ba8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	881b      	ldrh	r3, [r3, #0]
 800e246:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800e24a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800e24e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e252:	2b00      	cmp	r3, #0
 800e254:	f040 82bd 	bne.w	800e7d2 <PCD_EP_ISR_Handler+0x78a>
 800e258:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800e25c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800e260:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e264:	f000 82b5 	beq.w	800e7d2 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	61bb      	str	r3, [r7, #24]
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e276:	b29b      	uxth	r3, r3
 800e278:	461a      	mov	r2, r3
 800e27a:	69bb      	ldr	r3, [r7, #24]
 800e27c:	4413      	add	r3, r2
 800e27e:	61bb      	str	r3, [r7, #24]
 800e280:	69bb      	ldr	r3, [r7, #24]
 800e282:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800e286:	617b      	str	r3, [r7, #20]
 800e288:	697b      	ldr	r3, [r7, #20]
 800e28a:	881b      	ldrh	r3, [r3, #0]
 800e28c:	b29b      	uxth	r3, r3
 800e28e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e292:	b29a      	uxth	r2, r3
 800e294:	697b      	ldr	r3, [r7, #20]
 800e296:	801a      	strh	r2, [r3, #0]
 800e298:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e29a:	691b      	ldr	r3, [r3, #16]
 800e29c:	2b3e      	cmp	r3, #62	; 0x3e
 800e29e:	d91d      	bls.n	800e2dc <PCD_EP_ISR_Handler+0x294>
 800e2a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e2a2:	691b      	ldr	r3, [r3, #16]
 800e2a4:	095b      	lsrs	r3, r3, #5
 800e2a6:	647b      	str	r3, [r7, #68]	; 0x44
 800e2a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e2aa:	691b      	ldr	r3, [r3, #16]
 800e2ac:	f003 031f 	and.w	r3, r3, #31
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d102      	bne.n	800e2ba <PCD_EP_ISR_Handler+0x272>
 800e2b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e2b6:	3b01      	subs	r3, #1
 800e2b8:	647b      	str	r3, [r7, #68]	; 0x44
 800e2ba:	697b      	ldr	r3, [r7, #20]
 800e2bc:	881b      	ldrh	r3, [r3, #0]
 800e2be:	b29a      	uxth	r2, r3
 800e2c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e2c2:	b29b      	uxth	r3, r3
 800e2c4:	029b      	lsls	r3, r3, #10
 800e2c6:	b29b      	uxth	r3, r3
 800e2c8:	4313      	orrs	r3, r2
 800e2ca:	b29b      	uxth	r3, r3
 800e2cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e2d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e2d4:	b29a      	uxth	r2, r3
 800e2d6:	697b      	ldr	r3, [r7, #20]
 800e2d8:	801a      	strh	r2, [r3, #0]
 800e2da:	e026      	b.n	800e32a <PCD_EP_ISR_Handler+0x2e2>
 800e2dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e2de:	691b      	ldr	r3, [r3, #16]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d10a      	bne.n	800e2fa <PCD_EP_ISR_Handler+0x2b2>
 800e2e4:	697b      	ldr	r3, [r7, #20]
 800e2e6:	881b      	ldrh	r3, [r3, #0]
 800e2e8:	b29b      	uxth	r3, r3
 800e2ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e2ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e2f2:	b29a      	uxth	r2, r3
 800e2f4:	697b      	ldr	r3, [r7, #20]
 800e2f6:	801a      	strh	r2, [r3, #0]
 800e2f8:	e017      	b.n	800e32a <PCD_EP_ISR_Handler+0x2e2>
 800e2fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e2fc:	691b      	ldr	r3, [r3, #16]
 800e2fe:	085b      	lsrs	r3, r3, #1
 800e300:	647b      	str	r3, [r7, #68]	; 0x44
 800e302:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e304:	691b      	ldr	r3, [r3, #16]
 800e306:	f003 0301 	and.w	r3, r3, #1
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d002      	beq.n	800e314 <PCD_EP_ISR_Handler+0x2cc>
 800e30e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e310:	3301      	adds	r3, #1
 800e312:	647b      	str	r3, [r7, #68]	; 0x44
 800e314:	697b      	ldr	r3, [r7, #20]
 800e316:	881b      	ldrh	r3, [r3, #0]
 800e318:	b29a      	uxth	r2, r3
 800e31a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e31c:	b29b      	uxth	r3, r3
 800e31e:	029b      	lsls	r3, r3, #10
 800e320:	b29b      	uxth	r3, r3
 800e322:	4313      	orrs	r3, r2
 800e324:	b29a      	uxth	r2, r3
 800e326:	697b      	ldr	r3, [r7, #20]
 800e328:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	881b      	ldrh	r3, [r3, #0]
 800e330:	b29b      	uxth	r3, r3
 800e332:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e33a:	827b      	strh	r3, [r7, #18]
 800e33c:	8a7b      	ldrh	r3, [r7, #18]
 800e33e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800e342:	827b      	strh	r3, [r7, #18]
 800e344:	8a7b      	ldrh	r3, [r7, #18]
 800e346:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800e34a:	827b      	strh	r3, [r7, #18]
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681a      	ldr	r2, [r3, #0]
 800e350:	8a7b      	ldrh	r3, [r7, #18]
 800e352:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e356:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e35a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e35e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e362:	b29b      	uxth	r3, r3
 800e364:	8013      	strh	r3, [r2, #0]
 800e366:	e234      	b.n	800e7d2 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	461a      	mov	r2, r3
 800e36e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800e372:	009b      	lsls	r3, r3, #2
 800e374:	4413      	add	r3, r2
 800e376:	881b      	ldrh	r3, [r3, #0]
 800e378:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800e37c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800e380:	2b00      	cmp	r3, #0
 800e382:	f280 80fc 	bge.w	800e57e <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	461a      	mov	r2, r3
 800e38c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800e390:	009b      	lsls	r3, r3, #2
 800e392:	4413      	add	r3, r2
 800e394:	881b      	ldrh	r3, [r3, #0]
 800e396:	b29a      	uxth	r2, r3
 800e398:	f640 738f 	movw	r3, #3983	; 0xf8f
 800e39c:	4013      	ands	r3, r2
 800e39e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	461a      	mov	r2, r3
 800e3a8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800e3ac:	009b      	lsls	r3, r3, #2
 800e3ae:	4413      	add	r3, r2
 800e3b0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800e3b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e3b8:	b292      	uxth	r2, r2
 800e3ba:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800e3bc:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800e3c0:	4613      	mov	r3, r2
 800e3c2:	009b      	lsls	r3, r3, #2
 800e3c4:	4413      	add	r3, r2
 800e3c6:	00db      	lsls	r3, r3, #3
 800e3c8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800e3cc:	687a      	ldr	r2, [r7, #4]
 800e3ce:	4413      	add	r3, r2
 800e3d0:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800e3d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e3d4:	7b1b      	ldrb	r3, [r3, #12]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d125      	bne.n	800e426 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e3e2:	b29b      	uxth	r3, r3
 800e3e4:	461a      	mov	r2, r3
 800e3e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e3e8:	781b      	ldrb	r3, [r3, #0]
 800e3ea:	00db      	lsls	r3, r3, #3
 800e3ec:	4413      	add	r3, r2
 800e3ee:	3306      	adds	r3, #6
 800e3f0:	005b      	lsls	r3, r3, #1
 800e3f2:	687a      	ldr	r2, [r7, #4]
 800e3f4:	6812      	ldr	r2, [r2, #0]
 800e3f6:	4413      	add	r3, r2
 800e3f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e3fc:	881b      	ldrh	r3, [r3, #0]
 800e3fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e402:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800e406:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	f000 8092 	beq.w	800e534 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	6818      	ldr	r0, [r3, #0]
 800e414:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e416:	6959      	ldr	r1, [r3, #20]
 800e418:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e41a:	88da      	ldrh	r2, [r3, #6]
 800e41c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800e420:	f003 fee8 	bl	80121f4 <USB_ReadPMA>
 800e424:	e086      	b.n	800e534 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800e426:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e428:	78db      	ldrb	r3, [r3, #3]
 800e42a:	2b02      	cmp	r3, #2
 800e42c:	d10a      	bne.n	800e444 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800e42e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800e432:	461a      	mov	r2, r3
 800e434:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e436:	6878      	ldr	r0, [r7, #4]
 800e438:	f000 f9d9 	bl	800e7ee <HAL_PCD_EP_DB_Receive>
 800e43c:	4603      	mov	r3, r0
 800e43e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800e442:	e077      	b.n	800e534 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	461a      	mov	r2, r3
 800e44a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e44c:	781b      	ldrb	r3, [r3, #0]
 800e44e:	009b      	lsls	r3, r3, #2
 800e450:	4413      	add	r3, r2
 800e452:	881b      	ldrh	r3, [r3, #0]
 800e454:	b29b      	uxth	r3, r3
 800e456:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e45a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e45e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	461a      	mov	r2, r3
 800e468:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e46a:	781b      	ldrb	r3, [r3, #0]
 800e46c:	009b      	lsls	r3, r3, #2
 800e46e:	441a      	add	r2, r3
 800e470:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800e474:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e478:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e47c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e480:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e484:	b29b      	uxth	r3, r3
 800e486:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	461a      	mov	r2, r3
 800e48e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e490:	781b      	ldrb	r3, [r3, #0]
 800e492:	009b      	lsls	r3, r3, #2
 800e494:	4413      	add	r3, r2
 800e496:	881b      	ldrh	r3, [r3, #0]
 800e498:	b29b      	uxth	r3, r3
 800e49a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d024      	beq.n	800e4ec <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e4aa:	b29b      	uxth	r3, r3
 800e4ac:	461a      	mov	r2, r3
 800e4ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e4b0:	781b      	ldrb	r3, [r3, #0]
 800e4b2:	00db      	lsls	r3, r3, #3
 800e4b4:	4413      	add	r3, r2
 800e4b6:	3302      	adds	r3, #2
 800e4b8:	005b      	lsls	r3, r3, #1
 800e4ba:	687a      	ldr	r2, [r7, #4]
 800e4bc:	6812      	ldr	r2, [r2, #0]
 800e4be:	4413      	add	r3, r2
 800e4c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e4c4:	881b      	ldrh	r3, [r3, #0]
 800e4c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e4ca:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800e4ce:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d02e      	beq.n	800e534 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	6818      	ldr	r0, [r3, #0]
 800e4da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e4dc:	6959      	ldr	r1, [r3, #20]
 800e4de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e4e0:	891a      	ldrh	r2, [r3, #8]
 800e4e2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800e4e6:	f003 fe85 	bl	80121f4 <USB_ReadPMA>
 800e4ea:	e023      	b.n	800e534 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e4f4:	b29b      	uxth	r3, r3
 800e4f6:	461a      	mov	r2, r3
 800e4f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e4fa:	781b      	ldrb	r3, [r3, #0]
 800e4fc:	00db      	lsls	r3, r3, #3
 800e4fe:	4413      	add	r3, r2
 800e500:	3306      	adds	r3, #6
 800e502:	005b      	lsls	r3, r3, #1
 800e504:	687a      	ldr	r2, [r7, #4]
 800e506:	6812      	ldr	r2, [r2, #0]
 800e508:	4413      	add	r3, r2
 800e50a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e50e:	881b      	ldrh	r3, [r3, #0]
 800e510:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e514:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800e518:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d009      	beq.n	800e534 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	6818      	ldr	r0, [r3, #0]
 800e524:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e526:	6959      	ldr	r1, [r3, #20]
 800e528:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e52a:	895a      	ldrh	r2, [r3, #10]
 800e52c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800e530:	f003 fe60 	bl	80121f4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800e534:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e536:	69da      	ldr	r2, [r3, #28]
 800e538:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800e53c:	441a      	add	r2, r3
 800e53e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e540:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800e542:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e544:	695a      	ldr	r2, [r3, #20]
 800e546:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800e54a:	441a      	add	r2, r3
 800e54c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e54e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800e550:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e552:	699b      	ldr	r3, [r3, #24]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d005      	beq.n	800e564 <PCD_EP_ISR_Handler+0x51c>
 800e558:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800e55c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e55e:	691b      	ldr	r3, [r3, #16]
 800e560:	429a      	cmp	r2, r3
 800e562:	d206      	bcs.n	800e572 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800e564:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e566:	781b      	ldrb	r3, [r3, #0]
 800e568:	4619      	mov	r1, r3
 800e56a:	6878      	ldr	r0, [r7, #4]
 800e56c:	f006 fb1c 	bl	8014ba8 <HAL_PCD_DataOutStageCallback>
 800e570:	e005      	b.n	800e57e <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e578:	4618      	mov	r0, r3
 800e57a:	f002 f907 	bl	801078c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800e57e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800e582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e586:	2b00      	cmp	r3, #0
 800e588:	f000 8123 	beq.w	800e7d2 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 800e58c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800e590:	1c5a      	adds	r2, r3, #1
 800e592:	4613      	mov	r3, r2
 800e594:	009b      	lsls	r3, r3, #2
 800e596:	4413      	add	r3, r2
 800e598:	00db      	lsls	r3, r3, #3
 800e59a:	687a      	ldr	r2, [r7, #4]
 800e59c:	4413      	add	r3, r2
 800e59e:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	461a      	mov	r2, r3
 800e5a6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800e5aa:	009b      	lsls	r3, r3, #2
 800e5ac:	4413      	add	r3, r2
 800e5ae:	881b      	ldrh	r3, [r3, #0]
 800e5b0:	b29b      	uxth	r3, r3
 800e5b2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800e5b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e5ba:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	461a      	mov	r2, r3
 800e5c4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800e5c8:	009b      	lsls	r3, r3, #2
 800e5ca:	441a      	add	r2, r3
 800e5cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e5d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e5d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e5d8:	b29b      	uxth	r3, r3
 800e5da:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800e5dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e5de:	78db      	ldrb	r3, [r3, #3]
 800e5e0:	2b01      	cmp	r3, #1
 800e5e2:	f040 80a2 	bne.w	800e72a <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 800e5e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800e5ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e5ee:	7b1b      	ldrb	r3, [r3, #12]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	f000 8093 	beq.w	800e71c <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800e5f6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800e5fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d046      	beq.n	800e690 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800e602:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e604:	785b      	ldrb	r3, [r3, #1]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d126      	bne.n	800e658 <PCD_EP_ISR_Handler+0x610>
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	627b      	str	r3, [r7, #36]	; 0x24
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e618:	b29b      	uxth	r3, r3
 800e61a:	461a      	mov	r2, r3
 800e61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e61e:	4413      	add	r3, r2
 800e620:	627b      	str	r3, [r7, #36]	; 0x24
 800e622:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e624:	781b      	ldrb	r3, [r3, #0]
 800e626:	011a      	lsls	r2, r3, #4
 800e628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e62a:	4413      	add	r3, r2
 800e62c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800e630:	623b      	str	r3, [r7, #32]
 800e632:	6a3b      	ldr	r3, [r7, #32]
 800e634:	881b      	ldrh	r3, [r3, #0]
 800e636:	b29b      	uxth	r3, r3
 800e638:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e63c:	b29a      	uxth	r2, r3
 800e63e:	6a3b      	ldr	r3, [r7, #32]
 800e640:	801a      	strh	r2, [r3, #0]
 800e642:	6a3b      	ldr	r3, [r7, #32]
 800e644:	881b      	ldrh	r3, [r3, #0]
 800e646:	b29b      	uxth	r3, r3
 800e648:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e64c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e650:	b29a      	uxth	r2, r3
 800e652:	6a3b      	ldr	r3, [r7, #32]
 800e654:	801a      	strh	r2, [r3, #0]
 800e656:	e061      	b.n	800e71c <PCD_EP_ISR_Handler+0x6d4>
 800e658:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e65a:	785b      	ldrb	r3, [r3, #1]
 800e65c:	2b01      	cmp	r3, #1
 800e65e:	d15d      	bne.n	800e71c <PCD_EP_ISR_Handler+0x6d4>
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e66e:	b29b      	uxth	r3, r3
 800e670:	461a      	mov	r2, r3
 800e672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e674:	4413      	add	r3, r2
 800e676:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e678:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e67a:	781b      	ldrb	r3, [r3, #0]
 800e67c:	011a      	lsls	r2, r3, #4
 800e67e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e680:	4413      	add	r3, r2
 800e682:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800e686:	62bb      	str	r3, [r7, #40]	; 0x28
 800e688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e68a:	2200      	movs	r2, #0
 800e68c:	801a      	strh	r2, [r3, #0]
 800e68e:	e045      	b.n	800e71c <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e696:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e698:	785b      	ldrb	r3, [r3, #1]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d126      	bne.n	800e6ec <PCD_EP_ISR_Handler+0x6a4>
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	637b      	str	r3, [r7, #52]	; 0x34
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e6ac:	b29b      	uxth	r3, r3
 800e6ae:	461a      	mov	r2, r3
 800e6b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6b2:	4413      	add	r3, r2
 800e6b4:	637b      	str	r3, [r7, #52]	; 0x34
 800e6b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e6b8:	781b      	ldrb	r3, [r3, #0]
 800e6ba:	011a      	lsls	r2, r3, #4
 800e6bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6be:	4413      	add	r3, r2
 800e6c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800e6c4:	633b      	str	r3, [r7, #48]	; 0x30
 800e6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6c8:	881b      	ldrh	r3, [r3, #0]
 800e6ca:	b29b      	uxth	r3, r3
 800e6cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e6d0:	b29a      	uxth	r2, r3
 800e6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6d4:	801a      	strh	r2, [r3, #0]
 800e6d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6d8:	881b      	ldrh	r3, [r3, #0]
 800e6da:	b29b      	uxth	r3, r3
 800e6dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e6e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e6e4:	b29a      	uxth	r2, r3
 800e6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6e8:	801a      	strh	r2, [r3, #0]
 800e6ea:	e017      	b.n	800e71c <PCD_EP_ISR_Handler+0x6d4>
 800e6ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e6ee:	785b      	ldrb	r3, [r3, #1]
 800e6f0:	2b01      	cmp	r3, #1
 800e6f2:	d113      	bne.n	800e71c <PCD_EP_ISR_Handler+0x6d4>
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e6fc:	b29b      	uxth	r3, r3
 800e6fe:	461a      	mov	r2, r3
 800e700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e702:	4413      	add	r3, r2
 800e704:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e706:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e708:	781b      	ldrb	r3, [r3, #0]
 800e70a:	011a      	lsls	r2, r3, #4
 800e70c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e70e:	4413      	add	r3, r2
 800e710:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800e714:	63bb      	str	r3, [r7, #56]	; 0x38
 800e716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e718:	2200      	movs	r2, #0
 800e71a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800e71c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e71e:	781b      	ldrb	r3, [r3, #0]
 800e720:	4619      	mov	r1, r3
 800e722:	6878      	ldr	r0, [r7, #4]
 800e724:	f006 fa5b 	bl	8014bde <HAL_PCD_DataInStageCallback>
 800e728:	e053      	b.n	800e7d2 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800e72a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800e72e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e732:	2b00      	cmp	r3, #0
 800e734:	d146      	bne.n	800e7c4 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e73e:	b29b      	uxth	r3, r3
 800e740:	461a      	mov	r2, r3
 800e742:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e744:	781b      	ldrb	r3, [r3, #0]
 800e746:	00db      	lsls	r3, r3, #3
 800e748:	4413      	add	r3, r2
 800e74a:	3302      	adds	r3, #2
 800e74c:	005b      	lsls	r3, r3, #1
 800e74e:	687a      	ldr	r2, [r7, #4]
 800e750:	6812      	ldr	r2, [r2, #0]
 800e752:	4413      	add	r3, r2
 800e754:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e758:	881b      	ldrh	r3, [r3, #0]
 800e75a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e75e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800e762:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e764:	699a      	ldr	r2, [r3, #24]
 800e766:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e76a:	429a      	cmp	r2, r3
 800e76c:	d907      	bls.n	800e77e <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 800e76e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e770:	699a      	ldr	r2, [r3, #24]
 800e772:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e776:	1ad2      	subs	r2, r2, r3
 800e778:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e77a:	619a      	str	r2, [r3, #24]
 800e77c:	e002      	b.n	800e784 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 800e77e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e780:	2200      	movs	r2, #0
 800e782:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800e784:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e786:	699b      	ldr	r3, [r3, #24]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d106      	bne.n	800e79a <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800e78c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e78e:	781b      	ldrb	r3, [r3, #0]
 800e790:	4619      	mov	r1, r3
 800e792:	6878      	ldr	r0, [r7, #4]
 800e794:	f006 fa23 	bl	8014bde <HAL_PCD_DataInStageCallback>
 800e798:	e01b      	b.n	800e7d2 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800e79a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e79c:	695a      	ldr	r2, [r3, #20]
 800e79e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e7a2:	441a      	add	r2, r3
 800e7a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e7a6:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800e7a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e7aa:	69da      	ldr	r2, [r3, #28]
 800e7ac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e7b0:	441a      	add	r2, r3
 800e7b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e7b4:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e7bc:	4618      	mov	r0, r3
 800e7be:	f001 ffe5 	bl	801078c <USB_EPStartXfer>
 800e7c2:	e006      	b.n	800e7d2 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800e7c4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800e7c8:	461a      	mov	r2, r3
 800e7ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e7cc:	6878      	ldr	r0, [r7, #4]
 800e7ce:	f000 f91b 	bl	800ea08 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800e7da:	b29b      	uxth	r3, r3
 800e7dc:	b21b      	sxth	r3, r3
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	f6ff ac37 	blt.w	800e052 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800e7e4:	2300      	movs	r3, #0
}
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	3758      	adds	r7, #88	; 0x58
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	bd80      	pop	{r7, pc}

0800e7ee <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800e7ee:	b580      	push	{r7, lr}
 800e7f0:	b088      	sub	sp, #32
 800e7f2:	af00      	add	r7, sp, #0
 800e7f4:	60f8      	str	r0, [r7, #12]
 800e7f6:	60b9      	str	r1, [r7, #8]
 800e7f8:	4613      	mov	r3, r2
 800e7fa:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800e7fc:	88fb      	ldrh	r3, [r7, #6]
 800e7fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e802:	2b00      	cmp	r3, #0
 800e804:	d07e      	beq.n	800e904 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e80e:	b29b      	uxth	r3, r3
 800e810:	461a      	mov	r2, r3
 800e812:	68bb      	ldr	r3, [r7, #8]
 800e814:	781b      	ldrb	r3, [r3, #0]
 800e816:	00db      	lsls	r3, r3, #3
 800e818:	4413      	add	r3, r2
 800e81a:	3302      	adds	r3, #2
 800e81c:	005b      	lsls	r3, r3, #1
 800e81e:	68fa      	ldr	r2, [r7, #12]
 800e820:	6812      	ldr	r2, [r2, #0]
 800e822:	4413      	add	r3, r2
 800e824:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e828:	881b      	ldrh	r3, [r3, #0]
 800e82a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e82e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800e830:	68bb      	ldr	r3, [r7, #8]
 800e832:	699a      	ldr	r2, [r3, #24]
 800e834:	8b7b      	ldrh	r3, [r7, #26]
 800e836:	429a      	cmp	r2, r3
 800e838:	d306      	bcc.n	800e848 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800e83a:	68bb      	ldr	r3, [r7, #8]
 800e83c:	699a      	ldr	r2, [r3, #24]
 800e83e:	8b7b      	ldrh	r3, [r7, #26]
 800e840:	1ad2      	subs	r2, r2, r3
 800e842:	68bb      	ldr	r3, [r7, #8]
 800e844:	619a      	str	r2, [r3, #24]
 800e846:	e002      	b.n	800e84e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800e848:	68bb      	ldr	r3, [r7, #8]
 800e84a:	2200      	movs	r2, #0
 800e84c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800e84e:	68bb      	ldr	r3, [r7, #8]
 800e850:	699b      	ldr	r3, [r3, #24]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d123      	bne.n	800e89e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	461a      	mov	r2, r3
 800e85c:	68bb      	ldr	r3, [r7, #8]
 800e85e:	781b      	ldrb	r3, [r3, #0]
 800e860:	009b      	lsls	r3, r3, #2
 800e862:	4413      	add	r3, r2
 800e864:	881b      	ldrh	r3, [r3, #0]
 800e866:	b29b      	uxth	r3, r3
 800e868:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e86c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e870:	833b      	strh	r3, [r7, #24]
 800e872:	8b3b      	ldrh	r3, [r7, #24]
 800e874:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800e878:	833b      	strh	r3, [r7, #24]
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	461a      	mov	r2, r3
 800e880:	68bb      	ldr	r3, [r7, #8]
 800e882:	781b      	ldrb	r3, [r3, #0]
 800e884:	009b      	lsls	r3, r3, #2
 800e886:	441a      	add	r2, r3
 800e888:	8b3b      	ldrh	r3, [r7, #24]
 800e88a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e88e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e892:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e89a:	b29b      	uxth	r3, r3
 800e89c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800e89e:	88fb      	ldrh	r3, [r7, #6]
 800e8a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d01f      	beq.n	800e8e8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	461a      	mov	r2, r3
 800e8ae:	68bb      	ldr	r3, [r7, #8]
 800e8b0:	781b      	ldrb	r3, [r3, #0]
 800e8b2:	009b      	lsls	r3, r3, #2
 800e8b4:	4413      	add	r3, r2
 800e8b6:	881b      	ldrh	r3, [r3, #0]
 800e8b8:	b29b      	uxth	r3, r3
 800e8ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e8be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e8c2:	82fb      	strh	r3, [r7, #22]
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	461a      	mov	r2, r3
 800e8ca:	68bb      	ldr	r3, [r7, #8]
 800e8cc:	781b      	ldrb	r3, [r3, #0]
 800e8ce:	009b      	lsls	r3, r3, #2
 800e8d0:	441a      	add	r2, r3
 800e8d2:	8afb      	ldrh	r3, [r7, #22]
 800e8d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e8d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e8dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e8e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e8e4:	b29b      	uxth	r3, r3
 800e8e6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800e8e8:	8b7b      	ldrh	r3, [r7, #26]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	f000 8087 	beq.w	800e9fe <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	6818      	ldr	r0, [r3, #0]
 800e8f4:	68bb      	ldr	r3, [r7, #8]
 800e8f6:	6959      	ldr	r1, [r3, #20]
 800e8f8:	68bb      	ldr	r3, [r7, #8]
 800e8fa:	891a      	ldrh	r2, [r3, #8]
 800e8fc:	8b7b      	ldrh	r3, [r7, #26]
 800e8fe:	f003 fc79 	bl	80121f4 <USB_ReadPMA>
 800e902:	e07c      	b.n	800e9fe <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e90c:	b29b      	uxth	r3, r3
 800e90e:	461a      	mov	r2, r3
 800e910:	68bb      	ldr	r3, [r7, #8]
 800e912:	781b      	ldrb	r3, [r3, #0]
 800e914:	00db      	lsls	r3, r3, #3
 800e916:	4413      	add	r3, r2
 800e918:	3306      	adds	r3, #6
 800e91a:	005b      	lsls	r3, r3, #1
 800e91c:	68fa      	ldr	r2, [r7, #12]
 800e91e:	6812      	ldr	r2, [r2, #0]
 800e920:	4413      	add	r3, r2
 800e922:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e926:	881b      	ldrh	r3, [r3, #0]
 800e928:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e92c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800e92e:	68bb      	ldr	r3, [r7, #8]
 800e930:	699a      	ldr	r2, [r3, #24]
 800e932:	8b7b      	ldrh	r3, [r7, #26]
 800e934:	429a      	cmp	r2, r3
 800e936:	d306      	bcc.n	800e946 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800e938:	68bb      	ldr	r3, [r7, #8]
 800e93a:	699a      	ldr	r2, [r3, #24]
 800e93c:	8b7b      	ldrh	r3, [r7, #26]
 800e93e:	1ad2      	subs	r2, r2, r3
 800e940:	68bb      	ldr	r3, [r7, #8]
 800e942:	619a      	str	r2, [r3, #24]
 800e944:	e002      	b.n	800e94c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800e946:	68bb      	ldr	r3, [r7, #8]
 800e948:	2200      	movs	r2, #0
 800e94a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800e94c:	68bb      	ldr	r3, [r7, #8]
 800e94e:	699b      	ldr	r3, [r3, #24]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d123      	bne.n	800e99c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	461a      	mov	r2, r3
 800e95a:	68bb      	ldr	r3, [r7, #8]
 800e95c:	781b      	ldrb	r3, [r3, #0]
 800e95e:	009b      	lsls	r3, r3, #2
 800e960:	4413      	add	r3, r2
 800e962:	881b      	ldrh	r3, [r3, #0]
 800e964:	b29b      	uxth	r3, r3
 800e966:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e96a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e96e:	83fb      	strh	r3, [r7, #30]
 800e970:	8bfb      	ldrh	r3, [r7, #30]
 800e972:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800e976:	83fb      	strh	r3, [r7, #30]
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	461a      	mov	r2, r3
 800e97e:	68bb      	ldr	r3, [r7, #8]
 800e980:	781b      	ldrb	r3, [r3, #0]
 800e982:	009b      	lsls	r3, r3, #2
 800e984:	441a      	add	r2, r3
 800e986:	8bfb      	ldrh	r3, [r7, #30]
 800e988:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e98c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e990:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e998:	b29b      	uxth	r3, r3
 800e99a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800e99c:	88fb      	ldrh	r3, [r7, #6]
 800e99e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d11f      	bne.n	800e9e6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	461a      	mov	r2, r3
 800e9ac:	68bb      	ldr	r3, [r7, #8]
 800e9ae:	781b      	ldrb	r3, [r3, #0]
 800e9b0:	009b      	lsls	r3, r3, #2
 800e9b2:	4413      	add	r3, r2
 800e9b4:	881b      	ldrh	r3, [r3, #0]
 800e9b6:	b29b      	uxth	r3, r3
 800e9b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e9bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e9c0:	83bb      	strh	r3, [r7, #28]
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	461a      	mov	r2, r3
 800e9c8:	68bb      	ldr	r3, [r7, #8]
 800e9ca:	781b      	ldrb	r3, [r3, #0]
 800e9cc:	009b      	lsls	r3, r3, #2
 800e9ce:	441a      	add	r2, r3
 800e9d0:	8bbb      	ldrh	r3, [r7, #28]
 800e9d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e9d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e9da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e9de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e9e2:	b29b      	uxth	r3, r3
 800e9e4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800e9e6:	8b7b      	ldrh	r3, [r7, #26]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d008      	beq.n	800e9fe <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	6818      	ldr	r0, [r3, #0]
 800e9f0:	68bb      	ldr	r3, [r7, #8]
 800e9f2:	6959      	ldr	r1, [r3, #20]
 800e9f4:	68bb      	ldr	r3, [r7, #8]
 800e9f6:	895a      	ldrh	r2, [r3, #10]
 800e9f8:	8b7b      	ldrh	r3, [r7, #26]
 800e9fa:	f003 fbfb 	bl	80121f4 <USB_ReadPMA>
    }
  }

  return count;
 800e9fe:	8b7b      	ldrh	r3, [r7, #26]
}
 800ea00:	4618      	mov	r0, r3
 800ea02:	3720      	adds	r7, #32
 800ea04:	46bd      	mov	sp, r7
 800ea06:	bd80      	pop	{r7, pc}

0800ea08 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b0a4      	sub	sp, #144	; 0x90
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	60f8      	str	r0, [r7, #12]
 800ea10:	60b9      	str	r1, [r7, #8]
 800ea12:	4613      	mov	r3, r2
 800ea14:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800ea16:	88fb      	ldrh	r3, [r7, #6]
 800ea18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	f000 81dd 	beq.w	800eddc <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ea2a:	b29b      	uxth	r3, r3
 800ea2c:	461a      	mov	r2, r3
 800ea2e:	68bb      	ldr	r3, [r7, #8]
 800ea30:	781b      	ldrb	r3, [r3, #0]
 800ea32:	00db      	lsls	r3, r3, #3
 800ea34:	4413      	add	r3, r2
 800ea36:	3302      	adds	r3, #2
 800ea38:	005b      	lsls	r3, r3, #1
 800ea3a:	68fa      	ldr	r2, [r7, #12]
 800ea3c:	6812      	ldr	r2, [r2, #0]
 800ea3e:	4413      	add	r3, r2
 800ea40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ea44:	881b      	ldrh	r3, [r3, #0]
 800ea46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ea4a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800ea4e:	68bb      	ldr	r3, [r7, #8]
 800ea50:	699a      	ldr	r2, [r3, #24]
 800ea52:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ea56:	429a      	cmp	r2, r3
 800ea58:	d907      	bls.n	800ea6a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800ea5a:	68bb      	ldr	r3, [r7, #8]
 800ea5c:	699a      	ldr	r2, [r3, #24]
 800ea5e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ea62:	1ad2      	subs	r2, r2, r3
 800ea64:	68bb      	ldr	r3, [r7, #8]
 800ea66:	619a      	str	r2, [r3, #24]
 800ea68:	e002      	b.n	800ea70 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800ea6a:	68bb      	ldr	r3, [r7, #8]
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800ea70:	68bb      	ldr	r3, [r7, #8]
 800ea72:	699b      	ldr	r3, [r3, #24]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	f040 80b9 	bne.w	800ebec <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ea7a:	68bb      	ldr	r3, [r7, #8]
 800ea7c:	785b      	ldrb	r3, [r3, #1]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d126      	bne.n	800ead0 <HAL_PCD_EP_DB_Transmit+0xc8>
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ea90:	b29b      	uxth	r3, r3
 800ea92:	461a      	mov	r2, r3
 800ea94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea96:	4413      	add	r3, r2
 800ea98:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ea9a:	68bb      	ldr	r3, [r7, #8]
 800ea9c:	781b      	ldrb	r3, [r3, #0]
 800ea9e:	011a      	lsls	r2, r3, #4
 800eaa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaa2:	4413      	add	r3, r2
 800eaa4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800eaa8:	62bb      	str	r3, [r7, #40]	; 0x28
 800eaaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaac:	881b      	ldrh	r3, [r3, #0]
 800eaae:	b29b      	uxth	r3, r3
 800eab0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800eab4:	b29a      	uxth	r2, r3
 800eab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eab8:	801a      	strh	r2, [r3, #0]
 800eaba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eabc:	881b      	ldrh	r3, [r3, #0]
 800eabe:	b29b      	uxth	r3, r3
 800eac0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eac4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eac8:	b29a      	uxth	r2, r3
 800eaca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eacc:	801a      	strh	r2, [r3, #0]
 800eace:	e01a      	b.n	800eb06 <HAL_PCD_EP_DB_Transmit+0xfe>
 800ead0:	68bb      	ldr	r3, [r7, #8]
 800ead2:	785b      	ldrb	r3, [r3, #1]
 800ead4:	2b01      	cmp	r3, #1
 800ead6:	d116      	bne.n	800eb06 <HAL_PCD_EP_DB_Transmit+0xfe>
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	637b      	str	r3, [r7, #52]	; 0x34
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eae6:	b29b      	uxth	r3, r3
 800eae8:	461a      	mov	r2, r3
 800eaea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eaec:	4413      	add	r3, r2
 800eaee:	637b      	str	r3, [r7, #52]	; 0x34
 800eaf0:	68bb      	ldr	r3, [r7, #8]
 800eaf2:	781b      	ldrb	r3, [r3, #0]
 800eaf4:	011a      	lsls	r2, r3, #4
 800eaf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eaf8:	4413      	add	r3, r2
 800eafa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800eafe:	633b      	str	r3, [r7, #48]	; 0x30
 800eb00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb02:	2200      	movs	r2, #0
 800eb04:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	627b      	str	r3, [r7, #36]	; 0x24
 800eb0c:	68bb      	ldr	r3, [r7, #8]
 800eb0e:	785b      	ldrb	r3, [r3, #1]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d126      	bne.n	800eb62 <HAL_PCD_EP_DB_Transmit+0x15a>
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	61fb      	str	r3, [r7, #28]
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eb22:	b29b      	uxth	r3, r3
 800eb24:	461a      	mov	r2, r3
 800eb26:	69fb      	ldr	r3, [r7, #28]
 800eb28:	4413      	add	r3, r2
 800eb2a:	61fb      	str	r3, [r7, #28]
 800eb2c:	68bb      	ldr	r3, [r7, #8]
 800eb2e:	781b      	ldrb	r3, [r3, #0]
 800eb30:	011a      	lsls	r2, r3, #4
 800eb32:	69fb      	ldr	r3, [r7, #28]
 800eb34:	4413      	add	r3, r2
 800eb36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800eb3a:	61bb      	str	r3, [r7, #24]
 800eb3c:	69bb      	ldr	r3, [r7, #24]
 800eb3e:	881b      	ldrh	r3, [r3, #0]
 800eb40:	b29b      	uxth	r3, r3
 800eb42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800eb46:	b29a      	uxth	r2, r3
 800eb48:	69bb      	ldr	r3, [r7, #24]
 800eb4a:	801a      	strh	r2, [r3, #0]
 800eb4c:	69bb      	ldr	r3, [r7, #24]
 800eb4e:	881b      	ldrh	r3, [r3, #0]
 800eb50:	b29b      	uxth	r3, r3
 800eb52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eb56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eb5a:	b29a      	uxth	r2, r3
 800eb5c:	69bb      	ldr	r3, [r7, #24]
 800eb5e:	801a      	strh	r2, [r3, #0]
 800eb60:	e017      	b.n	800eb92 <HAL_PCD_EP_DB_Transmit+0x18a>
 800eb62:	68bb      	ldr	r3, [r7, #8]
 800eb64:	785b      	ldrb	r3, [r3, #1]
 800eb66:	2b01      	cmp	r3, #1
 800eb68:	d113      	bne.n	800eb92 <HAL_PCD_EP_DB_Transmit+0x18a>
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eb72:	b29b      	uxth	r3, r3
 800eb74:	461a      	mov	r2, r3
 800eb76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb78:	4413      	add	r3, r2
 800eb7a:	627b      	str	r3, [r7, #36]	; 0x24
 800eb7c:	68bb      	ldr	r3, [r7, #8]
 800eb7e:	781b      	ldrb	r3, [r3, #0]
 800eb80:	011a      	lsls	r2, r3, #4
 800eb82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb84:	4413      	add	r3, r2
 800eb86:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800eb8a:	623b      	str	r3, [r7, #32]
 800eb8c:	6a3b      	ldr	r3, [r7, #32]
 800eb8e:	2200      	movs	r2, #0
 800eb90:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800eb92:	68bb      	ldr	r3, [r7, #8]
 800eb94:	781b      	ldrb	r3, [r3, #0]
 800eb96:	4619      	mov	r1, r3
 800eb98:	68f8      	ldr	r0, [r7, #12]
 800eb9a:	f006 f820 	bl	8014bde <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800eb9e:	88fb      	ldrh	r3, [r7, #6]
 800eba0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	f000 82fc 	beq.w	800f1a2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	461a      	mov	r2, r3
 800ebb0:	68bb      	ldr	r3, [r7, #8]
 800ebb2:	781b      	ldrb	r3, [r3, #0]
 800ebb4:	009b      	lsls	r3, r3, #2
 800ebb6:	4413      	add	r3, r2
 800ebb8:	881b      	ldrh	r3, [r3, #0]
 800ebba:	b29b      	uxth	r3, r3
 800ebbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ebc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ebc4:	82fb      	strh	r3, [r7, #22]
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	461a      	mov	r2, r3
 800ebcc:	68bb      	ldr	r3, [r7, #8]
 800ebce:	781b      	ldrb	r3, [r3, #0]
 800ebd0:	009b      	lsls	r3, r3, #2
 800ebd2:	441a      	add	r2, r3
 800ebd4:	8afb      	ldrh	r3, [r7, #22]
 800ebd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ebda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ebde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ebe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ebe6:	b29b      	uxth	r3, r3
 800ebe8:	8013      	strh	r3, [r2, #0]
 800ebea:	e2da      	b.n	800f1a2 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800ebec:	88fb      	ldrh	r3, [r7, #6]
 800ebee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d021      	beq.n	800ec3a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	461a      	mov	r2, r3
 800ebfc:	68bb      	ldr	r3, [r7, #8]
 800ebfe:	781b      	ldrb	r3, [r3, #0]
 800ec00:	009b      	lsls	r3, r3, #2
 800ec02:	4413      	add	r3, r2
 800ec04:	881b      	ldrh	r3, [r3, #0]
 800ec06:	b29b      	uxth	r3, r3
 800ec08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ec0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ec10:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	461a      	mov	r2, r3
 800ec1a:	68bb      	ldr	r3, [r7, #8]
 800ec1c:	781b      	ldrb	r3, [r3, #0]
 800ec1e:	009b      	lsls	r3, r3, #2
 800ec20:	441a      	add	r2, r3
 800ec22:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ec26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ec2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ec2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ec32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec36:	b29b      	uxth	r3, r3
 800ec38:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800ec3a:	68bb      	ldr	r3, [r7, #8]
 800ec3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ec40:	2b01      	cmp	r3, #1
 800ec42:	f040 82ae 	bne.w	800f1a2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800ec46:	68bb      	ldr	r3, [r7, #8]
 800ec48:	695a      	ldr	r2, [r3, #20]
 800ec4a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ec4e:	441a      	add	r2, r3
 800ec50:	68bb      	ldr	r3, [r7, #8]
 800ec52:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800ec54:	68bb      	ldr	r3, [r7, #8]
 800ec56:	69da      	ldr	r2, [r3, #28]
 800ec58:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ec5c:	441a      	add	r2, r3
 800ec5e:	68bb      	ldr	r3, [r7, #8]
 800ec60:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800ec62:	68bb      	ldr	r3, [r7, #8]
 800ec64:	6a1a      	ldr	r2, [r3, #32]
 800ec66:	68bb      	ldr	r3, [r7, #8]
 800ec68:	691b      	ldr	r3, [r3, #16]
 800ec6a:	429a      	cmp	r2, r3
 800ec6c:	d30b      	bcc.n	800ec86 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800ec6e:	68bb      	ldr	r3, [r7, #8]
 800ec70:	691b      	ldr	r3, [r3, #16]
 800ec72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800ec76:	68bb      	ldr	r3, [r7, #8]
 800ec78:	6a1a      	ldr	r2, [r3, #32]
 800ec7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ec7e:	1ad2      	subs	r2, r2, r3
 800ec80:	68bb      	ldr	r3, [r7, #8]
 800ec82:	621a      	str	r2, [r3, #32]
 800ec84:	e017      	b.n	800ecb6 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800ec86:	68bb      	ldr	r3, [r7, #8]
 800ec88:	6a1b      	ldr	r3, [r3, #32]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d108      	bne.n	800eca0 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800ec8e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ec92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800ec96:	68bb      	ldr	r3, [r7, #8]
 800ec98:	2200      	movs	r2, #0
 800ec9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800ec9e:	e00a      	b.n	800ecb6 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800eca0:	68bb      	ldr	r3, [r7, #8]
 800eca2:	2200      	movs	r2, #0
 800eca4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800eca8:	68bb      	ldr	r3, [r7, #8]
 800ecaa:	6a1b      	ldr	r3, [r3, #32]
 800ecac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800ecb0:	68bb      	ldr	r3, [r7, #8]
 800ecb2:	2200      	movs	r2, #0
 800ecb4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800ecb6:	68bb      	ldr	r3, [r7, #8]
 800ecb8:	785b      	ldrb	r3, [r3, #1]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d165      	bne.n	800ed8a <HAL_PCD_EP_DB_Transmit+0x382>
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eccc:	b29b      	uxth	r3, r3
 800ecce:	461a      	mov	r2, r3
 800ecd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecd2:	4413      	add	r3, r2
 800ecd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ecd6:	68bb      	ldr	r3, [r7, #8]
 800ecd8:	781b      	ldrb	r3, [r3, #0]
 800ecda:	011a      	lsls	r2, r3, #4
 800ecdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecde:	4413      	add	r3, r2
 800ece0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ece4:	63bb      	str	r3, [r7, #56]	; 0x38
 800ece6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ece8:	881b      	ldrh	r3, [r3, #0]
 800ecea:	b29b      	uxth	r3, r3
 800ecec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ecf0:	b29a      	uxth	r2, r3
 800ecf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecf4:	801a      	strh	r2, [r3, #0]
 800ecf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ecfa:	2b3e      	cmp	r3, #62	; 0x3e
 800ecfc:	d91d      	bls.n	800ed3a <HAL_PCD_EP_DB_Transmit+0x332>
 800ecfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ed02:	095b      	lsrs	r3, r3, #5
 800ed04:	64bb      	str	r3, [r7, #72]	; 0x48
 800ed06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ed0a:	f003 031f 	and.w	r3, r3, #31
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d102      	bne.n	800ed18 <HAL_PCD_EP_DB_Transmit+0x310>
 800ed12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed14:	3b01      	subs	r3, #1
 800ed16:	64bb      	str	r3, [r7, #72]	; 0x48
 800ed18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed1a:	881b      	ldrh	r3, [r3, #0]
 800ed1c:	b29a      	uxth	r2, r3
 800ed1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed20:	b29b      	uxth	r3, r3
 800ed22:	029b      	lsls	r3, r3, #10
 800ed24:	b29b      	uxth	r3, r3
 800ed26:	4313      	orrs	r3, r2
 800ed28:	b29b      	uxth	r3, r3
 800ed2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ed2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ed32:	b29a      	uxth	r2, r3
 800ed34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed36:	801a      	strh	r2, [r3, #0]
 800ed38:	e044      	b.n	800edc4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800ed3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d10a      	bne.n	800ed58 <HAL_PCD_EP_DB_Transmit+0x350>
 800ed42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed44:	881b      	ldrh	r3, [r3, #0]
 800ed46:	b29b      	uxth	r3, r3
 800ed48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ed4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ed50:	b29a      	uxth	r2, r3
 800ed52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed54:	801a      	strh	r2, [r3, #0]
 800ed56:	e035      	b.n	800edc4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800ed58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ed5c:	085b      	lsrs	r3, r3, #1
 800ed5e:	64bb      	str	r3, [r7, #72]	; 0x48
 800ed60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ed64:	f003 0301 	and.w	r3, r3, #1
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d002      	beq.n	800ed72 <HAL_PCD_EP_DB_Transmit+0x36a>
 800ed6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed6e:	3301      	adds	r3, #1
 800ed70:	64bb      	str	r3, [r7, #72]	; 0x48
 800ed72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed74:	881b      	ldrh	r3, [r3, #0]
 800ed76:	b29a      	uxth	r2, r3
 800ed78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed7a:	b29b      	uxth	r3, r3
 800ed7c:	029b      	lsls	r3, r3, #10
 800ed7e:	b29b      	uxth	r3, r3
 800ed80:	4313      	orrs	r3, r2
 800ed82:	b29a      	uxth	r2, r3
 800ed84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed86:	801a      	strh	r2, [r3, #0]
 800ed88:	e01c      	b.n	800edc4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800ed8a:	68bb      	ldr	r3, [r7, #8]
 800ed8c:	785b      	ldrb	r3, [r3, #1]
 800ed8e:	2b01      	cmp	r3, #1
 800ed90:	d118      	bne.n	800edc4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	647b      	str	r3, [r7, #68]	; 0x44
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eda0:	b29b      	uxth	r3, r3
 800eda2:	461a      	mov	r2, r3
 800eda4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eda6:	4413      	add	r3, r2
 800eda8:	647b      	str	r3, [r7, #68]	; 0x44
 800edaa:	68bb      	ldr	r3, [r7, #8]
 800edac:	781b      	ldrb	r3, [r3, #0]
 800edae:	011a      	lsls	r2, r3, #4
 800edb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800edb2:	4413      	add	r3, r2
 800edb4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800edb8:	643b      	str	r3, [r7, #64]	; 0x40
 800edba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800edbe:	b29a      	uxth	r2, r3
 800edc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edc2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	6818      	ldr	r0, [r3, #0]
 800edc8:	68bb      	ldr	r3, [r7, #8]
 800edca:	6959      	ldr	r1, [r3, #20]
 800edcc:	68bb      	ldr	r3, [r7, #8]
 800edce:	891a      	ldrh	r2, [r3, #8]
 800edd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800edd4:	b29b      	uxth	r3, r3
 800edd6:	f003 f9c8 	bl	801216a <USB_WritePMA>
 800edda:	e1e2      	b.n	800f1a2 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ede4:	b29b      	uxth	r3, r3
 800ede6:	461a      	mov	r2, r3
 800ede8:	68bb      	ldr	r3, [r7, #8]
 800edea:	781b      	ldrb	r3, [r3, #0]
 800edec:	00db      	lsls	r3, r3, #3
 800edee:	4413      	add	r3, r2
 800edf0:	3306      	adds	r3, #6
 800edf2:	005b      	lsls	r3, r3, #1
 800edf4:	68fa      	ldr	r2, [r7, #12]
 800edf6:	6812      	ldr	r2, [r2, #0]
 800edf8:	4413      	add	r3, r2
 800edfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800edfe:	881b      	ldrh	r3, [r3, #0]
 800ee00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ee04:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800ee08:	68bb      	ldr	r3, [r7, #8]
 800ee0a:	699a      	ldr	r2, [r3, #24]
 800ee0c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ee10:	429a      	cmp	r2, r3
 800ee12:	d307      	bcc.n	800ee24 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800ee14:	68bb      	ldr	r3, [r7, #8]
 800ee16:	699a      	ldr	r2, [r3, #24]
 800ee18:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ee1c:	1ad2      	subs	r2, r2, r3
 800ee1e:	68bb      	ldr	r3, [r7, #8]
 800ee20:	619a      	str	r2, [r3, #24]
 800ee22:	e002      	b.n	800ee2a <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800ee24:	68bb      	ldr	r3, [r7, #8]
 800ee26:	2200      	movs	r2, #0
 800ee28:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800ee2a:	68bb      	ldr	r3, [r7, #8]
 800ee2c:	699b      	ldr	r3, [r3, #24]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	f040 80c0 	bne.w	800efb4 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ee34:	68bb      	ldr	r3, [r7, #8]
 800ee36:	785b      	ldrb	r3, [r3, #1]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d126      	bne.n	800ee8a <HAL_PCD_EP_DB_Transmit+0x482>
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ee4a:	b29b      	uxth	r3, r3
 800ee4c:	461a      	mov	r2, r3
 800ee4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ee50:	4413      	add	r3, r2
 800ee52:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ee54:	68bb      	ldr	r3, [r7, #8]
 800ee56:	781b      	ldrb	r3, [r3, #0]
 800ee58:	011a      	lsls	r2, r3, #4
 800ee5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ee5c:	4413      	add	r3, r2
 800ee5e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ee62:	67bb      	str	r3, [r7, #120]	; 0x78
 800ee64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ee66:	881b      	ldrh	r3, [r3, #0]
 800ee68:	b29b      	uxth	r3, r3
 800ee6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ee6e:	b29a      	uxth	r2, r3
 800ee70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ee72:	801a      	strh	r2, [r3, #0]
 800ee74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ee76:	881b      	ldrh	r3, [r3, #0]
 800ee78:	b29b      	uxth	r3, r3
 800ee7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ee7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ee82:	b29a      	uxth	r2, r3
 800ee84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ee86:	801a      	strh	r2, [r3, #0]
 800ee88:	e01a      	b.n	800eec0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800ee8a:	68bb      	ldr	r3, [r7, #8]
 800ee8c:	785b      	ldrb	r3, [r3, #1]
 800ee8e:	2b01      	cmp	r3, #1
 800ee90:	d116      	bne.n	800eec0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	667b      	str	r3, [r7, #100]	; 0x64
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eea0:	b29b      	uxth	r3, r3
 800eea2:	461a      	mov	r2, r3
 800eea4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eea6:	4413      	add	r3, r2
 800eea8:	667b      	str	r3, [r7, #100]	; 0x64
 800eeaa:	68bb      	ldr	r3, [r7, #8]
 800eeac:	781b      	ldrb	r3, [r3, #0]
 800eeae:	011a      	lsls	r2, r3, #4
 800eeb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eeb2:	4413      	add	r3, r2
 800eeb4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800eeb8:	663b      	str	r3, [r7, #96]	; 0x60
 800eeba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eebc:	2200      	movs	r2, #0
 800eebe:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	677b      	str	r3, [r7, #116]	; 0x74
 800eec6:	68bb      	ldr	r3, [r7, #8]
 800eec8:	785b      	ldrb	r3, [r3, #1]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d12b      	bne.n	800ef26 <HAL_PCD_EP_DB_Transmit+0x51e>
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eedc:	b29b      	uxth	r3, r3
 800eede:	461a      	mov	r2, r3
 800eee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eee2:	4413      	add	r3, r2
 800eee4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800eee6:	68bb      	ldr	r3, [r7, #8]
 800eee8:	781b      	ldrb	r3, [r3, #0]
 800eeea:	011a      	lsls	r2, r3, #4
 800eeec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eeee:	4413      	add	r3, r2
 800eef0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800eef4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800eef8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800eefc:	881b      	ldrh	r3, [r3, #0]
 800eefe:	b29b      	uxth	r3, r3
 800ef00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ef04:	b29a      	uxth	r2, r3
 800ef06:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ef0a:	801a      	strh	r2, [r3, #0]
 800ef0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ef10:	881b      	ldrh	r3, [r3, #0]
 800ef12:	b29b      	uxth	r3, r3
 800ef14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ef18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ef1c:	b29a      	uxth	r2, r3
 800ef1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ef22:	801a      	strh	r2, [r3, #0]
 800ef24:	e017      	b.n	800ef56 <HAL_PCD_EP_DB_Transmit+0x54e>
 800ef26:	68bb      	ldr	r3, [r7, #8]
 800ef28:	785b      	ldrb	r3, [r3, #1]
 800ef2a:	2b01      	cmp	r3, #1
 800ef2c:	d113      	bne.n	800ef56 <HAL_PCD_EP_DB_Transmit+0x54e>
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ef36:	b29b      	uxth	r3, r3
 800ef38:	461a      	mov	r2, r3
 800ef3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ef3c:	4413      	add	r3, r2
 800ef3e:	677b      	str	r3, [r7, #116]	; 0x74
 800ef40:	68bb      	ldr	r3, [r7, #8]
 800ef42:	781b      	ldrb	r3, [r3, #0]
 800ef44:	011a      	lsls	r2, r3, #4
 800ef46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ef48:	4413      	add	r3, r2
 800ef4a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ef4e:	673b      	str	r3, [r7, #112]	; 0x70
 800ef50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ef52:	2200      	movs	r2, #0
 800ef54:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800ef56:	68bb      	ldr	r3, [r7, #8]
 800ef58:	781b      	ldrb	r3, [r3, #0]
 800ef5a:	4619      	mov	r1, r3
 800ef5c:	68f8      	ldr	r0, [r7, #12]
 800ef5e:	f005 fe3e 	bl	8014bde <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800ef62:	88fb      	ldrh	r3, [r7, #6]
 800ef64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	f040 811a 	bne.w	800f1a2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	461a      	mov	r2, r3
 800ef74:	68bb      	ldr	r3, [r7, #8]
 800ef76:	781b      	ldrb	r3, [r3, #0]
 800ef78:	009b      	lsls	r3, r3, #2
 800ef7a:	4413      	add	r3, r2
 800ef7c:	881b      	ldrh	r3, [r3, #0]
 800ef7e:	b29b      	uxth	r3, r3
 800ef80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ef84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ef88:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	461a      	mov	r2, r3
 800ef92:	68bb      	ldr	r3, [r7, #8]
 800ef94:	781b      	ldrb	r3, [r3, #0]
 800ef96:	009b      	lsls	r3, r3, #2
 800ef98:	441a      	add	r2, r3
 800ef9a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800ef9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800efa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800efa6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800efaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800efae:	b29b      	uxth	r3, r3
 800efb0:	8013      	strh	r3, [r2, #0]
 800efb2:	e0f6      	b.n	800f1a2 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800efb4:	88fb      	ldrh	r3, [r7, #6]
 800efb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d121      	bne.n	800f002 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	461a      	mov	r2, r3
 800efc4:	68bb      	ldr	r3, [r7, #8]
 800efc6:	781b      	ldrb	r3, [r3, #0]
 800efc8:	009b      	lsls	r3, r3, #2
 800efca:	4413      	add	r3, r2
 800efcc:	881b      	ldrh	r3, [r3, #0]
 800efce:	b29b      	uxth	r3, r3
 800efd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800efd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800efd8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	461a      	mov	r2, r3
 800efe2:	68bb      	ldr	r3, [r7, #8]
 800efe4:	781b      	ldrb	r3, [r3, #0]
 800efe6:	009b      	lsls	r3, r3, #2
 800efe8:	441a      	add	r2, r3
 800efea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800efee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eff2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eff6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800effa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800effe:	b29b      	uxth	r3, r3
 800f000:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800f002:	68bb      	ldr	r3, [r7, #8]
 800f004:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f008:	2b01      	cmp	r3, #1
 800f00a:	f040 80ca 	bne.w	800f1a2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800f00e:	68bb      	ldr	r3, [r7, #8]
 800f010:	695a      	ldr	r2, [r3, #20]
 800f012:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800f016:	441a      	add	r2, r3
 800f018:	68bb      	ldr	r3, [r7, #8]
 800f01a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800f01c:	68bb      	ldr	r3, [r7, #8]
 800f01e:	69da      	ldr	r2, [r3, #28]
 800f020:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800f024:	441a      	add	r2, r3
 800f026:	68bb      	ldr	r3, [r7, #8]
 800f028:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800f02a:	68bb      	ldr	r3, [r7, #8]
 800f02c:	6a1a      	ldr	r2, [r3, #32]
 800f02e:	68bb      	ldr	r3, [r7, #8]
 800f030:	691b      	ldr	r3, [r3, #16]
 800f032:	429a      	cmp	r2, r3
 800f034:	d30b      	bcc.n	800f04e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800f036:	68bb      	ldr	r3, [r7, #8]
 800f038:	691b      	ldr	r3, [r3, #16]
 800f03a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800f03e:	68bb      	ldr	r3, [r7, #8]
 800f040:	6a1a      	ldr	r2, [r3, #32]
 800f042:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f046:	1ad2      	subs	r2, r2, r3
 800f048:	68bb      	ldr	r3, [r7, #8]
 800f04a:	621a      	str	r2, [r3, #32]
 800f04c:	e017      	b.n	800f07e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800f04e:	68bb      	ldr	r3, [r7, #8]
 800f050:	6a1b      	ldr	r3, [r3, #32]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d108      	bne.n	800f068 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800f056:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800f05a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800f05e:	68bb      	ldr	r3, [r7, #8]
 800f060:	2200      	movs	r2, #0
 800f062:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800f066:	e00a      	b.n	800f07e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800f068:	68bb      	ldr	r3, [r7, #8]
 800f06a:	6a1b      	ldr	r3, [r3, #32]
 800f06c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800f070:	68bb      	ldr	r3, [r7, #8]
 800f072:	2200      	movs	r2, #0
 800f074:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800f076:	68bb      	ldr	r3, [r7, #8]
 800f078:	2200      	movs	r2, #0
 800f07a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	657b      	str	r3, [r7, #84]	; 0x54
 800f084:	68bb      	ldr	r3, [r7, #8]
 800f086:	785b      	ldrb	r3, [r3, #1]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d165      	bne.n	800f158 <HAL_PCD_EP_DB_Transmit+0x750>
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f09a:	b29b      	uxth	r3, r3
 800f09c:	461a      	mov	r2, r3
 800f09e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f0a0:	4413      	add	r3, r2
 800f0a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f0a4:	68bb      	ldr	r3, [r7, #8]
 800f0a6:	781b      	ldrb	r3, [r3, #0]
 800f0a8:	011a      	lsls	r2, r3, #4
 800f0aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f0ac:	4413      	add	r3, r2
 800f0ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800f0b2:	65bb      	str	r3, [r7, #88]	; 0x58
 800f0b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f0b6:	881b      	ldrh	r3, [r3, #0]
 800f0b8:	b29b      	uxth	r3, r3
 800f0ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f0be:	b29a      	uxth	r2, r3
 800f0c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f0c2:	801a      	strh	r2, [r3, #0]
 800f0c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f0c8:	2b3e      	cmp	r3, #62	; 0x3e
 800f0ca:	d91d      	bls.n	800f108 <HAL_PCD_EP_DB_Transmit+0x700>
 800f0cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f0d0:	095b      	lsrs	r3, r3, #5
 800f0d2:	66bb      	str	r3, [r7, #104]	; 0x68
 800f0d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f0d8:	f003 031f 	and.w	r3, r3, #31
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d102      	bne.n	800f0e6 <HAL_PCD_EP_DB_Transmit+0x6de>
 800f0e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f0e2:	3b01      	subs	r3, #1
 800f0e4:	66bb      	str	r3, [r7, #104]	; 0x68
 800f0e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f0e8:	881b      	ldrh	r3, [r3, #0]
 800f0ea:	b29a      	uxth	r2, r3
 800f0ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f0ee:	b29b      	uxth	r3, r3
 800f0f0:	029b      	lsls	r3, r3, #10
 800f0f2:	b29b      	uxth	r3, r3
 800f0f4:	4313      	orrs	r3, r2
 800f0f6:	b29b      	uxth	r3, r3
 800f0f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f0fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f100:	b29a      	uxth	r2, r3
 800f102:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f104:	801a      	strh	r2, [r3, #0]
 800f106:	e041      	b.n	800f18c <HAL_PCD_EP_DB_Transmit+0x784>
 800f108:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d10a      	bne.n	800f126 <HAL_PCD_EP_DB_Transmit+0x71e>
 800f110:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f112:	881b      	ldrh	r3, [r3, #0]
 800f114:	b29b      	uxth	r3, r3
 800f116:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f11a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f11e:	b29a      	uxth	r2, r3
 800f120:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f122:	801a      	strh	r2, [r3, #0]
 800f124:	e032      	b.n	800f18c <HAL_PCD_EP_DB_Transmit+0x784>
 800f126:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f12a:	085b      	lsrs	r3, r3, #1
 800f12c:	66bb      	str	r3, [r7, #104]	; 0x68
 800f12e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f132:	f003 0301 	and.w	r3, r3, #1
 800f136:	2b00      	cmp	r3, #0
 800f138:	d002      	beq.n	800f140 <HAL_PCD_EP_DB_Transmit+0x738>
 800f13a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f13c:	3301      	adds	r3, #1
 800f13e:	66bb      	str	r3, [r7, #104]	; 0x68
 800f140:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f142:	881b      	ldrh	r3, [r3, #0]
 800f144:	b29a      	uxth	r2, r3
 800f146:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f148:	b29b      	uxth	r3, r3
 800f14a:	029b      	lsls	r3, r3, #10
 800f14c:	b29b      	uxth	r3, r3
 800f14e:	4313      	orrs	r3, r2
 800f150:	b29a      	uxth	r2, r3
 800f152:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f154:	801a      	strh	r2, [r3, #0]
 800f156:	e019      	b.n	800f18c <HAL_PCD_EP_DB_Transmit+0x784>
 800f158:	68bb      	ldr	r3, [r7, #8]
 800f15a:	785b      	ldrb	r3, [r3, #1]
 800f15c:	2b01      	cmp	r3, #1
 800f15e:	d115      	bne.n	800f18c <HAL_PCD_EP_DB_Transmit+0x784>
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f168:	b29b      	uxth	r3, r3
 800f16a:	461a      	mov	r2, r3
 800f16c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f16e:	4413      	add	r3, r2
 800f170:	657b      	str	r3, [r7, #84]	; 0x54
 800f172:	68bb      	ldr	r3, [r7, #8]
 800f174:	781b      	ldrb	r3, [r3, #0]
 800f176:	011a      	lsls	r2, r3, #4
 800f178:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f17a:	4413      	add	r3, r2
 800f17c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800f180:	653b      	str	r3, [r7, #80]	; 0x50
 800f182:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f186:	b29a      	uxth	r2, r3
 800f188:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f18a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	6818      	ldr	r0, [r3, #0]
 800f190:	68bb      	ldr	r3, [r7, #8]
 800f192:	6959      	ldr	r1, [r3, #20]
 800f194:	68bb      	ldr	r3, [r7, #8]
 800f196:	895a      	ldrh	r2, [r3, #10]
 800f198:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f19c:	b29b      	uxth	r3, r3
 800f19e:	f002 ffe4 	bl	801216a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	461a      	mov	r2, r3
 800f1a8:	68bb      	ldr	r3, [r7, #8]
 800f1aa:	781b      	ldrb	r3, [r3, #0]
 800f1ac:	009b      	lsls	r3, r3, #2
 800f1ae:	4413      	add	r3, r2
 800f1b0:	881b      	ldrh	r3, [r3, #0]
 800f1b2:	b29b      	uxth	r3, r3
 800f1b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f1b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f1bc:	82bb      	strh	r3, [r7, #20]
 800f1be:	8abb      	ldrh	r3, [r7, #20]
 800f1c0:	f083 0310 	eor.w	r3, r3, #16
 800f1c4:	82bb      	strh	r3, [r7, #20]
 800f1c6:	8abb      	ldrh	r3, [r7, #20]
 800f1c8:	f083 0320 	eor.w	r3, r3, #32
 800f1cc:	82bb      	strh	r3, [r7, #20]
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	461a      	mov	r2, r3
 800f1d4:	68bb      	ldr	r3, [r7, #8]
 800f1d6:	781b      	ldrb	r3, [r3, #0]
 800f1d8:	009b      	lsls	r3, r3, #2
 800f1da:	441a      	add	r2, r3
 800f1dc:	8abb      	ldrh	r3, [r7, #20]
 800f1de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f1e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f1e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f1ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f1ee:	b29b      	uxth	r3, r3
 800f1f0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800f1f2:	2300      	movs	r3, #0
}
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	3790      	adds	r7, #144	; 0x90
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	bd80      	pop	{r7, pc}

0800f1fc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800f1fc:	b480      	push	{r7}
 800f1fe:	b087      	sub	sp, #28
 800f200:	af00      	add	r7, sp, #0
 800f202:	60f8      	str	r0, [r7, #12]
 800f204:	607b      	str	r3, [r7, #4]
 800f206:	460b      	mov	r3, r1
 800f208:	817b      	strh	r3, [r7, #10]
 800f20a:	4613      	mov	r3, r2
 800f20c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800f20e:	897b      	ldrh	r3, [r7, #10]
 800f210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f214:	b29b      	uxth	r3, r3
 800f216:	2b00      	cmp	r3, #0
 800f218:	d00b      	beq.n	800f232 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800f21a:	897b      	ldrh	r3, [r7, #10]
 800f21c:	f003 0307 	and.w	r3, r3, #7
 800f220:	1c5a      	adds	r2, r3, #1
 800f222:	4613      	mov	r3, r2
 800f224:	009b      	lsls	r3, r3, #2
 800f226:	4413      	add	r3, r2
 800f228:	00db      	lsls	r3, r3, #3
 800f22a:	68fa      	ldr	r2, [r7, #12]
 800f22c:	4413      	add	r3, r2
 800f22e:	617b      	str	r3, [r7, #20]
 800f230:	e009      	b.n	800f246 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800f232:	897a      	ldrh	r2, [r7, #10]
 800f234:	4613      	mov	r3, r2
 800f236:	009b      	lsls	r3, r3, #2
 800f238:	4413      	add	r3, r2
 800f23a:	00db      	lsls	r3, r3, #3
 800f23c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800f240:	68fa      	ldr	r2, [r7, #12]
 800f242:	4413      	add	r3, r2
 800f244:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800f246:	893b      	ldrh	r3, [r7, #8]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d107      	bne.n	800f25c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800f24c:	697b      	ldr	r3, [r7, #20]
 800f24e:	2200      	movs	r2, #0
 800f250:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	b29a      	uxth	r2, r3
 800f256:	697b      	ldr	r3, [r7, #20]
 800f258:	80da      	strh	r2, [r3, #6]
 800f25a:	e00b      	b.n	800f274 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800f25c:	697b      	ldr	r3, [r7, #20]
 800f25e:	2201      	movs	r2, #1
 800f260:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	b29a      	uxth	r2, r3
 800f266:	697b      	ldr	r3, [r7, #20]
 800f268:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	0c1b      	lsrs	r3, r3, #16
 800f26e:	b29a      	uxth	r2, r3
 800f270:	697b      	ldr	r3, [r7, #20]
 800f272:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800f274:	2300      	movs	r3, #0
}
 800f276:	4618      	mov	r0, r3
 800f278:	371c      	adds	r7, #28
 800f27a:	46bd      	mov	sp, r7
 800f27c:	bc80      	pop	{r7}
 800f27e:	4770      	bx	lr

0800f280 <LL_GPIO_SetPinMode>:
{
 800f280:	b490      	push	{r4, r7}
 800f282:	b088      	sub	sp, #32
 800f284:	af00      	add	r7, sp, #0
 800f286:	60f8      	str	r0, [r7, #12]
 800f288:	60b9      	str	r1, [r7, #8]
 800f28a:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	461a      	mov	r2, r3
 800f290:	68bb      	ldr	r3, [r7, #8]
 800f292:	0e1b      	lsrs	r3, r3, #24
 800f294:	4413      	add	r3, r2
 800f296:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 800f298:	6822      	ldr	r2, [r4, #0]
 800f29a:	68bb      	ldr	r3, [r7, #8]
 800f29c:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f29e:	697b      	ldr	r3, [r7, #20]
 800f2a0:	fa93 f3a3 	rbit	r3, r3
 800f2a4:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800f2a6:	693b      	ldr	r3, [r7, #16]
 800f2a8:	fab3 f383 	clz	r3, r3
 800f2ac:	b2db      	uxtb	r3, r3
 800f2ae:	009b      	lsls	r3, r3, #2
 800f2b0:	210f      	movs	r1, #15
 800f2b2:	fa01 f303 	lsl.w	r3, r1, r3
 800f2b6:	43db      	mvns	r3, r3
 800f2b8:	401a      	ands	r2, r3
 800f2ba:	68bb      	ldr	r3, [r7, #8]
 800f2bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f2be:	69fb      	ldr	r3, [r7, #28]
 800f2c0:	fa93 f3a3 	rbit	r3, r3
 800f2c4:	61bb      	str	r3, [r7, #24]
  return result;
 800f2c6:	69bb      	ldr	r3, [r7, #24]
 800f2c8:	fab3 f383 	clz	r3, r3
 800f2cc:	b2db      	uxtb	r3, r3
 800f2ce:	009b      	lsls	r3, r3, #2
 800f2d0:	6879      	ldr	r1, [r7, #4]
 800f2d2:	fa01 f303 	lsl.w	r3, r1, r3
 800f2d6:	4313      	orrs	r3, r2
 800f2d8:	6023      	str	r3, [r4, #0]
}
 800f2da:	bf00      	nop
 800f2dc:	3720      	adds	r7, #32
 800f2de:	46bd      	mov	sp, r7
 800f2e0:	bc90      	pop	{r4, r7}
 800f2e2:	4770      	bx	lr

0800f2e4 <LL_GPIO_SetPinSpeed>:
{
 800f2e4:	b490      	push	{r4, r7}
 800f2e6:	b088      	sub	sp, #32
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	60f8      	str	r0, [r7, #12]
 800f2ec:	60b9      	str	r1, [r7, #8]
 800f2ee:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	461a      	mov	r2, r3
 800f2f4:	68bb      	ldr	r3, [r7, #8]
 800f2f6:	0e1b      	lsrs	r3, r3, #24
 800f2f8:	4413      	add	r3, r2
 800f2fa:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 800f2fc:	6822      	ldr	r2, [r4, #0]
 800f2fe:	68bb      	ldr	r3, [r7, #8]
 800f300:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f302:	697b      	ldr	r3, [r7, #20]
 800f304:	fa93 f3a3 	rbit	r3, r3
 800f308:	613b      	str	r3, [r7, #16]
  return result;
 800f30a:	693b      	ldr	r3, [r7, #16]
 800f30c:	fab3 f383 	clz	r3, r3
 800f310:	b2db      	uxtb	r3, r3
 800f312:	009b      	lsls	r3, r3, #2
 800f314:	2103      	movs	r1, #3
 800f316:	fa01 f303 	lsl.w	r3, r1, r3
 800f31a:	43db      	mvns	r3, r3
 800f31c:	401a      	ands	r2, r3
 800f31e:	68bb      	ldr	r3, [r7, #8]
 800f320:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f322:	69fb      	ldr	r3, [r7, #28]
 800f324:	fa93 f3a3 	rbit	r3, r3
 800f328:	61bb      	str	r3, [r7, #24]
  return result;
 800f32a:	69bb      	ldr	r3, [r7, #24]
 800f32c:	fab3 f383 	clz	r3, r3
 800f330:	b2db      	uxtb	r3, r3
 800f332:	009b      	lsls	r3, r3, #2
 800f334:	6879      	ldr	r1, [r7, #4]
 800f336:	fa01 f303 	lsl.w	r3, r1, r3
 800f33a:	4313      	orrs	r3, r2
 800f33c:	6023      	str	r3, [r4, #0]
}
 800f33e:	bf00      	nop
 800f340:	3720      	adds	r7, #32
 800f342:	46bd      	mov	sp, r7
 800f344:	bc90      	pop	{r4, r7}
 800f346:	4770      	bx	lr

0800f348 <LL_GPIO_SetPinOutputType>:
{
 800f348:	b490      	push	{r4, r7}
 800f34a:	b088      	sub	sp, #32
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	60f8      	str	r0, [r7, #12]
 800f350:	60b9      	str	r1, [r7, #8]
 800f352:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	461a      	mov	r2, r3
 800f358:	68bb      	ldr	r3, [r7, #8]
 800f35a:	0e1b      	lsrs	r3, r3, #24
 800f35c:	4413      	add	r3, r2
 800f35e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 800f360:	6822      	ldr	r2, [r4, #0]
 800f362:	68bb      	ldr	r3, [r7, #8]
 800f364:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f366:	697b      	ldr	r3, [r7, #20]
 800f368:	fa93 f3a3 	rbit	r3, r3
 800f36c:	613b      	str	r3, [r7, #16]
  return result;
 800f36e:	693b      	ldr	r3, [r7, #16]
 800f370:	fab3 f383 	clz	r3, r3
 800f374:	b2db      	uxtb	r3, r3
 800f376:	009b      	lsls	r3, r3, #2
 800f378:	2104      	movs	r1, #4
 800f37a:	fa01 f303 	lsl.w	r3, r1, r3
 800f37e:	43db      	mvns	r3, r3
 800f380:	401a      	ands	r2, r3
 800f382:	68bb      	ldr	r3, [r7, #8]
 800f384:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f386:	69fb      	ldr	r3, [r7, #28]
 800f388:	fa93 f3a3 	rbit	r3, r3
 800f38c:	61bb      	str	r3, [r7, #24]
  return result;
 800f38e:	69bb      	ldr	r3, [r7, #24]
 800f390:	fab3 f383 	clz	r3, r3
 800f394:	b2db      	uxtb	r3, r3
 800f396:	009b      	lsls	r3, r3, #2
 800f398:	6879      	ldr	r1, [r7, #4]
 800f39a:	fa01 f303 	lsl.w	r3, r1, r3
 800f39e:	4313      	orrs	r3, r2
 800f3a0:	6023      	str	r3, [r4, #0]
}
 800f3a2:	bf00      	nop
 800f3a4:	3720      	adds	r7, #32
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	bc90      	pop	{r4, r7}
 800f3aa:	4770      	bx	lr

0800f3ac <LL_GPIO_SetPinPull>:
{
 800f3ac:	b480      	push	{r7}
 800f3ae:	b087      	sub	sp, #28
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	60f8      	str	r0, [r7, #12]
 800f3b4:	60b9      	str	r1, [r7, #8]
 800f3b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	68da      	ldr	r2, [r3, #12]
 800f3bc:	68bb      	ldr	r3, [r7, #8]
 800f3be:	0a1b      	lsrs	r3, r3, #8
 800f3c0:	43db      	mvns	r3, r3
 800f3c2:	401a      	ands	r2, r3
 800f3c4:	68bb      	ldr	r3, [r7, #8]
 800f3c6:	0a1b      	lsrs	r3, r3, #8
 800f3c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f3ca:	697b      	ldr	r3, [r7, #20]
 800f3cc:	fa93 f3a3 	rbit	r3, r3
 800f3d0:	613b      	str	r3, [r7, #16]
  return result;
 800f3d2:	693b      	ldr	r3, [r7, #16]
 800f3d4:	fab3 f383 	clz	r3, r3
 800f3d8:	b2db      	uxtb	r3, r3
 800f3da:	4619      	mov	r1, r3
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	408b      	lsls	r3, r1
 800f3e0:	431a      	orrs	r2, r3
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	60da      	str	r2, [r3, #12]
}
 800f3e6:	bf00      	nop
 800f3e8:	371c      	adds	r7, #28
 800f3ea:	46bd      	mov	sp, r7
 800f3ec:	bc80      	pop	{r7}
 800f3ee:	4770      	bx	lr

0800f3f0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	b088      	sub	sp, #32
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	6078      	str	r0, [r7, #4]
 800f3f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 800f3fa:	683b      	ldr	r3, [r7, #0]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	021b      	lsls	r3, r3, #8
 800f400:	0c1b      	lsrs	r3, r3, #16
 800f402:	617b      	str	r3, [r7, #20]
 800f404:	697b      	ldr	r3, [r7, #20]
 800f406:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f408:	693b      	ldr	r3, [r7, #16]
 800f40a:	fa93 f3a3 	rbit	r3, r3
 800f40e:	60fb      	str	r3, [r7, #12]
  return result;
 800f410:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 800f412:	fab3 f383 	clz	r3, r3
 800f416:	b2db      	uxtb	r3, r3
 800f418:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 800f41a:	e044      	b.n	800f4a6 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 800f41c:	2201      	movs	r2, #1
 800f41e:	69fb      	ldr	r3, [r7, #28]
 800f420:	409a      	lsls	r2, r3
 800f422:	697b      	ldr	r3, [r7, #20]
 800f424:	4013      	ands	r3, r2
 800f426:	2b00      	cmp	r3, #0
 800f428:	d03a      	beq.n	800f4a0 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 800f42a:	69fb      	ldr	r3, [r7, #28]
 800f42c:	2b07      	cmp	r3, #7
 800f42e:	d806      	bhi.n	800f43e <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 800f430:	f240 1201 	movw	r2, #257	; 0x101
 800f434:	69fb      	ldr	r3, [r7, #28]
 800f436:	fa02 f303 	lsl.w	r3, r2, r3
 800f43a:	61bb      	str	r3, [r7, #24]
 800f43c:	e008      	b.n	800f450 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 800f43e:	69fb      	ldr	r3, [r7, #28]
 800f440:	3b08      	subs	r3, #8
 800f442:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800f446:	fa02 f303 	lsl.w	r3, r2, r3
 800f44a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f44e:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 800f450:	683b      	ldr	r3, [r7, #0]
 800f452:	685b      	ldr	r3, [r3, #4]
 800f454:	2b08      	cmp	r3, #8
 800f456:	d106      	bne.n	800f466 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800f458:	683b      	ldr	r3, [r7, #0]
 800f45a:	691b      	ldr	r3, [r3, #16]
 800f45c:	461a      	mov	r2, r3
 800f45e:	69b9      	ldr	r1, [r7, #24]
 800f460:	6878      	ldr	r0, [r7, #4]
 800f462:	f7ff ffa3 	bl	800f3ac <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800f466:	683b      	ldr	r3, [r7, #0]
 800f468:	685b      	ldr	r3, [r3, #4]
 800f46a:	461a      	mov	r2, r3
 800f46c:	69b9      	ldr	r1, [r7, #24]
 800f46e:	6878      	ldr	r0, [r7, #4]
 800f470:	f7ff ff06 	bl	800f280 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800f474:	683b      	ldr	r3, [r7, #0]
 800f476:	685b      	ldr	r3, [r3, #4]
 800f478:	2b01      	cmp	r3, #1
 800f47a:	d003      	beq.n	800f484 <LL_GPIO_Init+0x94>
 800f47c:	683b      	ldr	r3, [r7, #0]
 800f47e:	685b      	ldr	r3, [r3, #4]
 800f480:	2b09      	cmp	r3, #9
 800f482:	d10d      	bne.n	800f4a0 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800f484:	683b      	ldr	r3, [r7, #0]
 800f486:	689b      	ldr	r3, [r3, #8]
 800f488:	461a      	mov	r2, r3
 800f48a:	69b9      	ldr	r1, [r7, #24]
 800f48c:	6878      	ldr	r0, [r7, #4]
 800f48e:	f7ff ff29 	bl	800f2e4 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800f492:	683b      	ldr	r3, [r7, #0]
 800f494:	68db      	ldr	r3, [r3, #12]
 800f496:	461a      	mov	r2, r3
 800f498:	69b9      	ldr	r1, [r7, #24]
 800f49a:	6878      	ldr	r0, [r7, #4]
 800f49c:	f7ff ff54 	bl	800f348 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 800f4a0:	69fb      	ldr	r3, [r7, #28]
 800f4a2:	3301      	adds	r3, #1
 800f4a4:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 800f4a6:	697a      	ldr	r2, [r7, #20]
 800f4a8:	69fb      	ldr	r3, [r7, #28]
 800f4aa:	fa22 f303 	lsr.w	r3, r2, r3
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d1b4      	bne.n	800f41c <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 800f4b2:	2300      	movs	r3, #0
}
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	3720      	adds	r7, #32
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	bd80      	pop	{r7, pc}

0800f4bc <LL_SPI_IsEnabled>:
{
 800f4bc:	b480      	push	{r7}
 800f4be:	b083      	sub	sp, #12
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4cc:	2b40      	cmp	r3, #64	; 0x40
 800f4ce:	d101      	bne.n	800f4d4 <LL_SPI_IsEnabled+0x18>
 800f4d0:	2301      	movs	r3, #1
 800f4d2:	e000      	b.n	800f4d6 <LL_SPI_IsEnabled+0x1a>
 800f4d4:	2300      	movs	r3, #0
}
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	370c      	adds	r7, #12
 800f4da:	46bd      	mov	sp, r7
 800f4dc:	bc80      	pop	{r7}
 800f4de:	4770      	bx	lr

0800f4e0 <LL_SPI_SetCRCPolynomial>:
{
 800f4e0:	b480      	push	{r7}
 800f4e2:	b083      	sub	sp, #12
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	6078      	str	r0, [r7, #4]
 800f4e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800f4ea:	683b      	ldr	r3, [r7, #0]
 800f4ec:	b29b      	uxth	r3, r3
 800f4ee:	461a      	mov	r2, r3
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	611a      	str	r2, [r3, #16]
}
 800f4f4:	bf00      	nop
 800f4f6:	370c      	adds	r7, #12
 800f4f8:	46bd      	mov	sp, r7
 800f4fa:	bc80      	pop	{r7}
 800f4fc:	4770      	bx	lr

0800f4fe <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800f4fe:	b580      	push	{r7, lr}
 800f500:	b084      	sub	sp, #16
 800f502:	af00      	add	r7, sp, #0
 800f504:	6078      	str	r0, [r7, #4]
 800f506:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800f508:	2301      	movs	r3, #1
 800f50a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800f50c:	6878      	ldr	r0, [r7, #4]
 800f50e:	f7ff ffd5 	bl	800f4bc <LL_SPI_IsEnabled>
 800f512:	4603      	mov	r3, r0
 800f514:	2b00      	cmp	r3, #0
 800f516:	d139      	bne.n	800f58c <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f520:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 800f524:	683a      	ldr	r2, [r7, #0]
 800f526:	6811      	ldr	r1, [r2, #0]
 800f528:	683a      	ldr	r2, [r7, #0]
 800f52a:	6852      	ldr	r2, [r2, #4]
 800f52c:	4311      	orrs	r1, r2
 800f52e:	683a      	ldr	r2, [r7, #0]
 800f530:	6892      	ldr	r2, [r2, #8]
 800f532:	4311      	orrs	r1, r2
 800f534:	683a      	ldr	r2, [r7, #0]
 800f536:	68d2      	ldr	r2, [r2, #12]
 800f538:	4311      	orrs	r1, r2
 800f53a:	683a      	ldr	r2, [r7, #0]
 800f53c:	6912      	ldr	r2, [r2, #16]
 800f53e:	4311      	orrs	r1, r2
 800f540:	683a      	ldr	r2, [r7, #0]
 800f542:	6952      	ldr	r2, [r2, #20]
 800f544:	4311      	orrs	r1, r2
 800f546:	683a      	ldr	r2, [r7, #0]
 800f548:	6992      	ldr	r2, [r2, #24]
 800f54a:	4311      	orrs	r1, r2
 800f54c:	683a      	ldr	r2, [r7, #0]
 800f54e:	69d2      	ldr	r2, [r2, #28]
 800f550:	4311      	orrs	r1, r2
 800f552:	683a      	ldr	r2, [r7, #0]
 800f554:	6a12      	ldr	r2, [r2, #32]
 800f556:	430a      	orrs	r2, r1
 800f558:	431a      	orrs	r2, r3
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	685b      	ldr	r3, [r3, #4]
 800f562:	f023 0204 	bic.w	r2, r3, #4
 800f566:	683b      	ldr	r3, [r7, #0]
 800f568:	695b      	ldr	r3, [r3, #20]
 800f56a:	0c1b      	lsrs	r3, r3, #16
 800f56c:	431a      	orrs	r2, r3
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800f572:	683b      	ldr	r3, [r7, #0]
 800f574:	6a1b      	ldr	r3, [r3, #32]
 800f576:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f57a:	d105      	bne.n	800f588 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800f57c:	683b      	ldr	r3, [r7, #0]
 800f57e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f580:	4619      	mov	r1, r3
 800f582:	6878      	ldr	r0, [r7, #4]
 800f584:	f7ff ffac 	bl	800f4e0 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800f588:	2300      	movs	r3, #0
 800f58a:	73fb      	strb	r3, [r7, #15]
  }

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	69db      	ldr	r3, [r3, #28]
 800f590:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2S_SUPPORT */
  return status;
 800f598:	7bfb      	ldrb	r3, [r7, #15]
}
 800f59a:	4618      	mov	r0, r3
 800f59c:	3710      	adds	r7, #16
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	bd80      	pop	{r7, pc}

0800f5a2 <LL_TIM_SetPrescaler>:
{
 800f5a2:	b480      	push	{r7}
 800f5a4:	b083      	sub	sp, #12
 800f5a6:	af00      	add	r7, sp, #0
 800f5a8:	6078      	str	r0, [r7, #4]
 800f5aa:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	683a      	ldr	r2, [r7, #0]
 800f5b0:	629a      	str	r2, [r3, #40]	; 0x28
}
 800f5b2:	bf00      	nop
 800f5b4:	370c      	adds	r7, #12
 800f5b6:	46bd      	mov	sp, r7
 800f5b8:	bc80      	pop	{r7}
 800f5ba:	4770      	bx	lr

0800f5bc <LL_TIM_SetAutoReload>:
{
 800f5bc:	b480      	push	{r7}
 800f5be:	b083      	sub	sp, #12
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
 800f5c4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	683a      	ldr	r2, [r7, #0]
 800f5ca:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800f5cc:	bf00      	nop
 800f5ce:	370c      	adds	r7, #12
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	bc80      	pop	{r7}
 800f5d4:	4770      	bx	lr

0800f5d6 <LL_TIM_SetRepetitionCounter>:
{
 800f5d6:	b480      	push	{r7}
 800f5d8:	b083      	sub	sp, #12
 800f5da:	af00      	add	r7, sp, #0
 800f5dc:	6078      	str	r0, [r7, #4]
 800f5de:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	683a      	ldr	r2, [r7, #0]
 800f5e4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800f5e6:	bf00      	nop
 800f5e8:	370c      	adds	r7, #12
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	bc80      	pop	{r7}
 800f5ee:	4770      	bx	lr

0800f5f0 <LL_TIM_OC_SetCompareCH1>:
{
 800f5f0:	b480      	push	{r7}
 800f5f2:	b083      	sub	sp, #12
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	6078      	str	r0, [r7, #4]
 800f5f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	683a      	ldr	r2, [r7, #0]
 800f5fe:	635a      	str	r2, [r3, #52]	; 0x34
}
 800f600:	bf00      	nop
 800f602:	370c      	adds	r7, #12
 800f604:	46bd      	mov	sp, r7
 800f606:	bc80      	pop	{r7}
 800f608:	4770      	bx	lr

0800f60a <LL_TIM_OC_SetCompareCH2>:
{
 800f60a:	b480      	push	{r7}
 800f60c:	b083      	sub	sp, #12
 800f60e:	af00      	add	r7, sp, #0
 800f610:	6078      	str	r0, [r7, #4]
 800f612:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	683a      	ldr	r2, [r7, #0]
 800f618:	639a      	str	r2, [r3, #56]	; 0x38
}
 800f61a:	bf00      	nop
 800f61c:	370c      	adds	r7, #12
 800f61e:	46bd      	mov	sp, r7
 800f620:	bc80      	pop	{r7}
 800f622:	4770      	bx	lr

0800f624 <LL_TIM_OC_SetCompareCH3>:
{
 800f624:	b480      	push	{r7}
 800f626:	b083      	sub	sp, #12
 800f628:	af00      	add	r7, sp, #0
 800f62a:	6078      	str	r0, [r7, #4]
 800f62c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	683a      	ldr	r2, [r7, #0]
 800f632:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800f634:	bf00      	nop
 800f636:	370c      	adds	r7, #12
 800f638:	46bd      	mov	sp, r7
 800f63a:	bc80      	pop	{r7}
 800f63c:	4770      	bx	lr

0800f63e <LL_TIM_OC_SetCompareCH4>:
{
 800f63e:	b480      	push	{r7}
 800f640:	b083      	sub	sp, #12
 800f642:	af00      	add	r7, sp, #0
 800f644:	6078      	str	r0, [r7, #4]
 800f646:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	683a      	ldr	r2, [r7, #0]
 800f64c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800f64e:	bf00      	nop
 800f650:	370c      	adds	r7, #12
 800f652:	46bd      	mov	sp, r7
 800f654:	bc80      	pop	{r7}
 800f656:	4770      	bx	lr

0800f658 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800f658:	b480      	push	{r7}
 800f65a:	b083      	sub	sp, #12
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	695b      	ldr	r3, [r3, #20]
 800f664:	f043 0201 	orr.w	r2, r3, #1
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	615a      	str	r2, [r3, #20]
}
 800f66c:	bf00      	nop
 800f66e:	370c      	adds	r7, #12
 800f670:	46bd      	mov	sp, r7
 800f672:	bc80      	pop	{r7}
 800f674:	4770      	bx	lr
	...

0800f678 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b084      	sub	sp, #16
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	6078      	str	r0, [r7, #4]
 800f680:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	4a31      	ldr	r2, [pc, #196]	; (800f750 <LL_TIM_Init+0xd8>)
 800f68c:	4293      	cmp	r3, r2
 800f68e:	d013      	beq.n	800f6b8 <LL_TIM_Init+0x40>
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	4a30      	ldr	r2, [pc, #192]	; (800f754 <LL_TIM_Init+0xdc>)
 800f694:	4293      	cmp	r3, r2
 800f696:	d00f      	beq.n	800f6b8 <LL_TIM_Init+0x40>
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f69e:	d00b      	beq.n	800f6b8 <LL_TIM_Init+0x40>
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	4a2d      	ldr	r2, [pc, #180]	; (800f758 <LL_TIM_Init+0xe0>)
 800f6a4:	4293      	cmp	r3, r2
 800f6a6:	d007      	beq.n	800f6b8 <LL_TIM_Init+0x40>
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	4a2c      	ldr	r2, [pc, #176]	; (800f75c <LL_TIM_Init+0xe4>)
 800f6ac:	4293      	cmp	r3, r2
 800f6ae:	d003      	beq.n	800f6b8 <LL_TIM_Init+0x40>
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	4a2b      	ldr	r2, [pc, #172]	; (800f760 <LL_TIM_Init+0xe8>)
 800f6b4:	4293      	cmp	r3, r2
 800f6b6:	d106      	bne.n	800f6c6 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800f6be:	683b      	ldr	r3, [r7, #0]
 800f6c0:	685b      	ldr	r3, [r3, #4]
 800f6c2:	4313      	orrs	r3, r2
 800f6c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	4a21      	ldr	r2, [pc, #132]	; (800f750 <LL_TIM_Init+0xd8>)
 800f6ca:	4293      	cmp	r3, r2
 800f6cc:	d013      	beq.n	800f6f6 <LL_TIM_Init+0x7e>
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	4a20      	ldr	r2, [pc, #128]	; (800f754 <LL_TIM_Init+0xdc>)
 800f6d2:	4293      	cmp	r3, r2
 800f6d4:	d00f      	beq.n	800f6f6 <LL_TIM_Init+0x7e>
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f6dc:	d00b      	beq.n	800f6f6 <LL_TIM_Init+0x7e>
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	4a1d      	ldr	r2, [pc, #116]	; (800f758 <LL_TIM_Init+0xe0>)
 800f6e2:	4293      	cmp	r3, r2
 800f6e4:	d007      	beq.n	800f6f6 <LL_TIM_Init+0x7e>
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	4a1c      	ldr	r2, [pc, #112]	; (800f75c <LL_TIM_Init+0xe4>)
 800f6ea:	4293      	cmp	r3, r2
 800f6ec:	d003      	beq.n	800f6f6 <LL_TIM_Init+0x7e>
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	4a1b      	ldr	r2, [pc, #108]	; (800f760 <LL_TIM_Init+0xe8>)
 800f6f2:	4293      	cmp	r3, r2
 800f6f4:	d106      	bne.n	800f704 <LL_TIM_Init+0x8c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f6fc:	683b      	ldr	r3, [r7, #0]
 800f6fe:	68db      	ldr	r3, [r3, #12]
 800f700:	4313      	orrs	r3, r2
 800f702:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	68fa      	ldr	r2, [r7, #12]
 800f708:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800f70a:	683b      	ldr	r3, [r7, #0]
 800f70c:	689b      	ldr	r3, [r3, #8]
 800f70e:	4619      	mov	r1, r3
 800f710:	6878      	ldr	r0, [r7, #4]
 800f712:	f7ff ff53 	bl	800f5bc <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800f716:	683b      	ldr	r3, [r7, #0]
 800f718:	881b      	ldrh	r3, [r3, #0]
 800f71a:	4619      	mov	r1, r3
 800f71c:	6878      	ldr	r0, [r7, #4]
 800f71e:	f7ff ff40 	bl	800f5a2 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	4a0a      	ldr	r2, [pc, #40]	; (800f750 <LL_TIM_Init+0xd8>)
 800f726:	4293      	cmp	r3, r2
 800f728:	d003      	beq.n	800f732 <LL_TIM_Init+0xba>
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	4a09      	ldr	r2, [pc, #36]	; (800f754 <LL_TIM_Init+0xdc>)
 800f72e:	4293      	cmp	r3, r2
 800f730:	d105      	bne.n	800f73e <LL_TIM_Init+0xc6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800f732:	683b      	ldr	r3, [r7, #0]
 800f734:	691b      	ldr	r3, [r3, #16]
 800f736:	4619      	mov	r1, r3
 800f738:	6878      	ldr	r0, [r7, #4]
 800f73a:	f7ff ff4c 	bl	800f5d6 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800f73e:	6878      	ldr	r0, [r7, #4]
 800f740:	f7ff ff8a 	bl	800f658 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800f744:	2300      	movs	r3, #0
}
 800f746:	4618      	mov	r0, r3
 800f748:	3710      	adds	r7, #16
 800f74a:	46bd      	mov	sp, r7
 800f74c:	bd80      	pop	{r7, pc}
 800f74e:	bf00      	nop
 800f750:	40012c00 	.word	0x40012c00
 800f754:	40013400 	.word	0x40013400
 800f758:	40000400 	.word	0x40000400
 800f75c:	40000800 	.word	0x40000800
 800f760:	40000c00 	.word	0x40000c00

0800f764 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 800f764:	b580      	push	{r7, lr}
 800f766:	b086      	sub	sp, #24
 800f768:	af00      	add	r7, sp, #0
 800f76a:	60f8      	str	r0, [r7, #12]
 800f76c:	60b9      	str	r1, [r7, #8]
 800f76e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 800f770:	2301      	movs	r3, #1
 800f772:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 800f774:	68bb      	ldr	r3, [r7, #8]
 800f776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f77a:	d027      	beq.n	800f7cc <LL_TIM_OC_Init+0x68>
 800f77c:	68bb      	ldr	r3, [r7, #8]
 800f77e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f782:	d82a      	bhi.n	800f7da <LL_TIM_OC_Init+0x76>
 800f784:	68bb      	ldr	r3, [r7, #8]
 800f786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f78a:	d018      	beq.n	800f7be <LL_TIM_OC_Init+0x5a>
 800f78c:	68bb      	ldr	r3, [r7, #8]
 800f78e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f792:	d822      	bhi.n	800f7da <LL_TIM_OC_Init+0x76>
 800f794:	68bb      	ldr	r3, [r7, #8]
 800f796:	2b01      	cmp	r3, #1
 800f798:	d003      	beq.n	800f7a2 <LL_TIM_OC_Init+0x3e>
 800f79a:	68bb      	ldr	r3, [r7, #8]
 800f79c:	2b10      	cmp	r3, #16
 800f79e:	d007      	beq.n	800f7b0 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 800f7a0:	e01b      	b.n	800f7da <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800f7a2:	6879      	ldr	r1, [r7, #4]
 800f7a4:	68f8      	ldr	r0, [r7, #12]
 800f7a6:	f000 f81f 	bl	800f7e8 <OC1Config>
 800f7aa:	4603      	mov	r3, r0
 800f7ac:	75fb      	strb	r3, [r7, #23]
      break;
 800f7ae:	e015      	b.n	800f7dc <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800f7b0:	6879      	ldr	r1, [r7, #4]
 800f7b2:	68f8      	ldr	r0, [r7, #12]
 800f7b4:	f000 f884 	bl	800f8c0 <OC2Config>
 800f7b8:	4603      	mov	r3, r0
 800f7ba:	75fb      	strb	r3, [r7, #23]
      break;
 800f7bc:	e00e      	b.n	800f7dc <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800f7be:	6879      	ldr	r1, [r7, #4]
 800f7c0:	68f8      	ldr	r0, [r7, #12]
 800f7c2:	f000 f8ed 	bl	800f9a0 <OC3Config>
 800f7c6:	4603      	mov	r3, r0
 800f7c8:	75fb      	strb	r3, [r7, #23]
      break;
 800f7ca:	e007      	b.n	800f7dc <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800f7cc:	6879      	ldr	r1, [r7, #4]
 800f7ce:	68f8      	ldr	r0, [r7, #12]
 800f7d0:	f000 f956 	bl	800fa80 <OC4Config>
 800f7d4:	4603      	mov	r3, r0
 800f7d6:	75fb      	strb	r3, [r7, #23]
      break;
 800f7d8:	e000      	b.n	800f7dc <LL_TIM_OC_Init+0x78>
      break;
 800f7da:	bf00      	nop
  }

  return result;
 800f7dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800f7de:	4618      	mov	r0, r3
 800f7e0:	3718      	adds	r7, #24
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	bd80      	pop	{r7, pc}
	...

0800f7e8 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b086      	sub	sp, #24
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
 800f7f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	6a1b      	ldr	r3, [r3, #32]
 800f7f6:	f023 0201 	bic.w	r2, r3, #1
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	6a1b      	ldr	r3, [r3, #32]
 800f802:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	685b      	ldr	r3, [r3, #4]
 800f808:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	699b      	ldr	r3, [r3, #24]
 800f80e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	f023 0303 	bic.w	r3, r3, #3
 800f816:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800f81e:	683b      	ldr	r3, [r7, #0]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	4313      	orrs	r3, r2
 800f824:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800f826:	697b      	ldr	r3, [r7, #20]
 800f828:	f023 0202 	bic.w	r2, r3, #2
 800f82c:	683b      	ldr	r3, [r7, #0]
 800f82e:	691b      	ldr	r3, [r3, #16]
 800f830:	4313      	orrs	r3, r2
 800f832:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800f834:	697b      	ldr	r3, [r7, #20]
 800f836:	f023 0201 	bic.w	r2, r3, #1
 800f83a:	683b      	ldr	r3, [r7, #0]
 800f83c:	685b      	ldr	r3, [r3, #4]
 800f83e:	4313      	orrs	r3, r2
 800f840:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	4a1c      	ldr	r2, [pc, #112]	; (800f8b8 <OC1Config+0xd0>)
 800f846:	4293      	cmp	r3, r2
 800f848:	d003      	beq.n	800f852 <OC1Config+0x6a>
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	4a1b      	ldr	r2, [pc, #108]	; (800f8bc <OC1Config+0xd4>)
 800f84e:	4293      	cmp	r3, r2
 800f850:	d11e      	bne.n	800f890 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800f852:	697b      	ldr	r3, [r7, #20]
 800f854:	f023 0208 	bic.w	r2, r3, #8
 800f858:	683b      	ldr	r3, [r7, #0]
 800f85a:	695b      	ldr	r3, [r3, #20]
 800f85c:	009b      	lsls	r3, r3, #2
 800f85e:	4313      	orrs	r3, r2
 800f860:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800f862:	697b      	ldr	r3, [r7, #20]
 800f864:	f023 0204 	bic.w	r2, r3, #4
 800f868:	683b      	ldr	r3, [r7, #0]
 800f86a:	689b      	ldr	r3, [r3, #8]
 800f86c:	009b      	lsls	r3, r3, #2
 800f86e:	4313      	orrs	r3, r2
 800f870:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800f872:	693b      	ldr	r3, [r7, #16]
 800f874:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f878:	683b      	ldr	r3, [r7, #0]
 800f87a:	699b      	ldr	r3, [r3, #24]
 800f87c:	4313      	orrs	r3, r2
 800f87e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800f880:	693b      	ldr	r3, [r7, #16]
 800f882:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800f886:	683b      	ldr	r3, [r7, #0]
 800f888:	69db      	ldr	r3, [r3, #28]
 800f88a:	005b      	lsls	r3, r3, #1
 800f88c:	4313      	orrs	r3, r2
 800f88e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	693a      	ldr	r2, [r7, #16]
 800f894:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	68fa      	ldr	r2, [r7, #12]
 800f89a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800f89c:	683b      	ldr	r3, [r7, #0]
 800f89e:	68db      	ldr	r3, [r3, #12]
 800f8a0:	4619      	mov	r1, r3
 800f8a2:	6878      	ldr	r0, [r7, #4]
 800f8a4:	f7ff fea4 	bl	800f5f0 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	697a      	ldr	r2, [r7, #20]
 800f8ac:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800f8ae:	2300      	movs	r3, #0
}
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	3718      	adds	r7, #24
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	bd80      	pop	{r7, pc}
 800f8b8:	40012c00 	.word	0x40012c00
 800f8bc:	40013400 	.word	0x40013400

0800f8c0 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b086      	sub	sp, #24
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
 800f8c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	6a1b      	ldr	r3, [r3, #32]
 800f8ce:	f023 0210 	bic.w	r2, r3, #16
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	6a1b      	ldr	r3, [r3, #32]
 800f8da:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	685b      	ldr	r3, [r3, #4]
 800f8e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	699b      	ldr	r3, [r3, #24]
 800f8e6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f8ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800f8f6:	683b      	ldr	r3, [r7, #0]
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	021b      	lsls	r3, r3, #8
 800f8fc:	4313      	orrs	r3, r2
 800f8fe:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800f900:	697b      	ldr	r3, [r7, #20]
 800f902:	f023 0220 	bic.w	r2, r3, #32
 800f906:	683b      	ldr	r3, [r7, #0]
 800f908:	691b      	ldr	r3, [r3, #16]
 800f90a:	011b      	lsls	r3, r3, #4
 800f90c:	4313      	orrs	r3, r2
 800f90e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 800f910:	697b      	ldr	r3, [r7, #20]
 800f912:	f023 0210 	bic.w	r2, r3, #16
 800f916:	683b      	ldr	r3, [r7, #0]
 800f918:	685b      	ldr	r3, [r3, #4]
 800f91a:	011b      	lsls	r3, r3, #4
 800f91c:	4313      	orrs	r3, r2
 800f91e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	4a1d      	ldr	r2, [pc, #116]	; (800f998 <OC2Config+0xd8>)
 800f924:	4293      	cmp	r3, r2
 800f926:	d003      	beq.n	800f930 <OC2Config+0x70>
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	4a1c      	ldr	r2, [pc, #112]	; (800f99c <OC2Config+0xdc>)
 800f92c:	4293      	cmp	r3, r2
 800f92e:	d11f      	bne.n	800f970 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800f930:	697b      	ldr	r3, [r7, #20]
 800f932:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f936:	683b      	ldr	r3, [r7, #0]
 800f938:	695b      	ldr	r3, [r3, #20]
 800f93a:	019b      	lsls	r3, r3, #6
 800f93c:	4313      	orrs	r3, r2
 800f93e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800f940:	697b      	ldr	r3, [r7, #20]
 800f942:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800f946:	683b      	ldr	r3, [r7, #0]
 800f948:	689b      	ldr	r3, [r3, #8]
 800f94a:	019b      	lsls	r3, r3, #6
 800f94c:	4313      	orrs	r3, r2
 800f94e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800f950:	693b      	ldr	r3, [r7, #16]
 800f952:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f956:	683b      	ldr	r3, [r7, #0]
 800f958:	699b      	ldr	r3, [r3, #24]
 800f95a:	009b      	lsls	r3, r3, #2
 800f95c:	4313      	orrs	r3, r2
 800f95e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800f960:	693b      	ldr	r3, [r7, #16]
 800f962:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f966:	683b      	ldr	r3, [r7, #0]
 800f968:	69db      	ldr	r3, [r3, #28]
 800f96a:	00db      	lsls	r3, r3, #3
 800f96c:	4313      	orrs	r3, r2
 800f96e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	693a      	ldr	r2, [r7, #16]
 800f974:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	68fa      	ldr	r2, [r7, #12]
 800f97a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 800f97c:	683b      	ldr	r3, [r7, #0]
 800f97e:	68db      	ldr	r3, [r3, #12]
 800f980:	4619      	mov	r1, r3
 800f982:	6878      	ldr	r0, [r7, #4]
 800f984:	f7ff fe41 	bl	800f60a <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	697a      	ldr	r2, [r7, #20]
 800f98c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800f98e:	2300      	movs	r3, #0
}
 800f990:	4618      	mov	r0, r3
 800f992:	3718      	adds	r7, #24
 800f994:	46bd      	mov	sp, r7
 800f996:	bd80      	pop	{r7, pc}
 800f998:	40012c00 	.word	0x40012c00
 800f99c:	40013400 	.word	0x40013400

0800f9a0 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b086      	sub	sp, #24
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	6078      	str	r0, [r7, #4]
 800f9a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	6a1b      	ldr	r3, [r3, #32]
 800f9ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	6a1b      	ldr	r3, [r3, #32]
 800f9ba:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	685b      	ldr	r3, [r3, #4]
 800f9c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	69db      	ldr	r3, [r3, #28]
 800f9c6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	f023 0303 	bic.w	r3, r3, #3
 800f9ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800f9d6:	683b      	ldr	r3, [r7, #0]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	4313      	orrs	r3, r2
 800f9dc:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800f9de:	697b      	ldr	r3, [r7, #20]
 800f9e0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800f9e4:	683b      	ldr	r3, [r7, #0]
 800f9e6:	691b      	ldr	r3, [r3, #16]
 800f9e8:	021b      	lsls	r3, r3, #8
 800f9ea:	4313      	orrs	r3, r2
 800f9ec:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800f9ee:	697b      	ldr	r3, [r7, #20]
 800f9f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f9f4:	683b      	ldr	r3, [r7, #0]
 800f9f6:	685b      	ldr	r3, [r3, #4]
 800f9f8:	021b      	lsls	r3, r3, #8
 800f9fa:	4313      	orrs	r3, r2
 800f9fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	4a1d      	ldr	r2, [pc, #116]	; (800fa78 <OC3Config+0xd8>)
 800fa02:	4293      	cmp	r3, r2
 800fa04:	d003      	beq.n	800fa0e <OC3Config+0x6e>
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	4a1c      	ldr	r2, [pc, #112]	; (800fa7c <OC3Config+0xdc>)
 800fa0a:	4293      	cmp	r3, r2
 800fa0c:	d11f      	bne.n	800fa4e <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800fa0e:	697b      	ldr	r3, [r7, #20]
 800fa10:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800fa14:	683b      	ldr	r3, [r7, #0]
 800fa16:	695b      	ldr	r3, [r3, #20]
 800fa18:	029b      	lsls	r3, r3, #10
 800fa1a:	4313      	orrs	r3, r2
 800fa1c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800fa1e:	697b      	ldr	r3, [r7, #20]
 800fa20:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800fa24:	683b      	ldr	r3, [r7, #0]
 800fa26:	689b      	ldr	r3, [r3, #8]
 800fa28:	029b      	lsls	r3, r3, #10
 800fa2a:	4313      	orrs	r3, r2
 800fa2c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800fa2e:	693b      	ldr	r3, [r7, #16]
 800fa30:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fa34:	683b      	ldr	r3, [r7, #0]
 800fa36:	699b      	ldr	r3, [r3, #24]
 800fa38:	011b      	lsls	r3, r3, #4
 800fa3a:	4313      	orrs	r3, r2
 800fa3c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800fa3e:	693b      	ldr	r3, [r7, #16]
 800fa40:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800fa44:	683b      	ldr	r3, [r7, #0]
 800fa46:	69db      	ldr	r3, [r3, #28]
 800fa48:	015b      	lsls	r3, r3, #5
 800fa4a:	4313      	orrs	r3, r2
 800fa4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	693a      	ldr	r2, [r7, #16]
 800fa52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	68fa      	ldr	r2, [r7, #12]
 800fa58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800fa5a:	683b      	ldr	r3, [r7, #0]
 800fa5c:	68db      	ldr	r3, [r3, #12]
 800fa5e:	4619      	mov	r1, r3
 800fa60:	6878      	ldr	r0, [r7, #4]
 800fa62:	f7ff fddf 	bl	800f624 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	697a      	ldr	r2, [r7, #20]
 800fa6a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800fa6c:	2300      	movs	r3, #0
}
 800fa6e:	4618      	mov	r0, r3
 800fa70:	3718      	adds	r7, #24
 800fa72:	46bd      	mov	sp, r7
 800fa74:	bd80      	pop	{r7, pc}
 800fa76:	bf00      	nop
 800fa78:	40012c00 	.word	0x40012c00
 800fa7c:	40013400 	.word	0x40013400

0800fa80 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800fa80:	b580      	push	{r7, lr}
 800fa82:	b086      	sub	sp, #24
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
 800fa88:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	6a1b      	ldr	r3, [r3, #32]
 800fa8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	6a1b      	ldr	r3, [r3, #32]
 800fa9a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	685b      	ldr	r3, [r3, #4]
 800faa0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	69db      	ldr	r3, [r3, #28]
 800faa6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800faae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800fab6:	683b      	ldr	r3, [r7, #0]
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	021b      	lsls	r3, r3, #8
 800fabc:	4313      	orrs	r3, r2
 800fabe:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800fac0:	693b      	ldr	r3, [r7, #16]
 800fac2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800fac6:	683b      	ldr	r3, [r7, #0]
 800fac8:	691b      	ldr	r3, [r3, #16]
 800faca:	031b      	lsls	r3, r3, #12
 800facc:	4313      	orrs	r3, r2
 800face:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800fad0:	693b      	ldr	r3, [r7, #16]
 800fad2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fad6:	683b      	ldr	r3, [r7, #0]
 800fad8:	685b      	ldr	r3, [r3, #4]
 800fada:	031b      	lsls	r3, r3, #12
 800fadc:	4313      	orrs	r3, r2
 800fade:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	4a11      	ldr	r2, [pc, #68]	; (800fb28 <OC4Config+0xa8>)
 800fae4:	4293      	cmp	r3, r2
 800fae6:	d003      	beq.n	800faf0 <OC4Config+0x70>
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	4a10      	ldr	r2, [pc, #64]	; (800fb2c <OC4Config+0xac>)
 800faec:	4293      	cmp	r3, r2
 800faee:	d107      	bne.n	800fb00 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 800faf0:	697b      	ldr	r3, [r7, #20]
 800faf2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800faf6:	683b      	ldr	r3, [r7, #0]
 800faf8:	699b      	ldr	r3, [r3, #24]
 800fafa:	019b      	lsls	r3, r3, #6
 800fafc:	4313      	orrs	r3, r2
 800fafe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	697a      	ldr	r2, [r7, #20]
 800fb04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	68fa      	ldr	r2, [r7, #12]
 800fb0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800fb0c:	683b      	ldr	r3, [r7, #0]
 800fb0e:	68db      	ldr	r3, [r3, #12]
 800fb10:	4619      	mov	r1, r3
 800fb12:	6878      	ldr	r0, [r7, #4]
 800fb14:	f7ff fd93 	bl	800f63e <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	693a      	ldr	r2, [r7, #16]
 800fb1c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800fb1e:	2300      	movs	r3, #0
}
 800fb20:	4618      	mov	r0, r3
 800fb22:	3718      	adds	r7, #24
 800fb24:	46bd      	mov	sp, r7
 800fb26:	bd80      	pop	{r7, pc}
 800fb28:	40012c00 	.word	0x40012c00
 800fb2c:	40013400 	.word	0x40013400

0800fb30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800fb30:	b084      	sub	sp, #16
 800fb32:	b480      	push	{r7}
 800fb34:	b083      	sub	sp, #12
 800fb36:	af00      	add	r7, sp, #0
 800fb38:	6078      	str	r0, [r7, #4]
 800fb3a:	f107 0014 	add.w	r0, r7, #20
 800fb3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800fb42:	2300      	movs	r3, #0
}
 800fb44:	4618      	mov	r0, r3
 800fb46:	370c      	adds	r7, #12
 800fb48:	46bd      	mov	sp, r7
 800fb4a:	bc80      	pop	{r7}
 800fb4c:	b004      	add	sp, #16
 800fb4e:	4770      	bx	lr

0800fb50 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800fb50:	b480      	push	{r7}
 800fb52:	b085      	sub	sp, #20
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	2200      	movs	r2, #0
 800fb5c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800fb60:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800fb64:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	b29a      	uxth	r2, r3
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800fb70:	2300      	movs	r3, #0
}
 800fb72:	4618      	mov	r0, r3
 800fb74:	3714      	adds	r7, #20
 800fb76:	46bd      	mov	sp, r7
 800fb78:	bc80      	pop	{r7}
 800fb7a:	4770      	bx	lr

0800fb7c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800fb7c:	b480      	push	{r7}
 800fb7e:	b085      	sub	sp, #20
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800fb84:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800fb88:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800fb90:	b29a      	uxth	r2, r3
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	b29b      	uxth	r3, r3
 800fb96:	43db      	mvns	r3, r3
 800fb98:	b29b      	uxth	r3, r3
 800fb9a:	4013      	ands	r3, r2
 800fb9c:	b29a      	uxth	r2, r3
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800fba4:	2300      	movs	r3, #0
}
 800fba6:	4618      	mov	r0, r3
 800fba8:	3714      	adds	r7, #20
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	bc80      	pop	{r7}
 800fbae:	4770      	bx	lr

0800fbb0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800fbb0:	b480      	push	{r7}
 800fbb2:	b083      	sub	sp, #12
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	6078      	str	r0, [r7, #4]
 800fbb8:	460b      	mov	r3, r1
 800fbba:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800fbbc:	2300      	movs	r3, #0
}
 800fbbe:	4618      	mov	r0, r3
 800fbc0:	370c      	adds	r7, #12
 800fbc2:	46bd      	mov	sp, r7
 800fbc4:	bc80      	pop	{r7}
 800fbc6:	4770      	bx	lr

0800fbc8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800fbc8:	b084      	sub	sp, #16
 800fbca:	b480      	push	{r7}
 800fbcc:	b083      	sub	sp, #12
 800fbce:	af00      	add	r7, sp, #0
 800fbd0:	6078      	str	r0, [r7, #4]
 800fbd2:	f107 0014 	add.w	r0, r7, #20
 800fbd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	2201      	movs	r2, #1
 800fbde:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	2200      	movs	r2, #0
 800fbe6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	2200      	movs	r2, #0
 800fbee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	2200      	movs	r2, #0
 800fbf6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800fbfa:	2300      	movs	r3, #0
}
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	370c      	adds	r7, #12
 800fc00:	46bd      	mov	sp, r7
 800fc02:	bc80      	pop	{r7}
 800fc04:	b004      	add	sp, #16
 800fc06:	4770      	bx	lr

0800fc08 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_TypeDef const *USBx, uint32_t num)
{
 800fc08:	b480      	push	{r7}
 800fc0a:	b083      	sub	sp, #12
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	6078      	str	r0, [r7, #4]
 800fc10:	6039      	str	r1, [r7, #0]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800fc12:	2300      	movs	r3, #0
}
 800fc14:	4618      	mov	r0, r3
 800fc16:	370c      	adds	r7, #12
 800fc18:	46bd      	mov	sp, r7
 800fc1a:	bc80      	pop	{r7}
 800fc1c:	4770      	bx	lr

0800fc1e <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_TypeDef const *USBx)
{
 800fc1e:	b480      	push	{r7}
 800fc20:	b083      	sub	sp, #12
 800fc22:	af00      	add	r7, sp, #0
 800fc24:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800fc26:	2300      	movs	r3, #0
}
 800fc28:	4618      	mov	r0, r3
 800fc2a:	370c      	adds	r7, #12
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	bc80      	pop	{r7}
 800fc30:	4770      	bx	lr
	...

0800fc34 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800fc34:	b480      	push	{r7}
 800fc36:	b09d      	sub	sp, #116	; 0x74
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	6078      	str	r0, [r7, #4]
 800fc3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800fc3e:	2300      	movs	r3, #0
 800fc40:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800fc44:	687a      	ldr	r2, [r7, #4]
 800fc46:	683b      	ldr	r3, [r7, #0]
 800fc48:	781b      	ldrb	r3, [r3, #0]
 800fc4a:	009b      	lsls	r3, r3, #2
 800fc4c:	4413      	add	r3, r2
 800fc4e:	881b      	ldrh	r3, [r3, #0]
 800fc50:	b29b      	uxth	r3, r3
 800fc52:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800fc56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fc5a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800fc5e:	683b      	ldr	r3, [r7, #0]
 800fc60:	78db      	ldrb	r3, [r3, #3]
 800fc62:	2b03      	cmp	r3, #3
 800fc64:	d81f      	bhi.n	800fca6 <USB_ActivateEndpoint+0x72>
 800fc66:	a201      	add	r2, pc, #4	; (adr r2, 800fc6c <USB_ActivateEndpoint+0x38>)
 800fc68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc6c:	0800fc7d 	.word	0x0800fc7d
 800fc70:	0800fc99 	.word	0x0800fc99
 800fc74:	0800fcaf 	.word	0x0800fcaf
 800fc78:	0800fc8b 	.word	0x0800fc8b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800fc7c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800fc80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fc84:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800fc88:	e012      	b.n	800fcb0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800fc8a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800fc8e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800fc92:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800fc96:	e00b      	b.n	800fcb0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800fc98:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800fc9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800fca0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800fca4:	e004      	b.n	800fcb0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800fca6:	2301      	movs	r3, #1
 800fca8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800fcac:	e000      	b.n	800fcb0 <USB_ActivateEndpoint+0x7c>
      break;
 800fcae:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800fcb0:	687a      	ldr	r2, [r7, #4]
 800fcb2:	683b      	ldr	r3, [r7, #0]
 800fcb4:	781b      	ldrb	r3, [r3, #0]
 800fcb6:	009b      	lsls	r3, r3, #2
 800fcb8:	441a      	add	r2, r3
 800fcba:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800fcbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fcc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fcc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fcca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fcce:	b29b      	uxth	r3, r3
 800fcd0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800fcd2:	687a      	ldr	r2, [r7, #4]
 800fcd4:	683b      	ldr	r3, [r7, #0]
 800fcd6:	781b      	ldrb	r3, [r3, #0]
 800fcd8:	009b      	lsls	r3, r3, #2
 800fcda:	4413      	add	r3, r2
 800fcdc:	881b      	ldrh	r3, [r3, #0]
 800fcde:	b29b      	uxth	r3, r3
 800fce0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fce4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fce8:	b29a      	uxth	r2, r3
 800fcea:	683b      	ldr	r3, [r7, #0]
 800fcec:	781b      	ldrb	r3, [r3, #0]
 800fcee:	b29b      	uxth	r3, r3
 800fcf0:	4313      	orrs	r3, r2
 800fcf2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800fcf6:	687a      	ldr	r2, [r7, #4]
 800fcf8:	683b      	ldr	r3, [r7, #0]
 800fcfa:	781b      	ldrb	r3, [r3, #0]
 800fcfc:	009b      	lsls	r3, r3, #2
 800fcfe:	441a      	add	r2, r3
 800fd00:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800fd04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fd08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fd0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fd10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd14:	b29b      	uxth	r3, r3
 800fd16:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800fd18:	683b      	ldr	r3, [r7, #0]
 800fd1a:	7b1b      	ldrb	r3, [r3, #12]
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	f040 8178 	bne.w	8010012 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 800fd22:	683b      	ldr	r3, [r7, #0]
 800fd24:	785b      	ldrb	r3, [r3, #1]
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	f000 8084 	beq.w	800fe34 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	61bb      	str	r3, [r7, #24]
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fd36:	b29b      	uxth	r3, r3
 800fd38:	461a      	mov	r2, r3
 800fd3a:	69bb      	ldr	r3, [r7, #24]
 800fd3c:	4413      	add	r3, r2
 800fd3e:	61bb      	str	r3, [r7, #24]
 800fd40:	683b      	ldr	r3, [r7, #0]
 800fd42:	781b      	ldrb	r3, [r3, #0]
 800fd44:	011a      	lsls	r2, r3, #4
 800fd46:	69bb      	ldr	r3, [r7, #24]
 800fd48:	4413      	add	r3, r2
 800fd4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fd4e:	617b      	str	r3, [r7, #20]
 800fd50:	683b      	ldr	r3, [r7, #0]
 800fd52:	88db      	ldrh	r3, [r3, #6]
 800fd54:	085b      	lsrs	r3, r3, #1
 800fd56:	b29b      	uxth	r3, r3
 800fd58:	005b      	lsls	r3, r3, #1
 800fd5a:	b29a      	uxth	r2, r3
 800fd5c:	697b      	ldr	r3, [r7, #20]
 800fd5e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800fd60:	687a      	ldr	r2, [r7, #4]
 800fd62:	683b      	ldr	r3, [r7, #0]
 800fd64:	781b      	ldrb	r3, [r3, #0]
 800fd66:	009b      	lsls	r3, r3, #2
 800fd68:	4413      	add	r3, r2
 800fd6a:	881b      	ldrh	r3, [r3, #0]
 800fd6c:	827b      	strh	r3, [r7, #18]
 800fd6e:	8a7b      	ldrh	r3, [r7, #18]
 800fd70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d01b      	beq.n	800fdb0 <USB_ActivateEndpoint+0x17c>
 800fd78:	687a      	ldr	r2, [r7, #4]
 800fd7a:	683b      	ldr	r3, [r7, #0]
 800fd7c:	781b      	ldrb	r3, [r3, #0]
 800fd7e:	009b      	lsls	r3, r3, #2
 800fd80:	4413      	add	r3, r2
 800fd82:	881b      	ldrh	r3, [r3, #0]
 800fd84:	b29b      	uxth	r3, r3
 800fd86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fd8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fd8e:	823b      	strh	r3, [r7, #16]
 800fd90:	687a      	ldr	r2, [r7, #4]
 800fd92:	683b      	ldr	r3, [r7, #0]
 800fd94:	781b      	ldrb	r3, [r3, #0]
 800fd96:	009b      	lsls	r3, r3, #2
 800fd98:	441a      	add	r2, r3
 800fd9a:	8a3b      	ldrh	r3, [r7, #16]
 800fd9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fda0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fda4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fda8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800fdac:	b29b      	uxth	r3, r3
 800fdae:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800fdb0:	683b      	ldr	r3, [r7, #0]
 800fdb2:	78db      	ldrb	r3, [r3, #3]
 800fdb4:	2b01      	cmp	r3, #1
 800fdb6:	d020      	beq.n	800fdfa <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800fdb8:	687a      	ldr	r2, [r7, #4]
 800fdba:	683b      	ldr	r3, [r7, #0]
 800fdbc:	781b      	ldrb	r3, [r3, #0]
 800fdbe:	009b      	lsls	r3, r3, #2
 800fdc0:	4413      	add	r3, r2
 800fdc2:	881b      	ldrh	r3, [r3, #0]
 800fdc4:	b29b      	uxth	r3, r3
 800fdc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fdca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fdce:	81bb      	strh	r3, [r7, #12]
 800fdd0:	89bb      	ldrh	r3, [r7, #12]
 800fdd2:	f083 0320 	eor.w	r3, r3, #32
 800fdd6:	81bb      	strh	r3, [r7, #12]
 800fdd8:	687a      	ldr	r2, [r7, #4]
 800fdda:	683b      	ldr	r3, [r7, #0]
 800fddc:	781b      	ldrb	r3, [r3, #0]
 800fdde:	009b      	lsls	r3, r3, #2
 800fde0:	441a      	add	r2, r3
 800fde2:	89bb      	ldrh	r3, [r7, #12]
 800fde4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fde8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fdec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fdf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fdf4:	b29b      	uxth	r3, r3
 800fdf6:	8013      	strh	r3, [r2, #0]
 800fdf8:	e2d5      	b.n	80103a6 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800fdfa:	687a      	ldr	r2, [r7, #4]
 800fdfc:	683b      	ldr	r3, [r7, #0]
 800fdfe:	781b      	ldrb	r3, [r3, #0]
 800fe00:	009b      	lsls	r3, r3, #2
 800fe02:	4413      	add	r3, r2
 800fe04:	881b      	ldrh	r3, [r3, #0]
 800fe06:	b29b      	uxth	r3, r3
 800fe08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fe0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fe10:	81fb      	strh	r3, [r7, #14]
 800fe12:	687a      	ldr	r2, [r7, #4]
 800fe14:	683b      	ldr	r3, [r7, #0]
 800fe16:	781b      	ldrb	r3, [r3, #0]
 800fe18:	009b      	lsls	r3, r3, #2
 800fe1a:	441a      	add	r2, r3
 800fe1c:	89fb      	ldrh	r3, [r7, #14]
 800fe1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fe22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fe26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fe2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe2e:	b29b      	uxth	r3, r3
 800fe30:	8013      	strh	r3, [r2, #0]
 800fe32:	e2b8      	b.n	80103a6 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	633b      	str	r3, [r7, #48]	; 0x30
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fe3e:	b29b      	uxth	r3, r3
 800fe40:	461a      	mov	r2, r3
 800fe42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe44:	4413      	add	r3, r2
 800fe46:	633b      	str	r3, [r7, #48]	; 0x30
 800fe48:	683b      	ldr	r3, [r7, #0]
 800fe4a:	781b      	ldrb	r3, [r3, #0]
 800fe4c:	011a      	lsls	r2, r3, #4
 800fe4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe50:	4413      	add	r3, r2
 800fe52:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800fe56:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe58:	683b      	ldr	r3, [r7, #0]
 800fe5a:	88db      	ldrh	r3, [r3, #6]
 800fe5c:	085b      	lsrs	r3, r3, #1
 800fe5e:	b29b      	uxth	r3, r3
 800fe60:	005b      	lsls	r3, r3, #1
 800fe62:	b29a      	uxth	r2, r3
 800fe64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe66:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	62bb      	str	r3, [r7, #40]	; 0x28
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fe72:	b29b      	uxth	r3, r3
 800fe74:	461a      	mov	r2, r3
 800fe76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe78:	4413      	add	r3, r2
 800fe7a:	62bb      	str	r3, [r7, #40]	; 0x28
 800fe7c:	683b      	ldr	r3, [r7, #0]
 800fe7e:	781b      	ldrb	r3, [r3, #0]
 800fe80:	011a      	lsls	r2, r3, #4
 800fe82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe84:	4413      	add	r3, r2
 800fe86:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800fe8a:	627b      	str	r3, [r7, #36]	; 0x24
 800fe8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe8e:	881b      	ldrh	r3, [r3, #0]
 800fe90:	b29b      	uxth	r3, r3
 800fe92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fe96:	b29a      	uxth	r2, r3
 800fe98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe9a:	801a      	strh	r2, [r3, #0]
 800fe9c:	683b      	ldr	r3, [r7, #0]
 800fe9e:	691b      	ldr	r3, [r3, #16]
 800fea0:	2b3e      	cmp	r3, #62	; 0x3e
 800fea2:	d91d      	bls.n	800fee0 <USB_ActivateEndpoint+0x2ac>
 800fea4:	683b      	ldr	r3, [r7, #0]
 800fea6:	691b      	ldr	r3, [r3, #16]
 800fea8:	095b      	lsrs	r3, r3, #5
 800feaa:	66bb      	str	r3, [r7, #104]	; 0x68
 800feac:	683b      	ldr	r3, [r7, #0]
 800feae:	691b      	ldr	r3, [r3, #16]
 800feb0:	f003 031f 	and.w	r3, r3, #31
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d102      	bne.n	800febe <USB_ActivateEndpoint+0x28a>
 800feb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800feba:	3b01      	subs	r3, #1
 800febc:	66bb      	str	r3, [r7, #104]	; 0x68
 800febe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fec0:	881b      	ldrh	r3, [r3, #0]
 800fec2:	b29a      	uxth	r2, r3
 800fec4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fec6:	b29b      	uxth	r3, r3
 800fec8:	029b      	lsls	r3, r3, #10
 800feca:	b29b      	uxth	r3, r3
 800fecc:	4313      	orrs	r3, r2
 800fece:	b29b      	uxth	r3, r3
 800fed0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fed4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fed8:	b29a      	uxth	r2, r3
 800feda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fedc:	801a      	strh	r2, [r3, #0]
 800fede:	e026      	b.n	800ff2e <USB_ActivateEndpoint+0x2fa>
 800fee0:	683b      	ldr	r3, [r7, #0]
 800fee2:	691b      	ldr	r3, [r3, #16]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d10a      	bne.n	800fefe <USB_ActivateEndpoint+0x2ca>
 800fee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feea:	881b      	ldrh	r3, [r3, #0]
 800feec:	b29b      	uxth	r3, r3
 800feee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fef2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fef6:	b29a      	uxth	r2, r3
 800fef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fefa:	801a      	strh	r2, [r3, #0]
 800fefc:	e017      	b.n	800ff2e <USB_ActivateEndpoint+0x2fa>
 800fefe:	683b      	ldr	r3, [r7, #0]
 800ff00:	691b      	ldr	r3, [r3, #16]
 800ff02:	085b      	lsrs	r3, r3, #1
 800ff04:	66bb      	str	r3, [r7, #104]	; 0x68
 800ff06:	683b      	ldr	r3, [r7, #0]
 800ff08:	691b      	ldr	r3, [r3, #16]
 800ff0a:	f003 0301 	and.w	r3, r3, #1
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d002      	beq.n	800ff18 <USB_ActivateEndpoint+0x2e4>
 800ff12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ff14:	3301      	adds	r3, #1
 800ff16:	66bb      	str	r3, [r7, #104]	; 0x68
 800ff18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff1a:	881b      	ldrh	r3, [r3, #0]
 800ff1c:	b29a      	uxth	r2, r3
 800ff1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ff20:	b29b      	uxth	r3, r3
 800ff22:	029b      	lsls	r3, r3, #10
 800ff24:	b29b      	uxth	r3, r3
 800ff26:	4313      	orrs	r3, r2
 800ff28:	b29a      	uxth	r2, r3
 800ff2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff2c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ff2e:	687a      	ldr	r2, [r7, #4]
 800ff30:	683b      	ldr	r3, [r7, #0]
 800ff32:	781b      	ldrb	r3, [r3, #0]
 800ff34:	009b      	lsls	r3, r3, #2
 800ff36:	4413      	add	r3, r2
 800ff38:	881b      	ldrh	r3, [r3, #0]
 800ff3a:	847b      	strh	r3, [r7, #34]	; 0x22
 800ff3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ff3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d01b      	beq.n	800ff7e <USB_ActivateEndpoint+0x34a>
 800ff46:	687a      	ldr	r2, [r7, #4]
 800ff48:	683b      	ldr	r3, [r7, #0]
 800ff4a:	781b      	ldrb	r3, [r3, #0]
 800ff4c:	009b      	lsls	r3, r3, #2
 800ff4e:	4413      	add	r3, r2
 800ff50:	881b      	ldrh	r3, [r3, #0]
 800ff52:	b29b      	uxth	r3, r3
 800ff54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ff58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ff5c:	843b      	strh	r3, [r7, #32]
 800ff5e:	687a      	ldr	r2, [r7, #4]
 800ff60:	683b      	ldr	r3, [r7, #0]
 800ff62:	781b      	ldrb	r3, [r3, #0]
 800ff64:	009b      	lsls	r3, r3, #2
 800ff66:	441a      	add	r2, r3
 800ff68:	8c3b      	ldrh	r3, [r7, #32]
 800ff6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ff6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ff72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ff76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff7a:	b29b      	uxth	r3, r3
 800ff7c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800ff7e:	683b      	ldr	r3, [r7, #0]
 800ff80:	781b      	ldrb	r3, [r3, #0]
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d124      	bne.n	800ffd0 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ff86:	687a      	ldr	r2, [r7, #4]
 800ff88:	683b      	ldr	r3, [r7, #0]
 800ff8a:	781b      	ldrb	r3, [r3, #0]
 800ff8c:	009b      	lsls	r3, r3, #2
 800ff8e:	4413      	add	r3, r2
 800ff90:	881b      	ldrh	r3, [r3, #0]
 800ff92:	b29b      	uxth	r3, r3
 800ff94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ff98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ff9c:	83bb      	strh	r3, [r7, #28]
 800ff9e:	8bbb      	ldrh	r3, [r7, #28]
 800ffa0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ffa4:	83bb      	strh	r3, [r7, #28]
 800ffa6:	8bbb      	ldrh	r3, [r7, #28]
 800ffa8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ffac:	83bb      	strh	r3, [r7, #28]
 800ffae:	687a      	ldr	r2, [r7, #4]
 800ffb0:	683b      	ldr	r3, [r7, #0]
 800ffb2:	781b      	ldrb	r3, [r3, #0]
 800ffb4:	009b      	lsls	r3, r3, #2
 800ffb6:	441a      	add	r2, r3
 800ffb8:	8bbb      	ldrh	r3, [r7, #28]
 800ffba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ffbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ffc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ffc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ffca:	b29b      	uxth	r3, r3
 800ffcc:	8013      	strh	r3, [r2, #0]
 800ffce:	e1ea      	b.n	80103a6 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800ffd0:	687a      	ldr	r2, [r7, #4]
 800ffd2:	683b      	ldr	r3, [r7, #0]
 800ffd4:	781b      	ldrb	r3, [r3, #0]
 800ffd6:	009b      	lsls	r3, r3, #2
 800ffd8:	4413      	add	r3, r2
 800ffda:	881b      	ldrh	r3, [r3, #0]
 800ffdc:	b29b      	uxth	r3, r3
 800ffde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ffe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ffe6:	83fb      	strh	r3, [r7, #30]
 800ffe8:	8bfb      	ldrh	r3, [r7, #30]
 800ffea:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ffee:	83fb      	strh	r3, [r7, #30]
 800fff0:	687a      	ldr	r2, [r7, #4]
 800fff2:	683b      	ldr	r3, [r7, #0]
 800fff4:	781b      	ldrb	r3, [r3, #0]
 800fff6:	009b      	lsls	r3, r3, #2
 800fff8:	441a      	add	r2, r3
 800fffa:	8bfb      	ldrh	r3, [r7, #30]
 800fffc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010000:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010004:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801000c:	b29b      	uxth	r3, r3
 801000e:	8013      	strh	r3, [r2, #0]
 8010010:	e1c9      	b.n	80103a6 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8010012:	683b      	ldr	r3, [r7, #0]
 8010014:	78db      	ldrb	r3, [r3, #3]
 8010016:	2b02      	cmp	r3, #2
 8010018:	d11e      	bne.n	8010058 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801001a:	687a      	ldr	r2, [r7, #4]
 801001c:	683b      	ldr	r3, [r7, #0]
 801001e:	781b      	ldrb	r3, [r3, #0]
 8010020:	009b      	lsls	r3, r3, #2
 8010022:	4413      	add	r3, r2
 8010024:	881b      	ldrh	r3, [r3, #0]
 8010026:	b29b      	uxth	r3, r3
 8010028:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801002c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010030:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8010034:	687a      	ldr	r2, [r7, #4]
 8010036:	683b      	ldr	r3, [r7, #0]
 8010038:	781b      	ldrb	r3, [r3, #0]
 801003a:	009b      	lsls	r3, r3, #2
 801003c:	441a      	add	r2, r3
 801003e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8010042:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010046:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801004a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 801004e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010052:	b29b      	uxth	r3, r3
 8010054:	8013      	strh	r3, [r2, #0]
 8010056:	e01d      	b.n	8010094 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8010058:	687a      	ldr	r2, [r7, #4]
 801005a:	683b      	ldr	r3, [r7, #0]
 801005c:	781b      	ldrb	r3, [r3, #0]
 801005e:	009b      	lsls	r3, r3, #2
 8010060:	4413      	add	r3, r2
 8010062:	881b      	ldrh	r3, [r3, #0]
 8010064:	b29b      	uxth	r3, r3
 8010066:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 801006a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801006e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8010072:	687a      	ldr	r2, [r7, #4]
 8010074:	683b      	ldr	r3, [r7, #0]
 8010076:	781b      	ldrb	r3, [r3, #0]
 8010078:	009b      	lsls	r3, r3, #2
 801007a:	441a      	add	r2, r3
 801007c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8010080:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010084:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010088:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801008c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010090:	b29b      	uxth	r3, r3
 8010092:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801009e:	b29b      	uxth	r3, r3
 80100a0:	461a      	mov	r2, r3
 80100a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80100a4:	4413      	add	r3, r2
 80100a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80100a8:	683b      	ldr	r3, [r7, #0]
 80100aa:	781b      	ldrb	r3, [r3, #0]
 80100ac:	011a      	lsls	r2, r3, #4
 80100ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80100b0:	4413      	add	r3, r2
 80100b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80100b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80100b8:	683b      	ldr	r3, [r7, #0]
 80100ba:	891b      	ldrh	r3, [r3, #8]
 80100bc:	085b      	lsrs	r3, r3, #1
 80100be:	b29b      	uxth	r3, r3
 80100c0:	005b      	lsls	r3, r3, #1
 80100c2:	b29a      	uxth	r2, r3
 80100c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80100c6:	801a      	strh	r2, [r3, #0]
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	657b      	str	r3, [r7, #84]	; 0x54
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80100d2:	b29b      	uxth	r3, r3
 80100d4:	461a      	mov	r2, r3
 80100d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80100d8:	4413      	add	r3, r2
 80100da:	657b      	str	r3, [r7, #84]	; 0x54
 80100dc:	683b      	ldr	r3, [r7, #0]
 80100de:	781b      	ldrb	r3, [r3, #0]
 80100e0:	011a      	lsls	r2, r3, #4
 80100e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80100e4:	4413      	add	r3, r2
 80100e6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80100ea:	653b      	str	r3, [r7, #80]	; 0x50
 80100ec:	683b      	ldr	r3, [r7, #0]
 80100ee:	895b      	ldrh	r3, [r3, #10]
 80100f0:	085b      	lsrs	r3, r3, #1
 80100f2:	b29b      	uxth	r3, r3
 80100f4:	005b      	lsls	r3, r3, #1
 80100f6:	b29a      	uxth	r2, r3
 80100f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100fa:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80100fc:	683b      	ldr	r3, [r7, #0]
 80100fe:	785b      	ldrb	r3, [r3, #1]
 8010100:	2b00      	cmp	r3, #0
 8010102:	f040 8093 	bne.w	801022c <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010106:	687a      	ldr	r2, [r7, #4]
 8010108:	683b      	ldr	r3, [r7, #0]
 801010a:	781b      	ldrb	r3, [r3, #0]
 801010c:	009b      	lsls	r3, r3, #2
 801010e:	4413      	add	r3, r2
 8010110:	881b      	ldrh	r3, [r3, #0]
 8010112:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8010116:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801011a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801011e:	2b00      	cmp	r3, #0
 8010120:	d01b      	beq.n	801015a <USB_ActivateEndpoint+0x526>
 8010122:	687a      	ldr	r2, [r7, #4]
 8010124:	683b      	ldr	r3, [r7, #0]
 8010126:	781b      	ldrb	r3, [r3, #0]
 8010128:	009b      	lsls	r3, r3, #2
 801012a:	4413      	add	r3, r2
 801012c:	881b      	ldrh	r3, [r3, #0]
 801012e:	b29b      	uxth	r3, r3
 8010130:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010134:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010138:	87fb      	strh	r3, [r7, #62]	; 0x3e
 801013a:	687a      	ldr	r2, [r7, #4]
 801013c:	683b      	ldr	r3, [r7, #0]
 801013e:	781b      	ldrb	r3, [r3, #0]
 8010140:	009b      	lsls	r3, r3, #2
 8010142:	441a      	add	r2, r3
 8010144:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010146:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801014a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801014e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010156:	b29b      	uxth	r3, r3
 8010158:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801015a:	687a      	ldr	r2, [r7, #4]
 801015c:	683b      	ldr	r3, [r7, #0]
 801015e:	781b      	ldrb	r3, [r3, #0]
 8010160:	009b      	lsls	r3, r3, #2
 8010162:	4413      	add	r3, r2
 8010164:	881b      	ldrh	r3, [r3, #0]
 8010166:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8010168:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801016a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801016e:	2b00      	cmp	r3, #0
 8010170:	d01b      	beq.n	80101aa <USB_ActivateEndpoint+0x576>
 8010172:	687a      	ldr	r2, [r7, #4]
 8010174:	683b      	ldr	r3, [r7, #0]
 8010176:	781b      	ldrb	r3, [r3, #0]
 8010178:	009b      	lsls	r3, r3, #2
 801017a:	4413      	add	r3, r2
 801017c:	881b      	ldrh	r3, [r3, #0]
 801017e:	b29b      	uxth	r3, r3
 8010180:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010184:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010188:	877b      	strh	r3, [r7, #58]	; 0x3a
 801018a:	687a      	ldr	r2, [r7, #4]
 801018c:	683b      	ldr	r3, [r7, #0]
 801018e:	781b      	ldrb	r3, [r3, #0]
 8010190:	009b      	lsls	r3, r3, #2
 8010192:	441a      	add	r2, r3
 8010194:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010196:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801019a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801019e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80101a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80101a6:	b29b      	uxth	r3, r3
 80101a8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80101aa:	687a      	ldr	r2, [r7, #4]
 80101ac:	683b      	ldr	r3, [r7, #0]
 80101ae:	781b      	ldrb	r3, [r3, #0]
 80101b0:	009b      	lsls	r3, r3, #2
 80101b2:	4413      	add	r3, r2
 80101b4:	881b      	ldrh	r3, [r3, #0]
 80101b6:	b29b      	uxth	r3, r3
 80101b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80101bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80101c0:	873b      	strh	r3, [r7, #56]	; 0x38
 80101c2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80101c4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80101c8:	873b      	strh	r3, [r7, #56]	; 0x38
 80101ca:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80101cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80101d0:	873b      	strh	r3, [r7, #56]	; 0x38
 80101d2:	687a      	ldr	r2, [r7, #4]
 80101d4:	683b      	ldr	r3, [r7, #0]
 80101d6:	781b      	ldrb	r3, [r3, #0]
 80101d8:	009b      	lsls	r3, r3, #2
 80101da:	441a      	add	r2, r3
 80101dc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80101de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80101e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80101e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80101ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80101ee:	b29b      	uxth	r3, r3
 80101f0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80101f2:	687a      	ldr	r2, [r7, #4]
 80101f4:	683b      	ldr	r3, [r7, #0]
 80101f6:	781b      	ldrb	r3, [r3, #0]
 80101f8:	009b      	lsls	r3, r3, #2
 80101fa:	4413      	add	r3, r2
 80101fc:	881b      	ldrh	r3, [r3, #0]
 80101fe:	b29b      	uxth	r3, r3
 8010200:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010204:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010208:	86fb      	strh	r3, [r7, #54]	; 0x36
 801020a:	687a      	ldr	r2, [r7, #4]
 801020c:	683b      	ldr	r3, [r7, #0]
 801020e:	781b      	ldrb	r3, [r3, #0]
 8010210:	009b      	lsls	r3, r3, #2
 8010212:	441a      	add	r2, r3
 8010214:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010216:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801021a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801021e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010226:	b29b      	uxth	r3, r3
 8010228:	8013      	strh	r3, [r2, #0]
 801022a:	e0bc      	b.n	80103a6 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801022c:	687a      	ldr	r2, [r7, #4]
 801022e:	683b      	ldr	r3, [r7, #0]
 8010230:	781b      	ldrb	r3, [r3, #0]
 8010232:	009b      	lsls	r3, r3, #2
 8010234:	4413      	add	r3, r2
 8010236:	881b      	ldrh	r3, [r3, #0]
 8010238:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 801023c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010240:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010244:	2b00      	cmp	r3, #0
 8010246:	d01d      	beq.n	8010284 <USB_ActivateEndpoint+0x650>
 8010248:	687a      	ldr	r2, [r7, #4]
 801024a:	683b      	ldr	r3, [r7, #0]
 801024c:	781b      	ldrb	r3, [r3, #0]
 801024e:	009b      	lsls	r3, r3, #2
 8010250:	4413      	add	r3, r2
 8010252:	881b      	ldrh	r3, [r3, #0]
 8010254:	b29b      	uxth	r3, r3
 8010256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801025a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801025e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8010262:	687a      	ldr	r2, [r7, #4]
 8010264:	683b      	ldr	r3, [r7, #0]
 8010266:	781b      	ldrb	r3, [r3, #0]
 8010268:	009b      	lsls	r3, r3, #2
 801026a:	441a      	add	r2, r3
 801026c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8010270:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010274:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010278:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801027c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010280:	b29b      	uxth	r3, r3
 8010282:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010284:	687a      	ldr	r2, [r7, #4]
 8010286:	683b      	ldr	r3, [r7, #0]
 8010288:	781b      	ldrb	r3, [r3, #0]
 801028a:	009b      	lsls	r3, r3, #2
 801028c:	4413      	add	r3, r2
 801028e:	881b      	ldrh	r3, [r3, #0]
 8010290:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8010294:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8010298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801029c:	2b00      	cmp	r3, #0
 801029e:	d01d      	beq.n	80102dc <USB_ActivateEndpoint+0x6a8>
 80102a0:	687a      	ldr	r2, [r7, #4]
 80102a2:	683b      	ldr	r3, [r7, #0]
 80102a4:	781b      	ldrb	r3, [r3, #0]
 80102a6:	009b      	lsls	r3, r3, #2
 80102a8:	4413      	add	r3, r2
 80102aa:	881b      	ldrh	r3, [r3, #0]
 80102ac:	b29b      	uxth	r3, r3
 80102ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80102b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80102b6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80102ba:	687a      	ldr	r2, [r7, #4]
 80102bc:	683b      	ldr	r3, [r7, #0]
 80102be:	781b      	ldrb	r3, [r3, #0]
 80102c0:	009b      	lsls	r3, r3, #2
 80102c2:	441a      	add	r2, r3
 80102c4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80102c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80102cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80102d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80102d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80102d8:	b29b      	uxth	r3, r3
 80102da:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80102dc:	683b      	ldr	r3, [r7, #0]
 80102de:	78db      	ldrb	r3, [r3, #3]
 80102e0:	2b01      	cmp	r3, #1
 80102e2:	d024      	beq.n	801032e <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80102e4:	687a      	ldr	r2, [r7, #4]
 80102e6:	683b      	ldr	r3, [r7, #0]
 80102e8:	781b      	ldrb	r3, [r3, #0]
 80102ea:	009b      	lsls	r3, r3, #2
 80102ec:	4413      	add	r3, r2
 80102ee:	881b      	ldrh	r3, [r3, #0]
 80102f0:	b29b      	uxth	r3, r3
 80102f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80102f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80102fa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80102fe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010302:	f083 0320 	eor.w	r3, r3, #32
 8010306:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 801030a:	687a      	ldr	r2, [r7, #4]
 801030c:	683b      	ldr	r3, [r7, #0]
 801030e:	781b      	ldrb	r3, [r3, #0]
 8010310:	009b      	lsls	r3, r3, #2
 8010312:	441a      	add	r2, r3
 8010314:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010318:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801031c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010320:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010328:	b29b      	uxth	r3, r3
 801032a:	8013      	strh	r3, [r2, #0]
 801032c:	e01d      	b.n	801036a <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801032e:	687a      	ldr	r2, [r7, #4]
 8010330:	683b      	ldr	r3, [r7, #0]
 8010332:	781b      	ldrb	r3, [r3, #0]
 8010334:	009b      	lsls	r3, r3, #2
 8010336:	4413      	add	r3, r2
 8010338:	881b      	ldrh	r3, [r3, #0]
 801033a:	b29b      	uxth	r3, r3
 801033c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010340:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010344:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8010348:	687a      	ldr	r2, [r7, #4]
 801034a:	683b      	ldr	r3, [r7, #0]
 801034c:	781b      	ldrb	r3, [r3, #0]
 801034e:	009b      	lsls	r3, r3, #2
 8010350:	441a      	add	r2, r3
 8010352:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010356:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801035a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801035e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010366:	b29b      	uxth	r3, r3
 8010368:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801036a:	687a      	ldr	r2, [r7, #4]
 801036c:	683b      	ldr	r3, [r7, #0]
 801036e:	781b      	ldrb	r3, [r3, #0]
 8010370:	009b      	lsls	r3, r3, #2
 8010372:	4413      	add	r3, r2
 8010374:	881b      	ldrh	r3, [r3, #0]
 8010376:	b29b      	uxth	r3, r3
 8010378:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801037c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010380:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010384:	687a      	ldr	r2, [r7, #4]
 8010386:	683b      	ldr	r3, [r7, #0]
 8010388:	781b      	ldrb	r3, [r3, #0]
 801038a:	009b      	lsls	r3, r3, #2
 801038c:	441a      	add	r2, r3
 801038e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010392:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010396:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801039a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801039e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80103a2:	b29b      	uxth	r3, r3
 80103a4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80103a6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80103aa:	4618      	mov	r0, r3
 80103ac:	3774      	adds	r7, #116	; 0x74
 80103ae:	46bd      	mov	sp, r7
 80103b0:	bc80      	pop	{r7}
 80103b2:	4770      	bx	lr

080103b4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80103b4:	b480      	push	{r7}
 80103b6:	b08d      	sub	sp, #52	; 0x34
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	6078      	str	r0, [r7, #4]
 80103bc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80103be:	683b      	ldr	r3, [r7, #0]
 80103c0:	7b1b      	ldrb	r3, [r3, #12]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	f040 808e 	bne.w	80104e4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80103c8:	683b      	ldr	r3, [r7, #0]
 80103ca:	785b      	ldrb	r3, [r3, #1]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d044      	beq.n	801045a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80103d0:	687a      	ldr	r2, [r7, #4]
 80103d2:	683b      	ldr	r3, [r7, #0]
 80103d4:	781b      	ldrb	r3, [r3, #0]
 80103d6:	009b      	lsls	r3, r3, #2
 80103d8:	4413      	add	r3, r2
 80103da:	881b      	ldrh	r3, [r3, #0]
 80103dc:	81bb      	strh	r3, [r7, #12]
 80103de:	89bb      	ldrh	r3, [r7, #12]
 80103e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d01b      	beq.n	8010420 <USB_DeactivateEndpoint+0x6c>
 80103e8:	687a      	ldr	r2, [r7, #4]
 80103ea:	683b      	ldr	r3, [r7, #0]
 80103ec:	781b      	ldrb	r3, [r3, #0]
 80103ee:	009b      	lsls	r3, r3, #2
 80103f0:	4413      	add	r3, r2
 80103f2:	881b      	ldrh	r3, [r3, #0]
 80103f4:	b29b      	uxth	r3, r3
 80103f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80103fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80103fe:	817b      	strh	r3, [r7, #10]
 8010400:	687a      	ldr	r2, [r7, #4]
 8010402:	683b      	ldr	r3, [r7, #0]
 8010404:	781b      	ldrb	r3, [r3, #0]
 8010406:	009b      	lsls	r3, r3, #2
 8010408:	441a      	add	r2, r3
 801040a:	897b      	ldrh	r3, [r7, #10]
 801040c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010410:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010414:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010418:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801041c:	b29b      	uxth	r3, r3
 801041e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010420:	687a      	ldr	r2, [r7, #4]
 8010422:	683b      	ldr	r3, [r7, #0]
 8010424:	781b      	ldrb	r3, [r3, #0]
 8010426:	009b      	lsls	r3, r3, #2
 8010428:	4413      	add	r3, r2
 801042a:	881b      	ldrh	r3, [r3, #0]
 801042c:	b29b      	uxth	r3, r3
 801042e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010432:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010436:	813b      	strh	r3, [r7, #8]
 8010438:	687a      	ldr	r2, [r7, #4]
 801043a:	683b      	ldr	r3, [r7, #0]
 801043c:	781b      	ldrb	r3, [r3, #0]
 801043e:	009b      	lsls	r3, r3, #2
 8010440:	441a      	add	r2, r3
 8010442:	893b      	ldrh	r3, [r7, #8]
 8010444:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010448:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801044c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010454:	b29b      	uxth	r3, r3
 8010456:	8013      	strh	r3, [r2, #0]
 8010458:	e192      	b.n	8010780 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801045a:	687a      	ldr	r2, [r7, #4]
 801045c:	683b      	ldr	r3, [r7, #0]
 801045e:	781b      	ldrb	r3, [r3, #0]
 8010460:	009b      	lsls	r3, r3, #2
 8010462:	4413      	add	r3, r2
 8010464:	881b      	ldrh	r3, [r3, #0]
 8010466:	827b      	strh	r3, [r7, #18]
 8010468:	8a7b      	ldrh	r3, [r7, #18]
 801046a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801046e:	2b00      	cmp	r3, #0
 8010470:	d01b      	beq.n	80104aa <USB_DeactivateEndpoint+0xf6>
 8010472:	687a      	ldr	r2, [r7, #4]
 8010474:	683b      	ldr	r3, [r7, #0]
 8010476:	781b      	ldrb	r3, [r3, #0]
 8010478:	009b      	lsls	r3, r3, #2
 801047a:	4413      	add	r3, r2
 801047c:	881b      	ldrh	r3, [r3, #0]
 801047e:	b29b      	uxth	r3, r3
 8010480:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010484:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010488:	823b      	strh	r3, [r7, #16]
 801048a:	687a      	ldr	r2, [r7, #4]
 801048c:	683b      	ldr	r3, [r7, #0]
 801048e:	781b      	ldrb	r3, [r3, #0]
 8010490:	009b      	lsls	r3, r3, #2
 8010492:	441a      	add	r2, r3
 8010494:	8a3b      	ldrh	r3, [r7, #16]
 8010496:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801049a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801049e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80104a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80104a6:	b29b      	uxth	r3, r3
 80104a8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80104aa:	687a      	ldr	r2, [r7, #4]
 80104ac:	683b      	ldr	r3, [r7, #0]
 80104ae:	781b      	ldrb	r3, [r3, #0]
 80104b0:	009b      	lsls	r3, r3, #2
 80104b2:	4413      	add	r3, r2
 80104b4:	881b      	ldrh	r3, [r3, #0]
 80104b6:	b29b      	uxth	r3, r3
 80104b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80104bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80104c0:	81fb      	strh	r3, [r7, #14]
 80104c2:	687a      	ldr	r2, [r7, #4]
 80104c4:	683b      	ldr	r3, [r7, #0]
 80104c6:	781b      	ldrb	r3, [r3, #0]
 80104c8:	009b      	lsls	r3, r3, #2
 80104ca:	441a      	add	r2, r3
 80104cc:	89fb      	ldrh	r3, [r7, #14]
 80104ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80104d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80104d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80104da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80104de:	b29b      	uxth	r3, r3
 80104e0:	8013      	strh	r3, [r2, #0]
 80104e2:	e14d      	b.n	8010780 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80104e4:	683b      	ldr	r3, [r7, #0]
 80104e6:	785b      	ldrb	r3, [r3, #1]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	f040 80a5 	bne.w	8010638 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80104ee:	687a      	ldr	r2, [r7, #4]
 80104f0:	683b      	ldr	r3, [r7, #0]
 80104f2:	781b      	ldrb	r3, [r3, #0]
 80104f4:	009b      	lsls	r3, r3, #2
 80104f6:	4413      	add	r3, r2
 80104f8:	881b      	ldrh	r3, [r3, #0]
 80104fa:	843b      	strh	r3, [r7, #32]
 80104fc:	8c3b      	ldrh	r3, [r7, #32]
 80104fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010502:	2b00      	cmp	r3, #0
 8010504:	d01b      	beq.n	801053e <USB_DeactivateEndpoint+0x18a>
 8010506:	687a      	ldr	r2, [r7, #4]
 8010508:	683b      	ldr	r3, [r7, #0]
 801050a:	781b      	ldrb	r3, [r3, #0]
 801050c:	009b      	lsls	r3, r3, #2
 801050e:	4413      	add	r3, r2
 8010510:	881b      	ldrh	r3, [r3, #0]
 8010512:	b29b      	uxth	r3, r3
 8010514:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801051c:	83fb      	strh	r3, [r7, #30]
 801051e:	687a      	ldr	r2, [r7, #4]
 8010520:	683b      	ldr	r3, [r7, #0]
 8010522:	781b      	ldrb	r3, [r3, #0]
 8010524:	009b      	lsls	r3, r3, #2
 8010526:	441a      	add	r2, r3
 8010528:	8bfb      	ldrh	r3, [r7, #30]
 801052a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801052e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010532:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801053a:	b29b      	uxth	r3, r3
 801053c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801053e:	687a      	ldr	r2, [r7, #4]
 8010540:	683b      	ldr	r3, [r7, #0]
 8010542:	781b      	ldrb	r3, [r3, #0]
 8010544:	009b      	lsls	r3, r3, #2
 8010546:	4413      	add	r3, r2
 8010548:	881b      	ldrh	r3, [r3, #0]
 801054a:	83bb      	strh	r3, [r7, #28]
 801054c:	8bbb      	ldrh	r3, [r7, #28]
 801054e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010552:	2b00      	cmp	r3, #0
 8010554:	d01b      	beq.n	801058e <USB_DeactivateEndpoint+0x1da>
 8010556:	687a      	ldr	r2, [r7, #4]
 8010558:	683b      	ldr	r3, [r7, #0]
 801055a:	781b      	ldrb	r3, [r3, #0]
 801055c:	009b      	lsls	r3, r3, #2
 801055e:	4413      	add	r3, r2
 8010560:	881b      	ldrh	r3, [r3, #0]
 8010562:	b29b      	uxth	r3, r3
 8010564:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010568:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801056c:	837b      	strh	r3, [r7, #26]
 801056e:	687a      	ldr	r2, [r7, #4]
 8010570:	683b      	ldr	r3, [r7, #0]
 8010572:	781b      	ldrb	r3, [r3, #0]
 8010574:	009b      	lsls	r3, r3, #2
 8010576:	441a      	add	r2, r3
 8010578:	8b7b      	ldrh	r3, [r7, #26]
 801057a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801057e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010582:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010586:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801058a:	b29b      	uxth	r3, r3
 801058c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 801058e:	687a      	ldr	r2, [r7, #4]
 8010590:	683b      	ldr	r3, [r7, #0]
 8010592:	781b      	ldrb	r3, [r3, #0]
 8010594:	009b      	lsls	r3, r3, #2
 8010596:	4413      	add	r3, r2
 8010598:	881b      	ldrh	r3, [r3, #0]
 801059a:	b29b      	uxth	r3, r3
 801059c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80105a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80105a4:	833b      	strh	r3, [r7, #24]
 80105a6:	687a      	ldr	r2, [r7, #4]
 80105a8:	683b      	ldr	r3, [r7, #0]
 80105aa:	781b      	ldrb	r3, [r3, #0]
 80105ac:	009b      	lsls	r3, r3, #2
 80105ae:	441a      	add	r2, r3
 80105b0:	8b3b      	ldrh	r3, [r7, #24]
 80105b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80105b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80105ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80105be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80105c2:	b29b      	uxth	r3, r3
 80105c4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80105c6:	687a      	ldr	r2, [r7, #4]
 80105c8:	683b      	ldr	r3, [r7, #0]
 80105ca:	781b      	ldrb	r3, [r3, #0]
 80105cc:	009b      	lsls	r3, r3, #2
 80105ce:	4413      	add	r3, r2
 80105d0:	881b      	ldrh	r3, [r3, #0]
 80105d2:	b29b      	uxth	r3, r3
 80105d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80105d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80105dc:	82fb      	strh	r3, [r7, #22]
 80105de:	687a      	ldr	r2, [r7, #4]
 80105e0:	683b      	ldr	r3, [r7, #0]
 80105e2:	781b      	ldrb	r3, [r3, #0]
 80105e4:	009b      	lsls	r3, r3, #2
 80105e6:	441a      	add	r2, r3
 80105e8:	8afb      	ldrh	r3, [r7, #22]
 80105ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80105ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80105f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80105f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80105fa:	b29b      	uxth	r3, r3
 80105fc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80105fe:	687a      	ldr	r2, [r7, #4]
 8010600:	683b      	ldr	r3, [r7, #0]
 8010602:	781b      	ldrb	r3, [r3, #0]
 8010604:	009b      	lsls	r3, r3, #2
 8010606:	4413      	add	r3, r2
 8010608:	881b      	ldrh	r3, [r3, #0]
 801060a:	b29b      	uxth	r3, r3
 801060c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010614:	82bb      	strh	r3, [r7, #20]
 8010616:	687a      	ldr	r2, [r7, #4]
 8010618:	683b      	ldr	r3, [r7, #0]
 801061a:	781b      	ldrb	r3, [r3, #0]
 801061c:	009b      	lsls	r3, r3, #2
 801061e:	441a      	add	r2, r3
 8010620:	8abb      	ldrh	r3, [r7, #20]
 8010622:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010626:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801062a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801062e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010632:	b29b      	uxth	r3, r3
 8010634:	8013      	strh	r3, [r2, #0]
 8010636:	e0a3      	b.n	8010780 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010638:	687a      	ldr	r2, [r7, #4]
 801063a:	683b      	ldr	r3, [r7, #0]
 801063c:	781b      	ldrb	r3, [r3, #0]
 801063e:	009b      	lsls	r3, r3, #2
 8010640:	4413      	add	r3, r2
 8010642:	881b      	ldrh	r3, [r3, #0]
 8010644:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8010646:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010648:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801064c:	2b00      	cmp	r3, #0
 801064e:	d01b      	beq.n	8010688 <USB_DeactivateEndpoint+0x2d4>
 8010650:	687a      	ldr	r2, [r7, #4]
 8010652:	683b      	ldr	r3, [r7, #0]
 8010654:	781b      	ldrb	r3, [r3, #0]
 8010656:	009b      	lsls	r3, r3, #2
 8010658:	4413      	add	r3, r2
 801065a:	881b      	ldrh	r3, [r3, #0]
 801065c:	b29b      	uxth	r3, r3
 801065e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010666:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8010668:	687a      	ldr	r2, [r7, #4]
 801066a:	683b      	ldr	r3, [r7, #0]
 801066c:	781b      	ldrb	r3, [r3, #0]
 801066e:	009b      	lsls	r3, r3, #2
 8010670:	441a      	add	r2, r3
 8010672:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010674:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010678:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801067c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010684:	b29b      	uxth	r3, r3
 8010686:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010688:	687a      	ldr	r2, [r7, #4]
 801068a:	683b      	ldr	r3, [r7, #0]
 801068c:	781b      	ldrb	r3, [r3, #0]
 801068e:	009b      	lsls	r3, r3, #2
 8010690:	4413      	add	r3, r2
 8010692:	881b      	ldrh	r3, [r3, #0]
 8010694:	857b      	strh	r3, [r7, #42]	; 0x2a
 8010696:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801069c:	2b00      	cmp	r3, #0
 801069e:	d01b      	beq.n	80106d8 <USB_DeactivateEndpoint+0x324>
 80106a0:	687a      	ldr	r2, [r7, #4]
 80106a2:	683b      	ldr	r3, [r7, #0]
 80106a4:	781b      	ldrb	r3, [r3, #0]
 80106a6:	009b      	lsls	r3, r3, #2
 80106a8:	4413      	add	r3, r2
 80106aa:	881b      	ldrh	r3, [r3, #0]
 80106ac:	b29b      	uxth	r3, r3
 80106ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80106b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80106b6:	853b      	strh	r3, [r7, #40]	; 0x28
 80106b8:	687a      	ldr	r2, [r7, #4]
 80106ba:	683b      	ldr	r3, [r7, #0]
 80106bc:	781b      	ldrb	r3, [r3, #0]
 80106be:	009b      	lsls	r3, r3, #2
 80106c0:	441a      	add	r2, r3
 80106c2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80106c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80106c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80106cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80106d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80106d4:	b29b      	uxth	r3, r3
 80106d6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80106d8:	687a      	ldr	r2, [r7, #4]
 80106da:	683b      	ldr	r3, [r7, #0]
 80106dc:	781b      	ldrb	r3, [r3, #0]
 80106de:	009b      	lsls	r3, r3, #2
 80106e0:	4413      	add	r3, r2
 80106e2:	881b      	ldrh	r3, [r3, #0]
 80106e4:	b29b      	uxth	r3, r3
 80106e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80106ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80106ee:	84fb      	strh	r3, [r7, #38]	; 0x26
 80106f0:	687a      	ldr	r2, [r7, #4]
 80106f2:	683b      	ldr	r3, [r7, #0]
 80106f4:	781b      	ldrb	r3, [r3, #0]
 80106f6:	009b      	lsls	r3, r3, #2
 80106f8:	441a      	add	r2, r3
 80106fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80106fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010700:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010704:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801070c:	b29b      	uxth	r3, r3
 801070e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010710:	687a      	ldr	r2, [r7, #4]
 8010712:	683b      	ldr	r3, [r7, #0]
 8010714:	781b      	ldrb	r3, [r3, #0]
 8010716:	009b      	lsls	r3, r3, #2
 8010718:	4413      	add	r3, r2
 801071a:	881b      	ldrh	r3, [r3, #0]
 801071c:	b29b      	uxth	r3, r3
 801071e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010722:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010726:	84bb      	strh	r3, [r7, #36]	; 0x24
 8010728:	687a      	ldr	r2, [r7, #4]
 801072a:	683b      	ldr	r3, [r7, #0]
 801072c:	781b      	ldrb	r3, [r3, #0]
 801072e:	009b      	lsls	r3, r3, #2
 8010730:	441a      	add	r2, r3
 8010732:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010734:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010738:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801073c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010744:	b29b      	uxth	r3, r3
 8010746:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8010748:	687a      	ldr	r2, [r7, #4]
 801074a:	683b      	ldr	r3, [r7, #0]
 801074c:	781b      	ldrb	r3, [r3, #0]
 801074e:	009b      	lsls	r3, r3, #2
 8010750:	4413      	add	r3, r2
 8010752:	881b      	ldrh	r3, [r3, #0]
 8010754:	b29b      	uxth	r3, r3
 8010756:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801075a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801075e:	847b      	strh	r3, [r7, #34]	; 0x22
 8010760:	687a      	ldr	r2, [r7, #4]
 8010762:	683b      	ldr	r3, [r7, #0]
 8010764:	781b      	ldrb	r3, [r3, #0]
 8010766:	009b      	lsls	r3, r3, #2
 8010768:	441a      	add	r2, r3
 801076a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801076c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010770:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010774:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801077c:	b29b      	uxth	r3, r3
 801077e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8010780:	2300      	movs	r3, #0
}
 8010782:	4618      	mov	r0, r3
 8010784:	3734      	adds	r7, #52	; 0x34
 8010786:	46bd      	mov	sp, r7
 8010788:	bc80      	pop	{r7}
 801078a:	4770      	bx	lr

0801078c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801078c:	b580      	push	{r7, lr}
 801078e:	b0c2      	sub	sp, #264	; 0x108
 8010790:	af00      	add	r7, sp, #0
 8010792:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010796:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801079a:	6018      	str	r0, [r3, #0]
 801079c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80107a4:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80107a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	785b      	ldrb	r3, [r3, #1]
 80107b2:	2b01      	cmp	r3, #1
 80107b4:	f040 86b7 	bne.w	8011526 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80107b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	699a      	ldr	r2, [r3, #24]
 80107c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	691b      	ldr	r3, [r3, #16]
 80107d0:	429a      	cmp	r2, r3
 80107d2:	d908      	bls.n	80107e6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80107d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	691b      	ldr	r3, [r3, #16]
 80107e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80107e4:	e007      	b.n	80107f6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80107e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	699b      	ldr	r3, [r3, #24]
 80107f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80107f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	7b1b      	ldrb	r3, [r3, #12]
 8010802:	2b00      	cmp	r3, #0
 8010804:	d13a      	bne.n	801087c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8010806:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801080a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	6959      	ldr	r1, [r3, #20]
 8010812:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010816:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	88da      	ldrh	r2, [r3, #6]
 801081e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010822:	b29b      	uxth	r3, r3
 8010824:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010828:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801082c:	6800      	ldr	r0, [r0, #0]
 801082e:	f001 fc9c 	bl	801216a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8010832:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010836:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	613b      	str	r3, [r7, #16]
 801083e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010842:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801084c:	b29b      	uxth	r3, r3
 801084e:	461a      	mov	r2, r3
 8010850:	693b      	ldr	r3, [r7, #16]
 8010852:	4413      	add	r3, r2
 8010854:	613b      	str	r3, [r7, #16]
 8010856:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801085a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	781b      	ldrb	r3, [r3, #0]
 8010862:	011a      	lsls	r2, r3, #4
 8010864:	693b      	ldr	r3, [r7, #16]
 8010866:	4413      	add	r3, r2
 8010868:	f203 4304 	addw	r3, r3, #1028	; 0x404
 801086c:	60fb      	str	r3, [r7, #12]
 801086e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010872:	b29a      	uxth	r2, r3
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	801a      	strh	r2, [r3, #0]
 8010878:	f000 be1f 	b.w	80114ba <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 801087c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010880:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	78db      	ldrb	r3, [r3, #3]
 8010888:	2b02      	cmp	r3, #2
 801088a:	f040 8462 	bne.w	8011152 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 801088e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010892:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	6a1a      	ldr	r2, [r3, #32]
 801089a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801089e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	691b      	ldr	r3, [r3, #16]
 80108a6:	429a      	cmp	r2, r3
 80108a8:	f240 83df 	bls.w	801106a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80108ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80108b4:	681a      	ldr	r2, [r3, #0]
 80108b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	781b      	ldrb	r3, [r3, #0]
 80108c2:	009b      	lsls	r3, r3, #2
 80108c4:	4413      	add	r3, r2
 80108c6:	881b      	ldrh	r3, [r3, #0]
 80108c8:	b29b      	uxth	r3, r3
 80108ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80108ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80108d2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80108d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80108de:	681a      	ldr	r2, [r3, #0]
 80108e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	781b      	ldrb	r3, [r3, #0]
 80108ec:	009b      	lsls	r3, r3, #2
 80108ee:	441a      	add	r2, r3
 80108f0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80108f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80108f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80108fc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8010900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010904:	b29b      	uxth	r3, r3
 8010906:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8010908:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801090c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	6a1a      	ldr	r2, [r3, #32]
 8010914:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010918:	1ad2      	subs	r2, r2, r3
 801091a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801091e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8010926:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801092a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801092e:	681a      	ldr	r2, [r3, #0]
 8010930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010934:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	781b      	ldrb	r3, [r3, #0]
 801093c:	009b      	lsls	r3, r3, #2
 801093e:	4413      	add	r3, r2
 8010940:	881b      	ldrh	r3, [r3, #0]
 8010942:	b29b      	uxth	r3, r3
 8010944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010948:	2b00      	cmp	r3, #0
 801094a:	f000 81c7 	beq.w	8010cdc <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801094e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010952:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	633b      	str	r3, [r7, #48]	; 0x30
 801095a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801095e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	785b      	ldrb	r3, [r3, #1]
 8010966:	2b00      	cmp	r3, #0
 8010968:	d177      	bne.n	8010a5a <USB_EPStartXfer+0x2ce>
 801096a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801096e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	62bb      	str	r3, [r7, #40]	; 0x28
 8010976:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801097a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010984:	b29b      	uxth	r3, r3
 8010986:	461a      	mov	r2, r3
 8010988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801098a:	4413      	add	r3, r2
 801098c:	62bb      	str	r3, [r7, #40]	; 0x28
 801098e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010992:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	781b      	ldrb	r3, [r3, #0]
 801099a:	011a      	lsls	r2, r3, #4
 801099c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801099e:	4413      	add	r3, r2
 80109a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80109a4:	627b      	str	r3, [r7, #36]	; 0x24
 80109a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109a8:	881b      	ldrh	r3, [r3, #0]
 80109aa:	b29b      	uxth	r3, r3
 80109ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80109b0:	b29a      	uxth	r2, r3
 80109b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109b4:	801a      	strh	r2, [r3, #0]
 80109b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80109ba:	2b3e      	cmp	r3, #62	; 0x3e
 80109bc:	d921      	bls.n	8010a02 <USB_EPStartXfer+0x276>
 80109be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80109c2:	095b      	lsrs	r3, r3, #5
 80109c4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80109c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80109cc:	f003 031f 	and.w	r3, r3, #31
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d104      	bne.n	80109de <USB_EPStartXfer+0x252>
 80109d4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80109d8:	3b01      	subs	r3, #1
 80109da:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80109de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109e0:	881b      	ldrh	r3, [r3, #0]
 80109e2:	b29a      	uxth	r2, r3
 80109e4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80109e8:	b29b      	uxth	r3, r3
 80109ea:	029b      	lsls	r3, r3, #10
 80109ec:	b29b      	uxth	r3, r3
 80109ee:	4313      	orrs	r3, r2
 80109f0:	b29b      	uxth	r3, r3
 80109f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80109f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80109fa:	b29a      	uxth	r2, r3
 80109fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109fe:	801a      	strh	r2, [r3, #0]
 8010a00:	e050      	b.n	8010aa4 <USB_EPStartXfer+0x318>
 8010a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d10a      	bne.n	8010a20 <USB_EPStartXfer+0x294>
 8010a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a0c:	881b      	ldrh	r3, [r3, #0]
 8010a0e:	b29b      	uxth	r3, r3
 8010a10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010a14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010a18:	b29a      	uxth	r2, r3
 8010a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a1c:	801a      	strh	r2, [r3, #0]
 8010a1e:	e041      	b.n	8010aa4 <USB_EPStartXfer+0x318>
 8010a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010a24:	085b      	lsrs	r3, r3, #1
 8010a26:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8010a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010a2e:	f003 0301 	and.w	r3, r3, #1
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d004      	beq.n	8010a40 <USB_EPStartXfer+0x2b4>
 8010a36:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010a3a:	3301      	adds	r3, #1
 8010a3c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8010a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a42:	881b      	ldrh	r3, [r3, #0]
 8010a44:	b29a      	uxth	r2, r3
 8010a46:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010a4a:	b29b      	uxth	r3, r3
 8010a4c:	029b      	lsls	r3, r3, #10
 8010a4e:	b29b      	uxth	r3, r3
 8010a50:	4313      	orrs	r3, r2
 8010a52:	b29a      	uxth	r2, r3
 8010a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a56:	801a      	strh	r2, [r3, #0]
 8010a58:	e024      	b.n	8010aa4 <USB_EPStartXfer+0x318>
 8010a5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	785b      	ldrb	r3, [r3, #1]
 8010a66:	2b01      	cmp	r3, #1
 8010a68:	d11c      	bne.n	8010aa4 <USB_EPStartXfer+0x318>
 8010a6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010a78:	b29b      	uxth	r3, r3
 8010a7a:	461a      	mov	r2, r3
 8010a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a7e:	4413      	add	r3, r2
 8010a80:	633b      	str	r3, [r7, #48]	; 0x30
 8010a82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	781b      	ldrb	r3, [r3, #0]
 8010a8e:	011a      	lsls	r2, r3, #4
 8010a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a92:	4413      	add	r3, r2
 8010a94:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8010a98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010a9e:	b29a      	uxth	r2, r3
 8010aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010aa2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8010aa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010aa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	895b      	ldrh	r3, [r3, #10]
 8010ab0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010ab4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ab8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	6959      	ldr	r1, [r3, #20]
 8010ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010ac4:	b29b      	uxth	r3, r3
 8010ac6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010aca:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010ace:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010ad2:	6800      	ldr	r0, [r0, #0]
 8010ad4:	f001 fb49 	bl	801216a <USB_WritePMA>
            ep->xfer_buff += len;
 8010ad8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010adc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	695a      	ldr	r2, [r3, #20]
 8010ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010ae8:	441a      	add	r2, r3
 8010aea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010aee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8010af6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010afa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	6a1a      	ldr	r2, [r3, #32]
 8010b02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	691b      	ldr	r3, [r3, #16]
 8010b0e:	429a      	cmp	r2, r3
 8010b10:	d90f      	bls.n	8010b32 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8010b12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	6a1a      	ldr	r2, [r3, #32]
 8010b1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010b22:	1ad2      	subs	r2, r2, r3
 8010b24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	621a      	str	r2, [r3, #32]
 8010b30:	e00e      	b.n	8010b50 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8010b32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	6a1b      	ldr	r3, [r3, #32]
 8010b3e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8010b42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	2200      	movs	r2, #0
 8010b4e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8010b50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	785b      	ldrb	r3, [r3, #1]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d177      	bne.n	8010c50 <USB_EPStartXfer+0x4c4>
 8010b60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	61bb      	str	r3, [r7, #24]
 8010b6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010b7a:	b29b      	uxth	r3, r3
 8010b7c:	461a      	mov	r2, r3
 8010b7e:	69bb      	ldr	r3, [r7, #24]
 8010b80:	4413      	add	r3, r2
 8010b82:	61bb      	str	r3, [r7, #24]
 8010b84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	781b      	ldrb	r3, [r3, #0]
 8010b90:	011a      	lsls	r2, r3, #4
 8010b92:	69bb      	ldr	r3, [r7, #24]
 8010b94:	4413      	add	r3, r2
 8010b96:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8010b9a:	617b      	str	r3, [r7, #20]
 8010b9c:	697b      	ldr	r3, [r7, #20]
 8010b9e:	881b      	ldrh	r3, [r3, #0]
 8010ba0:	b29b      	uxth	r3, r3
 8010ba2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010ba6:	b29a      	uxth	r2, r3
 8010ba8:	697b      	ldr	r3, [r7, #20]
 8010baa:	801a      	strh	r2, [r3, #0]
 8010bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010bb0:	2b3e      	cmp	r3, #62	; 0x3e
 8010bb2:	d921      	bls.n	8010bf8 <USB_EPStartXfer+0x46c>
 8010bb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010bb8:	095b      	lsrs	r3, r3, #5
 8010bba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010bc2:	f003 031f 	and.w	r3, r3, #31
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d104      	bne.n	8010bd4 <USB_EPStartXfer+0x448>
 8010bca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010bce:	3b01      	subs	r3, #1
 8010bd0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010bd4:	697b      	ldr	r3, [r7, #20]
 8010bd6:	881b      	ldrh	r3, [r3, #0]
 8010bd8:	b29a      	uxth	r2, r3
 8010bda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010bde:	b29b      	uxth	r3, r3
 8010be0:	029b      	lsls	r3, r3, #10
 8010be2:	b29b      	uxth	r3, r3
 8010be4:	4313      	orrs	r3, r2
 8010be6:	b29b      	uxth	r3, r3
 8010be8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010bec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010bf0:	b29a      	uxth	r2, r3
 8010bf2:	697b      	ldr	r3, [r7, #20]
 8010bf4:	801a      	strh	r2, [r3, #0]
 8010bf6:	e056      	b.n	8010ca6 <USB_EPStartXfer+0x51a>
 8010bf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d10a      	bne.n	8010c16 <USB_EPStartXfer+0x48a>
 8010c00:	697b      	ldr	r3, [r7, #20]
 8010c02:	881b      	ldrh	r3, [r3, #0]
 8010c04:	b29b      	uxth	r3, r3
 8010c06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010c0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010c0e:	b29a      	uxth	r2, r3
 8010c10:	697b      	ldr	r3, [r7, #20]
 8010c12:	801a      	strh	r2, [r3, #0]
 8010c14:	e047      	b.n	8010ca6 <USB_EPStartXfer+0x51a>
 8010c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010c1a:	085b      	lsrs	r3, r3, #1
 8010c1c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010c24:	f003 0301 	and.w	r3, r3, #1
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d004      	beq.n	8010c36 <USB_EPStartXfer+0x4aa>
 8010c2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010c30:	3301      	adds	r3, #1
 8010c32:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010c36:	697b      	ldr	r3, [r7, #20]
 8010c38:	881b      	ldrh	r3, [r3, #0]
 8010c3a:	b29a      	uxth	r2, r3
 8010c3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010c40:	b29b      	uxth	r3, r3
 8010c42:	029b      	lsls	r3, r3, #10
 8010c44:	b29b      	uxth	r3, r3
 8010c46:	4313      	orrs	r3, r2
 8010c48:	b29a      	uxth	r2, r3
 8010c4a:	697b      	ldr	r3, [r7, #20]
 8010c4c:	801a      	strh	r2, [r3, #0]
 8010c4e:	e02a      	b.n	8010ca6 <USB_EPStartXfer+0x51a>
 8010c50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	785b      	ldrb	r3, [r3, #1]
 8010c5c:	2b01      	cmp	r3, #1
 8010c5e:	d122      	bne.n	8010ca6 <USB_EPStartXfer+0x51a>
 8010c60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	623b      	str	r3, [r7, #32]
 8010c6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010c7a:	b29b      	uxth	r3, r3
 8010c7c:	461a      	mov	r2, r3
 8010c7e:	6a3b      	ldr	r3, [r7, #32]
 8010c80:	4413      	add	r3, r2
 8010c82:	623b      	str	r3, [r7, #32]
 8010c84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	781b      	ldrb	r3, [r3, #0]
 8010c90:	011a      	lsls	r2, r3, #4
 8010c92:	6a3b      	ldr	r3, [r7, #32]
 8010c94:	4413      	add	r3, r2
 8010c96:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8010c9a:	61fb      	str	r3, [r7, #28]
 8010c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010ca0:	b29a      	uxth	r2, r3
 8010ca2:	69fb      	ldr	r3, [r7, #28]
 8010ca4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8010ca6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010caa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	891b      	ldrh	r3, [r3, #8]
 8010cb2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010cb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	6959      	ldr	r1, [r3, #20]
 8010cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010cc6:	b29b      	uxth	r3, r3
 8010cc8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010ccc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010cd0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010cd4:	6800      	ldr	r0, [r0, #0]
 8010cd6:	f001 fa48 	bl	801216a <USB_WritePMA>
 8010cda:	e3ee      	b.n	80114ba <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8010cdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ce0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	785b      	ldrb	r3, [r3, #1]
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d177      	bne.n	8010ddc <USB_EPStartXfer+0x650>
 8010cec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cf0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	64bb      	str	r3, [r7, #72]	; 0x48
 8010cf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010d06:	b29b      	uxth	r3, r3
 8010d08:	461a      	mov	r2, r3
 8010d0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010d0c:	4413      	add	r3, r2
 8010d0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8010d10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	781b      	ldrb	r3, [r3, #0]
 8010d1c:	011a      	lsls	r2, r3, #4
 8010d1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010d20:	4413      	add	r3, r2
 8010d22:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8010d26:	647b      	str	r3, [r7, #68]	; 0x44
 8010d28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d2a:	881b      	ldrh	r3, [r3, #0]
 8010d2c:	b29b      	uxth	r3, r3
 8010d2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010d32:	b29a      	uxth	r2, r3
 8010d34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d36:	801a      	strh	r2, [r3, #0]
 8010d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010d3c:	2b3e      	cmp	r3, #62	; 0x3e
 8010d3e:	d921      	bls.n	8010d84 <USB_EPStartXfer+0x5f8>
 8010d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010d44:	095b      	lsrs	r3, r3, #5
 8010d46:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8010d4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010d4e:	f003 031f 	and.w	r3, r3, #31
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d104      	bne.n	8010d60 <USB_EPStartXfer+0x5d4>
 8010d56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010d5a:	3b01      	subs	r3, #1
 8010d5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8010d60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d62:	881b      	ldrh	r3, [r3, #0]
 8010d64:	b29a      	uxth	r2, r3
 8010d66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010d6a:	b29b      	uxth	r3, r3
 8010d6c:	029b      	lsls	r3, r3, #10
 8010d6e:	b29b      	uxth	r3, r3
 8010d70:	4313      	orrs	r3, r2
 8010d72:	b29b      	uxth	r3, r3
 8010d74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010d78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010d7c:	b29a      	uxth	r2, r3
 8010d7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d80:	801a      	strh	r2, [r3, #0]
 8010d82:	e056      	b.n	8010e32 <USB_EPStartXfer+0x6a6>
 8010d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d10a      	bne.n	8010da2 <USB_EPStartXfer+0x616>
 8010d8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d8e:	881b      	ldrh	r3, [r3, #0]
 8010d90:	b29b      	uxth	r3, r3
 8010d92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010d96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010d9a:	b29a      	uxth	r2, r3
 8010d9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d9e:	801a      	strh	r2, [r3, #0]
 8010da0:	e047      	b.n	8010e32 <USB_EPStartXfer+0x6a6>
 8010da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010da6:	085b      	lsrs	r3, r3, #1
 8010da8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8010dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010db0:	f003 0301 	and.w	r3, r3, #1
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d004      	beq.n	8010dc2 <USB_EPStartXfer+0x636>
 8010db8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010dbc:	3301      	adds	r3, #1
 8010dbe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8010dc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010dc4:	881b      	ldrh	r3, [r3, #0]
 8010dc6:	b29a      	uxth	r2, r3
 8010dc8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010dcc:	b29b      	uxth	r3, r3
 8010dce:	029b      	lsls	r3, r3, #10
 8010dd0:	b29b      	uxth	r3, r3
 8010dd2:	4313      	orrs	r3, r2
 8010dd4:	b29a      	uxth	r2, r3
 8010dd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010dd8:	801a      	strh	r2, [r3, #0]
 8010dda:	e02a      	b.n	8010e32 <USB_EPStartXfer+0x6a6>
 8010ddc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010de0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	785b      	ldrb	r3, [r3, #1]
 8010de8:	2b01      	cmp	r3, #1
 8010dea:	d122      	bne.n	8010e32 <USB_EPStartXfer+0x6a6>
 8010dec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010df0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	653b      	str	r3, [r7, #80]	; 0x50
 8010df8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010dfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010e06:	b29b      	uxth	r3, r3
 8010e08:	461a      	mov	r2, r3
 8010e0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e0c:	4413      	add	r3, r2
 8010e0e:	653b      	str	r3, [r7, #80]	; 0x50
 8010e10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	781b      	ldrb	r3, [r3, #0]
 8010e1c:	011a      	lsls	r2, r3, #4
 8010e1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e20:	4413      	add	r3, r2
 8010e22:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8010e26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e2c:	b29a      	uxth	r2, r3
 8010e2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e30:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8010e32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	891b      	ldrh	r3, [r3, #8]
 8010e3e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010e42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	6959      	ldr	r1, [r3, #20]
 8010e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e52:	b29b      	uxth	r3, r3
 8010e54:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010e58:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010e5c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010e60:	6800      	ldr	r0, [r0, #0]
 8010e62:	f001 f982 	bl	801216a <USB_WritePMA>
            ep->xfer_buff += len;
 8010e66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	695a      	ldr	r2, [r3, #20]
 8010e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e76:	441a      	add	r2, r3
 8010e78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8010e84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	6a1a      	ldr	r2, [r3, #32]
 8010e90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	691b      	ldr	r3, [r3, #16]
 8010e9c:	429a      	cmp	r2, r3
 8010e9e:	d90f      	bls.n	8010ec0 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8010ea0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ea4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	6a1a      	ldr	r2, [r3, #32]
 8010eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010eb0:	1ad2      	subs	r2, r2, r3
 8010eb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010eb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	621a      	str	r2, [r3, #32]
 8010ebe:	e00e      	b.n	8010ede <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8010ec0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ec4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	6a1b      	ldr	r3, [r3, #32]
 8010ecc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8010ed0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ed4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	2200      	movs	r2, #0
 8010edc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8010ede:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ee2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	643b      	str	r3, [r7, #64]	; 0x40
 8010eea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010eee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	785b      	ldrb	r3, [r3, #1]
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d177      	bne.n	8010fea <USB_EPStartXfer+0x85e>
 8010efa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010efe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	63bb      	str	r3, [r7, #56]	; 0x38
 8010f06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010f14:	b29b      	uxth	r3, r3
 8010f16:	461a      	mov	r2, r3
 8010f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f1a:	4413      	add	r3, r2
 8010f1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8010f1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	781b      	ldrb	r3, [r3, #0]
 8010f2a:	011a      	lsls	r2, r3, #4
 8010f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f2e:	4413      	add	r3, r2
 8010f30:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8010f34:	637b      	str	r3, [r7, #52]	; 0x34
 8010f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f38:	881b      	ldrh	r3, [r3, #0]
 8010f3a:	b29b      	uxth	r3, r3
 8010f3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010f40:	b29a      	uxth	r2, r3
 8010f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f44:	801a      	strh	r2, [r3, #0]
 8010f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f4a:	2b3e      	cmp	r3, #62	; 0x3e
 8010f4c:	d921      	bls.n	8010f92 <USB_EPStartXfer+0x806>
 8010f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f52:	095b      	lsrs	r3, r3, #5
 8010f54:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8010f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f5c:	f003 031f 	and.w	r3, r3, #31
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d104      	bne.n	8010f6e <USB_EPStartXfer+0x7e2>
 8010f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010f68:	3b01      	subs	r3, #1
 8010f6a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8010f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f70:	881b      	ldrh	r3, [r3, #0]
 8010f72:	b29a      	uxth	r2, r3
 8010f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010f78:	b29b      	uxth	r3, r3
 8010f7a:	029b      	lsls	r3, r3, #10
 8010f7c:	b29b      	uxth	r3, r3
 8010f7e:	4313      	orrs	r3, r2
 8010f80:	b29b      	uxth	r3, r3
 8010f82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010f86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010f8a:	b29a      	uxth	r2, r3
 8010f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f8e:	801a      	strh	r2, [r3, #0]
 8010f90:	e050      	b.n	8011034 <USB_EPStartXfer+0x8a8>
 8010f92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d10a      	bne.n	8010fb0 <USB_EPStartXfer+0x824>
 8010f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f9c:	881b      	ldrh	r3, [r3, #0]
 8010f9e:	b29b      	uxth	r3, r3
 8010fa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010fa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010fa8:	b29a      	uxth	r2, r3
 8010faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fac:	801a      	strh	r2, [r3, #0]
 8010fae:	e041      	b.n	8011034 <USB_EPStartXfer+0x8a8>
 8010fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010fb4:	085b      	lsrs	r3, r3, #1
 8010fb6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8010fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010fbe:	f003 0301 	and.w	r3, r3, #1
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d004      	beq.n	8010fd0 <USB_EPStartXfer+0x844>
 8010fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010fca:	3301      	adds	r3, #1
 8010fcc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8010fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fd2:	881b      	ldrh	r3, [r3, #0]
 8010fd4:	b29a      	uxth	r2, r3
 8010fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010fda:	b29b      	uxth	r3, r3
 8010fdc:	029b      	lsls	r3, r3, #10
 8010fde:	b29b      	uxth	r3, r3
 8010fe0:	4313      	orrs	r3, r2
 8010fe2:	b29a      	uxth	r2, r3
 8010fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fe6:	801a      	strh	r2, [r3, #0]
 8010fe8:	e024      	b.n	8011034 <USB_EPStartXfer+0x8a8>
 8010fea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	785b      	ldrb	r3, [r3, #1]
 8010ff6:	2b01      	cmp	r3, #1
 8010ff8:	d11c      	bne.n	8011034 <USB_EPStartXfer+0x8a8>
 8010ffa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ffe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011008:	b29b      	uxth	r3, r3
 801100a:	461a      	mov	r2, r3
 801100c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801100e:	4413      	add	r3, r2
 8011010:	643b      	str	r3, [r7, #64]	; 0x40
 8011012:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011016:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	781b      	ldrb	r3, [r3, #0]
 801101e:	011a      	lsls	r2, r3, #4
 8011020:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011022:	4413      	add	r3, r2
 8011024:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8011028:	63fb      	str	r3, [r7, #60]	; 0x3c
 801102a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801102e:	b29a      	uxth	r2, r3
 8011030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011032:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8011034:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011038:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	895b      	ldrh	r3, [r3, #10]
 8011040:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011044:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011048:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	6959      	ldr	r1, [r3, #20]
 8011050:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011054:	b29b      	uxth	r3, r3
 8011056:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 801105a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801105e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011062:	6800      	ldr	r0, [r0, #0]
 8011064:	f001 f881 	bl	801216a <USB_WritePMA>
 8011068:	e227      	b.n	80114ba <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 801106a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801106e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	6a1b      	ldr	r3, [r3, #32]
 8011076:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 801107a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801107e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011082:	681a      	ldr	r2, [r3, #0]
 8011084:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011088:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	781b      	ldrb	r3, [r3, #0]
 8011090:	009b      	lsls	r3, r3, #2
 8011092:	4413      	add	r3, r2
 8011094:	881b      	ldrh	r3, [r3, #0]
 8011096:	b29b      	uxth	r3, r3
 8011098:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 801109c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80110a0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80110a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80110ac:	681a      	ldr	r2, [r3, #0]
 80110ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	781b      	ldrb	r3, [r3, #0]
 80110ba:	009b      	lsls	r3, r3, #2
 80110bc:	441a      	add	r2, r3
 80110be:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80110c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80110c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80110ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80110ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80110d2:	b29b      	uxth	r3, r3
 80110d4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80110d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80110e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80110f0:	b29b      	uxth	r3, r3
 80110f2:	461a      	mov	r2, r3
 80110f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80110f6:	4413      	add	r3, r2
 80110f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80110fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	781b      	ldrb	r3, [r3, #0]
 8011106:	011a      	lsls	r2, r3, #4
 8011108:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801110a:	4413      	add	r3, r2
 801110c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8011110:	65bb      	str	r3, [r7, #88]	; 0x58
 8011112:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011116:	b29a      	uxth	r2, r3
 8011118:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801111a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801111c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011120:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	891b      	ldrh	r3, [r3, #8]
 8011128:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801112c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011130:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	6959      	ldr	r1, [r3, #20]
 8011138:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801113c:	b29b      	uxth	r3, r3
 801113e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011142:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011146:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801114a:	6800      	ldr	r0, [r0, #0]
 801114c:	f001 f80d 	bl	801216a <USB_WritePMA>
 8011150:	e1b3      	b.n	80114ba <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8011152:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011156:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	6a1a      	ldr	r2, [r3, #32]
 801115e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011162:	1ad2      	subs	r2, r2, r3
 8011164:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011168:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8011170:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011174:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011178:	681a      	ldr	r2, [r3, #0]
 801117a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801117e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	781b      	ldrb	r3, [r3, #0]
 8011186:	009b      	lsls	r3, r3, #2
 8011188:	4413      	add	r3, r2
 801118a:	881b      	ldrh	r3, [r3, #0]
 801118c:	b29b      	uxth	r3, r3
 801118e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011192:	2b00      	cmp	r3, #0
 8011194:	f000 80c6 	beq.w	8011324 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8011198:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801119c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	673b      	str	r3, [r7, #112]	; 0x70
 80111a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80111a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	785b      	ldrb	r3, [r3, #1]
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d177      	bne.n	80112a4 <USB_EPStartXfer+0xb18>
 80111b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80111b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	66bb      	str	r3, [r7, #104]	; 0x68
 80111c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80111c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80111ce:	b29b      	uxth	r3, r3
 80111d0:	461a      	mov	r2, r3
 80111d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80111d4:	4413      	add	r3, r2
 80111d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80111d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80111dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	781b      	ldrb	r3, [r3, #0]
 80111e4:	011a      	lsls	r2, r3, #4
 80111e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80111e8:	4413      	add	r3, r2
 80111ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80111ee:	667b      	str	r3, [r7, #100]	; 0x64
 80111f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80111f2:	881b      	ldrh	r3, [r3, #0]
 80111f4:	b29b      	uxth	r3, r3
 80111f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80111fa:	b29a      	uxth	r2, r3
 80111fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80111fe:	801a      	strh	r2, [r3, #0]
 8011200:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011204:	2b3e      	cmp	r3, #62	; 0x3e
 8011206:	d921      	bls.n	801124c <USB_EPStartXfer+0xac0>
 8011208:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801120c:	095b      	lsrs	r3, r3, #5
 801120e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8011212:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011216:	f003 031f 	and.w	r3, r3, #31
 801121a:	2b00      	cmp	r3, #0
 801121c:	d104      	bne.n	8011228 <USB_EPStartXfer+0xa9c>
 801121e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011222:	3b01      	subs	r3, #1
 8011224:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8011228:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801122a:	881b      	ldrh	r3, [r3, #0]
 801122c:	b29a      	uxth	r2, r3
 801122e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011232:	b29b      	uxth	r3, r3
 8011234:	029b      	lsls	r3, r3, #10
 8011236:	b29b      	uxth	r3, r3
 8011238:	4313      	orrs	r3, r2
 801123a:	b29b      	uxth	r3, r3
 801123c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011240:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011244:	b29a      	uxth	r2, r3
 8011246:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011248:	801a      	strh	r2, [r3, #0]
 801124a:	e050      	b.n	80112ee <USB_EPStartXfer+0xb62>
 801124c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011250:	2b00      	cmp	r3, #0
 8011252:	d10a      	bne.n	801126a <USB_EPStartXfer+0xade>
 8011254:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011256:	881b      	ldrh	r3, [r3, #0]
 8011258:	b29b      	uxth	r3, r3
 801125a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801125e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011262:	b29a      	uxth	r2, r3
 8011264:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011266:	801a      	strh	r2, [r3, #0]
 8011268:	e041      	b.n	80112ee <USB_EPStartXfer+0xb62>
 801126a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801126e:	085b      	lsrs	r3, r3, #1
 8011270:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8011274:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011278:	f003 0301 	and.w	r3, r3, #1
 801127c:	2b00      	cmp	r3, #0
 801127e:	d004      	beq.n	801128a <USB_EPStartXfer+0xafe>
 8011280:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011284:	3301      	adds	r3, #1
 8011286:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801128a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801128c:	881b      	ldrh	r3, [r3, #0]
 801128e:	b29a      	uxth	r2, r3
 8011290:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011294:	b29b      	uxth	r3, r3
 8011296:	029b      	lsls	r3, r3, #10
 8011298:	b29b      	uxth	r3, r3
 801129a:	4313      	orrs	r3, r2
 801129c:	b29a      	uxth	r2, r3
 801129e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80112a0:	801a      	strh	r2, [r3, #0]
 80112a2:	e024      	b.n	80112ee <USB_EPStartXfer+0xb62>
 80112a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	785b      	ldrb	r3, [r3, #1]
 80112b0:	2b01      	cmp	r3, #1
 80112b2:	d11c      	bne.n	80112ee <USB_EPStartXfer+0xb62>
 80112b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80112c2:	b29b      	uxth	r3, r3
 80112c4:	461a      	mov	r2, r3
 80112c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80112c8:	4413      	add	r3, r2
 80112ca:	673b      	str	r3, [r7, #112]	; 0x70
 80112cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	781b      	ldrb	r3, [r3, #0]
 80112d8:	011a      	lsls	r2, r3, #4
 80112da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80112dc:	4413      	add	r3, r2
 80112de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80112e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80112e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80112e8:	b29a      	uxth	r2, r3
 80112ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80112ec:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80112ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	895b      	ldrh	r3, [r3, #10]
 80112fa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80112fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011302:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	6959      	ldr	r1, [r3, #20]
 801130a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801130e:	b29b      	uxth	r3, r3
 8011310:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011314:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011318:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801131c:	6800      	ldr	r0, [r0, #0]
 801131e:	f000 ff24 	bl	801216a <USB_WritePMA>
 8011322:	e0ca      	b.n	80114ba <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8011324:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011328:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	785b      	ldrb	r3, [r3, #1]
 8011330:	2b00      	cmp	r3, #0
 8011332:	d177      	bne.n	8011424 <USB_EPStartXfer+0xc98>
 8011334:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011338:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011340:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011344:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801134e:	b29b      	uxth	r3, r3
 8011350:	461a      	mov	r2, r3
 8011352:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011354:	4413      	add	r3, r2
 8011356:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011358:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801135c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	781b      	ldrb	r3, [r3, #0]
 8011364:	011a      	lsls	r2, r3, #4
 8011366:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011368:	4413      	add	r3, r2
 801136a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 801136e:	67bb      	str	r3, [r7, #120]	; 0x78
 8011370:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011372:	881b      	ldrh	r3, [r3, #0]
 8011374:	b29b      	uxth	r3, r3
 8011376:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801137a:	b29a      	uxth	r2, r3
 801137c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801137e:	801a      	strh	r2, [r3, #0]
 8011380:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011384:	2b3e      	cmp	r3, #62	; 0x3e
 8011386:	d921      	bls.n	80113cc <USB_EPStartXfer+0xc40>
 8011388:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801138c:	095b      	lsrs	r3, r3, #5
 801138e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8011392:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011396:	f003 031f 	and.w	r3, r3, #31
 801139a:	2b00      	cmp	r3, #0
 801139c:	d104      	bne.n	80113a8 <USB_EPStartXfer+0xc1c>
 801139e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80113a2:	3b01      	subs	r3, #1
 80113a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80113a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80113aa:	881b      	ldrh	r3, [r3, #0]
 80113ac:	b29a      	uxth	r2, r3
 80113ae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80113b2:	b29b      	uxth	r3, r3
 80113b4:	029b      	lsls	r3, r3, #10
 80113b6:	b29b      	uxth	r3, r3
 80113b8:	4313      	orrs	r3, r2
 80113ba:	b29b      	uxth	r3, r3
 80113bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80113c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80113c4:	b29a      	uxth	r2, r3
 80113c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80113c8:	801a      	strh	r2, [r3, #0]
 80113ca:	e05c      	b.n	8011486 <USB_EPStartXfer+0xcfa>
 80113cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d10a      	bne.n	80113ea <USB_EPStartXfer+0xc5e>
 80113d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80113d6:	881b      	ldrh	r3, [r3, #0]
 80113d8:	b29b      	uxth	r3, r3
 80113da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80113de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80113e2:	b29a      	uxth	r2, r3
 80113e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80113e6:	801a      	strh	r2, [r3, #0]
 80113e8:	e04d      	b.n	8011486 <USB_EPStartXfer+0xcfa>
 80113ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80113ee:	085b      	lsrs	r3, r3, #1
 80113f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80113f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80113f8:	f003 0301 	and.w	r3, r3, #1
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d004      	beq.n	801140a <USB_EPStartXfer+0xc7e>
 8011400:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011404:	3301      	adds	r3, #1
 8011406:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801140a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801140c:	881b      	ldrh	r3, [r3, #0]
 801140e:	b29a      	uxth	r2, r3
 8011410:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011414:	b29b      	uxth	r3, r3
 8011416:	029b      	lsls	r3, r3, #10
 8011418:	b29b      	uxth	r3, r3
 801141a:	4313      	orrs	r3, r2
 801141c:	b29a      	uxth	r2, r3
 801141e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011420:	801a      	strh	r2, [r3, #0]
 8011422:	e030      	b.n	8011486 <USB_EPStartXfer+0xcfa>
 8011424:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011428:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	785b      	ldrb	r3, [r3, #1]
 8011430:	2b01      	cmp	r3, #1
 8011432:	d128      	bne.n	8011486 <USB_EPStartXfer+0xcfa>
 8011434:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011438:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011442:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011446:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011450:	b29b      	uxth	r3, r3
 8011452:	461a      	mov	r2, r3
 8011454:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011458:	4413      	add	r3, r2
 801145a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801145e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011462:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	781b      	ldrb	r3, [r3, #0]
 801146a:	011a      	lsls	r2, r3, #4
 801146c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011470:	4413      	add	r3, r2
 8011472:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8011476:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801147a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801147e:	b29a      	uxth	r2, r3
 8011480:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011484:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8011486:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801148a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	891b      	ldrh	r3, [r3, #8]
 8011492:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011496:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801149a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	6959      	ldr	r1, [r3, #20]
 80114a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80114a6:	b29b      	uxth	r3, r3
 80114a8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80114ac:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80114b0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80114b4:	6800      	ldr	r0, [r0, #0]
 80114b6:	f000 fe58 	bl	801216a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80114ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80114c2:	681a      	ldr	r2, [r3, #0]
 80114c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	781b      	ldrb	r3, [r3, #0]
 80114d0:	009b      	lsls	r3, r3, #2
 80114d2:	4413      	add	r3, r2
 80114d4:	881b      	ldrh	r3, [r3, #0]
 80114d6:	b29b      	uxth	r3, r3
 80114d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80114dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80114e0:	817b      	strh	r3, [r7, #10]
 80114e2:	897b      	ldrh	r3, [r7, #10]
 80114e4:	f083 0310 	eor.w	r3, r3, #16
 80114e8:	817b      	strh	r3, [r7, #10]
 80114ea:	897b      	ldrh	r3, [r7, #10]
 80114ec:	f083 0320 	eor.w	r3, r3, #32
 80114f0:	817b      	strh	r3, [r7, #10]
 80114f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80114fa:	681a      	ldr	r2, [r3, #0]
 80114fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011500:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	781b      	ldrb	r3, [r3, #0]
 8011508:	009b      	lsls	r3, r3, #2
 801150a:	441a      	add	r2, r3
 801150c:	897b      	ldrh	r3, [r7, #10]
 801150e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011512:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011516:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801151a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801151e:	b29b      	uxth	r3, r3
 8011520:	8013      	strh	r3, [r2, #0]
 8011522:	f000 bcde 	b.w	8011ee2 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8011526:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801152a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	7b1b      	ldrb	r3, [r3, #12]
 8011532:	2b00      	cmp	r3, #0
 8011534:	f040 80bb 	bne.w	80116ae <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8011538:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801153c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	699a      	ldr	r2, [r3, #24]
 8011544:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011548:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	691b      	ldr	r3, [r3, #16]
 8011550:	429a      	cmp	r2, r3
 8011552:	d917      	bls.n	8011584 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8011554:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011558:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	691b      	ldr	r3, [r3, #16]
 8011560:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8011564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011568:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	699a      	ldr	r2, [r3, #24]
 8011570:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011574:	1ad2      	subs	r2, r2, r3
 8011576:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801157a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	619a      	str	r2, [r3, #24]
 8011582:	e00e      	b.n	80115a2 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8011584:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011588:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	699b      	ldr	r3, [r3, #24]
 8011590:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8011594:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011598:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	2200      	movs	r2, #0
 80115a0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80115a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80115b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80115be:	b29b      	uxth	r3, r3
 80115c0:	461a      	mov	r2, r3
 80115c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80115c6:	4413      	add	r3, r2
 80115c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80115cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	781b      	ldrb	r3, [r3, #0]
 80115d8:	011a      	lsls	r2, r3, #4
 80115da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80115de:	4413      	add	r3, r2
 80115e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80115e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80115e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80115ec:	881b      	ldrh	r3, [r3, #0]
 80115ee:	b29b      	uxth	r3, r3
 80115f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80115f4:	b29a      	uxth	r2, r3
 80115f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80115fa:	801a      	strh	r2, [r3, #0]
 80115fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011600:	2b3e      	cmp	r3, #62	; 0x3e
 8011602:	d924      	bls.n	801164e <USB_EPStartXfer+0xec2>
 8011604:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011608:	095b      	lsrs	r3, r3, #5
 801160a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801160e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011612:	f003 031f 	and.w	r3, r3, #31
 8011616:	2b00      	cmp	r3, #0
 8011618:	d104      	bne.n	8011624 <USB_EPStartXfer+0xe98>
 801161a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801161e:	3b01      	subs	r3, #1
 8011620:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011624:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011628:	881b      	ldrh	r3, [r3, #0]
 801162a:	b29a      	uxth	r2, r3
 801162c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011630:	b29b      	uxth	r3, r3
 8011632:	029b      	lsls	r3, r3, #10
 8011634:	b29b      	uxth	r3, r3
 8011636:	4313      	orrs	r3, r2
 8011638:	b29b      	uxth	r3, r3
 801163a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801163e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011642:	b29a      	uxth	r2, r3
 8011644:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011648:	801a      	strh	r2, [r3, #0]
 801164a:	f000 bc10 	b.w	8011e6e <USB_EPStartXfer+0x16e2>
 801164e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011652:	2b00      	cmp	r3, #0
 8011654:	d10c      	bne.n	8011670 <USB_EPStartXfer+0xee4>
 8011656:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801165a:	881b      	ldrh	r3, [r3, #0]
 801165c:	b29b      	uxth	r3, r3
 801165e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011662:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011666:	b29a      	uxth	r2, r3
 8011668:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801166c:	801a      	strh	r2, [r3, #0]
 801166e:	e3fe      	b.n	8011e6e <USB_EPStartXfer+0x16e2>
 8011670:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011674:	085b      	lsrs	r3, r3, #1
 8011676:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801167a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801167e:	f003 0301 	and.w	r3, r3, #1
 8011682:	2b00      	cmp	r3, #0
 8011684:	d004      	beq.n	8011690 <USB_EPStartXfer+0xf04>
 8011686:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801168a:	3301      	adds	r3, #1
 801168c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011690:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011694:	881b      	ldrh	r3, [r3, #0]
 8011696:	b29a      	uxth	r2, r3
 8011698:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801169c:	b29b      	uxth	r3, r3
 801169e:	029b      	lsls	r3, r3, #10
 80116a0:	b29b      	uxth	r3, r3
 80116a2:	4313      	orrs	r3, r2
 80116a4:	b29a      	uxth	r2, r3
 80116a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80116aa:	801a      	strh	r2, [r3, #0]
 80116ac:	e3df      	b.n	8011e6e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80116ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	78db      	ldrb	r3, [r3, #3]
 80116ba:	2b02      	cmp	r3, #2
 80116bc:	f040 8218 	bne.w	8011af0 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80116c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	785b      	ldrb	r3, [r3, #1]
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	f040 809d 	bne.w	801180c <USB_EPStartXfer+0x1080>
 80116d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80116e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80116ee:	b29b      	uxth	r3, r3
 80116f0:	461a      	mov	r2, r3
 80116f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80116f6:	4413      	add	r3, r2
 80116f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80116fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011700:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	781b      	ldrb	r3, [r3, #0]
 8011708:	011a      	lsls	r2, r3, #4
 801170a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801170e:	4413      	add	r3, r2
 8011710:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8011714:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8011718:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801171c:	881b      	ldrh	r3, [r3, #0]
 801171e:	b29b      	uxth	r3, r3
 8011720:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011724:	b29a      	uxth	r2, r3
 8011726:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801172a:	801a      	strh	r2, [r3, #0]
 801172c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011730:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	691b      	ldr	r3, [r3, #16]
 8011738:	2b3e      	cmp	r3, #62	; 0x3e
 801173a:	d92b      	bls.n	8011794 <USB_EPStartXfer+0x1008>
 801173c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011740:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	691b      	ldr	r3, [r3, #16]
 8011748:	095b      	lsrs	r3, r3, #5
 801174a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801174e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011752:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	691b      	ldr	r3, [r3, #16]
 801175a:	f003 031f 	and.w	r3, r3, #31
 801175e:	2b00      	cmp	r3, #0
 8011760:	d104      	bne.n	801176c <USB_EPStartXfer+0xfe0>
 8011762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011766:	3b01      	subs	r3, #1
 8011768:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801176c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011770:	881b      	ldrh	r3, [r3, #0]
 8011772:	b29a      	uxth	r2, r3
 8011774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011778:	b29b      	uxth	r3, r3
 801177a:	029b      	lsls	r3, r3, #10
 801177c:	b29b      	uxth	r3, r3
 801177e:	4313      	orrs	r3, r2
 8011780:	b29b      	uxth	r3, r3
 8011782:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011786:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801178a:	b29a      	uxth	r2, r3
 801178c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011790:	801a      	strh	r2, [r3, #0]
 8011792:	e070      	b.n	8011876 <USB_EPStartXfer+0x10ea>
 8011794:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011798:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	691b      	ldr	r3, [r3, #16]
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d10c      	bne.n	80117be <USB_EPStartXfer+0x1032>
 80117a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80117a8:	881b      	ldrh	r3, [r3, #0]
 80117aa:	b29b      	uxth	r3, r3
 80117ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80117b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80117b4:	b29a      	uxth	r2, r3
 80117b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80117ba:	801a      	strh	r2, [r3, #0]
 80117bc:	e05b      	b.n	8011876 <USB_EPStartXfer+0x10ea>
 80117be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	691b      	ldr	r3, [r3, #16]
 80117ca:	085b      	lsrs	r3, r3, #1
 80117cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80117d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	691b      	ldr	r3, [r3, #16]
 80117dc:	f003 0301 	and.w	r3, r3, #1
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d004      	beq.n	80117ee <USB_EPStartXfer+0x1062>
 80117e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80117e8:	3301      	adds	r3, #1
 80117ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80117ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80117f2:	881b      	ldrh	r3, [r3, #0]
 80117f4:	b29a      	uxth	r2, r3
 80117f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80117fa:	b29b      	uxth	r3, r3
 80117fc:	029b      	lsls	r3, r3, #10
 80117fe:	b29b      	uxth	r3, r3
 8011800:	4313      	orrs	r3, r2
 8011802:	b29a      	uxth	r2, r3
 8011804:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011808:	801a      	strh	r2, [r3, #0]
 801180a:	e034      	b.n	8011876 <USB_EPStartXfer+0x10ea>
 801180c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011810:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	785b      	ldrb	r3, [r3, #1]
 8011818:	2b01      	cmp	r3, #1
 801181a:	d12c      	bne.n	8011876 <USB_EPStartXfer+0x10ea>
 801181c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011820:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801182a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801182e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011838:	b29b      	uxth	r3, r3
 801183a:	461a      	mov	r2, r3
 801183c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011840:	4413      	add	r3, r2
 8011842:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011846:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801184a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	781b      	ldrb	r3, [r3, #0]
 8011852:	011a      	lsls	r2, r3, #4
 8011854:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011858:	4413      	add	r3, r2
 801185a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 801185e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8011862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011866:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	691b      	ldr	r3, [r3, #16]
 801186e:	b29a      	uxth	r2, r3
 8011870:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8011874:	801a      	strh	r2, [r3, #0]
 8011876:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801187a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8011884:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011888:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	785b      	ldrb	r3, [r3, #1]
 8011890:	2b00      	cmp	r3, #0
 8011892:	f040 809d 	bne.w	80119d0 <USB_EPStartXfer+0x1244>
 8011896:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801189a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80118a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80118b2:	b29b      	uxth	r3, r3
 80118b4:	461a      	mov	r2, r3
 80118b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80118ba:	4413      	add	r3, r2
 80118bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80118c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	781b      	ldrb	r3, [r3, #0]
 80118cc:	011a      	lsls	r2, r3, #4
 80118ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80118d2:	4413      	add	r3, r2
 80118d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80118d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80118dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80118e0:	881b      	ldrh	r3, [r3, #0]
 80118e2:	b29b      	uxth	r3, r3
 80118e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80118e8:	b29a      	uxth	r2, r3
 80118ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80118ee:	801a      	strh	r2, [r3, #0]
 80118f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	691b      	ldr	r3, [r3, #16]
 80118fc:	2b3e      	cmp	r3, #62	; 0x3e
 80118fe:	d92b      	bls.n	8011958 <USB_EPStartXfer+0x11cc>
 8011900:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011904:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	691b      	ldr	r3, [r3, #16]
 801190c:	095b      	lsrs	r3, r3, #5
 801190e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011916:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	691b      	ldr	r3, [r3, #16]
 801191e:	f003 031f 	and.w	r3, r3, #31
 8011922:	2b00      	cmp	r3, #0
 8011924:	d104      	bne.n	8011930 <USB_EPStartXfer+0x11a4>
 8011926:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801192a:	3b01      	subs	r3, #1
 801192c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011930:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011934:	881b      	ldrh	r3, [r3, #0]
 8011936:	b29a      	uxth	r2, r3
 8011938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801193c:	b29b      	uxth	r3, r3
 801193e:	029b      	lsls	r3, r3, #10
 8011940:	b29b      	uxth	r3, r3
 8011942:	4313      	orrs	r3, r2
 8011944:	b29b      	uxth	r3, r3
 8011946:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801194a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801194e:	b29a      	uxth	r2, r3
 8011950:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011954:	801a      	strh	r2, [r3, #0]
 8011956:	e069      	b.n	8011a2c <USB_EPStartXfer+0x12a0>
 8011958:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801195c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	691b      	ldr	r3, [r3, #16]
 8011964:	2b00      	cmp	r3, #0
 8011966:	d10c      	bne.n	8011982 <USB_EPStartXfer+0x11f6>
 8011968:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801196c:	881b      	ldrh	r3, [r3, #0]
 801196e:	b29b      	uxth	r3, r3
 8011970:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011974:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011978:	b29a      	uxth	r2, r3
 801197a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801197e:	801a      	strh	r2, [r3, #0]
 8011980:	e054      	b.n	8011a2c <USB_EPStartXfer+0x12a0>
 8011982:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011986:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	691b      	ldr	r3, [r3, #16]
 801198e:	085b      	lsrs	r3, r3, #1
 8011990:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8011994:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011998:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	691b      	ldr	r3, [r3, #16]
 80119a0:	f003 0301 	and.w	r3, r3, #1
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d004      	beq.n	80119b2 <USB_EPStartXfer+0x1226>
 80119a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80119ac:	3301      	adds	r3, #1
 80119ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80119b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80119b6:	881b      	ldrh	r3, [r3, #0]
 80119b8:	b29a      	uxth	r2, r3
 80119ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80119be:	b29b      	uxth	r3, r3
 80119c0:	029b      	lsls	r3, r3, #10
 80119c2:	b29b      	uxth	r3, r3
 80119c4:	4313      	orrs	r3, r2
 80119c6:	b29a      	uxth	r2, r3
 80119c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80119cc:	801a      	strh	r2, [r3, #0]
 80119ce:	e02d      	b.n	8011a2c <USB_EPStartXfer+0x12a0>
 80119d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	785b      	ldrb	r3, [r3, #1]
 80119dc:	2b01      	cmp	r3, #1
 80119de:	d125      	bne.n	8011a2c <USB_EPStartXfer+0x12a0>
 80119e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80119ee:	b29b      	uxth	r3, r3
 80119f0:	461a      	mov	r2, r3
 80119f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80119f6:	4413      	add	r3, r2
 80119f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80119fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	781b      	ldrb	r3, [r3, #0]
 8011a08:	011a      	lsls	r2, r3, #4
 8011a0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011a0e:	4413      	add	r3, r2
 8011a10:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8011a14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8011a18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	691b      	ldr	r3, [r3, #16]
 8011a24:	b29a      	uxth	r2, r3
 8011a26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011a2a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8011a2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	69db      	ldr	r3, [r3, #28]
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	f000 8218 	beq.w	8011e6e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8011a3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011a46:	681a      	ldr	r2, [r3, #0]
 8011a48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	781b      	ldrb	r3, [r3, #0]
 8011a54:	009b      	lsls	r3, r3, #2
 8011a56:	4413      	add	r3, r2
 8011a58:	881b      	ldrh	r3, [r3, #0]
 8011a5a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8011a5e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8011a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d005      	beq.n	8011a76 <USB_EPStartXfer+0x12ea>
 8011a6a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8011a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d10d      	bne.n	8011a92 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8011a76:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8011a7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	f040 81f5 	bne.w	8011e6e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8011a84:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8011a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	f040 81ee 	bne.w	8011e6e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8011a92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011a9a:	681a      	ldr	r2, [r3, #0]
 8011a9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011aa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	781b      	ldrb	r3, [r3, #0]
 8011aa8:	009b      	lsls	r3, r3, #2
 8011aaa:	4413      	add	r3, r2
 8011aac:	881b      	ldrh	r3, [r3, #0]
 8011aae:	b29b      	uxth	r3, r3
 8011ab0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011ab8:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8011abc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ac0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011ac4:	681a      	ldr	r2, [r3, #0]
 8011ac6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011aca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	781b      	ldrb	r3, [r3, #0]
 8011ad2:	009b      	lsls	r3, r3, #2
 8011ad4:	441a      	add	r2, r3
 8011ad6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8011ada:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011ade:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011ae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011ae6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011aea:	b29b      	uxth	r3, r3
 8011aec:	8013      	strh	r3, [r2, #0]
 8011aee:	e1be      	b.n	8011e6e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8011af0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011af4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	78db      	ldrb	r3, [r3, #3]
 8011afc:	2b01      	cmp	r3, #1
 8011afe:	f040 81b4 	bne.w	8011e6a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8011b02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	699a      	ldr	r2, [r3, #24]
 8011b0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	691b      	ldr	r3, [r3, #16]
 8011b1a:	429a      	cmp	r2, r3
 8011b1c:	d917      	bls.n	8011b4e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8011b1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	691b      	ldr	r3, [r3, #16]
 8011b2a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8011b2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	699a      	ldr	r2, [r3, #24]
 8011b3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011b3e:	1ad2      	subs	r2, r2, r3
 8011b40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	619a      	str	r2, [r3, #24]
 8011b4c:	e00e      	b.n	8011b6c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8011b4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	699b      	ldr	r3, [r3, #24]
 8011b5a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8011b5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	2200      	movs	r2, #0
 8011b6a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8011b6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	785b      	ldrb	r3, [r3, #1]
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	f040 8085 	bne.w	8011c88 <USB_EPStartXfer+0x14fc>
 8011b7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8011b8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011b94:	681b      	ldr	r3, [r3, #0]
 8011b96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011b9a:	b29b      	uxth	r3, r3
 8011b9c:	461a      	mov	r2, r3
 8011b9e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011ba2:	4413      	add	r3, r2
 8011ba4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8011ba8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011bac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	781b      	ldrb	r3, [r3, #0]
 8011bb4:	011a      	lsls	r2, r3, #4
 8011bb6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011bba:	4413      	add	r3, r2
 8011bbc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8011bc0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8011bc4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011bc8:	881b      	ldrh	r3, [r3, #0]
 8011bca:	b29b      	uxth	r3, r3
 8011bcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011bd0:	b29a      	uxth	r2, r3
 8011bd2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011bd6:	801a      	strh	r2, [r3, #0]
 8011bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011bdc:	2b3e      	cmp	r3, #62	; 0x3e
 8011bde:	d923      	bls.n	8011c28 <USB_EPStartXfer+0x149c>
 8011be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011be4:	095b      	lsrs	r3, r3, #5
 8011be6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011bea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011bee:	f003 031f 	and.w	r3, r3, #31
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d104      	bne.n	8011c00 <USB_EPStartXfer+0x1474>
 8011bf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011bfa:	3b01      	subs	r3, #1
 8011bfc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011c00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011c04:	881b      	ldrh	r3, [r3, #0]
 8011c06:	b29a      	uxth	r2, r3
 8011c08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011c0c:	b29b      	uxth	r3, r3
 8011c0e:	029b      	lsls	r3, r3, #10
 8011c10:	b29b      	uxth	r3, r3
 8011c12:	4313      	orrs	r3, r2
 8011c14:	b29b      	uxth	r3, r3
 8011c16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011c1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011c1e:	b29a      	uxth	r2, r3
 8011c20:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011c24:	801a      	strh	r2, [r3, #0]
 8011c26:	e060      	b.n	8011cea <USB_EPStartXfer+0x155e>
 8011c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d10c      	bne.n	8011c4a <USB_EPStartXfer+0x14be>
 8011c30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011c34:	881b      	ldrh	r3, [r3, #0]
 8011c36:	b29b      	uxth	r3, r3
 8011c38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011c3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011c40:	b29a      	uxth	r2, r3
 8011c42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011c46:	801a      	strh	r2, [r3, #0]
 8011c48:	e04f      	b.n	8011cea <USB_EPStartXfer+0x155e>
 8011c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011c4e:	085b      	lsrs	r3, r3, #1
 8011c50:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011c58:	f003 0301 	and.w	r3, r3, #1
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d004      	beq.n	8011c6a <USB_EPStartXfer+0x14de>
 8011c60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011c64:	3301      	adds	r3, #1
 8011c66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011c6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011c6e:	881b      	ldrh	r3, [r3, #0]
 8011c70:	b29a      	uxth	r2, r3
 8011c72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011c76:	b29b      	uxth	r3, r3
 8011c78:	029b      	lsls	r3, r3, #10
 8011c7a:	b29b      	uxth	r3, r3
 8011c7c:	4313      	orrs	r3, r2
 8011c7e:	b29a      	uxth	r2, r3
 8011c80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011c84:	801a      	strh	r2, [r3, #0]
 8011c86:	e030      	b.n	8011cea <USB_EPStartXfer+0x155e>
 8011c88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	785b      	ldrb	r3, [r3, #1]
 8011c94:	2b01      	cmp	r3, #1
 8011c96:	d128      	bne.n	8011cea <USB_EPStartXfer+0x155e>
 8011c98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8011ca6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011caa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011cb4:	b29b      	uxth	r3, r3
 8011cb6:	461a      	mov	r2, r3
 8011cb8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011cbc:	4413      	add	r3, r2
 8011cbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8011cc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011cc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	781b      	ldrb	r3, [r3, #0]
 8011cce:	011a      	lsls	r2, r3, #4
 8011cd0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011cd4:	4413      	add	r3, r2
 8011cd6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8011cda:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8011cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011ce2:	b29a      	uxth	r2, r3
 8011ce4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011ce8:	801a      	strh	r2, [r3, #0]
 8011cea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011cee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011cf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011cfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	785b      	ldrb	r3, [r3, #1]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	f040 8085 	bne.w	8011e14 <USB_EPStartXfer+0x1688>
 8011d0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8011d18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011d26:	b29b      	uxth	r3, r3
 8011d28:	461a      	mov	r2, r3
 8011d2a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011d2e:	4413      	add	r3, r2
 8011d30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8011d34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	781b      	ldrb	r3, [r3, #0]
 8011d40:	011a      	lsls	r2, r3, #4
 8011d42:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011d46:	4413      	add	r3, r2
 8011d48:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8011d4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8011d50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011d54:	881b      	ldrh	r3, [r3, #0]
 8011d56:	b29b      	uxth	r3, r3
 8011d58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011d5c:	b29a      	uxth	r2, r3
 8011d5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011d62:	801a      	strh	r2, [r3, #0]
 8011d64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011d68:	2b3e      	cmp	r3, #62	; 0x3e
 8011d6a:	d923      	bls.n	8011db4 <USB_EPStartXfer+0x1628>
 8011d6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011d70:	095b      	lsrs	r3, r3, #5
 8011d72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011d76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011d7a:	f003 031f 	and.w	r3, r3, #31
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d104      	bne.n	8011d8c <USB_EPStartXfer+0x1600>
 8011d82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011d86:	3b01      	subs	r3, #1
 8011d88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011d8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011d90:	881b      	ldrh	r3, [r3, #0]
 8011d92:	b29a      	uxth	r2, r3
 8011d94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011d98:	b29b      	uxth	r3, r3
 8011d9a:	029b      	lsls	r3, r3, #10
 8011d9c:	b29b      	uxth	r3, r3
 8011d9e:	4313      	orrs	r3, r2
 8011da0:	b29b      	uxth	r3, r3
 8011da2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011da6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011daa:	b29a      	uxth	r2, r3
 8011dac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011db0:	801a      	strh	r2, [r3, #0]
 8011db2:	e05c      	b.n	8011e6e <USB_EPStartXfer+0x16e2>
 8011db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d10c      	bne.n	8011dd6 <USB_EPStartXfer+0x164a>
 8011dbc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011dc0:	881b      	ldrh	r3, [r3, #0]
 8011dc2:	b29b      	uxth	r3, r3
 8011dc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011dc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011dcc:	b29a      	uxth	r2, r3
 8011dce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011dd2:	801a      	strh	r2, [r3, #0]
 8011dd4:	e04b      	b.n	8011e6e <USB_EPStartXfer+0x16e2>
 8011dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011dda:	085b      	lsrs	r3, r3, #1
 8011ddc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011de0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011de4:	f003 0301 	and.w	r3, r3, #1
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d004      	beq.n	8011df6 <USB_EPStartXfer+0x166a>
 8011dec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011df0:	3301      	adds	r3, #1
 8011df2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011df6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011dfa:	881b      	ldrh	r3, [r3, #0]
 8011dfc:	b29a      	uxth	r2, r3
 8011dfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011e02:	b29b      	uxth	r3, r3
 8011e04:	029b      	lsls	r3, r3, #10
 8011e06:	b29b      	uxth	r3, r3
 8011e08:	4313      	orrs	r3, r2
 8011e0a:	b29a      	uxth	r2, r3
 8011e0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011e10:	801a      	strh	r2, [r3, #0]
 8011e12:	e02c      	b.n	8011e6e <USB_EPStartXfer+0x16e2>
 8011e14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	785b      	ldrb	r3, [r3, #1]
 8011e20:	2b01      	cmp	r3, #1
 8011e22:	d124      	bne.n	8011e6e <USB_EPStartXfer+0x16e2>
 8011e24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011e32:	b29b      	uxth	r3, r3
 8011e34:	461a      	mov	r2, r3
 8011e36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011e3a:	4413      	add	r3, r2
 8011e3c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011e40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	781b      	ldrb	r3, [r3, #0]
 8011e4c:	011a      	lsls	r2, r3, #4
 8011e4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011e52:	4413      	add	r3, r2
 8011e54:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8011e58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8011e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e60:	b29a      	uxth	r2, r3
 8011e62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011e66:	801a      	strh	r2, [r3, #0]
 8011e68:	e001      	b.n	8011e6e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8011e6a:	2301      	movs	r3, #1
 8011e6c:	e03a      	b.n	8011ee4 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011e6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011e76:	681a      	ldr	r2, [r3, #0]
 8011e78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	781b      	ldrb	r3, [r3, #0]
 8011e84:	009b      	lsls	r3, r3, #2
 8011e86:	4413      	add	r3, r2
 8011e88:	881b      	ldrh	r3, [r3, #0]
 8011e8a:	b29b      	uxth	r3, r3
 8011e8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011e90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011e94:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8011e98:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011e9c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8011ea0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8011ea4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011ea8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8011eac:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8011eb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011eb4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011eb8:	681a      	ldr	r2, [r3, #0]
 8011eba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ebe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	781b      	ldrb	r3, [r3, #0]
 8011ec6:	009b      	lsls	r3, r3, #2
 8011ec8:	441a      	add	r2, r3
 8011eca:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011ece:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011ed2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011ed6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011eda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ede:	b29b      	uxth	r3, r3
 8011ee0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8011ee2:	2300      	movs	r3, #0
}
 8011ee4:	4618      	mov	r0, r3
 8011ee6:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8011eea:	46bd      	mov	sp, r7
 8011eec:	bd80      	pop	{r7, pc}

08011eee <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011eee:	b480      	push	{r7}
 8011ef0:	b085      	sub	sp, #20
 8011ef2:	af00      	add	r7, sp, #0
 8011ef4:	6078      	str	r0, [r7, #4]
 8011ef6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8011ef8:	683b      	ldr	r3, [r7, #0]
 8011efa:	785b      	ldrb	r3, [r3, #1]
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d020      	beq.n	8011f42 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8011f00:	687a      	ldr	r2, [r7, #4]
 8011f02:	683b      	ldr	r3, [r7, #0]
 8011f04:	781b      	ldrb	r3, [r3, #0]
 8011f06:	009b      	lsls	r3, r3, #2
 8011f08:	4413      	add	r3, r2
 8011f0a:	881b      	ldrh	r3, [r3, #0]
 8011f0c:	b29b      	uxth	r3, r3
 8011f0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011f12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011f16:	81bb      	strh	r3, [r7, #12]
 8011f18:	89bb      	ldrh	r3, [r7, #12]
 8011f1a:	f083 0310 	eor.w	r3, r3, #16
 8011f1e:	81bb      	strh	r3, [r7, #12]
 8011f20:	687a      	ldr	r2, [r7, #4]
 8011f22:	683b      	ldr	r3, [r7, #0]
 8011f24:	781b      	ldrb	r3, [r3, #0]
 8011f26:	009b      	lsls	r3, r3, #2
 8011f28:	441a      	add	r2, r3
 8011f2a:	89bb      	ldrh	r3, [r7, #12]
 8011f2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011f30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011f34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011f38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011f3c:	b29b      	uxth	r3, r3
 8011f3e:	8013      	strh	r3, [r2, #0]
 8011f40:	e01f      	b.n	8011f82 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8011f42:	687a      	ldr	r2, [r7, #4]
 8011f44:	683b      	ldr	r3, [r7, #0]
 8011f46:	781b      	ldrb	r3, [r3, #0]
 8011f48:	009b      	lsls	r3, r3, #2
 8011f4a:	4413      	add	r3, r2
 8011f4c:	881b      	ldrh	r3, [r3, #0]
 8011f4e:	b29b      	uxth	r3, r3
 8011f50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011f54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011f58:	81fb      	strh	r3, [r7, #14]
 8011f5a:	89fb      	ldrh	r3, [r7, #14]
 8011f5c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8011f60:	81fb      	strh	r3, [r7, #14]
 8011f62:	687a      	ldr	r2, [r7, #4]
 8011f64:	683b      	ldr	r3, [r7, #0]
 8011f66:	781b      	ldrb	r3, [r3, #0]
 8011f68:	009b      	lsls	r3, r3, #2
 8011f6a:	441a      	add	r2, r3
 8011f6c:	89fb      	ldrh	r3, [r7, #14]
 8011f6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011f72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011f76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011f7e:	b29b      	uxth	r3, r3
 8011f80:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8011f82:	2300      	movs	r3, #0
}
 8011f84:	4618      	mov	r0, r3
 8011f86:	3714      	adds	r7, #20
 8011f88:	46bd      	mov	sp, r7
 8011f8a:	bc80      	pop	{r7}
 8011f8c:	4770      	bx	lr

08011f8e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011f8e:	b480      	push	{r7}
 8011f90:	b087      	sub	sp, #28
 8011f92:	af00      	add	r7, sp, #0
 8011f94:	6078      	str	r0, [r7, #4]
 8011f96:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8011f98:	683b      	ldr	r3, [r7, #0]
 8011f9a:	7b1b      	ldrb	r3, [r3, #12]
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	f040 809d 	bne.w	80120dc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8011fa2:	683b      	ldr	r3, [r7, #0]
 8011fa4:	785b      	ldrb	r3, [r3, #1]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d04c      	beq.n	8012044 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011faa:	687a      	ldr	r2, [r7, #4]
 8011fac:	683b      	ldr	r3, [r7, #0]
 8011fae:	781b      	ldrb	r3, [r3, #0]
 8011fb0:	009b      	lsls	r3, r3, #2
 8011fb2:	4413      	add	r3, r2
 8011fb4:	881b      	ldrh	r3, [r3, #0]
 8011fb6:	823b      	strh	r3, [r7, #16]
 8011fb8:	8a3b      	ldrh	r3, [r7, #16]
 8011fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d01b      	beq.n	8011ffa <USB_EPClearStall+0x6c>
 8011fc2:	687a      	ldr	r2, [r7, #4]
 8011fc4:	683b      	ldr	r3, [r7, #0]
 8011fc6:	781b      	ldrb	r3, [r3, #0]
 8011fc8:	009b      	lsls	r3, r3, #2
 8011fca:	4413      	add	r3, r2
 8011fcc:	881b      	ldrh	r3, [r3, #0]
 8011fce:	b29b      	uxth	r3, r3
 8011fd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011fd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011fd8:	81fb      	strh	r3, [r7, #14]
 8011fda:	687a      	ldr	r2, [r7, #4]
 8011fdc:	683b      	ldr	r3, [r7, #0]
 8011fde:	781b      	ldrb	r3, [r3, #0]
 8011fe0:	009b      	lsls	r3, r3, #2
 8011fe2:	441a      	add	r2, r3
 8011fe4:	89fb      	ldrh	r3, [r7, #14]
 8011fe6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011fea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011fee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011ff2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011ff6:	b29b      	uxth	r3, r3
 8011ff8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011ffa:	683b      	ldr	r3, [r7, #0]
 8011ffc:	78db      	ldrb	r3, [r3, #3]
 8011ffe:	2b01      	cmp	r3, #1
 8012000:	d06c      	beq.n	80120dc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8012002:	687a      	ldr	r2, [r7, #4]
 8012004:	683b      	ldr	r3, [r7, #0]
 8012006:	781b      	ldrb	r3, [r3, #0]
 8012008:	009b      	lsls	r3, r3, #2
 801200a:	4413      	add	r3, r2
 801200c:	881b      	ldrh	r3, [r3, #0]
 801200e:	b29b      	uxth	r3, r3
 8012010:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012014:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012018:	81bb      	strh	r3, [r7, #12]
 801201a:	89bb      	ldrh	r3, [r7, #12]
 801201c:	f083 0320 	eor.w	r3, r3, #32
 8012020:	81bb      	strh	r3, [r7, #12]
 8012022:	687a      	ldr	r2, [r7, #4]
 8012024:	683b      	ldr	r3, [r7, #0]
 8012026:	781b      	ldrb	r3, [r3, #0]
 8012028:	009b      	lsls	r3, r3, #2
 801202a:	441a      	add	r2, r3
 801202c:	89bb      	ldrh	r3, [r7, #12]
 801202e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012032:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012036:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801203a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801203e:	b29b      	uxth	r3, r3
 8012040:	8013      	strh	r3, [r2, #0]
 8012042:	e04b      	b.n	80120dc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8012044:	687a      	ldr	r2, [r7, #4]
 8012046:	683b      	ldr	r3, [r7, #0]
 8012048:	781b      	ldrb	r3, [r3, #0]
 801204a:	009b      	lsls	r3, r3, #2
 801204c:	4413      	add	r3, r2
 801204e:	881b      	ldrh	r3, [r3, #0]
 8012050:	82fb      	strh	r3, [r7, #22]
 8012052:	8afb      	ldrh	r3, [r7, #22]
 8012054:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012058:	2b00      	cmp	r3, #0
 801205a:	d01b      	beq.n	8012094 <USB_EPClearStall+0x106>
 801205c:	687a      	ldr	r2, [r7, #4]
 801205e:	683b      	ldr	r3, [r7, #0]
 8012060:	781b      	ldrb	r3, [r3, #0]
 8012062:	009b      	lsls	r3, r3, #2
 8012064:	4413      	add	r3, r2
 8012066:	881b      	ldrh	r3, [r3, #0]
 8012068:	b29b      	uxth	r3, r3
 801206a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801206e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012072:	82bb      	strh	r3, [r7, #20]
 8012074:	687a      	ldr	r2, [r7, #4]
 8012076:	683b      	ldr	r3, [r7, #0]
 8012078:	781b      	ldrb	r3, [r3, #0]
 801207a:	009b      	lsls	r3, r3, #2
 801207c:	441a      	add	r2, r3
 801207e:	8abb      	ldrh	r3, [r7, #20]
 8012080:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012084:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012088:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801208c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012090:	b29b      	uxth	r3, r3
 8012092:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8012094:	687a      	ldr	r2, [r7, #4]
 8012096:	683b      	ldr	r3, [r7, #0]
 8012098:	781b      	ldrb	r3, [r3, #0]
 801209a:	009b      	lsls	r3, r3, #2
 801209c:	4413      	add	r3, r2
 801209e:	881b      	ldrh	r3, [r3, #0]
 80120a0:	b29b      	uxth	r3, r3
 80120a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80120a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80120aa:	827b      	strh	r3, [r7, #18]
 80120ac:	8a7b      	ldrh	r3, [r7, #18]
 80120ae:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80120b2:	827b      	strh	r3, [r7, #18]
 80120b4:	8a7b      	ldrh	r3, [r7, #18]
 80120b6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80120ba:	827b      	strh	r3, [r7, #18]
 80120bc:	687a      	ldr	r2, [r7, #4]
 80120be:	683b      	ldr	r3, [r7, #0]
 80120c0:	781b      	ldrb	r3, [r3, #0]
 80120c2:	009b      	lsls	r3, r3, #2
 80120c4:	441a      	add	r2, r3
 80120c6:	8a7b      	ldrh	r3, [r7, #18]
 80120c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80120cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80120d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80120d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80120d8:	b29b      	uxth	r3, r3
 80120da:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80120dc:	2300      	movs	r3, #0
}
 80120de:	4618      	mov	r0, r3
 80120e0:	371c      	adds	r7, #28
 80120e2:	46bd      	mov	sp, r7
 80120e4:	bc80      	pop	{r7}
 80120e6:	4770      	bx	lr

080120e8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80120e8:	b480      	push	{r7}
 80120ea:	b083      	sub	sp, #12
 80120ec:	af00      	add	r7, sp, #0
 80120ee:	6078      	str	r0, [r7, #4]
 80120f0:	460b      	mov	r3, r1
 80120f2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80120f4:	78fb      	ldrb	r3, [r7, #3]
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d103      	bne.n	8012102 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	2280      	movs	r2, #128	; 0x80
 80120fe:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8012102:	2300      	movs	r3, #0
}
 8012104:	4618      	mov	r0, r3
 8012106:	370c      	adds	r7, #12
 8012108:	46bd      	mov	sp, r7
 801210a:	bc80      	pop	{r7}
 801210c:	4770      	bx	lr

0801210e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 801210e:	b480      	push	{r7}
 8012110:	b083      	sub	sp, #12
 8012112:	af00      	add	r7, sp, #0
 8012114:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8012116:	2300      	movs	r3, #0
}
 8012118:	4618      	mov	r0, r3
 801211a:	370c      	adds	r7, #12
 801211c:	46bd      	mov	sp, r7
 801211e:	bc80      	pop	{r7}
 8012120:	4770      	bx	lr

08012122 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8012122:	b480      	push	{r7}
 8012124:	b083      	sub	sp, #12
 8012126:	af00      	add	r7, sp, #0
 8012128:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 801212a:	2300      	movs	r3, #0
}
 801212c:	4618      	mov	r0, r3
 801212e:	370c      	adds	r7, #12
 8012130:	46bd      	mov	sp, r7
 8012132:	bc80      	pop	{r7}
 8012134:	4770      	bx	lr

08012136 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8012136:	b480      	push	{r7}
 8012138:	b085      	sub	sp, #20
 801213a:	af00      	add	r7, sp, #0
 801213c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8012144:	b29b      	uxth	r3, r3
 8012146:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8012148:	68fb      	ldr	r3, [r7, #12]
}
 801214a:	4618      	mov	r0, r3
 801214c:	3714      	adds	r7, #20
 801214e:	46bd      	mov	sp, r7
 8012150:	bc80      	pop	{r7}
 8012152:	4770      	bx	lr

08012154 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8012154:	b480      	push	{r7}
 8012156:	b083      	sub	sp, #12
 8012158:	af00      	add	r7, sp, #0
 801215a:	6078      	str	r0, [r7, #4]
 801215c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 801215e:	2300      	movs	r3, #0
}
 8012160:	4618      	mov	r0, r3
 8012162:	370c      	adds	r7, #12
 8012164:	46bd      	mov	sp, r7
 8012166:	bc80      	pop	{r7}
 8012168:	4770      	bx	lr

0801216a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801216a:	b480      	push	{r7}
 801216c:	b08b      	sub	sp, #44	; 0x2c
 801216e:	af00      	add	r7, sp, #0
 8012170:	60f8      	str	r0, [r7, #12]
 8012172:	60b9      	str	r1, [r7, #8]
 8012174:	4611      	mov	r1, r2
 8012176:	461a      	mov	r2, r3
 8012178:	460b      	mov	r3, r1
 801217a:	80fb      	strh	r3, [r7, #6]
 801217c:	4613      	mov	r3, r2
 801217e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8012180:	88bb      	ldrh	r3, [r7, #4]
 8012182:	3301      	adds	r3, #1
 8012184:	085b      	lsrs	r3, r3, #1
 8012186:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801218c:	68bb      	ldr	r3, [r7, #8]
 801218e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8012190:	88fb      	ldrh	r3, [r7, #6]
 8012192:	005a      	lsls	r2, r3, #1
 8012194:	697b      	ldr	r3, [r7, #20]
 8012196:	4413      	add	r3, r2
 8012198:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801219c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801219e:	69bb      	ldr	r3, [r7, #24]
 80121a0:	627b      	str	r3, [r7, #36]	; 0x24
 80121a2:	e01e      	b.n	80121e2 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80121a4:	69fb      	ldr	r3, [r7, #28]
 80121a6:	781b      	ldrb	r3, [r3, #0]
 80121a8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80121aa:	69fb      	ldr	r3, [r7, #28]
 80121ac:	3301      	adds	r3, #1
 80121ae:	781b      	ldrb	r3, [r3, #0]
 80121b0:	021b      	lsls	r3, r3, #8
 80121b2:	b21a      	sxth	r2, r3
 80121b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80121b8:	4313      	orrs	r3, r2
 80121ba:	b21b      	sxth	r3, r3
 80121bc:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80121be:	6a3b      	ldr	r3, [r7, #32]
 80121c0:	8a7a      	ldrh	r2, [r7, #18]
 80121c2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80121c4:	6a3b      	ldr	r3, [r7, #32]
 80121c6:	3302      	adds	r3, #2
 80121c8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80121ca:	6a3b      	ldr	r3, [r7, #32]
 80121cc:	3302      	adds	r3, #2
 80121ce:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80121d0:	69fb      	ldr	r3, [r7, #28]
 80121d2:	3301      	adds	r3, #1
 80121d4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80121d6:	69fb      	ldr	r3, [r7, #28]
 80121d8:	3301      	adds	r3, #1
 80121da:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80121dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121de:	3b01      	subs	r3, #1
 80121e0:	627b      	str	r3, [r7, #36]	; 0x24
 80121e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d1dd      	bne.n	80121a4 <USB_WritePMA+0x3a>
  }
}
 80121e8:	bf00      	nop
 80121ea:	bf00      	nop
 80121ec:	372c      	adds	r7, #44	; 0x2c
 80121ee:	46bd      	mov	sp, r7
 80121f0:	bc80      	pop	{r7}
 80121f2:	4770      	bx	lr

080121f4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80121f4:	b480      	push	{r7}
 80121f6:	b08b      	sub	sp, #44	; 0x2c
 80121f8:	af00      	add	r7, sp, #0
 80121fa:	60f8      	str	r0, [r7, #12]
 80121fc:	60b9      	str	r1, [r7, #8]
 80121fe:	4611      	mov	r1, r2
 8012200:	461a      	mov	r2, r3
 8012202:	460b      	mov	r3, r1
 8012204:	80fb      	strh	r3, [r7, #6]
 8012206:	4613      	mov	r3, r2
 8012208:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 801220a:	88bb      	ldrh	r3, [r7, #4]
 801220c:	085b      	lsrs	r3, r3, #1
 801220e:	b29b      	uxth	r3, r3
 8012210:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8012216:	68bb      	ldr	r3, [r7, #8]
 8012218:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801221a:	88fb      	ldrh	r3, [r7, #6]
 801221c:	005a      	lsls	r2, r3, #1
 801221e:	697b      	ldr	r3, [r7, #20]
 8012220:	4413      	add	r3, r2
 8012222:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012226:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8012228:	69bb      	ldr	r3, [r7, #24]
 801222a:	627b      	str	r3, [r7, #36]	; 0x24
 801222c:	e01b      	b.n	8012266 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 801222e:	6a3b      	ldr	r3, [r7, #32]
 8012230:	881b      	ldrh	r3, [r3, #0]
 8012232:	b29b      	uxth	r3, r3
 8012234:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8012236:	6a3b      	ldr	r3, [r7, #32]
 8012238:	3302      	adds	r3, #2
 801223a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801223c:	693b      	ldr	r3, [r7, #16]
 801223e:	b2da      	uxtb	r2, r3
 8012240:	69fb      	ldr	r3, [r7, #28]
 8012242:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8012244:	69fb      	ldr	r3, [r7, #28]
 8012246:	3301      	adds	r3, #1
 8012248:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 801224a:	693b      	ldr	r3, [r7, #16]
 801224c:	0a1b      	lsrs	r3, r3, #8
 801224e:	b2da      	uxtb	r2, r3
 8012250:	69fb      	ldr	r3, [r7, #28]
 8012252:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8012254:	69fb      	ldr	r3, [r7, #28]
 8012256:	3301      	adds	r3, #1
 8012258:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 801225a:	6a3b      	ldr	r3, [r7, #32]
 801225c:	3302      	adds	r3, #2
 801225e:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8012260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012262:	3b01      	subs	r3, #1
 8012264:	627b      	str	r3, [r7, #36]	; 0x24
 8012266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012268:	2b00      	cmp	r3, #0
 801226a:	d1e0      	bne.n	801222e <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 801226c:	88bb      	ldrh	r3, [r7, #4]
 801226e:	f003 0301 	and.w	r3, r3, #1
 8012272:	b29b      	uxth	r3, r3
 8012274:	2b00      	cmp	r3, #0
 8012276:	d007      	beq.n	8012288 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8012278:	6a3b      	ldr	r3, [r7, #32]
 801227a:	881b      	ldrh	r3, [r3, #0]
 801227c:	b29b      	uxth	r3, r3
 801227e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8012280:	693b      	ldr	r3, [r7, #16]
 8012282:	b2da      	uxtb	r2, r3
 8012284:	69fb      	ldr	r3, [r7, #28]
 8012286:	701a      	strb	r2, [r3, #0]
  }
}
 8012288:	bf00      	nop
 801228a:	372c      	adds	r7, #44	; 0x2c
 801228c:	46bd      	mov	sp, r7
 801228e:	bc80      	pop	{r7}
 8012290:	4770      	bx	lr
	...

08012294 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8012294:	b480      	push	{r7}
 8012296:	b083      	sub	sp, #12
 8012298:	af00      	add	r7, sp, #0
 801229a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 801229c:	4a03      	ldr	r2, [pc, #12]	; (80122ac <LL_SetSystemCoreClock+0x18>)
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	6013      	str	r3, [r2, #0]
}
 80122a2:	bf00      	nop
 80122a4:	370c      	adds	r7, #12
 80122a6:	46bd      	mov	sp, r7
 80122a8:	bc80      	pop	{r7}
 80122aa:	4770      	bx	lr
 80122ac:	20000040 	.word	0x20000040

080122b0 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80122b0:	b580      	push	{r7, lr}
 80122b2:	b082      	sub	sp, #8
 80122b4:	af00      	add	r7, sp, #0
 80122b6:	6078      	str	r0, [r7, #4]
 80122b8:	460b      	mov	r3, r1
 80122ba:	70fb      	strb	r3, [r7, #3]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	7c1b      	ldrb	r3, [r3, #16]
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d115      	bne.n	80122f0 <USBD_MSC_Init+0x40>
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80122c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80122c8:	2202      	movs	r2, #2
 80122ca:	2101      	movs	r1, #1
 80122cc:	6878      	ldr	r0, [r7, #4]
 80122ce:	f002 fd60 	bl	8014d92 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	2201      	movs	r2, #1
 80122d6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80122da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80122de:	2202      	movs	r2, #2
 80122e0:	2181      	movs	r1, #129	; 0x81
 80122e2:	6878      	ldr	r0, [r7, #4]
 80122e4:	f002 fd55 	bl	8014d92 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	2201      	movs	r2, #1
 80122ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80122ee:	e012      	b.n	8012316 <USBD_MSC_Init+0x66>
  }
  else
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80122f0:	2340      	movs	r3, #64	; 0x40
 80122f2:	2202      	movs	r2, #2
 80122f4:	2101      	movs	r1, #1
 80122f6:	6878      	ldr	r0, [r7, #4]
 80122f8:	f002 fd4b 	bl	8014d92 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	2201      	movs	r2, #1
 8012300:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8012304:	2340      	movs	r3, #64	; 0x40
 8012306:	2202      	movs	r2, #2
 8012308:	2181      	movs	r1, #129	; 0x81
 801230a:	6878      	ldr	r0, [r7, #4]
 801230c:	f002 fd41 	bl	8014d92 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	2201      	movs	r2, #1
 8012314:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  pdev->pClassData = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8012316:	f44f 701b 	mov.w	r0, #620	; 0x26c
 801231a:	f002 fe81 	bl	8015020 <USBD_static_malloc>
 801231e:	4602      	mov	r2, r0
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801232c:	2b00      	cmp	r3, #0
 801232e:	d101      	bne.n	8012334 <USBD_MSC_Init+0x84>
  {
    return USBD_FAIL;
 8012330:	2302      	movs	r3, #2
 8012332:	e003      	b.n	801233c <USBD_MSC_Init+0x8c>
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8012334:	6878      	ldr	r0, [r7, #4]
 8012336:	f000 f9d9 	bl	80126ec <MSC_BOT_Init>

  return USBD_OK;
 801233a:	2300      	movs	r3, #0
}
 801233c:	4618      	mov	r0, r3
 801233e:	3708      	adds	r7, #8
 8012340:	46bd      	mov	sp, r7
 8012342:	bd80      	pop	{r7, pc}

08012344 <USBD_MSC_DeInit>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev,
                         uint8_t cfgidx)
{
 8012344:	b580      	push	{r7, lr}
 8012346:	b082      	sub	sp, #8
 8012348:	af00      	add	r7, sp, #0
 801234a:	6078      	str	r0, [r7, #4]
 801234c:	460b      	mov	r3, r1
 801234e:	70fb      	strb	r3, [r7, #3]
  /* Close MSC EPs */
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8012350:	2101      	movs	r1, #1
 8012352:	6878      	ldr	r0, [r7, #4]
 8012354:	f002 fd43 	bl	8014dde <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	2200      	movs	r2, #0
 801235c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8012360:	2181      	movs	r1, #129	; 0x81
 8012362:	6878      	ldr	r0, [r7, #4]
 8012364:	f002 fd3b 	bl	8014dde <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	2200      	movs	r2, #0
 801236c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 801236e:	6878      	ldr	r0, [r7, #4]
 8012370:	f000 fa06 	bl	8012780 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801237a:	2b00      	cmp	r3, #0
 801237c:	d009      	beq.n	8012392 <USBD_MSC_DeInit+0x4e>
  {
    USBD_free(pdev->pClassData);
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012384:	4618      	mov	r0, r3
 8012386:	f002 fe57 	bl	8015038 <USBD_static_free>
    pdev->pClassData  = NULL;
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	2200      	movs	r2, #0
 801238e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8012392:	2300      	movs	r3, #0
}
 8012394:	4618      	mov	r0, r3
 8012396:	3708      	adds	r7, #8
 8012398:	46bd      	mov	sp, r7
 801239a:	bd80      	pop	{r7, pc}

0801239c <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801239c:	b580      	push	{r7, lr}
 801239e:	b086      	sub	sp, #24
 80123a0:	af00      	add	r7, sp, #0
 80123a2:	6078      	str	r0, [r7, #4]
 80123a4:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80123ac:	613b      	str	r3, [r7, #16]
  uint8_t ret = USBD_OK;
 80123ae:	2300      	movs	r3, #0
 80123b0:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 80123b2:	2300      	movs	r3, #0
 80123b4:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80123b6:	683b      	ldr	r3, [r7, #0]
 80123b8:	781b      	ldrb	r3, [r3, #0]
 80123ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d04d      	beq.n	801245e <USBD_MSC_Setup+0xc2>
 80123c2:	2b20      	cmp	r3, #32
 80123c4:	f040 8113 	bne.w	80125ee <USBD_MSC_Setup+0x252>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80123c8:	683b      	ldr	r3, [r7, #0]
 80123ca:	785b      	ldrb	r3, [r3, #1]
 80123cc:	2bfe      	cmp	r3, #254	; 0xfe
 80123ce:	d002      	beq.n	80123d6 <USBD_MSC_Setup+0x3a>
 80123d0:	2bff      	cmp	r3, #255	; 0xff
 80123d2:	d024      	beq.n	801241e <USBD_MSC_Setup+0x82>
 80123d4:	e03b      	b.n	801244e <USBD_MSC_Setup+0xb2>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80123d6:	683b      	ldr	r3, [r7, #0]
 80123d8:	885b      	ldrh	r3, [r3, #2]
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d118      	bne.n	8012410 <USBD_MSC_Setup+0x74>
 80123de:	683b      	ldr	r3, [r7, #0]
 80123e0:	88db      	ldrh	r3, [r3, #6]
 80123e2:	2b01      	cmp	r3, #1
 80123e4:	d114      	bne.n	8012410 <USBD_MSC_Setup+0x74>
              ((req->bmRequest & 0x80U) == 0x80U))
 80123e6:	683b      	ldr	r3, [r7, #0]
 80123e8:	781b      	ldrb	r3, [r3, #0]
 80123ea:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	da0f      	bge.n	8012410 <USBD_MSC_Setup+0x74>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80123f6:	699b      	ldr	r3, [r3, #24]
 80123f8:	4798      	blx	r3
 80123fa:	4603      	mov	r3, r0
 80123fc:	461a      	mov	r2, r3
 80123fe:	693b      	ldr	r3, [r7, #16]
 8012400:	601a      	str	r2, [r3, #0]
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 8012402:	693b      	ldr	r3, [r7, #16]
 8012404:	2201      	movs	r2, #1
 8012406:	4619      	mov	r1, r3
 8012408:	6878      	ldr	r0, [r7, #4]
 801240a:	f002 f992 	bl	8014732 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801240e:	e025      	b.n	801245c <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 8012410:	6839      	ldr	r1, [r7, #0]
 8012412:	6878      	ldr	r0, [r7, #4]
 8012414:	f002 f923 	bl	801465e <USBD_CtlError>
            ret = USBD_FAIL;
 8012418:	2302      	movs	r3, #2
 801241a:	75fb      	strb	r3, [r7, #23]
          break;
 801241c:	e01e      	b.n	801245c <USBD_MSC_Setup+0xc0>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801241e:	683b      	ldr	r3, [r7, #0]
 8012420:	885b      	ldrh	r3, [r3, #2]
 8012422:	2b00      	cmp	r3, #0
 8012424:	d10c      	bne.n	8012440 <USBD_MSC_Setup+0xa4>
 8012426:	683b      	ldr	r3, [r7, #0]
 8012428:	88db      	ldrh	r3, [r3, #6]
 801242a:	2b00      	cmp	r3, #0
 801242c:	d108      	bne.n	8012440 <USBD_MSC_Setup+0xa4>
              ((req->bmRequest & 0x80U) != 0x80U))
 801242e:	683b      	ldr	r3, [r7, #0]
 8012430:	781b      	ldrb	r3, [r3, #0]
 8012432:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8012434:	2b00      	cmp	r3, #0
 8012436:	db03      	blt.n	8012440 <USBD_MSC_Setup+0xa4>
          {
            MSC_BOT_Reset(pdev);
 8012438:	6878      	ldr	r0, [r7, #4]
 801243a:	f000 f987 	bl	801274c <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801243e:	e00d      	b.n	801245c <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 8012440:	6839      	ldr	r1, [r7, #0]
 8012442:	6878      	ldr	r0, [r7, #4]
 8012444:	f002 f90b 	bl	801465e <USBD_CtlError>
            ret = USBD_FAIL;
 8012448:	2302      	movs	r3, #2
 801244a:	75fb      	strb	r3, [r7, #23]
          break;
 801244c:	e006      	b.n	801245c <USBD_MSC_Setup+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801244e:	6839      	ldr	r1, [r7, #0]
 8012450:	6878      	ldr	r0, [r7, #4]
 8012452:	f002 f904 	bl	801465e <USBD_CtlError>
          ret = USBD_FAIL;
 8012456:	2302      	movs	r3, #2
 8012458:	75fb      	strb	r3, [r7, #23]
          break;
 801245a:	bf00      	nop
      }
      break;
 801245c:	e0ce      	b.n	80125fc <USBD_MSC_Setup+0x260>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801245e:	683b      	ldr	r3, [r7, #0]
 8012460:	785b      	ldrb	r3, [r3, #1]
 8012462:	2b0b      	cmp	r3, #11
 8012464:	f200 80bb 	bhi.w	80125de <USBD_MSC_Setup+0x242>
 8012468:	a201      	add	r2, pc, #4	; (adr r2, 8012470 <USBD_MSC_Setup+0xd4>)
 801246a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801246e:	bf00      	nop
 8012470:	080124a1 	.word	0x080124a1
 8012474:	08012517 	.word	0x08012517
 8012478:	080125df 	.word	0x080125df
 801247c:	080125df 	.word	0x080125df
 8012480:	080125df 	.word	0x080125df
 8012484:	080125df 	.word	0x080125df
 8012488:	080125df 	.word	0x080125df
 801248c:	080125df 	.word	0x080125df
 8012490:	080125df 	.word	0x080125df
 8012494:	080125df 	.word	0x080125df
 8012498:	080124c9 	.word	0x080124c9
 801249c:	080124f1 	.word	0x080124f1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80124a6:	2b03      	cmp	r3, #3
 80124a8:	d107      	bne.n	80124ba <USBD_MSC_Setup+0x11e>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80124aa:	f107 030e 	add.w	r3, r7, #14
 80124ae:	2202      	movs	r2, #2
 80124b0:	4619      	mov	r1, r3
 80124b2:	6878      	ldr	r0, [r7, #4]
 80124b4:	f002 f93d 	bl	8014732 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80124b8:	e098      	b.n	80125ec <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 80124ba:	6839      	ldr	r1, [r7, #0]
 80124bc:	6878      	ldr	r0, [r7, #4]
 80124be:	f002 f8ce 	bl	801465e <USBD_CtlError>
            ret = USBD_FAIL;
 80124c2:	2302      	movs	r3, #2
 80124c4:	75fb      	strb	r3, [r7, #23]
          break;
 80124c6:	e091      	b.n	80125ec <USBD_MSC_Setup+0x250>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80124ce:	2b03      	cmp	r3, #3
 80124d0:	d107      	bne.n	80124e2 <USBD_MSC_Setup+0x146>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 80124d2:	693b      	ldr	r3, [r7, #16]
 80124d4:	3304      	adds	r3, #4
 80124d6:	2201      	movs	r2, #1
 80124d8:	4619      	mov	r1, r3
 80124da:	6878      	ldr	r0, [r7, #4]
 80124dc:	f002 f929 	bl	8014732 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80124e0:	e084      	b.n	80125ec <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 80124e2:	6839      	ldr	r1, [r7, #0]
 80124e4:	6878      	ldr	r0, [r7, #4]
 80124e6:	f002 f8ba 	bl	801465e <USBD_CtlError>
            ret = USBD_FAIL;
 80124ea:	2302      	movs	r3, #2
 80124ec:	75fb      	strb	r3, [r7, #23]
          break;
 80124ee:	e07d      	b.n	80125ec <USBD_MSC_Setup+0x250>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80124f6:	2b03      	cmp	r3, #3
 80124f8:	d106      	bne.n	8012508 <USBD_MSC_Setup+0x16c>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 80124fa:	683b      	ldr	r3, [r7, #0]
 80124fc:	885b      	ldrh	r3, [r3, #2]
 80124fe:	b2db      	uxtb	r3, r3
 8012500:	461a      	mov	r2, r3
 8012502:	693b      	ldr	r3, [r7, #16]
 8012504:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012506:	e071      	b.n	80125ec <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8012508:	6839      	ldr	r1, [r7, #0]
 801250a:	6878      	ldr	r0, [r7, #4]
 801250c:	f002 f8a7 	bl	801465e <USBD_CtlError>
            ret = USBD_FAIL;
 8012510:	2302      	movs	r3, #2
 8012512:	75fb      	strb	r3, [r7, #23]
          break;
 8012514:	e06a      	b.n	80125ec <USBD_MSC_Setup+0x250>

        case USB_REQ_CLEAR_FEATURE:

          /* Flush the FIFO and Clear the stall status */
          USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8012516:	683b      	ldr	r3, [r7, #0]
 8012518:	889b      	ldrh	r3, [r3, #4]
 801251a:	b2db      	uxtb	r3, r3
 801251c:	4619      	mov	r1, r3
 801251e:	6878      	ldr	r0, [r7, #4]
 8012520:	f002 fc7c 	bl	8014e1c <USBD_LL_FlushEP>

          /* Reactivate the EP */
          USBD_LL_CloseEP(pdev, (uint8_t)req->wIndex);
 8012524:	683b      	ldr	r3, [r7, #0]
 8012526:	889b      	ldrh	r3, [r3, #4]
 8012528:	b2db      	uxtb	r3, r3
 801252a:	4619      	mov	r1, r3
 801252c:	6878      	ldr	r0, [r7, #4]
 801252e:	f002 fc56 	bl	8014dde <USBD_LL_CloseEP>
          if ((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 8012532:	683b      	ldr	r3, [r7, #0]
 8012534:	889b      	ldrh	r3, [r3, #4]
 8012536:	b25b      	sxtb	r3, r3
 8012538:	2b00      	cmp	r3, #0
 801253a:	da23      	bge.n	8012584 <USBD_MSC_Setup+0x1e8>
          {
            pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 801253c:	683b      	ldr	r3, [r7, #0]
 801253e:	889b      	ldrh	r3, [r3, #4]
 8012540:	b2db      	uxtb	r3, r3
 8012542:	f003 020f 	and.w	r2, r3, #15
 8012546:	6879      	ldr	r1, [r7, #4]
 8012548:	4613      	mov	r3, r2
 801254a:	009b      	lsls	r3, r3, #2
 801254c:	4413      	add	r3, r2
 801254e:	009b      	lsls	r3, r3, #2
 8012550:	440b      	add	r3, r1
 8012552:	3318      	adds	r3, #24
 8012554:	2200      	movs	r2, #0
 8012556:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	7c1b      	ldrb	r3, [r3, #16]
 801255c:	2b00      	cmp	r3, #0
 801255e:	d107      	bne.n	8012570 <USBD_MSC_Setup+0x1d4>
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8012560:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012564:	2202      	movs	r2, #2
 8012566:	2181      	movs	r1, #129	; 0x81
 8012568:	6878      	ldr	r0, [r7, #4]
 801256a:	f002 fc12 	bl	8014d92 <USBD_LL_OpenEP>
 801256e:	e005      	b.n	801257c <USBD_MSC_Setup+0x1e0>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8012570:	2340      	movs	r3, #64	; 0x40
 8012572:	2202      	movs	r2, #2
 8012574:	2181      	movs	r1, #129	; 0x81
 8012576:	6878      	ldr	r0, [r7, #4]
 8012578:	f002 fc0b 	bl	8014d92 <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	2201      	movs	r2, #1
 8012580:	62da      	str	r2, [r3, #44]	; 0x2c
 8012582:	e024      	b.n	80125ce <USBD_MSC_Setup+0x232>
          }
          else
          {
            pdev->ep_out[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8012584:	683b      	ldr	r3, [r7, #0]
 8012586:	889b      	ldrh	r3, [r3, #4]
 8012588:	b2db      	uxtb	r3, r3
 801258a:	f003 020f 	and.w	r2, r3, #15
 801258e:	6879      	ldr	r1, [r7, #4]
 8012590:	4613      	mov	r3, r2
 8012592:	009b      	lsls	r3, r3, #2
 8012594:	4413      	add	r3, r2
 8012596:	009b      	lsls	r3, r3, #2
 8012598:	440b      	add	r3, r1
 801259a:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 801259e:	2200      	movs	r2, #0
 80125a0:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	7c1b      	ldrb	r3, [r3, #16]
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d107      	bne.n	80125ba <USBD_MSC_Setup+0x21e>
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 80125aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80125ae:	2202      	movs	r2, #2
 80125b0:	2101      	movs	r1, #1
 80125b2:	6878      	ldr	r0, [r7, #4]
 80125b4:	f002 fbed 	bl	8014d92 <USBD_LL_OpenEP>
 80125b8:	e005      	b.n	80125c6 <USBD_MSC_Setup+0x22a>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 80125ba:	2340      	movs	r3, #64	; 0x40
 80125bc:	2202      	movs	r2, #2
 80125be:	2101      	movs	r1, #1
 80125c0:	6878      	ldr	r0, [r7, #4]
 80125c2:	f002 fbe6 	bl	8014d92 <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	2201      	movs	r2, #1
 80125ca:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
          }

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 80125ce:	683b      	ldr	r3, [r7, #0]
 80125d0:	889b      	ldrh	r3, [r3, #4]
 80125d2:	b2db      	uxtb	r3, r3
 80125d4:	4619      	mov	r1, r3
 80125d6:	6878      	ldr	r0, [r7, #4]
 80125d8:	f000 fa52 	bl	8012a80 <MSC_BOT_CplClrFeature>
          break;
 80125dc:	e006      	b.n	80125ec <USBD_MSC_Setup+0x250>

        default:
          USBD_CtlError(pdev, req);
 80125de:	6839      	ldr	r1, [r7, #0]
 80125e0:	6878      	ldr	r0, [r7, #4]
 80125e2:	f002 f83c 	bl	801465e <USBD_CtlError>
          ret = USBD_FAIL;
 80125e6:	2302      	movs	r3, #2
 80125e8:	75fb      	strb	r3, [r7, #23]
          break;
 80125ea:	bf00      	nop
      }
      break;
 80125ec:	e006      	b.n	80125fc <USBD_MSC_Setup+0x260>

    default:
      USBD_CtlError(pdev, req);
 80125ee:	6839      	ldr	r1, [r7, #0]
 80125f0:	6878      	ldr	r0, [r7, #4]
 80125f2:	f002 f834 	bl	801465e <USBD_CtlError>
      ret = USBD_FAIL;
 80125f6:	2302      	movs	r3, #2
 80125f8:	75fb      	strb	r3, [r7, #23]
      break;
 80125fa:	bf00      	nop
  }

  return ret;
 80125fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80125fe:	4618      	mov	r0, r3
 8012600:	3718      	adds	r7, #24
 8012602:	46bd      	mov	sp, r7
 8012604:	bd80      	pop	{r7, pc}
 8012606:	bf00      	nop

08012608 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012608:	b580      	push	{r7, lr}
 801260a:	b082      	sub	sp, #8
 801260c:	af00      	add	r7, sp, #0
 801260e:	6078      	str	r0, [r7, #4]
 8012610:	460b      	mov	r3, r1
 8012612:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8012614:	78fb      	ldrb	r3, [r7, #3]
 8012616:	4619      	mov	r1, r3
 8012618:	6878      	ldr	r0, [r7, #4]
 801261a:	f000 f8c1 	bl	80127a0 <MSC_BOT_DataIn>

  return USBD_OK;
 801261e:	2300      	movs	r3, #0
}
 8012620:	4618      	mov	r0, r3
 8012622:	3708      	adds	r7, #8
 8012624:	46bd      	mov	sp, r7
 8012626:	bd80      	pop	{r7, pc}

08012628 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012628:	b580      	push	{r7, lr}
 801262a:	b082      	sub	sp, #8
 801262c:	af00      	add	r7, sp, #0
 801262e:	6078      	str	r0, [r7, #4]
 8012630:	460b      	mov	r3, r1
 8012632:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8012634:	78fb      	ldrb	r3, [r7, #3]
 8012636:	4619      	mov	r1, r3
 8012638:	6878      	ldr	r0, [r7, #4]
 801263a:	f000 f8e3 	bl	8012804 <MSC_BOT_DataOut>

  return USBD_OK;
 801263e:	2300      	movs	r3, #0
}
 8012640:	4618      	mov	r0, r3
 8012642:	3708      	adds	r7, #8
 8012644:	46bd      	mov	sp, r7
 8012646:	bd80      	pop	{r7, pc}

08012648 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8012648:	b480      	push	{r7}
 801264a:	b083      	sub	sp, #12
 801264c:	af00      	add	r7, sp, #0
 801264e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgHSDesc);
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	2220      	movs	r2, #32
 8012654:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8012656:	4b03      	ldr	r3, [pc, #12]	; (8012664 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8012658:	4618      	mov	r0, r3
 801265a:	370c      	adds	r7, #12
 801265c:	46bd      	mov	sp, r7
 801265e:	bc80      	pop	{r7}
 8012660:	4770      	bx	lr
 8012662:	bf00      	nop
 8012664:	20000084 	.word	0x20000084

08012668 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8012668:	b480      	push	{r7}
 801266a:	b083      	sub	sp, #12
 801266c:	af00      	add	r7, sp, #0
 801266e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgFSDesc);
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	2220      	movs	r2, #32
 8012674:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8012676:	4b03      	ldr	r3, [pc, #12]	; (8012684 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8012678:	4618      	mov	r0, r3
 801267a:	370c      	adds	r7, #12
 801267c:	46bd      	mov	sp, r7
 801267e:	bc80      	pop	{r7}
 8012680:	4770      	bx	lr
 8012682:	bf00      	nop
 8012684:	200000a4 	.word	0x200000a4

08012688 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8012688:	b480      	push	{r7}
 801268a:	b083      	sub	sp, #12
 801268c:	af00      	add	r7, sp, #0
 801268e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	2220      	movs	r2, #32
 8012694:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8012696:	4b03      	ldr	r3, [pc, #12]	; (80126a4 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8012698:	4618      	mov	r0, r3
 801269a:	370c      	adds	r7, #12
 801269c:	46bd      	mov	sp, r7
 801269e:	bc80      	pop	{r7}
 80126a0:	4770      	bx	lr
 80126a2:	bf00      	nop
 80126a4:	200000c4 	.word	0x200000c4

080126a8 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80126a8:	b480      	push	{r7}
 80126aa:	b083      	sub	sp, #12
 80126ac:	af00      	add	r7, sp, #0
 80126ae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_DeviceQualifierDesc);
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	220a      	movs	r2, #10
 80126b4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 80126b6:	4b03      	ldr	r3, [pc, #12]	; (80126c4 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 80126b8:	4618      	mov	r0, r3
 80126ba:	370c      	adds	r7, #12
 80126bc:	46bd      	mov	sp, r7
 80126be:	bc80      	pop	{r7}
 80126c0:	4770      	bx	lr
 80126c2:	bf00      	nop
 80126c4:	200000e4 	.word	0x200000e4

080126c8 <USBD_MSC_RegisterStorage>:
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev,
                                 USBD_StorageTypeDef *fops)
{
 80126c8:	b480      	push	{r7}
 80126ca:	b083      	sub	sp, #12
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	6078      	str	r0, [r7, #4]
 80126d0:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 80126d2:	683b      	ldr	r3, [r7, #0]
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d003      	beq.n	80126e0 <USBD_MSC_RegisterStorage+0x18>
  {
    pdev->pUserData = fops;
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	683a      	ldr	r2, [r7, #0]
 80126dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return USBD_OK;
 80126e0:	2300      	movs	r3, #0
}
 80126e2:	4618      	mov	r0, r3
 80126e4:	370c      	adds	r7, #12
 80126e6:	46bd      	mov	sp, r7
 80126e8:	bc80      	pop	{r7}
 80126ea:	4770      	bx	lr

080126ec <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef  *pdev)
{
 80126ec:	b580      	push	{r7, lr}
 80126ee:	b084      	sub	sp, #16
 80126f0:	af00      	add	r7, sp, #0
 80126f2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80126fa:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	2200      	movs	r2, #0
 8012700:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	2200      	movs	r2, #0
 8012706:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	2200      	movs	r2, #0
 801270c:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  hmsc->scsi_sense_head = 0U;
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	2200      	movs	r2, #0
 8012714:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	2000      	movs	r0, #0
 8012722:	4798      	blx	r3

  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8012724:	2101      	movs	r1, #1
 8012726:	6878      	ldr	r0, [r7, #4]
 8012728:	f002 fb78 	bl	8014e1c <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 801272c:	2181      	movs	r1, #129	; 0x81
 801272e:	6878      	ldr	r0, [r7, #4]
 8012730:	f002 fb74 	bl	8014e1c <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8012734:	68fb      	ldr	r3, [r7, #12]
 8012736:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 801273a:	231f      	movs	r3, #31
 801273c:	2101      	movs	r1, #1
 801273e:	6878      	ldr	r0, [r7, #4]
 8012740:	f002 fc37 	bl	8014fb2 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8012744:	bf00      	nop
 8012746:	3710      	adds	r7, #16
 8012748:	46bd      	mov	sp, r7
 801274a:	bd80      	pop	{r7, pc}

0801274c <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef  *pdev)
{
 801274c:	b580      	push	{r7, lr}
 801274e:	b084      	sub	sp, #16
 8012750:	af00      	add	r7, sp, #0
 8012752:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801275a:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	2200      	movs	r2, #0
 8012760:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	2201      	movs	r2, #1
 8012766:	725a      	strb	r2, [r3, #9]

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 801276e:	231f      	movs	r3, #31
 8012770:	2101      	movs	r1, #1
 8012772:	6878      	ldr	r0, [r7, #4]
 8012774:	f002 fc1d 	bl	8014fb2 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8012778:	bf00      	nop
 801277a:	3710      	adds	r7, #16
 801277c:	46bd      	mov	sp, r7
 801277e:	bd80      	pop	{r7, pc}

08012780 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8012780:	b480      	push	{r7}
 8012782:	b085      	sub	sp, #20
 8012784:	af00      	add	r7, sp, #0
 8012786:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801278e:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	2200      	movs	r2, #0
 8012794:	721a      	strb	r2, [r3, #8]
}
 8012796:	bf00      	nop
 8012798:	3714      	adds	r7, #20
 801279a:	46bd      	mov	sp, r7
 801279c:	bc80      	pop	{r7}
 801279e:	4770      	bx	lr

080127a0 <MSC_BOT_DataIn>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef  *pdev,
                    uint8_t epnum)
{
 80127a0:	b580      	push	{r7, lr}
 80127a2:	b084      	sub	sp, #16
 80127a4:	af00      	add	r7, sp, #0
 80127a6:	6078      	str	r0, [r7, #4]
 80127a8:	460b      	mov	r3, r1
 80127aa:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80127b2:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 80127b4:	68fb      	ldr	r3, [r7, #12]
 80127b6:	7a1b      	ldrb	r3, [r3, #8]
 80127b8:	2b02      	cmp	r3, #2
 80127ba:	d005      	beq.n	80127c8 <MSC_BOT_DataIn+0x28>
 80127bc:	2b02      	cmp	r3, #2
 80127be:	db1a      	blt.n	80127f6 <MSC_BOT_DataIn+0x56>
 80127c0:	3b03      	subs	r3, #3
 80127c2:	2b01      	cmp	r3, #1
 80127c4:	d817      	bhi.n	80127f6 <MSC_BOT_DataIn+0x56>
 80127c6:	e011      	b.n	80127ec <MSC_BOT_DataIn+0x4c>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80127d4:	461a      	mov	r2, r3
 80127d6:	6878      	ldr	r0, [r7, #4]
 80127d8:	f000 f97a 	bl	8012ad0 <SCSI_ProcessCmd>
 80127dc:	4603      	mov	r3, r0
 80127de:	2b00      	cmp	r3, #0
 80127e0:	da0b      	bge.n	80127fa <MSC_BOT_DataIn+0x5a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80127e2:	2101      	movs	r1, #1
 80127e4:	6878      	ldr	r0, [r7, #4]
 80127e6:	f000 f8f1 	bl	80129cc <MSC_BOT_SendCSW>
      }
      break;
 80127ea:	e006      	b.n	80127fa <MSC_BOT_DataIn+0x5a>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80127ec:	2100      	movs	r1, #0
 80127ee:	6878      	ldr	r0, [r7, #4]
 80127f0:	f000 f8ec 	bl	80129cc <MSC_BOT_SendCSW>
      break;
 80127f4:	e002      	b.n	80127fc <MSC_BOT_DataIn+0x5c>

    default:
      break;
 80127f6:	bf00      	nop
 80127f8:	e000      	b.n	80127fc <MSC_BOT_DataIn+0x5c>
      break;
 80127fa:	bf00      	nop
  }
}
 80127fc:	bf00      	nop
 80127fe:	3710      	adds	r7, #16
 8012800:	46bd      	mov	sp, r7
 8012802:	bd80      	pop	{r7, pc}

08012804 <MSC_BOT_DataOut>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef  *pdev,
                     uint8_t epnum)
{
 8012804:	b580      	push	{r7, lr}
 8012806:	b084      	sub	sp, #16
 8012808:	af00      	add	r7, sp, #0
 801280a:	6078      	str	r0, [r7, #4]
 801280c:	460b      	mov	r3, r1
 801280e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012816:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	7a1b      	ldrb	r3, [r3, #8]
 801281c:	2b00      	cmp	r3, #0
 801281e:	d002      	beq.n	8012826 <MSC_BOT_DataOut+0x22>
 8012820:	2b01      	cmp	r3, #1
 8012822:	d004      	beq.n	801282e <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8012824:	e015      	b.n	8012852 <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 8012826:	6878      	ldr	r0, [r7, #4]
 8012828:	f000 f818 	bl	801285c <MSC_BOT_CBW_Decode>
      break;
 801282c:	e011      	b.n	8012852 <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801282e:	68fb      	ldr	r3, [r7, #12]
 8012830:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801283a:	461a      	mov	r2, r3
 801283c:	6878      	ldr	r0, [r7, #4]
 801283e:	f000 f947 	bl	8012ad0 <SCSI_ProcessCmd>
 8012842:	4603      	mov	r3, r0
 8012844:	2b00      	cmp	r3, #0
 8012846:	da03      	bge.n	8012850 <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8012848:	2101      	movs	r1, #1
 801284a:	6878      	ldr	r0, [r7, #4]
 801284c:	f000 f8be 	bl	80129cc <MSC_BOT_SendCSW>
      break;
 8012850:	bf00      	nop
  }
}
 8012852:	bf00      	nop
 8012854:	3710      	adds	r7, #16
 8012856:	46bd      	mov	sp, r7
 8012858:	bd80      	pop	{r7, pc}
	...

0801285c <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef  *pdev)
{
 801285c:	b580      	push	{r7, lr}
 801285e:	b084      	sub	sp, #16
 8012860:	af00      	add	r7, sp, #0
 8012862:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801286a:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8012884:	2101      	movs	r1, #1
 8012886:	6878      	ldr	r0, [r7, #4]
 8012888:	f002 fbb6 	bl	8014ff8 <USBD_LL_GetRxDataSize>
 801288c:	4603      	mov	r3, r0
 801288e:	2b1f      	cmp	r3, #31
 8012890:	d114      	bne.n	80128bc <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8012892:	68fb      	ldr	r3, [r7, #12]
 8012894:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8012898:	4a32      	ldr	r2, [pc, #200]	; (8012964 <MSC_BOT_CBW_Decode+0x108>)
 801289a:	4293      	cmp	r3, r2
 801289c:	d10e      	bne.n	80128bc <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) ||
 801289e:	68fb      	ldr	r3, [r7, #12]
 80128a0:	f893 3219 	ldrb.w	r3, [r3, #537]	; 0x219
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80128a4:	2b01      	cmp	r3, #1
 80128a6:	d809      	bhi.n	80128bc <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 80128a8:	68fb      	ldr	r3, [r7, #12]
 80128aa:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
      (hmsc->cbw.bLUN > 1U) ||
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d004      	beq.n	80128bc <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 80128b2:	68fb      	ldr	r3, [r7, #12]
 80128b4:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 80128b8:	2b10      	cmp	r3, #16
 80128ba:	d90e      	bls.n	80128da <MSC_BOT_CBW_Decode+0x7e>
  {

    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80128bc:	68fb      	ldr	r3, [r7, #12]
 80128be:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80128c2:	2320      	movs	r3, #32
 80128c4:	2205      	movs	r2, #5
 80128c6:	6878      	ldr	r0, [r7, #4]
 80128c8:	f000 fc48 	bl	801315c <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80128cc:	68fb      	ldr	r3, [r7, #12]
 80128ce:	2202      	movs	r2, #2
 80128d0:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 80128d2:	6878      	ldr	r0, [r7, #4]
 80128d4:	f000 f8a6 	bl	8012a24 <MSC_BOT_Abort>
 80128d8:	e041      	b.n	801295e <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80128e0:	68fb      	ldr	r3, [r7, #12]
 80128e2:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80128e6:	461a      	mov	r2, r3
 80128e8:	6878      	ldr	r0, [r7, #4]
 80128ea:	f000 f8f1 	bl	8012ad0 <SCSI_ProcessCmd>
 80128ee:	4603      	mov	r3, r0
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	da0c      	bge.n	801290e <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	7a1b      	ldrb	r3, [r3, #8]
 80128f8:	2b05      	cmp	r3, #5
 80128fa:	d104      	bne.n	8012906 <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80128fc:	2101      	movs	r1, #1
 80128fe:	6878      	ldr	r0, [r7, #4]
 8012900:	f000 f864 	bl	80129cc <MSC_BOT_SendCSW>
 8012904:	e02b      	b.n	801295e <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8012906:	6878      	ldr	r0, [r7, #4]
 8012908:	f000 f88c 	bl	8012a24 <MSC_BOT_Abort>
 801290c:	e027      	b.n	801295e <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /*Burst xfer handled internally*/
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 801290e:	68fb      	ldr	r3, [r7, #12]
 8012910:	7a1b      	ldrb	r3, [r3, #8]
 8012912:	2b02      	cmp	r3, #2
 8012914:	d022      	beq.n	801295c <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 801291a:	2b01      	cmp	r3, #1
 801291c:	d01e      	beq.n	801295c <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8012922:	2b03      	cmp	r3, #3
 8012924:	d01a      	beq.n	801295c <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	895b      	ldrh	r3, [r3, #10]
 801292a:	2b00      	cmp	r3, #0
 801292c:	d009      	beq.n	8012942 <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	f103 010c 	add.w	r1, r3, #12
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	895b      	ldrh	r3, [r3, #10]
 8012938:	461a      	mov	r2, r3
 801293a:	6878      	ldr	r0, [r7, #4]
 801293c:	f000 f814 	bl	8012968 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8012940:	e00d      	b.n	801295e <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	895b      	ldrh	r3, [r3, #10]
 8012946:	2b00      	cmp	r3, #0
 8012948:	d104      	bne.n	8012954 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801294a:	2100      	movs	r1, #0
 801294c:	6878      	ldr	r0, [r7, #4]
 801294e:	f000 f83d 	bl	80129cc <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8012952:	e004      	b.n	801295e <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8012954:	6878      	ldr	r0, [r7, #4]
 8012956:	f000 f865 	bl	8012a24 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 801295a:	e000      	b.n	801295e <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 801295c:	bf00      	nop
    }
  }
}
 801295e:	3710      	adds	r7, #16
 8012960:	46bd      	mov	sp, r7
 8012962:	bd80      	pop	{r7, pc}
 8012964:	43425355 	.word	0x43425355

08012968 <MSC_BOT_SendData>:
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                              uint16_t len)
{
 8012968:	b580      	push	{r7, lr}
 801296a:	b086      	sub	sp, #24
 801296c:	af00      	add	r7, sp, #0
 801296e:	60f8      	str	r0, [r7, #12]
 8012970:	60b9      	str	r1, [r7, #8]
 8012972:	4613      	mov	r3, r2
 8012974:	80fb      	strh	r3, [r7, #6]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012976:	68fb      	ldr	r3, [r7, #12]
 8012978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801297c:	617b      	str	r3, [r7, #20]

  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 801297e:	697b      	ldr	r3, [r7, #20]
 8012980:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8012984:	88fb      	ldrh	r3, [r7, #6]
 8012986:	429a      	cmp	r2, r3
 8012988:	d204      	bcs.n	8012994 <MSC_BOT_SendData+0x2c>
 801298a:	697b      	ldr	r3, [r7, #20]
 801298c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012990:	b29b      	uxth	r3, r3
 8012992:	e000      	b.n	8012996 <MSC_BOT_SendData+0x2e>
 8012994:	88fb      	ldrh	r3, [r7, #6]
 8012996:	827b      	strh	r3, [r7, #18]

  hmsc->csw.dDataResidue -= len;
 8012998:	697b      	ldr	r3, [r7, #20]
 801299a:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 801299e:	88fb      	ldrh	r3, [r7, #6]
 80129a0:	1ad2      	subs	r2, r2, r3
 80129a2:	697b      	ldr	r3, [r7, #20]
 80129a4:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 80129a8:	697b      	ldr	r3, [r7, #20]
 80129aa:	2200      	movs	r2, #0
 80129ac:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 80129b0:	697b      	ldr	r3, [r7, #20]
 80129b2:	2204      	movs	r2, #4
 80129b4:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 80129b6:	8a7b      	ldrh	r3, [r7, #18]
 80129b8:	68ba      	ldr	r2, [r7, #8]
 80129ba:	2181      	movs	r1, #129	; 0x81
 80129bc:	68f8      	ldr	r0, [r7, #12]
 80129be:	f002 fad5 	bl	8014f6c <USBD_LL_Transmit>
}
 80129c2:	bf00      	nop
 80129c4:	3718      	adds	r7, #24
 80129c6:	46bd      	mov	sp, r7
 80129c8:	bd80      	pop	{r7, pc}
	...

080129cc <MSC_BOT_SendCSW>:
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef  *pdev,
                      uint8_t CSW_Status)
{
 80129cc:	b580      	push	{r7, lr}
 80129ce:	b084      	sub	sp, #16
 80129d0:	af00      	add	r7, sp, #0
 80129d2:	6078      	str	r0, [r7, #4]
 80129d4:	460b      	mov	r3, r1
 80129d6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80129de:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	4a0f      	ldr	r2, [pc, #60]	; (8012a20 <MSC_BOT_SendCSW+0x54>)
 80129e4:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
  hmsc->csw.bStatus = CSW_Status;
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	78fa      	ldrb	r2, [r7, #3]
 80129ec:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	2200      	movs	r2, #0
 80129f4:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)(void *)&hmsc->csw,
 80129f6:	68fb      	ldr	r3, [r7, #12]
 80129f8:	f503 720b 	add.w	r2, r3, #556	; 0x22c
 80129fc:	230d      	movs	r3, #13
 80129fe:	2181      	movs	r1, #129	; 0x81
 8012a00:	6878      	ldr	r0, [r7, #4]
 8012a02:	f002 fab3 	bl	8014f6c <USBD_LL_Transmit>
                   USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8012a0c:	231f      	movs	r3, #31
 8012a0e:	2101      	movs	r1, #1
 8012a10:	6878      	ldr	r0, [r7, #4]
 8012a12:	f002 face 	bl	8014fb2 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8012a16:	bf00      	nop
 8012a18:	3710      	adds	r7, #16
 8012a1a:	46bd      	mov	sp, r7
 8012a1c:	bd80      	pop	{r7, pc}
 8012a1e:	bf00      	nop
 8012a20:	53425355 	.word	0x53425355

08012a24 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef  *pdev)
{
 8012a24:	b580      	push	{r7, lr}
 8012a26:	b084      	sub	sp, #16
 8012a28:	af00      	add	r7, sp, #0
 8012a2a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012a32:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d10c      	bne.n	8012a58 <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
  if ((hmsc->cbw.bmFlags == 0U) &&
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d007      	beq.n	8012a58 <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d103      	bne.n	8012a58 <MSC_BOT_Abort+0x34>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8012a50:	2101      	movs	r1, #1
 8012a52:	6878      	ldr	r0, [r7, #4]
 8012a54:	f002 fa01 	bl	8014e5a <USBD_LL_StallEP>
  }

  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8012a58:	2181      	movs	r1, #129	; 0x81
 8012a5a:	6878      	ldr	r0, [r7, #4]
 8012a5c:	f002 f9fd 	bl	8014e5a <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8012a60:	68fb      	ldr	r3, [r7, #12]
 8012a62:	7a5b      	ldrb	r3, [r3, #9]
 8012a64:	2b02      	cmp	r3, #2
 8012a66:	d107      	bne.n	8012a78 <MSC_BOT_Abort+0x54>
  {
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8012a6e:	231f      	movs	r3, #31
 8012a70:	2101      	movs	r1, #1
 8012a72:	6878      	ldr	r0, [r7, #4]
 8012a74:	f002 fa9d 	bl	8014fb2 <USBD_LL_PrepareReceive>
                           USBD_BOT_CBW_LENGTH);
  }
}
 8012a78:	bf00      	nop
 8012a7a:	3710      	adds	r7, #16
 8012a7c:	46bd      	mov	sp, r7
 8012a7e:	bd80      	pop	{r7, pc}

08012a80 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8012a80:	b580      	push	{r7, lr}
 8012a82:	b084      	sub	sp, #16
 8012a84:	af00      	add	r7, sp, #0
 8012a86:	6078      	str	r0, [r7, #4]
 8012a88:	460b      	mov	r3, r1
 8012a8a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012a92:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8012a94:	68fb      	ldr	r3, [r7, #12]
 8012a96:	7a5b      	ldrb	r3, [r3, #9]
 8012a98:	2b02      	cmp	r3, #2
 8012a9a:	d107      	bne.n	8012aac <MSC_BOT_CplClrFeature+0x2c>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8012a9c:	2181      	movs	r1, #129	; 0x81
 8012a9e:	6878      	ldr	r0, [r7, #4]
 8012aa0:	f002 f9db 	bl	8014e5a <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	2200      	movs	r2, #0
 8012aa8:	725a      	strb	r2, [r3, #9]
 8012aaa:	e00d      	b.n	8012ac8 <MSC_BOT_CplClrFeature+0x48>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8012aac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	da08      	bge.n	8012ac6 <MSC_BOT_CplClrFeature+0x46>
 8012ab4:	68fb      	ldr	r3, [r7, #12]
 8012ab6:	7a5b      	ldrb	r3, [r3, #9]
 8012ab8:	2b01      	cmp	r3, #1
 8012aba:	d004      	beq.n	8012ac6 <MSC_BOT_CplClrFeature+0x46>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8012abc:	2101      	movs	r1, #1
 8012abe:	6878      	ldr	r0, [r7, #4]
 8012ac0:	f7ff ff84 	bl	80129cc <MSC_BOT_SendCSW>
 8012ac4:	e000      	b.n	8012ac8 <MSC_BOT_CplClrFeature+0x48>
  }
  else
  {
    return;
 8012ac6:	bf00      	nop
  }
}
 8012ac8:	3710      	adds	r7, #16
 8012aca:	46bd      	mov	sp, r7
 8012acc:	bd80      	pop	{r7, pc}
	...

08012ad0 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8012ad0:	b580      	push	{r7, lr}
 8012ad2:	b084      	sub	sp, #16
 8012ad4:	af00      	add	r7, sp, #0
 8012ad6:	60f8      	str	r0, [r7, #12]
 8012ad8:	460b      	mov	r3, r1
 8012ada:	607a      	str	r2, [r7, #4]
 8012adc:	72fb      	strb	r3, [r7, #11]
  switch (cmd[0])
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	781b      	ldrb	r3, [r3, #0]
 8012ae2:	2b5a      	cmp	r3, #90	; 0x5a
 8012ae4:	f200 810e 	bhi.w	8012d04 <SCSI_ProcessCmd+0x234>
 8012ae8:	a201      	add	r2, pc, #4	; (adr r2, 8012af0 <SCSI_ProcessCmd+0x20>)
 8012aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012aee:	bf00      	nop
 8012af0:	08012c5d 	.word	0x08012c5d
 8012af4:	08012d05 	.word	0x08012d05
 8012af8:	08012d05 	.word	0x08012d05
 8012afc:	08012c6b 	.word	0x08012c6b
 8012b00:	08012d05 	.word	0x08012d05
 8012b04:	08012d05 	.word	0x08012d05
 8012b08:	08012d05 	.word	0x08012d05
 8012b0c:	08012d05 	.word	0x08012d05
 8012b10:	08012d05 	.word	0x08012d05
 8012b14:	08012d05 	.word	0x08012d05
 8012b18:	08012d05 	.word	0x08012d05
 8012b1c:	08012d05 	.word	0x08012d05
 8012b20:	08012d05 	.word	0x08012d05
 8012b24:	08012d05 	.word	0x08012d05
 8012b28:	08012d05 	.word	0x08012d05
 8012b2c:	08012d05 	.word	0x08012d05
 8012b30:	08012d05 	.word	0x08012d05
 8012b34:	08012d05 	.word	0x08012d05
 8012b38:	08012c79 	.word	0x08012c79
 8012b3c:	08012d05 	.word	0x08012d05
 8012b40:	08012d05 	.word	0x08012d05
 8012b44:	08012d05 	.word	0x08012d05
 8012b48:	08012d05 	.word	0x08012d05
 8012b4c:	08012d05 	.word	0x08012d05
 8012b50:	08012d05 	.word	0x08012d05
 8012b54:	08012d05 	.word	0x08012d05
 8012b58:	08012ca3 	.word	0x08012ca3
 8012b5c:	08012c87 	.word	0x08012c87
 8012b60:	08012d05 	.word	0x08012d05
 8012b64:	08012d05 	.word	0x08012d05
 8012b68:	08012c95 	.word	0x08012c95
 8012b6c:	08012d05 	.word	0x08012d05
 8012b70:	08012d05 	.word	0x08012d05
 8012b74:	08012d05 	.word	0x08012d05
 8012b78:	08012d05 	.word	0x08012d05
 8012b7c:	08012cbf 	.word	0x08012cbf
 8012b80:	08012d05 	.word	0x08012d05
 8012b84:	08012ccd 	.word	0x08012ccd
 8012b88:	08012d05 	.word	0x08012d05
 8012b8c:	08012d05 	.word	0x08012d05
 8012b90:	08012cdb 	.word	0x08012cdb
 8012b94:	08012d05 	.word	0x08012d05
 8012b98:	08012ce9 	.word	0x08012ce9
 8012b9c:	08012d05 	.word	0x08012d05
 8012ba0:	08012d05 	.word	0x08012d05
 8012ba4:	08012d05 	.word	0x08012d05
 8012ba8:	08012d05 	.word	0x08012d05
 8012bac:	08012cf7 	.word	0x08012cf7
 8012bb0:	08012d05 	.word	0x08012d05
 8012bb4:	08012d05 	.word	0x08012d05
 8012bb8:	08012d05 	.word	0x08012d05
 8012bbc:	08012d05 	.word	0x08012d05
 8012bc0:	08012d05 	.word	0x08012d05
 8012bc4:	08012d05 	.word	0x08012d05
 8012bc8:	08012d05 	.word	0x08012d05
 8012bcc:	08012d05 	.word	0x08012d05
 8012bd0:	08012d05 	.word	0x08012d05
 8012bd4:	08012d05 	.word	0x08012d05
 8012bd8:	08012d05 	.word	0x08012d05
 8012bdc:	08012d05 	.word	0x08012d05
 8012be0:	08012d05 	.word	0x08012d05
 8012be4:	08012d05 	.word	0x08012d05
 8012be8:	08012d05 	.word	0x08012d05
 8012bec:	08012d05 	.word	0x08012d05
 8012bf0:	08012d05 	.word	0x08012d05
 8012bf4:	08012d05 	.word	0x08012d05
 8012bf8:	08012d05 	.word	0x08012d05
 8012bfc:	08012d05 	.word	0x08012d05
 8012c00:	08012d05 	.word	0x08012d05
 8012c04:	08012d05 	.word	0x08012d05
 8012c08:	08012d05 	.word	0x08012d05
 8012c0c:	08012d05 	.word	0x08012d05
 8012c10:	08012d05 	.word	0x08012d05
 8012c14:	08012d05 	.word	0x08012d05
 8012c18:	08012d05 	.word	0x08012d05
 8012c1c:	08012d05 	.word	0x08012d05
 8012c20:	08012d05 	.word	0x08012d05
 8012c24:	08012d05 	.word	0x08012d05
 8012c28:	08012d05 	.word	0x08012d05
 8012c2c:	08012d05 	.word	0x08012d05
 8012c30:	08012d05 	.word	0x08012d05
 8012c34:	08012d05 	.word	0x08012d05
 8012c38:	08012d05 	.word	0x08012d05
 8012c3c:	08012d05 	.word	0x08012d05
 8012c40:	08012d05 	.word	0x08012d05
 8012c44:	08012d05 	.word	0x08012d05
 8012c48:	08012d05 	.word	0x08012d05
 8012c4c:	08012d05 	.word	0x08012d05
 8012c50:	08012d05 	.word	0x08012d05
 8012c54:	08012d05 	.word	0x08012d05
 8012c58:	08012cb1 	.word	0x08012cb1
  {
    case SCSI_TEST_UNIT_READY:
      SCSI_TestUnitReady(pdev, lun, cmd);
 8012c5c:	7afb      	ldrb	r3, [r7, #11]
 8012c5e:	687a      	ldr	r2, [r7, #4]
 8012c60:	4619      	mov	r1, r3
 8012c62:	68f8      	ldr	r0, [r7, #12]
 8012c64:	f000 f85c 	bl	8012d20 <SCSI_TestUnitReady>
      break;
 8012c68:	e055      	b.n	8012d16 <SCSI_ProcessCmd+0x246>

    case SCSI_REQUEST_SENSE:
      SCSI_RequestSense(pdev, lun, cmd);
 8012c6a:	7afb      	ldrb	r3, [r7, #11]
 8012c6c:	687a      	ldr	r2, [r7, #4]
 8012c6e:	4619      	mov	r1, r3
 8012c70:	68f8      	ldr	r0, [r7, #12]
 8012c72:	f000 fa09 	bl	8013088 <SCSI_RequestSense>
      break;
 8012c76:	e04e      	b.n	8012d16 <SCSI_ProcessCmd+0x246>
    case SCSI_INQUIRY:
      SCSI_Inquiry(pdev, lun, cmd);
 8012c78:	7afb      	ldrb	r3, [r7, #11]
 8012c7a:	687a      	ldr	r2, [r7, #4]
 8012c7c:	4619      	mov	r1, r3
 8012c7e:	68f8      	ldr	r0, [r7, #12]
 8012c80:	f000 f888 	bl	8012d94 <SCSI_Inquiry>
      break;
 8012c84:	e047      	b.n	8012d16 <SCSI_ProcessCmd+0x246>

    case SCSI_START_STOP_UNIT:
      SCSI_StartStopUnit(pdev, lun, cmd);
 8012c86:	7afb      	ldrb	r3, [r7, #11]
 8012c88:	687a      	ldr	r2, [r7, #4]
 8012c8a:	4619      	mov	r1, r3
 8012c8c:	68f8      	ldr	r0, [r7, #12]
 8012c8e:	f000 fa9e 	bl	80131ce <SCSI_StartStopUnit>
      break;
 8012c92:	e040      	b.n	8012d16 <SCSI_ProcessCmd+0x246>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      SCSI_StartStopUnit(pdev, lun, cmd);
 8012c94:	7afb      	ldrb	r3, [r7, #11]
 8012c96:	687a      	ldr	r2, [r7, #4]
 8012c98:	4619      	mov	r1, r3
 8012c9a:	68f8      	ldr	r0, [r7, #12]
 8012c9c:	f000 fa97 	bl	80131ce <SCSI_StartStopUnit>
      break;
 8012ca0:	e039      	b.n	8012d16 <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE6:
      SCSI_ModeSense6(pdev, lun, cmd);
 8012ca2:	7afb      	ldrb	r3, [r7, #11]
 8012ca4:	687a      	ldr	r2, [r7, #4]
 8012ca6:	4619      	mov	r1, r3
 8012ca8:	68f8      	ldr	r0, [r7, #12]
 8012caa:	f000 f99d 	bl	8012fe8 <SCSI_ModeSense6>
      break;
 8012cae:	e032      	b.n	8012d16 <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE10:
      SCSI_ModeSense10(pdev, lun, cmd);
 8012cb0:	7afb      	ldrb	r3, [r7, #11]
 8012cb2:	687a      	ldr	r2, [r7, #4]
 8012cb4:	4619      	mov	r1, r3
 8012cb6:	68f8      	ldr	r0, [r7, #12]
 8012cb8:	f000 f9be 	bl	8013038 <SCSI_ModeSense10>
      break;
 8012cbc:	e02b      	b.n	8012d16 <SCSI_ProcessCmd+0x246>

    case SCSI_READ_FORMAT_CAPACITIES:
      SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8012cbe:	7afb      	ldrb	r3, [r7, #11]
 8012cc0:	687a      	ldr	r2, [r7, #4]
 8012cc2:	4619      	mov	r1, r3
 8012cc4:	68f8      	ldr	r0, [r7, #12]
 8012cc6:	f000 f92a 	bl	8012f1e <SCSI_ReadFormatCapacity>
      break;
 8012cca:	e024      	b.n	8012d16 <SCSI_ProcessCmd+0x246>

    case SCSI_READ_CAPACITY10:
      SCSI_ReadCapacity10(pdev, lun, cmd);
 8012ccc:	7afb      	ldrb	r3, [r7, #11]
 8012cce:	687a      	ldr	r2, [r7, #4]
 8012cd0:	4619      	mov	r1, r3
 8012cd2:	68f8      	ldr	r0, [r7, #12]
 8012cd4:	f000 f8bc 	bl	8012e50 <SCSI_ReadCapacity10>
      break;
 8012cd8:	e01d      	b.n	8012d16 <SCSI_ProcessCmd+0x246>

    case SCSI_READ10:
      SCSI_Read10(pdev, lun, cmd);
 8012cda:	7afb      	ldrb	r3, [r7, #11]
 8012cdc:	687a      	ldr	r2, [r7, #4]
 8012cde:	4619      	mov	r1, r3
 8012ce0:	68f8      	ldr	r0, [r7, #12]
 8012ce2:	f000 fa88 	bl	80131f6 <SCSI_Read10>
      break;
 8012ce6:	e016      	b.n	8012d16 <SCSI_ProcessCmd+0x246>

    case SCSI_WRITE10:
      SCSI_Write10(pdev, lun, cmd);
 8012ce8:	7afb      	ldrb	r3, [r7, #11]
 8012cea:	687a      	ldr	r2, [r7, #4]
 8012cec:	4619      	mov	r1, r3
 8012cee:	68f8      	ldr	r0, [r7, #12]
 8012cf0:	f000 fb0d 	bl	801330e <SCSI_Write10>
      break;
 8012cf4:	e00f      	b.n	8012d16 <SCSI_ProcessCmd+0x246>

    case SCSI_VERIFY10:
      SCSI_Verify10(pdev, lun, cmd);
 8012cf6:	7afb      	ldrb	r3, [r7, #11]
 8012cf8:	687a      	ldr	r2, [r7, #4]
 8012cfa:	4619      	mov	r1, r3
 8012cfc:	68f8      	ldr	r0, [r7, #12]
 8012cfe:	f000 fbb6 	bl	801346e <SCSI_Verify10>
      break;
 8012d02:	e008      	b.n	8012d16 <SCSI_ProcessCmd+0x246>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8012d04:	7af9      	ldrb	r1, [r7, #11]
 8012d06:	2320      	movs	r3, #32
 8012d08:	2205      	movs	r2, #5
 8012d0a:	68f8      	ldr	r0, [r7, #12]
 8012d0c:	f000 fa26 	bl	801315c <SCSI_SenseCode>
      return -1;
 8012d10:	f04f 33ff 	mov.w	r3, #4294967295
 8012d14:	e000      	b.n	8012d18 <SCSI_ProcessCmd+0x248>
  }

  return 0;
 8012d16:	2300      	movs	r3, #0
}
 8012d18:	4618      	mov	r0, r3
 8012d1a:	3710      	adds	r7, #16
 8012d1c:	46bd      	mov	sp, r7
 8012d1e:	bd80      	pop	{r7, pc}

08012d20 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8012d20:	b580      	push	{r7, lr}
 8012d22:	b086      	sub	sp, #24
 8012d24:	af00      	add	r7, sp, #0
 8012d26:	60f8      	str	r0, [r7, #12]
 8012d28:	460b      	mov	r3, r1
 8012d2a:	607a      	str	r2, [r7, #4]
 8012d2c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012d34:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8012d36:	697b      	ldr	r3, [r7, #20]
 8012d38:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d00a      	beq.n	8012d56 <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012d40:	697b      	ldr	r3, [r7, #20]
 8012d42:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8012d46:	2320      	movs	r3, #32
 8012d48:	2205      	movs	r2, #5
 8012d4a:	68f8      	ldr	r0, [r7, #12]
 8012d4c:	f000 fa06 	bl	801315c <SCSI_SenseCode>

    return -1;
 8012d50:	f04f 33ff 	mov.w	r3, #4294967295
 8012d54:	e019      	b.n	8012d8a <SCSI_TestUnitReady+0x6a>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012d5c:	689b      	ldr	r3, [r3, #8]
 8012d5e:	7afa      	ldrb	r2, [r7, #11]
 8012d60:	4610      	mov	r0, r2
 8012d62:	4798      	blx	r3
 8012d64:	4603      	mov	r3, r0
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d00b      	beq.n	8012d82 <SCSI_TestUnitReady+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012d6a:	7af9      	ldrb	r1, [r7, #11]
 8012d6c:	233a      	movs	r3, #58	; 0x3a
 8012d6e:	2202      	movs	r2, #2
 8012d70:	68f8      	ldr	r0, [r7, #12]
 8012d72:	f000 f9f3 	bl	801315c <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8012d76:	697b      	ldr	r3, [r7, #20]
 8012d78:	2205      	movs	r2, #5
 8012d7a:	721a      	strb	r2, [r3, #8]

    return -1;
 8012d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8012d80:	e003      	b.n	8012d8a <SCSI_TestUnitReady+0x6a>
  }
  hmsc->bot_data_length = 0U;
 8012d82:	697b      	ldr	r3, [r7, #20]
 8012d84:	2200      	movs	r2, #0
 8012d86:	815a      	strh	r2, [r3, #10]

  return 0;
 8012d88:	2300      	movs	r3, #0
}
 8012d8a:	4618      	mov	r0, r3
 8012d8c:	3718      	adds	r7, #24
 8012d8e:	46bd      	mov	sp, r7
 8012d90:	bd80      	pop	{r7, pc}
	...

08012d94 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8012d94:	b480      	push	{r7}
 8012d96:	b089      	sub	sp, #36	; 0x24
 8012d98:	af00      	add	r7, sp, #0
 8012d9a:	60f8      	str	r0, [r7, #12]
 8012d9c:	460b      	mov	r3, r1
 8012d9e:	607a      	str	r2, [r7, #4]
 8012da0:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012da8:	61bb      	str	r3, [r7, #24]

  if (params[1] & 0x01U)/*Evpd is set*/
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	3301      	adds	r3, #1
 8012dae:	781b      	ldrb	r3, [r3, #0]
 8012db0:	f003 0301 	and.w	r3, r3, #1
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d014      	beq.n	8012de2 <SCSI_Inquiry+0x4e>
  {
    len = LENGTH_INQUIRY_PAGE00;
 8012db8:	2307      	movs	r3, #7
 8012dba:	83fb      	strh	r3, [r7, #30]
    hmsc->bot_data_length = len;
 8012dbc:	69bb      	ldr	r3, [r7, #24]
 8012dbe:	8bfa      	ldrh	r2, [r7, #30]
 8012dc0:	815a      	strh	r2, [r3, #10]

    while (len)
 8012dc2:	e00a      	b.n	8012dda <SCSI_Inquiry+0x46>
    {
      len--;
 8012dc4:	8bfb      	ldrh	r3, [r7, #30]
 8012dc6:	3b01      	subs	r3, #1
 8012dc8:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = MSC_Page00_Inquiry_Data[len];
 8012dca:	8bfa      	ldrh	r2, [r7, #30]
 8012dcc:	8bfb      	ldrh	r3, [r7, #30]
 8012dce:	491f      	ldr	r1, [pc, #124]	; (8012e4c <SCSI_Inquiry+0xb8>)
 8012dd0:	5c89      	ldrb	r1, [r1, r2]
 8012dd2:	69ba      	ldr	r2, [r7, #24]
 8012dd4:	4413      	add	r3, r2
 8012dd6:	460a      	mov	r2, r1
 8012dd8:	731a      	strb	r2, [r3, #12]
    while (len)
 8012dda:	8bfb      	ldrh	r3, [r7, #30]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d1f1      	bne.n	8012dc4 <SCSI_Inquiry+0x30>
 8012de0:	e02e      	b.n	8012e40 <SCSI_Inquiry+0xac>
    }
  }
  else
  {
    pPage = (uint8_t *)(void *) & ((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012de8:	69d9      	ldr	r1, [r3, #28]
 8012dea:	7afa      	ldrb	r2, [r7, #11]
 8012dec:	4613      	mov	r3, r2
 8012dee:	00db      	lsls	r3, r3, #3
 8012df0:	4413      	add	r3, r2
 8012df2:	009b      	lsls	r3, r3, #2
 8012df4:	440b      	add	r3, r1
 8012df6:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8012df8:	697b      	ldr	r3, [r7, #20]
 8012dfa:	3304      	adds	r3, #4
 8012dfc:	781b      	ldrb	r3, [r3, #0]
 8012dfe:	b29b      	uxth	r3, r3
 8012e00:	3305      	adds	r3, #5
 8012e02:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	3304      	adds	r3, #4
 8012e08:	781b      	ldrb	r3, [r3, #0]
 8012e0a:	b29b      	uxth	r3, r3
 8012e0c:	8bfa      	ldrh	r2, [r7, #30]
 8012e0e:	429a      	cmp	r2, r3
 8012e10:	d303      	bcc.n	8012e1a <SCSI_Inquiry+0x86>
    {
      len = params[4];
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	3304      	adds	r3, #4
 8012e16:	781b      	ldrb	r3, [r3, #0]
 8012e18:	83fb      	strh	r3, [r7, #30]
    }
    hmsc->bot_data_length = len;
 8012e1a:	69bb      	ldr	r3, [r7, #24]
 8012e1c:	8bfa      	ldrh	r2, [r7, #30]
 8012e1e:	815a      	strh	r2, [r3, #10]

    while (len)
 8012e20:	e00b      	b.n	8012e3a <SCSI_Inquiry+0xa6>
    {
      len--;
 8012e22:	8bfb      	ldrh	r3, [r7, #30]
 8012e24:	3b01      	subs	r3, #1
 8012e26:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = pPage[len];
 8012e28:	8bfb      	ldrh	r3, [r7, #30]
 8012e2a:	697a      	ldr	r2, [r7, #20]
 8012e2c:	441a      	add	r2, r3
 8012e2e:	8bfb      	ldrh	r3, [r7, #30]
 8012e30:	7811      	ldrb	r1, [r2, #0]
 8012e32:	69ba      	ldr	r2, [r7, #24]
 8012e34:	4413      	add	r3, r2
 8012e36:	460a      	mov	r2, r1
 8012e38:	731a      	strb	r2, [r3, #12]
    while (len)
 8012e3a:	8bfb      	ldrh	r3, [r7, #30]
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d1f0      	bne.n	8012e22 <SCSI_Inquiry+0x8e>
    }
  }

  return 0;
 8012e40:	2300      	movs	r3, #0
}
 8012e42:	4618      	mov	r0, r3
 8012e44:	3724      	adds	r7, #36	; 0x24
 8012e46:	46bd      	mov	sp, r7
 8012e48:	bc80      	pop	{r7}
 8012e4a:	4770      	bx	lr
 8012e4c:	0801518c 	.word	0x0801518c

08012e50 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8012e50:	b580      	push	{r7, lr}
 8012e52:	b086      	sub	sp, #24
 8012e54:	af00      	add	r7, sp, #0
 8012e56:	60f8      	str	r0, [r7, #12]
 8012e58:	460b      	mov	r3, r1
 8012e5a:	607a      	str	r2, [r7, #4]
 8012e5c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012e64:	617b      	str	r3, [r7, #20]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 8012e66:	68fb      	ldr	r3, [r7, #12]
 8012e68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012e6c:	685b      	ldr	r3, [r3, #4]
 8012e6e:	697a      	ldr	r2, [r7, #20]
 8012e70:	f502 7118 	add.w	r1, r2, #608	; 0x260
 8012e74:	697a      	ldr	r2, [r7, #20]
 8012e76:	f202 225e 	addw	r2, r2, #606	; 0x25e
 8012e7a:	7af8      	ldrb	r0, [r7, #11]
 8012e7c:	4798      	blx	r3
 8012e7e:	4603      	mov	r3, r0
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d008      	beq.n	8012e96 <SCSI_ReadCapacity10+0x46>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012e84:	7af9      	ldrb	r1, [r7, #11]
 8012e86:	233a      	movs	r3, #58	; 0x3a
 8012e88:	2202      	movs	r2, #2
 8012e8a:	68f8      	ldr	r0, [r7, #12]
 8012e8c:	f000 f966 	bl	801315c <SCSI_SenseCode>
    return -1;
 8012e90:	f04f 33ff 	mov.w	r3, #4294967295
 8012e94:	e03f      	b.n	8012f16 <SCSI_ReadCapacity10+0xc6>
  }
  else
  {

    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8012e96:	697b      	ldr	r3, [r7, #20]
 8012e98:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8012e9c:	3b01      	subs	r3, #1
 8012e9e:	0e1b      	lsrs	r3, r3, #24
 8012ea0:	b2da      	uxtb	r2, r3
 8012ea2:	697b      	ldr	r3, [r7, #20]
 8012ea4:	731a      	strb	r2, [r3, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8012ea6:	697b      	ldr	r3, [r7, #20]
 8012ea8:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8012eac:	3b01      	subs	r3, #1
 8012eae:	0c1b      	lsrs	r3, r3, #16
 8012eb0:	b2da      	uxtb	r2, r3
 8012eb2:	697b      	ldr	r3, [r7, #20]
 8012eb4:	735a      	strb	r2, [r3, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8012eb6:	697b      	ldr	r3, [r7, #20]
 8012eb8:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8012ebc:	3b01      	subs	r3, #1
 8012ebe:	0a1b      	lsrs	r3, r3, #8
 8012ec0:	b2da      	uxtb	r2, r3
 8012ec2:	697b      	ldr	r3, [r7, #20]
 8012ec4:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8012ec6:	697b      	ldr	r3, [r7, #20]
 8012ec8:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8012ecc:	b2db      	uxtb	r3, r3
 8012ece:	3b01      	subs	r3, #1
 8012ed0:	b2da      	uxtb	r2, r3
 8012ed2:	697b      	ldr	r3, [r7, #20]
 8012ed4:	73da      	strb	r2, [r3, #15]

    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8012ed6:	697b      	ldr	r3, [r7, #20]
 8012ed8:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8012edc:	161b      	asrs	r3, r3, #24
 8012ede:	b2da      	uxtb	r2, r3
 8012ee0:	697b      	ldr	r3, [r7, #20]
 8012ee2:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8012ee4:	697b      	ldr	r3, [r7, #20]
 8012ee6:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8012eea:	141b      	asrs	r3, r3, #16
 8012eec:	b2da      	uxtb	r2, r3
 8012eee:	697b      	ldr	r3, [r7, #20]
 8012ef0:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8012ef2:	697b      	ldr	r3, [r7, #20]
 8012ef4:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8012ef8:	0a1b      	lsrs	r3, r3, #8
 8012efa:	b29b      	uxth	r3, r3
 8012efc:	b2da      	uxtb	r2, r3
 8012efe:	697b      	ldr	r3, [r7, #20]
 8012f00:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8012f02:	697b      	ldr	r3, [r7, #20]
 8012f04:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8012f08:	b2da      	uxtb	r2, r3
 8012f0a:	697b      	ldr	r3, [r7, #20]
 8012f0c:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data_length = 8U;
 8012f0e:	697b      	ldr	r3, [r7, #20]
 8012f10:	2208      	movs	r2, #8
 8012f12:	815a      	strh	r2, [r3, #10]
    return 0;
 8012f14:	2300      	movs	r3, #0
  }
}
 8012f16:	4618      	mov	r0, r3
 8012f18:	3718      	adds	r7, #24
 8012f1a:	46bd      	mov	sp, r7
 8012f1c:	bd80      	pop	{r7, pc}

08012f1e <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8012f1e:	b580      	push	{r7, lr}
 8012f20:	b088      	sub	sp, #32
 8012f22:	af00      	add	r7, sp, #0
 8012f24:	60f8      	str	r0, [r7, #12]
 8012f26:	460b      	mov	r3, r1
 8012f28:	607a      	str	r2, [r7, #4]
 8012f2a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012f2c:	68fb      	ldr	r3, [r7, #12]
 8012f2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012f32:	61bb      	str	r3, [r7, #24]

  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;

  for (i = 0U; i < 12U ; i++)
 8012f34:	2300      	movs	r3, #0
 8012f36:	83fb      	strh	r3, [r7, #30]
 8012f38:	e007      	b.n	8012f4a <SCSI_ReadFormatCapacity+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 8012f3a:	8bfb      	ldrh	r3, [r7, #30]
 8012f3c:	69ba      	ldr	r2, [r7, #24]
 8012f3e:	4413      	add	r3, r2
 8012f40:	2200      	movs	r2, #0
 8012f42:	731a      	strb	r2, [r3, #12]
  for (i = 0U; i < 12U ; i++)
 8012f44:	8bfb      	ldrh	r3, [r7, #30]
 8012f46:	3301      	adds	r3, #1
 8012f48:	83fb      	strh	r3, [r7, #30]
 8012f4a:	8bfb      	ldrh	r3, [r7, #30]
 8012f4c:	2b0b      	cmp	r3, #11
 8012f4e:	d9f4      	bls.n	8012f3a <SCSI_ReadFormatCapacity+0x1c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0U)
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012f56:	685b      	ldr	r3, [r3, #4]
 8012f58:	f107 0216 	add.w	r2, r7, #22
 8012f5c:	f107 0110 	add.w	r1, r7, #16
 8012f60:	7af8      	ldrb	r0, [r7, #11]
 8012f62:	4798      	blx	r3
 8012f64:	4603      	mov	r3, r0
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d008      	beq.n	8012f7c <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012f6a:	7af9      	ldrb	r1, [r7, #11]
 8012f6c:	233a      	movs	r3, #58	; 0x3a
 8012f6e:	2202      	movs	r2, #2
 8012f70:	68f8      	ldr	r0, [r7, #12]
 8012f72:	f000 f8f3 	bl	801315c <SCSI_SenseCode>
    return -1;
 8012f76:	f04f 33ff 	mov.w	r3, #4294967295
 8012f7a:	e030      	b.n	8012fde <SCSI_ReadFormatCapacity+0xc0>
  }
  else
  {
    hmsc->bot_data[3] = 0x08U;
 8012f7c:	69bb      	ldr	r3, [r7, #24]
 8012f7e:	2208      	movs	r2, #8
 8012f80:	73da      	strb	r2, [r3, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8012f82:	693b      	ldr	r3, [r7, #16]
 8012f84:	3b01      	subs	r3, #1
 8012f86:	0e1b      	lsrs	r3, r3, #24
 8012f88:	b2da      	uxtb	r2, r3
 8012f8a:	69bb      	ldr	r3, [r7, #24]
 8012f8c:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8012f8e:	693b      	ldr	r3, [r7, #16]
 8012f90:	3b01      	subs	r3, #1
 8012f92:	0c1b      	lsrs	r3, r3, #16
 8012f94:	b2da      	uxtb	r2, r3
 8012f96:	69bb      	ldr	r3, [r7, #24]
 8012f98:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8012f9a:	693b      	ldr	r3, [r7, #16]
 8012f9c:	3b01      	subs	r3, #1
 8012f9e:	0a1b      	lsrs	r3, r3, #8
 8012fa0:	b2da      	uxtb	r2, r3
 8012fa2:	69bb      	ldr	r3, [r7, #24]
 8012fa4:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8012fa6:	693b      	ldr	r3, [r7, #16]
 8012fa8:	b2db      	uxtb	r3, r3
 8012faa:	3b01      	subs	r3, #1
 8012fac:	b2da      	uxtb	r2, r3
 8012fae:	69bb      	ldr	r3, [r7, #24]
 8012fb0:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data[8] = 0x02U;
 8012fb2:	69bb      	ldr	r3, [r7, #24]
 8012fb4:	2202      	movs	r2, #2
 8012fb6:	751a      	strb	r2, [r3, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8012fb8:	8afb      	ldrh	r3, [r7, #22]
 8012fba:	141b      	asrs	r3, r3, #16
 8012fbc:	b2da      	uxtb	r2, r3
 8012fbe:	69bb      	ldr	r3, [r7, #24]
 8012fc0:	755a      	strb	r2, [r3, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8012fc2:	8afb      	ldrh	r3, [r7, #22]
 8012fc4:	0a1b      	lsrs	r3, r3, #8
 8012fc6:	b29b      	uxth	r3, r3
 8012fc8:	b2da      	uxtb	r2, r3
 8012fca:	69bb      	ldr	r3, [r7, #24]
 8012fcc:	759a      	strb	r2, [r3, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 8012fce:	8afb      	ldrh	r3, [r7, #22]
 8012fd0:	b2da      	uxtb	r2, r3
 8012fd2:	69bb      	ldr	r3, [r7, #24]
 8012fd4:	75da      	strb	r2, [r3, #23]

    hmsc->bot_data_length = 12U;
 8012fd6:	69bb      	ldr	r3, [r7, #24]
 8012fd8:	220c      	movs	r2, #12
 8012fda:	815a      	strh	r2, [r3, #10]
    return 0;
 8012fdc:	2300      	movs	r3, #0
  }
}
 8012fde:	4618      	mov	r0, r3
 8012fe0:	3720      	adds	r7, #32
 8012fe2:	46bd      	mov	sp, r7
 8012fe4:	bd80      	pop	{r7, pc}
	...

08012fe8 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8012fe8:	b480      	push	{r7}
 8012fea:	b087      	sub	sp, #28
 8012fec:	af00      	add	r7, sp, #0
 8012fee:	60f8      	str	r0, [r7, #12]
 8012ff0:	460b      	mov	r3, r1
 8012ff2:	607a      	str	r2, [r7, #4]
 8012ff4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012ff6:	68fb      	ldr	r3, [r7, #12]
 8012ff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012ffc:	613b      	str	r3, [r7, #16]
  uint16_t len = 8U;
 8012ffe:	2308      	movs	r3, #8
 8013000:	82fb      	strh	r3, [r7, #22]
  hmsc->bot_data_length = len;
 8013002:	693b      	ldr	r3, [r7, #16]
 8013004:	8afa      	ldrh	r2, [r7, #22]
 8013006:	815a      	strh	r2, [r3, #10]

  while (len)
 8013008:	e00a      	b.n	8013020 <SCSI_ModeSense6+0x38>
  {
    len--;
 801300a:	8afb      	ldrh	r3, [r7, #22]
 801300c:	3b01      	subs	r3, #1
 801300e:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 8013010:	8afa      	ldrh	r2, [r7, #22]
 8013012:	8afb      	ldrh	r3, [r7, #22]
 8013014:	4907      	ldr	r1, [pc, #28]	; (8013034 <SCSI_ModeSense6+0x4c>)
 8013016:	5c89      	ldrb	r1, [r1, r2]
 8013018:	693a      	ldr	r2, [r7, #16]
 801301a:	4413      	add	r3, r2
 801301c:	460a      	mov	r2, r1
 801301e:	731a      	strb	r2, [r3, #12]
  while (len)
 8013020:	8afb      	ldrh	r3, [r7, #22]
 8013022:	2b00      	cmp	r3, #0
 8013024:	d1f1      	bne.n	801300a <SCSI_ModeSense6+0x22>
  }
  return 0;
 8013026:	2300      	movs	r3, #0
}
 8013028:	4618      	mov	r0, r3
 801302a:	371c      	adds	r7, #28
 801302c:	46bd      	mov	sp, r7
 801302e:	bc80      	pop	{r7}
 8013030:	4770      	bx	lr
 8013032:	bf00      	nop
 8013034:	08015194 	.word	0x08015194

08013038 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8013038:	b480      	push	{r7}
 801303a:	b087      	sub	sp, #28
 801303c:	af00      	add	r7, sp, #0
 801303e:	60f8      	str	r0, [r7, #12]
 8013040:	460b      	mov	r3, r1
 8013042:	607a      	str	r2, [r7, #4]
 8013044:	72fb      	strb	r3, [r7, #11]
  uint16_t len = 8U;
 8013046:	2308      	movs	r3, #8
 8013048:	82fb      	strh	r3, [r7, #22]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013050:	613b      	str	r3, [r7, #16]

  hmsc->bot_data_length = len;
 8013052:	693b      	ldr	r3, [r7, #16]
 8013054:	8afa      	ldrh	r2, [r7, #22]
 8013056:	815a      	strh	r2, [r3, #10]

  while (len)
 8013058:	e00a      	b.n	8013070 <SCSI_ModeSense10+0x38>
  {
    len--;
 801305a:	8afb      	ldrh	r3, [r7, #22]
 801305c:	3b01      	subs	r3, #1
 801305e:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 8013060:	8afa      	ldrh	r2, [r7, #22]
 8013062:	8afb      	ldrh	r3, [r7, #22]
 8013064:	4907      	ldr	r1, [pc, #28]	; (8013084 <SCSI_ModeSense10+0x4c>)
 8013066:	5c89      	ldrb	r1, [r1, r2]
 8013068:	693a      	ldr	r2, [r7, #16]
 801306a:	4413      	add	r3, r2
 801306c:	460a      	mov	r2, r1
 801306e:	731a      	strb	r2, [r3, #12]
  while (len)
 8013070:	8afb      	ldrh	r3, [r7, #22]
 8013072:	2b00      	cmp	r3, #0
 8013074:	d1f1      	bne.n	801305a <SCSI_ModeSense10+0x22>
  }

  return 0;
 8013076:	2300      	movs	r3, #0
}
 8013078:	4618      	mov	r0, r3
 801307a:	371c      	adds	r7, #28
 801307c:	46bd      	mov	sp, r7
 801307e:	bc80      	pop	{r7}
 8013080:	4770      	bx	lr
 8013082:	bf00      	nop
 8013084:	0801519c 	.word	0x0801519c

08013088 <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8013088:	b480      	push	{r7}
 801308a:	b087      	sub	sp, #28
 801308c:	af00      	add	r7, sp, #0
 801308e:	60f8      	str	r0, [r7, #12]
 8013090:	460b      	mov	r3, r1
 8013092:	607a      	str	r2, [r7, #4]
 8013094:	72fb      	strb	r3, [r7, #11]
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801309c:	613b      	str	r3, [r7, #16]

  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 801309e:	2300      	movs	r3, #0
 80130a0:	75fb      	strb	r3, [r7, #23]
 80130a2:	e007      	b.n	80130b4 <SCSI_RequestSense+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 80130a4:	7dfb      	ldrb	r3, [r7, #23]
 80130a6:	693a      	ldr	r2, [r7, #16]
 80130a8:	4413      	add	r3, r2
 80130aa:	2200      	movs	r2, #0
 80130ac:	731a      	strb	r2, [r3, #12]
  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 80130ae:	7dfb      	ldrb	r3, [r7, #23]
 80130b0:	3301      	adds	r3, #1
 80130b2:	75fb      	strb	r3, [r7, #23]
 80130b4:	7dfb      	ldrb	r3, [r7, #23]
 80130b6:	2b11      	cmp	r3, #17
 80130b8:	d9f4      	bls.n	80130a4 <SCSI_RequestSense+0x1c>
  }

  hmsc->bot_data[0] = 0x70U;
 80130ba:	693b      	ldr	r3, [r7, #16]
 80130bc:	2270      	movs	r2, #112	; 0x70
 80130be:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 80130c0:	693b      	ldr	r3, [r7, #16]
 80130c2:	220c      	movs	r2, #12
 80130c4:	74da      	strb	r2, [r3, #19]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 80130c6:	693b      	ldr	r3, [r7, #16]
 80130c8:	f893 225c 	ldrb.w	r2, [r3, #604]	; 0x25c
 80130cc:	693b      	ldr	r3, [r7, #16]
 80130ce:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 80130d2:	429a      	cmp	r2, r3
 80130d4:	d02e      	beq.n	8013134 <SCSI_RequestSense+0xac>
  {

    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 80130d6:	693b      	ldr	r3, [r7, #16]
 80130d8:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 80130dc:	693a      	ldr	r2, [r7, #16]
 80130de:	3347      	adds	r3, #71	; 0x47
 80130e0:	00db      	lsls	r3, r3, #3
 80130e2:	4413      	add	r3, r2
 80130e4:	791a      	ldrb	r2, [r3, #4]
 80130e6:	693b      	ldr	r3, [r7, #16]
 80130e8:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 80130ea:	693b      	ldr	r3, [r7, #16]
 80130ec:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 80130f0:	693a      	ldr	r2, [r7, #16]
 80130f2:	3347      	adds	r3, #71	; 0x47
 80130f4:	00db      	lsls	r3, r3, #3
 80130f6:	4413      	add	r3, r2
 80130f8:	7a5a      	ldrb	r2, [r3, #9]
 80130fa:	693b      	ldr	r3, [r7, #16]
 80130fc:	761a      	strb	r2, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 80130fe:	693b      	ldr	r3, [r7, #16]
 8013100:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8013104:	693a      	ldr	r2, [r7, #16]
 8013106:	3347      	adds	r3, #71	; 0x47
 8013108:	00db      	lsls	r3, r3, #3
 801310a:	4413      	add	r3, r2
 801310c:	7a1a      	ldrb	r2, [r3, #8]
 801310e:	693b      	ldr	r3, [r7, #16]
 8013110:	765a      	strb	r2, [r3, #25]
    hmsc->scsi_sense_head++;
 8013112:	693b      	ldr	r3, [r7, #16]
 8013114:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8013118:	3301      	adds	r3, #1
 801311a:	b2da      	uxtb	r2, r3
 801311c:	693b      	ldr	r3, [r7, #16]
 801311e:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8013122:	693b      	ldr	r3, [r7, #16]
 8013124:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8013128:	2b04      	cmp	r3, #4
 801312a:	d103      	bne.n	8013134 <SCSI_RequestSense+0xac>
    {
      hmsc->scsi_sense_head = 0U;
 801312c:	693b      	ldr	r3, [r7, #16]
 801312e:	2200      	movs	r2, #0
 8013130:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8013134:	693b      	ldr	r3, [r7, #16]
 8013136:	2212      	movs	r2, #18
 8013138:	815a      	strh	r2, [r3, #10]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	3304      	adds	r3, #4
 801313e:	781b      	ldrb	r3, [r3, #0]
 8013140:	2b12      	cmp	r3, #18
 8013142:	d805      	bhi.n	8013150 <SCSI_RequestSense+0xc8>
  {
    hmsc->bot_data_length = params[4];
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	3304      	adds	r3, #4
 8013148:	781b      	ldrb	r3, [r3, #0]
 801314a:	b29a      	uxth	r2, r3
 801314c:	693b      	ldr	r3, [r7, #16]
 801314e:	815a      	strh	r2, [r3, #10]
  }
  return 0;
 8013150:	2300      	movs	r3, #0
}
 8013152:	4618      	mov	r0, r3
 8013154:	371c      	adds	r7, #28
 8013156:	46bd      	mov	sp, r7
 8013158:	bc80      	pop	{r7}
 801315a:	4770      	bx	lr

0801315c <SCSI_SenseCode>:
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 801315c:	b480      	push	{r7}
 801315e:	b085      	sub	sp, #20
 8013160:	af00      	add	r7, sp, #0
 8013162:	6078      	str	r0, [r7, #4]
 8013164:	4608      	mov	r0, r1
 8013166:	4611      	mov	r1, r2
 8013168:	461a      	mov	r2, r3
 801316a:	4603      	mov	r3, r0
 801316c:	70fb      	strb	r3, [r7, #3]
 801316e:	460b      	mov	r3, r1
 8013170:	70bb      	strb	r3, [r7, #2]
 8013172:	4613      	mov	r3, r2
 8013174:	707b      	strb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801317c:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8013184:	68fa      	ldr	r2, [r7, #12]
 8013186:	3347      	adds	r3, #71	; 0x47
 8013188:	00db      	lsls	r3, r3, #3
 801318a:	4413      	add	r3, r2
 801318c:	78ba      	ldrb	r2, [r7, #2]
 801318e:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8013190:	68fb      	ldr	r3, [r7, #12]
 8013192:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8013196:	68fa      	ldr	r2, [r7, #12]
 8013198:	3347      	adds	r3, #71	; 0x47
 801319a:	00db      	lsls	r3, r3, #3
 801319c:	4413      	add	r3, r2
 801319e:	2200      	movs	r2, #0
 80131a0:	721a      	strb	r2, [r3, #8]
  hmsc->scsi_sense_tail++;
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 80131a8:	3301      	adds	r3, #1
 80131aa:	b2da      	uxtb	r2, r3
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 80131b8:	2b04      	cmp	r3, #4
 80131ba:	d103      	bne.n	80131c4 <SCSI_SenseCode+0x68>
  {
    hmsc->scsi_sense_tail = 0U;
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	2200      	movs	r2, #0
 80131c0:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  }
}
 80131c4:	bf00      	nop
 80131c6:	3714      	adds	r7, #20
 80131c8:	46bd      	mov	sp, r7
 80131ca:	bc80      	pop	{r7}
 80131cc:	4770      	bx	lr

080131ce <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80131ce:	b480      	push	{r7}
 80131d0:	b087      	sub	sp, #28
 80131d2:	af00      	add	r7, sp, #0
 80131d4:	60f8      	str	r0, [r7, #12]
 80131d6:	460b      	mov	r3, r1
 80131d8:	607a      	str	r2, [r7, #4]
 80131da:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80131e2:	617b      	str	r3, [r7, #20]
  hmsc->bot_data_length = 0U;
 80131e4:	697b      	ldr	r3, [r7, #20]
 80131e6:	2200      	movs	r2, #0
 80131e8:	815a      	strh	r2, [r3, #10]
  return 0;
 80131ea:	2300      	movs	r3, #0
}
 80131ec:	4618      	mov	r0, r3
 80131ee:	371c      	adds	r7, #28
 80131f0:	46bd      	mov	sp, r7
 80131f2:	bc80      	pop	{r7}
 80131f4:	4770      	bx	lr

080131f6 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80131f6:	b580      	push	{r7, lr}
 80131f8:	b086      	sub	sp, #24
 80131fa:	af00      	add	r7, sp, #0
 80131fc:	60f8      	str	r0, [r7, #12]
 80131fe:	460b      	mov	r3, r1
 8013200:	607a      	str	r2, [r7, #4]
 8013202:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801320a:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801320c:	697b      	ldr	r3, [r7, #20]
 801320e:	7a1b      	ldrb	r3, [r3, #8]
 8013210:	2b00      	cmp	r3, #0
 8013212:	d16e      	bne.n	80132f2 <SCSI_Read10+0xfc>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8013214:	697b      	ldr	r3, [r7, #20]
 8013216:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 801321a:	b25b      	sxtb	r3, r3
 801321c:	2b00      	cmp	r3, #0
 801321e:	db0a      	blt.n	8013236 <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013220:	697b      	ldr	r3, [r7, #20]
 8013222:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8013226:	2320      	movs	r3, #32
 8013228:	2205      	movs	r2, #5
 801322a:	68f8      	ldr	r0, [r7, #12]
 801322c:	f7ff ff96 	bl	801315c <SCSI_SenseCode>
      return -1;
 8013230:	f04f 33ff 	mov.w	r3, #4294967295
 8013234:	e067      	b.n	8013306 <SCSI_Read10+0x110>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801323c:	689b      	ldr	r3, [r3, #8]
 801323e:	7afa      	ldrb	r2, [r7, #11]
 8013240:	4610      	mov	r0, r2
 8013242:	4798      	blx	r3
 8013244:	4603      	mov	r3, r0
 8013246:	2b00      	cmp	r3, #0
 8013248:	d008      	beq.n	801325c <SCSI_Read10+0x66>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801324a:	7af9      	ldrb	r1, [r7, #11]
 801324c:	233a      	movs	r3, #58	; 0x3a
 801324e:	2202      	movs	r2, #2
 8013250:	68f8      	ldr	r0, [r7, #12]
 8013252:	f7ff ff83 	bl	801315c <SCSI_SenseCode>
      return -1;
 8013256:	f04f 33ff 	mov.w	r3, #4294967295
 801325a:	e054      	b.n	8013306 <SCSI_Read10+0x110>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	3302      	adds	r3, #2
 8013260:	781b      	ldrb	r3, [r3, #0]
 8013262:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	3303      	adds	r3, #3
 8013268:	781b      	ldrb	r3, [r3, #0]
 801326a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801326c:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	3304      	adds	r3, #4
 8013272:	781b      	ldrb	r3, [r3, #0]
 8013274:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8013276:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8013278:	687a      	ldr	r2, [r7, #4]
 801327a:	3205      	adds	r2, #5
 801327c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 801327e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013280:	697b      	ldr	r3, [r7, #20]
 8013282:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	3307      	adds	r3, #7
 801328a:	781b      	ldrb	r3, [r3, #0]
 801328c:	021b      	lsls	r3, r3, #8
 801328e:	687a      	ldr	r2, [r7, #4]
 8013290:	3208      	adds	r2, #8
 8013292:	7812      	ldrb	r2, [r2, #0]
 8013294:	431a      	orrs	r2, r3
 8013296:	697b      	ldr	r3, [r7, #20]
 8013298:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801329c:	697b      	ldr	r3, [r7, #20]
 801329e:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 80132a2:	697b      	ldr	r3, [r7, #20]
 80132a4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80132a8:	7af9      	ldrb	r1, [r7, #11]
 80132aa:	68f8      	ldr	r0, [r7, #12]
 80132ac:	f000 f912 	bl	80134d4 <SCSI_CheckAddressRange>
 80132b0:	4603      	mov	r3, r0
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	da02      	bge.n	80132bc <SCSI_Read10+0xc6>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80132b6:	f04f 33ff 	mov.w	r3, #4294967295
 80132ba:	e024      	b.n	8013306 <SCSI_Read10+0x110>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80132bc:	697b      	ldr	r3, [r7, #20]
 80132be:	2202      	movs	r2, #2
 80132c0:	721a      	strb	r2, [r3, #8]

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80132c2:	697b      	ldr	r3, [r7, #20]
 80132c4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80132c8:	697b      	ldr	r3, [r7, #20]
 80132ca:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80132ce:	6979      	ldr	r1, [r7, #20]
 80132d0:	f8b1 125e 	ldrh.w	r1, [r1, #606]	; 0x25e
 80132d4:	fb01 f303 	mul.w	r3, r1, r3
 80132d8:	429a      	cmp	r2, r3
 80132da:	d00a      	beq.n	80132f2 <SCSI_Read10+0xfc>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80132dc:	697b      	ldr	r3, [r7, #20]
 80132de:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80132e2:	2320      	movs	r3, #32
 80132e4:	2205      	movs	r2, #5
 80132e6:	68f8      	ldr	r0, [r7, #12]
 80132e8:	f7ff ff38 	bl	801315c <SCSI_SenseCode>
      return -1;
 80132ec:	f04f 33ff 	mov.w	r3, #4294967295
 80132f0:	e009      	b.n	8013306 <SCSI_Read10+0x110>
    }
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80132f2:	697b      	ldr	r3, [r7, #20]
 80132f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80132f8:	815a      	strh	r2, [r3, #10]

  return SCSI_ProcessRead(pdev, lun);
 80132fa:	7afb      	ldrb	r3, [r7, #11]
 80132fc:	4619      	mov	r1, r3
 80132fe:	68f8      	ldr	r0, [r7, #12]
 8013300:	f000 f90a 	bl	8013518 <SCSI_ProcessRead>
 8013304:	4603      	mov	r3, r0
}
 8013306:	4618      	mov	r0, r3
 8013308:	3718      	adds	r7, #24
 801330a:	46bd      	mov	sp, r7
 801330c:	bd80      	pop	{r7, pc}

0801330e <SCSI_Write10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Write10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 801330e:	b580      	push	{r7, lr}
 8013310:	b086      	sub	sp, #24
 8013312:	af00      	add	r7, sp, #0
 8013314:	60f8      	str	r0, [r7, #12]
 8013316:	460b      	mov	r3, r1
 8013318:	607a      	str	r2, [r7, #4]
 801331a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013322:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8013324:	697b      	ldr	r3, [r7, #20]
 8013326:	7a1b      	ldrb	r3, [r3, #8]
 8013328:	2b00      	cmp	r3, #0
 801332a:	f040 8096 	bne.w	801345a <SCSI_Write10+0x14c>
  {
    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 801332e:	697b      	ldr	r3, [r7, #20]
 8013330:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8013334:	b25b      	sxtb	r3, r3
 8013336:	2b00      	cmp	r3, #0
 8013338:	da0a      	bge.n	8013350 <SCSI_Write10+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801333a:	697b      	ldr	r3, [r7, #20]
 801333c:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8013340:	2320      	movs	r3, #32
 8013342:	2205      	movs	r2, #5
 8013344:	68f8      	ldr	r0, [r7, #12]
 8013346:	f7ff ff09 	bl	801315c <SCSI_SenseCode>
      return -1;
 801334a:	f04f 33ff 	mov.w	r3, #4294967295
 801334e:	e08a      	b.n	8013466 <SCSI_Write10+0x158>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013356:	689b      	ldr	r3, [r3, #8]
 8013358:	7afa      	ldrb	r2, [r7, #11]
 801335a:	4610      	mov	r0, r2
 801335c:	4798      	blx	r3
 801335e:	4603      	mov	r3, r0
 8013360:	2b00      	cmp	r3, #0
 8013362:	d008      	beq.n	8013376 <SCSI_Write10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8013364:	7af9      	ldrb	r1, [r7, #11]
 8013366:	233a      	movs	r3, #58	; 0x3a
 8013368:	2202      	movs	r2, #2
 801336a:	68f8      	ldr	r0, [r7, #12]
 801336c:	f7ff fef6 	bl	801315c <SCSI_SenseCode>
      return -1;
 8013370:	f04f 33ff 	mov.w	r3, #4294967295
 8013374:	e077      	b.n	8013466 <SCSI_Write10+0x158>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8013376:	68fb      	ldr	r3, [r7, #12]
 8013378:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801337c:	68db      	ldr	r3, [r3, #12]
 801337e:	7afa      	ldrb	r2, [r7, #11]
 8013380:	4610      	mov	r0, r2
 8013382:	4798      	blx	r3
 8013384:	4603      	mov	r3, r0
 8013386:	2b00      	cmp	r3, #0
 8013388:	d008      	beq.n	801339c <SCSI_Write10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 801338a:	7af9      	ldrb	r1, [r7, #11]
 801338c:	2327      	movs	r3, #39	; 0x27
 801338e:	2202      	movs	r2, #2
 8013390:	68f8      	ldr	r0, [r7, #12]
 8013392:	f7ff fee3 	bl	801315c <SCSI_SenseCode>
      return -1;
 8013396:	f04f 33ff 	mov.w	r3, #4294967295
 801339a:	e064      	b.n	8013466 <SCSI_Write10+0x158>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	3302      	adds	r3, #2
 80133a0:	781b      	ldrb	r3, [r3, #0]
 80133a2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	3303      	adds	r3, #3
 80133a8:	781b      	ldrb	r3, [r3, #0]
 80133aa:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80133ac:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	3304      	adds	r3, #4
 80133b2:	781b      	ldrb	r3, [r3, #0]
 80133b4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80133b6:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80133b8:	687a      	ldr	r2, [r7, #4]
 80133ba:	3205      	adds	r2, #5
 80133bc:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80133be:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80133c0:	697b      	ldr	r3, [r7, #20]
 80133c2:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	3307      	adds	r3, #7
 80133ca:	781b      	ldrb	r3, [r3, #0]
 80133cc:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 80133ce:	687a      	ldr	r2, [r7, #4]
 80133d0:	3208      	adds	r2, #8
 80133d2:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80133d4:	431a      	orrs	r2, r3
 80133d6:	697b      	ldr	r3, [r7, #20]
 80133d8:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80133dc:	697b      	ldr	r3, [r7, #20]
 80133de:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 80133e2:	697b      	ldr	r3, [r7, #20]
 80133e4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80133e8:	7af9      	ldrb	r1, [r7, #11]
 80133ea:	68f8      	ldr	r0, [r7, #12]
 80133ec:	f000 f872 	bl	80134d4 <SCSI_CheckAddressRange>
 80133f0:	4603      	mov	r3, r0
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	da02      	bge.n	80133fc <SCSI_Write10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80133f6:	f04f 33ff 	mov.w	r3, #4294967295
 80133fa:	e034      	b.n	8013466 <SCSI_Write10+0x158>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80133fc:	697b      	ldr	r3, [r7, #20]
 80133fe:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8013402:	697a      	ldr	r2, [r7, #20]
 8013404:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8013408:	fb02 f303 	mul.w	r3, r2, r3
 801340c:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 801340e:	697b      	ldr	r3, [r7, #20]
 8013410:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013414:	693a      	ldr	r2, [r7, #16]
 8013416:	429a      	cmp	r2, r3
 8013418:	d00a      	beq.n	8013430 <SCSI_Write10+0x122>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801341a:	697b      	ldr	r3, [r7, #20]
 801341c:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8013420:	2320      	movs	r3, #32
 8013422:	2205      	movs	r2, #5
 8013424:	68f8      	ldr	r0, [r7, #12]
 8013426:	f7ff fe99 	bl	801315c <SCSI_SenseCode>
      return -1;
 801342a:	f04f 33ff 	mov.w	r3, #4294967295
 801342e:	e01a      	b.n	8013466 <SCSI_Write10+0x158>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8013430:	693b      	ldr	r3, [r7, #16]
 8013432:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013436:	bf28      	it	cs
 8013438:	f44f 7300 	movcs.w	r3, #512	; 0x200
 801343c:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 801343e:	697b      	ldr	r3, [r7, #20]
 8013440:	2201      	movs	r2, #1
 8013442:	721a      	strb	r2, [r3, #8]
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8013444:	697b      	ldr	r3, [r7, #20]
 8013446:	f103 020c 	add.w	r2, r3, #12
 801344a:	693b      	ldr	r3, [r7, #16]
 801344c:	b29b      	uxth	r3, r3
 801344e:	2101      	movs	r1, #1
 8013450:	68f8      	ldr	r0, [r7, #12]
 8013452:	f001 fdae 	bl	8014fb2 <USBD_LL_PrepareReceive>
  }
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }
  return 0;
 8013456:	2300      	movs	r3, #0
 8013458:	e005      	b.n	8013466 <SCSI_Write10+0x158>
    return SCSI_ProcessWrite(pdev, lun);
 801345a:	7afb      	ldrb	r3, [r7, #11]
 801345c:	4619      	mov	r1, r3
 801345e:	68f8      	ldr	r0, [r7, #12]
 8013460:	f000 f8ce 	bl	8013600 <SCSI_ProcessWrite>
 8013464:	4603      	mov	r3, r0
}
 8013466:	4618      	mov	r0, r3
 8013468:	3718      	adds	r7, #24
 801346a:	46bd      	mov	sp, r7
 801346c:	bd80      	pop	{r7, pc}

0801346e <SCSI_Verify10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Verify10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 801346e:	b580      	push	{r7, lr}
 8013470:	b086      	sub	sp, #24
 8013472:	af00      	add	r7, sp, #0
 8013474:	60f8      	str	r0, [r7, #12]
 8013476:	460b      	mov	r3, r1
 8013478:	607a      	str	r2, [r7, #4]
 801347a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013482:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	3301      	adds	r3, #1
 8013488:	781b      	ldrb	r3, [r3, #0]
 801348a:	f003 0302 	and.w	r3, r3, #2
 801348e:	2b00      	cmp	r3, #0
 8013490:	d008      	beq.n	80134a4 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8013492:	7af9      	ldrb	r1, [r7, #11]
 8013494:	2324      	movs	r3, #36	; 0x24
 8013496:	2205      	movs	r2, #5
 8013498:	68f8      	ldr	r0, [r7, #12]
 801349a:	f7ff fe5f 	bl	801315c <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 801349e:	f04f 33ff 	mov.w	r3, #4294967295
 80134a2:	e013      	b.n	80134cc <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80134a4:	697b      	ldr	r3, [r7, #20]
 80134a6:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 80134aa:	697b      	ldr	r3, [r7, #20]
 80134ac:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80134b0:	7af9      	ldrb	r1, [r7, #11]
 80134b2:	68f8      	ldr	r0, [r7, #12]
 80134b4:	f000 f80e 	bl	80134d4 <SCSI_CheckAddressRange>
 80134b8:	4603      	mov	r3, r0
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	da02      	bge.n	80134c4 <SCSI_Verify10+0x56>
                             hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */
 80134be:	f04f 33ff 	mov.w	r3, #4294967295
 80134c2:	e003      	b.n	80134cc <SCSI_Verify10+0x5e>
  }
  hmsc->bot_data_length = 0U;
 80134c4:	697b      	ldr	r3, [r7, #20]
 80134c6:	2200      	movs	r2, #0
 80134c8:	815a      	strh	r2, [r3, #10]
  return 0;
 80134ca:	2300      	movs	r3, #0
}
 80134cc:	4618      	mov	r0, r3
 80134ce:	3718      	adds	r7, #24
 80134d0:	46bd      	mov	sp, r7
 80134d2:	bd80      	pop	{r7, pc}

080134d4 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 80134d4:	b580      	push	{r7, lr}
 80134d6:	b086      	sub	sp, #24
 80134d8:	af00      	add	r7, sp, #0
 80134da:	60f8      	str	r0, [r7, #12]
 80134dc:	607a      	str	r2, [r7, #4]
 80134de:	603b      	str	r3, [r7, #0]
 80134e0:	460b      	mov	r3, r1
 80134e2:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80134ea:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 80134ec:	687a      	ldr	r2, [r7, #4]
 80134ee:	683b      	ldr	r3, [r7, #0]
 80134f0:	441a      	add	r2, r3
 80134f2:	697b      	ldr	r3, [r7, #20]
 80134f4:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80134f8:	429a      	cmp	r2, r3
 80134fa:	d908      	bls.n	801350e <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 80134fc:	7af9      	ldrb	r1, [r7, #11]
 80134fe:	2321      	movs	r3, #33	; 0x21
 8013500:	2205      	movs	r2, #5
 8013502:	68f8      	ldr	r0, [r7, #12]
 8013504:	f7ff fe2a 	bl	801315c <SCSI_SenseCode>
    return -1;
 8013508:	f04f 33ff 	mov.w	r3, #4294967295
 801350c:	e000      	b.n	8013510 <SCSI_CheckAddressRange+0x3c>
  }
  return 0;
 801350e:	2300      	movs	r3, #0
}
 8013510:	4618      	mov	r0, r3
 8013512:	3718      	adds	r7, #24
 8013514:	46bd      	mov	sp, r7
 8013516:	bd80      	pop	{r7, pc}

08013518 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8013518:	b590      	push	{r4, r7, lr}
 801351a:	b085      	sub	sp, #20
 801351c:	af00      	add	r7, sp, #0
 801351e:	6078      	str	r0, [r7, #4]
 8013520:	460b      	mov	r3, r1
 8013522:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801352a:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801352c:	68fb      	ldr	r3, [r7, #12]
 801352e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8013532:	68fa      	ldr	r2, [r7, #12]
 8013534:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8013538:	fb02 f303 	mul.w	r3, r2, r3
 801353c:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 801353e:	68bb      	ldr	r3, [r7, #8]
 8013540:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013544:	bf28      	it	cs
 8013546:	f44f 7300 	movcs.w	r3, #512	; 0x200
 801354a:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013552:	691c      	ldr	r4, [r3, #16]
                                                     hmsc->bot_data,
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	f103 010c 	add.w	r1, r3, #12
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 801355a:	68fb      	ldr	r3, [r7, #12]
 801355c:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8013566:	4618      	mov	r0, r3
 8013568:	68bb      	ldr	r3, [r7, #8]
 801356a:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 801356e:	b29b      	uxth	r3, r3
 8013570:	78f8      	ldrb	r0, [r7, #3]
 8013572:	47a0      	blx	r4
 8013574:	4603      	mov	r3, r0
 8013576:	2b00      	cmp	r3, #0
 8013578:	da08      	bge.n	801358c <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 801357a:	78f9      	ldrb	r1, [r7, #3]
 801357c:	2311      	movs	r3, #17
 801357e:	2204      	movs	r2, #4
 8013580:	6878      	ldr	r0, [r7, #4]
 8013582:	f7ff fdeb 	bl	801315c <SCSI_SenseCode>
    return -1;
 8013586:	f04f 33ff 	mov.w	r3, #4294967295
 801358a:	e035      	b.n	80135f8 <SCSI_ProcessRead+0xe0>
  }

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	f103 020c 	add.w	r2, r3, #12
 8013592:	68bb      	ldr	r3, [r7, #8]
 8013594:	b29b      	uxth	r3, r3
 8013596:	2181      	movs	r1, #129	; 0x81
 8013598:	6878      	ldr	r0, [r7, #4]
 801359a:	f001 fce7 	bl	8014f6c <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80135aa:	4619      	mov	r1, r3
 80135ac:	68bb      	ldr	r3, [r7, #8]
 80135ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80135b2:	441a      	add	r2, r3
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80135ba:	68fb      	ldr	r3, [r7, #12]
 80135bc:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80135c6:	4619      	mov	r1, r3
 80135c8:	68bb      	ldr	r3, [r7, #8]
 80135ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80135ce:	1ad2      	subs	r2, r2, r3
 80135d0:	68fb      	ldr	r3, [r7, #12]
 80135d2:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 80135d6:	68fb      	ldr	r3, [r7, #12]
 80135d8:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 80135dc:	68bb      	ldr	r3, [r7, #8]
 80135de:	1ad2      	subs	r2, r2, r3
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d102      	bne.n	80135f6 <SCSI_ProcessRead+0xde>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	2203      	movs	r2, #3
 80135f4:	721a      	strb	r2, [r3, #8]
  }
  return 0;
 80135f6:	2300      	movs	r3, #0
}
 80135f8:	4618      	mov	r0, r3
 80135fa:	3714      	adds	r7, #20
 80135fc:	46bd      	mov	sp, r7
 80135fe:	bd90      	pop	{r4, r7, pc}

08013600 <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8013600:	b590      	push	{r4, r7, lr}
 8013602:	b085      	sub	sp, #20
 8013604:	af00      	add	r7, sp, #0
 8013606:	6078      	str	r0, [r7, #4]
 8013608:	460b      	mov	r3, r1
 801360a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013612:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801361a:	68fa      	ldr	r2, [r7, #12]
 801361c:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8013620:	fb02 f303 	mul.w	r3, r2, r3
 8013624:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8013626:	68bb      	ldr	r3, [r7, #8]
 8013628:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801362c:	bf28      	it	cs
 801362e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8013632:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801363a:	695c      	ldr	r4, [r3, #20]
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	f103 010c 	add.w	r1, r3, #12
 8013642:	68fb      	ldr	r3, [r7, #12]
 8013644:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 801364e:	4618      	mov	r0, r3
 8013650:	68bb      	ldr	r3, [r7, #8]
 8013652:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8013656:	b29b      	uxth	r3, r3
 8013658:	78f8      	ldrb	r0, [r7, #3]
 801365a:	47a0      	blx	r4
 801365c:	4603      	mov	r3, r0
 801365e:	2b00      	cmp	r3, #0
 8013660:	da08      	bge.n	8013674 <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8013662:	78f9      	ldrb	r1, [r7, #3]
 8013664:	2303      	movs	r3, #3
 8013666:	2204      	movs	r2, #4
 8013668:	6878      	ldr	r0, [r7, #4]
 801366a:	f7ff fd77 	bl	801315c <SCSI_SenseCode>

    return -1;
 801366e:	f04f 33ff 	mov.w	r3, #4294967295
 8013672:	e045      	b.n	8013700 <SCSI_ProcessWrite+0x100>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 801367a:	68fb      	ldr	r3, [r7, #12]
 801367c:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8013680:	4619      	mov	r1, r3
 8013682:	68bb      	ldr	r3, [r7, #8]
 8013684:	fbb3 f3f1 	udiv	r3, r3, r1
 8013688:	441a      	add	r2, r3
 801368a:	68fb      	ldr	r3, [r7, #12]
 801368c:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 801369c:	4619      	mov	r1, r3
 801369e:	68bb      	ldr	r3, [r7, #8]
 80136a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80136a4:	1ad2      	subs	r2, r2, r3
 80136a6:	68fb      	ldr	r3, [r7, #12]
 80136a8:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 80136ac:	68fb      	ldr	r3, [r7, #12]
 80136ae:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 80136b2:	68bb      	ldr	r3, [r7, #8]
 80136b4:	1ad2      	subs	r2, r2, r3
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d104      	bne.n	80136d0 <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80136c6:	2100      	movs	r1, #0
 80136c8:	6878      	ldr	r0, [r7, #4]
 80136ca:	f7ff f97f 	bl	80129cc <MSC_BOT_SendCSW>
 80136ce:	e016      	b.n	80136fe <SCSI_ProcessWrite+0xfe>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80136d6:	68fa      	ldr	r2, [r7, #12]
 80136d8:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 80136dc:	fb02 f303 	mul.w	r3, r2, r3
 80136e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80136e4:	bf28      	it	cs
 80136e6:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80136ea:	60bb      	str	r3, [r7, #8]
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 80136ec:	68fb      	ldr	r3, [r7, #12]
 80136ee:	f103 020c 	add.w	r2, r3, #12
 80136f2:	68bb      	ldr	r3, [r7, #8]
 80136f4:	b29b      	uxth	r3, r3
 80136f6:	2101      	movs	r1, #1
 80136f8:	6878      	ldr	r0, [r7, #4]
 80136fa:	f001 fc5a 	bl	8014fb2 <USBD_LL_PrepareReceive>
  }

  return 0;
 80136fe:	2300      	movs	r3, #0
}
 8013700:	4618      	mov	r0, r3
 8013702:	3714      	adds	r7, #20
 8013704:	46bd      	mov	sp, r7
 8013706:	bd90      	pop	{r4, r7, pc}

08013708 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013708:	b580      	push	{r7, lr}
 801370a:	b084      	sub	sp, #16
 801370c:	af00      	add	r7, sp, #0
 801370e:	60f8      	str	r0, [r7, #12]
 8013710:	60b9      	str	r1, [r7, #8]
 8013712:	4613      	mov	r3, r2
 8013714:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	2b00      	cmp	r3, #0
 801371a:	d101      	bne.n	8013720 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801371c:	2302      	movs	r3, #2
 801371e:	e01a      	b.n	8013756 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8013720:	68fb      	ldr	r3, [r7, #12]
 8013722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013726:	2b00      	cmp	r3, #0
 8013728:	d003      	beq.n	8013732 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 801372a:	68fb      	ldr	r3, [r7, #12]
 801372c:	2200      	movs	r2, #0
 801372e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013732:	68bb      	ldr	r3, [r7, #8]
 8013734:	2b00      	cmp	r3, #0
 8013736:	d003      	beq.n	8013740 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8013738:	68fb      	ldr	r3, [r7, #12]
 801373a:	68ba      	ldr	r2, [r7, #8]
 801373c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	2201      	movs	r2, #1
 8013744:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8013748:	68fb      	ldr	r3, [r7, #12]
 801374a:	79fa      	ldrb	r2, [r7, #7]
 801374c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 801374e:	68f8      	ldr	r0, [r7, #12]
 8013750:	f001 fab4 	bl	8014cbc <USBD_LL_Init>

  return USBD_OK;
 8013754:	2300      	movs	r3, #0
}
 8013756:	4618      	mov	r0, r3
 8013758:	3710      	adds	r7, #16
 801375a:	46bd      	mov	sp, r7
 801375c:	bd80      	pop	{r7, pc}

0801375e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801375e:	b480      	push	{r7}
 8013760:	b085      	sub	sp, #20
 8013762:	af00      	add	r7, sp, #0
 8013764:	6078      	str	r0, [r7, #4]
 8013766:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8013768:	2300      	movs	r3, #0
 801376a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 801376c:	683b      	ldr	r3, [r7, #0]
 801376e:	2b00      	cmp	r3, #0
 8013770:	d006      	beq.n	8013780 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	683a      	ldr	r2, [r7, #0]
 8013776:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 801377a:	2300      	movs	r3, #0
 801377c:	73fb      	strb	r3, [r7, #15]
 801377e:	e001      	b.n	8013784 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8013780:	2302      	movs	r3, #2
 8013782:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8013784:	7bfb      	ldrb	r3, [r7, #15]
}
 8013786:	4618      	mov	r0, r3
 8013788:	3714      	adds	r7, #20
 801378a:	46bd      	mov	sp, r7
 801378c:	bc80      	pop	{r7}
 801378e:	4770      	bx	lr

08013790 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013790:	b580      	push	{r7, lr}
 8013792:	b082      	sub	sp, #8
 8013794:	af00      	add	r7, sp, #0
 8013796:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8013798:	6878      	ldr	r0, [r7, #4]
 801379a:	f001 fadf 	bl	8014d5c <USBD_LL_Start>

  return USBD_OK;
 801379e:	2300      	movs	r3, #0
}
 80137a0:	4618      	mov	r0, r3
 80137a2:	3708      	adds	r7, #8
 80137a4:	46bd      	mov	sp, r7
 80137a6:	bd80      	pop	{r7, pc}

080137a8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80137a8:	b480      	push	{r7}
 80137aa:	b083      	sub	sp, #12
 80137ac:	af00      	add	r7, sp, #0
 80137ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80137b0:	2300      	movs	r3, #0
}
 80137b2:	4618      	mov	r0, r3
 80137b4:	370c      	adds	r7, #12
 80137b6:	46bd      	mov	sp, r7
 80137b8:	bc80      	pop	{r7}
 80137ba:	4770      	bx	lr

080137bc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80137bc:	b580      	push	{r7, lr}
 80137be:	b084      	sub	sp, #16
 80137c0:	af00      	add	r7, sp, #0
 80137c2:	6078      	str	r0, [r7, #4]
 80137c4:	460b      	mov	r3, r1
 80137c6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80137c8:	2302      	movs	r3, #2
 80137ca:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d00c      	beq.n	80137f0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	78fa      	ldrb	r2, [r7, #3]
 80137e0:	4611      	mov	r1, r2
 80137e2:	6878      	ldr	r0, [r7, #4]
 80137e4:	4798      	blx	r3
 80137e6:	4603      	mov	r3, r0
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d101      	bne.n	80137f0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80137ec:	2300      	movs	r3, #0
 80137ee:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80137f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80137f2:	4618      	mov	r0, r3
 80137f4:	3710      	adds	r7, #16
 80137f6:	46bd      	mov	sp, r7
 80137f8:	bd80      	pop	{r7, pc}

080137fa <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80137fa:	b580      	push	{r7, lr}
 80137fc:	b082      	sub	sp, #8
 80137fe:	af00      	add	r7, sp, #0
 8013800:	6078      	str	r0, [r7, #4]
 8013802:	460b      	mov	r3, r1
 8013804:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801380c:	685b      	ldr	r3, [r3, #4]
 801380e:	78fa      	ldrb	r2, [r7, #3]
 8013810:	4611      	mov	r1, r2
 8013812:	6878      	ldr	r0, [r7, #4]
 8013814:	4798      	blx	r3

  return USBD_OK;
 8013816:	2300      	movs	r3, #0
}
 8013818:	4618      	mov	r0, r3
 801381a:	3708      	adds	r7, #8
 801381c:	46bd      	mov	sp, r7
 801381e:	bd80      	pop	{r7, pc}

08013820 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8013820:	b580      	push	{r7, lr}
 8013822:	b082      	sub	sp, #8
 8013824:	af00      	add	r7, sp, #0
 8013826:	6078      	str	r0, [r7, #4]
 8013828:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8013830:	6839      	ldr	r1, [r7, #0]
 8013832:	4618      	mov	r0, r3
 8013834:	f000 fed7 	bl	80145e6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	2201      	movs	r2, #1
 801383c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8013846:	461a      	mov	r2, r3
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8013854:	f003 031f 	and.w	r3, r3, #31
 8013858:	2b02      	cmp	r3, #2
 801385a:	d016      	beq.n	801388a <USBD_LL_SetupStage+0x6a>
 801385c:	2b02      	cmp	r3, #2
 801385e:	d81c      	bhi.n	801389a <USBD_LL_SetupStage+0x7a>
 8013860:	2b00      	cmp	r3, #0
 8013862:	d002      	beq.n	801386a <USBD_LL_SetupStage+0x4a>
 8013864:	2b01      	cmp	r3, #1
 8013866:	d008      	beq.n	801387a <USBD_LL_SetupStage+0x5a>
 8013868:	e017      	b.n	801389a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8013870:	4619      	mov	r1, r3
 8013872:	6878      	ldr	r0, [r7, #4]
 8013874:	f000 f9ca 	bl	8013c0c <USBD_StdDevReq>
      break;
 8013878:	e01a      	b.n	80138b0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8013880:	4619      	mov	r1, r3
 8013882:	6878      	ldr	r0, [r7, #4]
 8013884:	f000 fa2c 	bl	8013ce0 <USBD_StdItfReq>
      break;
 8013888:	e012      	b.n	80138b0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8013890:	4619      	mov	r1, r3
 8013892:	6878      	ldr	r0, [r7, #4]
 8013894:	f000 fa6c 	bl	8013d70 <USBD_StdEPReq>
      break;
 8013898:	e00a      	b.n	80138b0 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80138a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80138a4:	b2db      	uxtb	r3, r3
 80138a6:	4619      	mov	r1, r3
 80138a8:	6878      	ldr	r0, [r7, #4]
 80138aa:	f001 fad6 	bl	8014e5a <USBD_LL_StallEP>
      break;
 80138ae:	bf00      	nop
  }

  return USBD_OK;
 80138b0:	2300      	movs	r3, #0
}
 80138b2:	4618      	mov	r0, r3
 80138b4:	3708      	adds	r7, #8
 80138b6:	46bd      	mov	sp, r7
 80138b8:	bd80      	pop	{r7, pc}

080138ba <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80138ba:	b580      	push	{r7, lr}
 80138bc:	b086      	sub	sp, #24
 80138be:	af00      	add	r7, sp, #0
 80138c0:	60f8      	str	r0, [r7, #12]
 80138c2:	460b      	mov	r3, r1
 80138c4:	607a      	str	r2, [r7, #4]
 80138c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80138c8:	7afb      	ldrb	r3, [r7, #11]
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d14b      	bne.n	8013966 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80138d4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80138d6:	68fb      	ldr	r3, [r7, #12]
 80138d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80138dc:	2b03      	cmp	r3, #3
 80138de:	d134      	bne.n	801394a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80138e0:	697b      	ldr	r3, [r7, #20]
 80138e2:	68da      	ldr	r2, [r3, #12]
 80138e4:	697b      	ldr	r3, [r7, #20]
 80138e6:	691b      	ldr	r3, [r3, #16]
 80138e8:	429a      	cmp	r2, r3
 80138ea:	d919      	bls.n	8013920 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80138ec:	697b      	ldr	r3, [r7, #20]
 80138ee:	68da      	ldr	r2, [r3, #12]
 80138f0:	697b      	ldr	r3, [r7, #20]
 80138f2:	691b      	ldr	r3, [r3, #16]
 80138f4:	1ad2      	subs	r2, r2, r3
 80138f6:	697b      	ldr	r3, [r7, #20]
 80138f8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80138fa:	697b      	ldr	r3, [r7, #20]
 80138fc:	68da      	ldr	r2, [r3, #12]
 80138fe:	697b      	ldr	r3, [r7, #20]
 8013900:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8013902:	429a      	cmp	r2, r3
 8013904:	d203      	bcs.n	801390e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8013906:	697b      	ldr	r3, [r7, #20]
 8013908:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 801390a:	b29b      	uxth	r3, r3
 801390c:	e002      	b.n	8013914 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801390e:	697b      	ldr	r3, [r7, #20]
 8013910:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8013912:	b29b      	uxth	r3, r3
 8013914:	461a      	mov	r2, r3
 8013916:	6879      	ldr	r1, [r7, #4]
 8013918:	68f8      	ldr	r0, [r7, #12]
 801391a:	f000 ff38 	bl	801478e <USBD_CtlContinueRx>
 801391e:	e038      	b.n	8013992 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8013920:	68fb      	ldr	r3, [r7, #12]
 8013922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013926:	691b      	ldr	r3, [r3, #16]
 8013928:	2b00      	cmp	r3, #0
 801392a:	d00a      	beq.n	8013942 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8013932:	2b03      	cmp	r3, #3
 8013934:	d105      	bne.n	8013942 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8013936:	68fb      	ldr	r3, [r7, #12]
 8013938:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801393c:	691b      	ldr	r3, [r3, #16]
 801393e:	68f8      	ldr	r0, [r7, #12]
 8013940:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8013942:	68f8      	ldr	r0, [r7, #12]
 8013944:	f000 ff35 	bl	80147b2 <USBD_CtlSendStatus>
 8013948:	e023      	b.n	8013992 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013950:	2b05      	cmp	r3, #5
 8013952:	d11e      	bne.n	8013992 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8013954:	68fb      	ldr	r3, [r7, #12]
 8013956:	2200      	movs	r2, #0
 8013958:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 801395c:	2100      	movs	r1, #0
 801395e:	68f8      	ldr	r0, [r7, #12]
 8013960:	f001 fa7b 	bl	8014e5a <USBD_LL_StallEP>
 8013964:	e015      	b.n	8013992 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8013966:	68fb      	ldr	r3, [r7, #12]
 8013968:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801396c:	699b      	ldr	r3, [r3, #24]
 801396e:	2b00      	cmp	r3, #0
 8013970:	d00d      	beq.n	801398e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8013972:	68fb      	ldr	r3, [r7, #12]
 8013974:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8013978:	2b03      	cmp	r3, #3
 801397a:	d108      	bne.n	801398e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013982:	699b      	ldr	r3, [r3, #24]
 8013984:	7afa      	ldrb	r2, [r7, #11]
 8013986:	4611      	mov	r1, r2
 8013988:	68f8      	ldr	r0, [r7, #12]
 801398a:	4798      	blx	r3
 801398c:	e001      	b.n	8013992 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801398e:	2302      	movs	r3, #2
 8013990:	e000      	b.n	8013994 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8013992:	2300      	movs	r3, #0
}
 8013994:	4618      	mov	r0, r3
 8013996:	3718      	adds	r7, #24
 8013998:	46bd      	mov	sp, r7
 801399a:	bd80      	pop	{r7, pc}

0801399c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801399c:	b580      	push	{r7, lr}
 801399e:	b086      	sub	sp, #24
 80139a0:	af00      	add	r7, sp, #0
 80139a2:	60f8      	str	r0, [r7, #12]
 80139a4:	460b      	mov	r3, r1
 80139a6:	607a      	str	r2, [r7, #4]
 80139a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80139aa:	7afb      	ldrb	r3, [r7, #11]
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d17f      	bne.n	8013ab0 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80139b0:	68fb      	ldr	r3, [r7, #12]
 80139b2:	3314      	adds	r3, #20
 80139b4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80139b6:	68fb      	ldr	r3, [r7, #12]
 80139b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80139bc:	2b02      	cmp	r3, #2
 80139be:	d15c      	bne.n	8013a7a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80139c0:	697b      	ldr	r3, [r7, #20]
 80139c2:	68da      	ldr	r2, [r3, #12]
 80139c4:	697b      	ldr	r3, [r7, #20]
 80139c6:	691b      	ldr	r3, [r3, #16]
 80139c8:	429a      	cmp	r2, r3
 80139ca:	d915      	bls.n	80139f8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80139cc:	697b      	ldr	r3, [r7, #20]
 80139ce:	68da      	ldr	r2, [r3, #12]
 80139d0:	697b      	ldr	r3, [r7, #20]
 80139d2:	691b      	ldr	r3, [r3, #16]
 80139d4:	1ad2      	subs	r2, r2, r3
 80139d6:	697b      	ldr	r3, [r7, #20]
 80139d8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80139da:	697b      	ldr	r3, [r7, #20]
 80139dc:	68db      	ldr	r3, [r3, #12]
 80139de:	b29b      	uxth	r3, r3
 80139e0:	461a      	mov	r2, r3
 80139e2:	6879      	ldr	r1, [r7, #4]
 80139e4:	68f8      	ldr	r0, [r7, #12]
 80139e6:	f000 fec0 	bl	801476a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80139ea:	2300      	movs	r3, #0
 80139ec:	2200      	movs	r2, #0
 80139ee:	2100      	movs	r1, #0
 80139f0:	68f8      	ldr	r0, [r7, #12]
 80139f2:	f001 fade 	bl	8014fb2 <USBD_LL_PrepareReceive>
 80139f6:	e04e      	b.n	8013a96 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80139f8:	697b      	ldr	r3, [r7, #20]
 80139fa:	689b      	ldr	r3, [r3, #8]
 80139fc:	697a      	ldr	r2, [r7, #20]
 80139fe:	6912      	ldr	r2, [r2, #16]
 8013a00:	fbb3 f1f2 	udiv	r1, r3, r2
 8013a04:	fb01 f202 	mul.w	r2, r1, r2
 8013a08:	1a9b      	subs	r3, r3, r2
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d11c      	bne.n	8013a48 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8013a0e:	697b      	ldr	r3, [r7, #20]
 8013a10:	689a      	ldr	r2, [r3, #8]
 8013a12:	697b      	ldr	r3, [r7, #20]
 8013a14:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8013a16:	429a      	cmp	r2, r3
 8013a18:	d316      	bcc.n	8013a48 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8013a1a:	697b      	ldr	r3, [r7, #20]
 8013a1c:	689a      	ldr	r2, [r3, #8]
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013a24:	429a      	cmp	r2, r3
 8013a26:	d20f      	bcs.n	8013a48 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013a28:	2200      	movs	r2, #0
 8013a2a:	2100      	movs	r1, #0
 8013a2c:	68f8      	ldr	r0, [r7, #12]
 8013a2e:	f000 fe9c 	bl	801476a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	2200      	movs	r2, #0
 8013a36:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013a3a:	2300      	movs	r3, #0
 8013a3c:	2200      	movs	r2, #0
 8013a3e:	2100      	movs	r1, #0
 8013a40:	68f8      	ldr	r0, [r7, #12]
 8013a42:	f001 fab6 	bl	8014fb2 <USBD_LL_PrepareReceive>
 8013a46:	e026      	b.n	8013a96 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8013a48:	68fb      	ldr	r3, [r7, #12]
 8013a4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013a4e:	68db      	ldr	r3, [r3, #12]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d00a      	beq.n	8013a6a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8013a54:	68fb      	ldr	r3, [r7, #12]
 8013a56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8013a5a:	2b03      	cmp	r3, #3
 8013a5c:	d105      	bne.n	8013a6a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013a64:	68db      	ldr	r3, [r3, #12]
 8013a66:	68f8      	ldr	r0, [r7, #12]
 8013a68:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8013a6a:	2180      	movs	r1, #128	; 0x80
 8013a6c:	68f8      	ldr	r0, [r7, #12]
 8013a6e:	f001 f9f4 	bl	8014e5a <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8013a72:	68f8      	ldr	r0, [r7, #12]
 8013a74:	f000 feb0 	bl	80147d8 <USBD_CtlReceiveStatus>
 8013a78:	e00d      	b.n	8013a96 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013a80:	2b04      	cmp	r3, #4
 8013a82:	d004      	beq.n	8013a8e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8013a84:	68fb      	ldr	r3, [r7, #12]
 8013a86:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d103      	bne.n	8013a96 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8013a8e:	2180      	movs	r1, #128	; 0x80
 8013a90:	68f8      	ldr	r0, [r7, #12]
 8013a92:	f001 f9e2 	bl	8014e5a <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8013a9c:	2b01      	cmp	r3, #1
 8013a9e:	d11d      	bne.n	8013adc <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8013aa0:	68f8      	ldr	r0, [r7, #12]
 8013aa2:	f7ff fe81 	bl	80137a8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	2200      	movs	r2, #0
 8013aaa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8013aae:	e015      	b.n	8013adc <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8013ab0:	68fb      	ldr	r3, [r7, #12]
 8013ab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013ab6:	695b      	ldr	r3, [r3, #20]
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d00d      	beq.n	8013ad8 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8013ac2:	2b03      	cmp	r3, #3
 8013ac4:	d108      	bne.n	8013ad8 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013acc:	695b      	ldr	r3, [r3, #20]
 8013ace:	7afa      	ldrb	r2, [r7, #11]
 8013ad0:	4611      	mov	r1, r2
 8013ad2:	68f8      	ldr	r0, [r7, #12]
 8013ad4:	4798      	blx	r3
 8013ad6:	e001      	b.n	8013adc <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8013ad8:	2302      	movs	r3, #2
 8013ada:	e000      	b.n	8013ade <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8013adc:	2300      	movs	r3, #0
}
 8013ade:	4618      	mov	r0, r3
 8013ae0:	3718      	adds	r7, #24
 8013ae2:	46bd      	mov	sp, r7
 8013ae4:	bd80      	pop	{r7, pc}

08013ae6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8013ae6:	b580      	push	{r7, lr}
 8013ae8:	b082      	sub	sp, #8
 8013aea:	af00      	add	r7, sp, #0
 8013aec:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013aee:	2340      	movs	r3, #64	; 0x40
 8013af0:	2200      	movs	r2, #0
 8013af2:	2100      	movs	r1, #0
 8013af4:	6878      	ldr	r0, [r7, #4]
 8013af6:	f001 f94c 	bl	8014d92 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	2201      	movs	r2, #1
 8013afe:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	2240      	movs	r2, #64	; 0x40
 8013b06:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013b0a:	2340      	movs	r3, #64	; 0x40
 8013b0c:	2200      	movs	r2, #0
 8013b0e:	2180      	movs	r1, #128	; 0x80
 8013b10:	6878      	ldr	r0, [r7, #4]
 8013b12:	f001 f93e 	bl	8014d92 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	2201      	movs	r2, #1
 8013b1a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	2240      	movs	r2, #64	; 0x40
 8013b20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	2201      	movs	r2, #1
 8013b26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	2200      	movs	r2, #0
 8013b2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	2200      	movs	r2, #0
 8013b36:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	2200      	movs	r2, #0
 8013b3c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d009      	beq.n	8013b5e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013b50:	685b      	ldr	r3, [r3, #4]
 8013b52:	687a      	ldr	r2, [r7, #4]
 8013b54:	6852      	ldr	r2, [r2, #4]
 8013b56:	b2d2      	uxtb	r2, r2
 8013b58:	4611      	mov	r1, r2
 8013b5a:	6878      	ldr	r0, [r7, #4]
 8013b5c:	4798      	blx	r3
  }

  return USBD_OK;
 8013b5e:	2300      	movs	r3, #0
}
 8013b60:	4618      	mov	r0, r3
 8013b62:	3708      	adds	r7, #8
 8013b64:	46bd      	mov	sp, r7
 8013b66:	bd80      	pop	{r7, pc}

08013b68 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8013b68:	b480      	push	{r7}
 8013b6a:	b083      	sub	sp, #12
 8013b6c:	af00      	add	r7, sp, #0
 8013b6e:	6078      	str	r0, [r7, #4]
 8013b70:	460b      	mov	r3, r1
 8013b72:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	78fa      	ldrb	r2, [r7, #3]
 8013b78:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8013b7a:	2300      	movs	r3, #0
}
 8013b7c:	4618      	mov	r0, r3
 8013b7e:	370c      	adds	r7, #12
 8013b80:	46bd      	mov	sp, r7
 8013b82:	bc80      	pop	{r7}
 8013b84:	4770      	bx	lr

08013b86 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013b86:	b480      	push	{r7}
 8013b88:	b083      	sub	sp, #12
 8013b8a:	af00      	add	r7, sp, #0
 8013b8c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	2204      	movs	r2, #4
 8013b9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8013ba2:	2300      	movs	r3, #0
}
 8013ba4:	4618      	mov	r0, r3
 8013ba6:	370c      	adds	r7, #12
 8013ba8:	46bd      	mov	sp, r7
 8013baa:	bc80      	pop	{r7}
 8013bac:	4770      	bx	lr

08013bae <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8013bae:	b480      	push	{r7}
 8013bb0:	b083      	sub	sp, #12
 8013bb2:	af00      	add	r7, sp, #0
 8013bb4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013bbc:	2b04      	cmp	r3, #4
 8013bbe:	d105      	bne.n	8013bcc <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8013bcc:	2300      	movs	r3, #0
}
 8013bce:	4618      	mov	r0, r3
 8013bd0:	370c      	adds	r7, #12
 8013bd2:	46bd      	mov	sp, r7
 8013bd4:	bc80      	pop	{r7}
 8013bd6:	4770      	bx	lr

08013bd8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8013bd8:	b580      	push	{r7, lr}
 8013bda:	b082      	sub	sp, #8
 8013bdc:	af00      	add	r7, sp, #0
 8013bde:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013be6:	2b03      	cmp	r3, #3
 8013be8:	d10b      	bne.n	8013c02 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013bf0:	69db      	ldr	r3, [r3, #28]
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d005      	beq.n	8013c02 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013bfc:	69db      	ldr	r3, [r3, #28]
 8013bfe:	6878      	ldr	r0, [r7, #4]
 8013c00:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013c02:	2300      	movs	r3, #0
}
 8013c04:	4618      	mov	r0, r3
 8013c06:	3708      	adds	r7, #8
 8013c08:	46bd      	mov	sp, r7
 8013c0a:	bd80      	pop	{r7, pc}

08013c0c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8013c0c:	b580      	push	{r7, lr}
 8013c0e:	b084      	sub	sp, #16
 8013c10:	af00      	add	r7, sp, #0
 8013c12:	6078      	str	r0, [r7, #4]
 8013c14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013c16:	2300      	movs	r3, #0
 8013c18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013c1a:	683b      	ldr	r3, [r7, #0]
 8013c1c:	781b      	ldrb	r3, [r3, #0]
 8013c1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013c22:	2b40      	cmp	r3, #64	; 0x40
 8013c24:	d005      	beq.n	8013c32 <USBD_StdDevReq+0x26>
 8013c26:	2b40      	cmp	r3, #64	; 0x40
 8013c28:	d84f      	bhi.n	8013cca <USBD_StdDevReq+0xbe>
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d009      	beq.n	8013c42 <USBD_StdDevReq+0x36>
 8013c2e:	2b20      	cmp	r3, #32
 8013c30:	d14b      	bne.n	8013cca <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013c38:	689b      	ldr	r3, [r3, #8]
 8013c3a:	6839      	ldr	r1, [r7, #0]
 8013c3c:	6878      	ldr	r0, [r7, #4]
 8013c3e:	4798      	blx	r3
      break;
 8013c40:	e048      	b.n	8013cd4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013c42:	683b      	ldr	r3, [r7, #0]
 8013c44:	785b      	ldrb	r3, [r3, #1]
 8013c46:	2b09      	cmp	r3, #9
 8013c48:	d839      	bhi.n	8013cbe <USBD_StdDevReq+0xb2>
 8013c4a:	a201      	add	r2, pc, #4	; (adr r2, 8013c50 <USBD_StdDevReq+0x44>)
 8013c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c50:	08013ca1 	.word	0x08013ca1
 8013c54:	08013cb5 	.word	0x08013cb5
 8013c58:	08013cbf 	.word	0x08013cbf
 8013c5c:	08013cab 	.word	0x08013cab
 8013c60:	08013cbf 	.word	0x08013cbf
 8013c64:	08013c83 	.word	0x08013c83
 8013c68:	08013c79 	.word	0x08013c79
 8013c6c:	08013cbf 	.word	0x08013cbf
 8013c70:	08013c97 	.word	0x08013c97
 8013c74:	08013c8d 	.word	0x08013c8d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8013c78:	6839      	ldr	r1, [r7, #0]
 8013c7a:	6878      	ldr	r0, [r7, #4]
 8013c7c:	f000 f9dc 	bl	8014038 <USBD_GetDescriptor>
          break;
 8013c80:	e022      	b.n	8013cc8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8013c82:	6839      	ldr	r1, [r7, #0]
 8013c84:	6878      	ldr	r0, [r7, #4]
 8013c86:	f000 fb3f 	bl	8014308 <USBD_SetAddress>
          break;
 8013c8a:	e01d      	b.n	8013cc8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8013c8c:	6839      	ldr	r1, [r7, #0]
 8013c8e:	6878      	ldr	r0, [r7, #4]
 8013c90:	f000 fb7e 	bl	8014390 <USBD_SetConfig>
          break;
 8013c94:	e018      	b.n	8013cc8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8013c96:	6839      	ldr	r1, [r7, #0]
 8013c98:	6878      	ldr	r0, [r7, #4]
 8013c9a:	f000 fc07 	bl	80144ac <USBD_GetConfig>
          break;
 8013c9e:	e013      	b.n	8013cc8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8013ca0:	6839      	ldr	r1, [r7, #0]
 8013ca2:	6878      	ldr	r0, [r7, #4]
 8013ca4:	f000 fc37 	bl	8014516 <USBD_GetStatus>
          break;
 8013ca8:	e00e      	b.n	8013cc8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8013caa:	6839      	ldr	r1, [r7, #0]
 8013cac:	6878      	ldr	r0, [r7, #4]
 8013cae:	f000 fc65 	bl	801457c <USBD_SetFeature>
          break;
 8013cb2:	e009      	b.n	8013cc8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8013cb4:	6839      	ldr	r1, [r7, #0]
 8013cb6:	6878      	ldr	r0, [r7, #4]
 8013cb8:	f000 fc74 	bl	80145a4 <USBD_ClrFeature>
          break;
 8013cbc:	e004      	b.n	8013cc8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8013cbe:	6839      	ldr	r1, [r7, #0]
 8013cc0:	6878      	ldr	r0, [r7, #4]
 8013cc2:	f000 fccc 	bl	801465e <USBD_CtlError>
          break;
 8013cc6:	bf00      	nop
      }
      break;
 8013cc8:	e004      	b.n	8013cd4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8013cca:	6839      	ldr	r1, [r7, #0]
 8013ccc:	6878      	ldr	r0, [r7, #4]
 8013cce:	f000 fcc6 	bl	801465e <USBD_CtlError>
      break;
 8013cd2:	bf00      	nop
  }

  return ret;
 8013cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8013cd6:	4618      	mov	r0, r3
 8013cd8:	3710      	adds	r7, #16
 8013cda:	46bd      	mov	sp, r7
 8013cdc:	bd80      	pop	{r7, pc}
 8013cde:	bf00      	nop

08013ce0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8013ce0:	b580      	push	{r7, lr}
 8013ce2:	b084      	sub	sp, #16
 8013ce4:	af00      	add	r7, sp, #0
 8013ce6:	6078      	str	r0, [r7, #4]
 8013ce8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013cea:	2300      	movs	r3, #0
 8013cec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013cee:	683b      	ldr	r3, [r7, #0]
 8013cf0:	781b      	ldrb	r3, [r3, #0]
 8013cf2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013cf6:	2b40      	cmp	r3, #64	; 0x40
 8013cf8:	d005      	beq.n	8013d06 <USBD_StdItfReq+0x26>
 8013cfa:	2b40      	cmp	r3, #64	; 0x40
 8013cfc:	d82e      	bhi.n	8013d5c <USBD_StdItfReq+0x7c>
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d001      	beq.n	8013d06 <USBD_StdItfReq+0x26>
 8013d02:	2b20      	cmp	r3, #32
 8013d04:	d12a      	bne.n	8013d5c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013d0c:	3b01      	subs	r3, #1
 8013d0e:	2b02      	cmp	r3, #2
 8013d10:	d81d      	bhi.n	8013d4e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8013d12:	683b      	ldr	r3, [r7, #0]
 8013d14:	889b      	ldrh	r3, [r3, #4]
 8013d16:	b2db      	uxtb	r3, r3
 8013d18:	2b01      	cmp	r3, #1
 8013d1a:	d813      	bhi.n	8013d44 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013d22:	689b      	ldr	r3, [r3, #8]
 8013d24:	6839      	ldr	r1, [r7, #0]
 8013d26:	6878      	ldr	r0, [r7, #4]
 8013d28:	4798      	blx	r3
 8013d2a:	4603      	mov	r3, r0
 8013d2c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8013d2e:	683b      	ldr	r3, [r7, #0]
 8013d30:	88db      	ldrh	r3, [r3, #6]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d110      	bne.n	8013d58 <USBD_StdItfReq+0x78>
 8013d36:	7bfb      	ldrb	r3, [r7, #15]
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d10d      	bne.n	8013d58 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8013d3c:	6878      	ldr	r0, [r7, #4]
 8013d3e:	f000 fd38 	bl	80147b2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8013d42:	e009      	b.n	8013d58 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8013d44:	6839      	ldr	r1, [r7, #0]
 8013d46:	6878      	ldr	r0, [r7, #4]
 8013d48:	f000 fc89 	bl	801465e <USBD_CtlError>
          break;
 8013d4c:	e004      	b.n	8013d58 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8013d4e:	6839      	ldr	r1, [r7, #0]
 8013d50:	6878      	ldr	r0, [r7, #4]
 8013d52:	f000 fc84 	bl	801465e <USBD_CtlError>
          break;
 8013d56:	e000      	b.n	8013d5a <USBD_StdItfReq+0x7a>
          break;
 8013d58:	bf00      	nop
      }
      break;
 8013d5a:	e004      	b.n	8013d66 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8013d5c:	6839      	ldr	r1, [r7, #0]
 8013d5e:	6878      	ldr	r0, [r7, #4]
 8013d60:	f000 fc7d 	bl	801465e <USBD_CtlError>
      break;
 8013d64:	bf00      	nop
  }

  return USBD_OK;
 8013d66:	2300      	movs	r3, #0
}
 8013d68:	4618      	mov	r0, r3
 8013d6a:	3710      	adds	r7, #16
 8013d6c:	46bd      	mov	sp, r7
 8013d6e:	bd80      	pop	{r7, pc}

08013d70 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8013d70:	b580      	push	{r7, lr}
 8013d72:	b084      	sub	sp, #16
 8013d74:	af00      	add	r7, sp, #0
 8013d76:	6078      	str	r0, [r7, #4]
 8013d78:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8013d7a:	2300      	movs	r3, #0
 8013d7c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8013d7e:	683b      	ldr	r3, [r7, #0]
 8013d80:	889b      	ldrh	r3, [r3, #4]
 8013d82:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013d84:	683b      	ldr	r3, [r7, #0]
 8013d86:	781b      	ldrb	r3, [r3, #0]
 8013d88:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013d8c:	2b40      	cmp	r3, #64	; 0x40
 8013d8e:	d007      	beq.n	8013da0 <USBD_StdEPReq+0x30>
 8013d90:	2b40      	cmp	r3, #64	; 0x40
 8013d92:	f200 8146 	bhi.w	8014022 <USBD_StdEPReq+0x2b2>
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d00a      	beq.n	8013db0 <USBD_StdEPReq+0x40>
 8013d9a:	2b20      	cmp	r3, #32
 8013d9c:	f040 8141 	bne.w	8014022 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013da6:	689b      	ldr	r3, [r3, #8]
 8013da8:	6839      	ldr	r1, [r7, #0]
 8013daa:	6878      	ldr	r0, [r7, #4]
 8013dac:	4798      	blx	r3
      break;
 8013dae:	e13d      	b.n	801402c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8013db0:	683b      	ldr	r3, [r7, #0]
 8013db2:	781b      	ldrb	r3, [r3, #0]
 8013db4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013db8:	2b20      	cmp	r3, #32
 8013dba:	d10a      	bne.n	8013dd2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013dc2:	689b      	ldr	r3, [r3, #8]
 8013dc4:	6839      	ldr	r1, [r7, #0]
 8013dc6:	6878      	ldr	r0, [r7, #4]
 8013dc8:	4798      	blx	r3
 8013dca:	4603      	mov	r3, r0
 8013dcc:	73fb      	strb	r3, [r7, #15]

        return ret;
 8013dce:	7bfb      	ldrb	r3, [r7, #15]
 8013dd0:	e12d      	b.n	801402e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8013dd2:	683b      	ldr	r3, [r7, #0]
 8013dd4:	785b      	ldrb	r3, [r3, #1]
 8013dd6:	2b03      	cmp	r3, #3
 8013dd8:	d007      	beq.n	8013dea <USBD_StdEPReq+0x7a>
 8013dda:	2b03      	cmp	r3, #3
 8013ddc:	f300 811b 	bgt.w	8014016 <USBD_StdEPReq+0x2a6>
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d072      	beq.n	8013eca <USBD_StdEPReq+0x15a>
 8013de4:	2b01      	cmp	r3, #1
 8013de6:	d03a      	beq.n	8013e5e <USBD_StdEPReq+0xee>
 8013de8:	e115      	b.n	8014016 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013df0:	2b02      	cmp	r3, #2
 8013df2:	d002      	beq.n	8013dfa <USBD_StdEPReq+0x8a>
 8013df4:	2b03      	cmp	r3, #3
 8013df6:	d015      	beq.n	8013e24 <USBD_StdEPReq+0xb4>
 8013df8:	e02b      	b.n	8013e52 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013dfa:	7bbb      	ldrb	r3, [r7, #14]
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d00c      	beq.n	8013e1a <USBD_StdEPReq+0xaa>
 8013e00:	7bbb      	ldrb	r3, [r7, #14]
 8013e02:	2b80      	cmp	r3, #128	; 0x80
 8013e04:	d009      	beq.n	8013e1a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8013e06:	7bbb      	ldrb	r3, [r7, #14]
 8013e08:	4619      	mov	r1, r3
 8013e0a:	6878      	ldr	r0, [r7, #4]
 8013e0c:	f001 f825 	bl	8014e5a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8013e10:	2180      	movs	r1, #128	; 0x80
 8013e12:	6878      	ldr	r0, [r7, #4]
 8013e14:	f001 f821 	bl	8014e5a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013e18:	e020      	b.n	8013e5c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8013e1a:	6839      	ldr	r1, [r7, #0]
 8013e1c:	6878      	ldr	r0, [r7, #4]
 8013e1e:	f000 fc1e 	bl	801465e <USBD_CtlError>
              break;
 8013e22:	e01b      	b.n	8013e5c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013e24:	683b      	ldr	r3, [r7, #0]
 8013e26:	885b      	ldrh	r3, [r3, #2]
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d10e      	bne.n	8013e4a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8013e2c:	7bbb      	ldrb	r3, [r7, #14]
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d00b      	beq.n	8013e4a <USBD_StdEPReq+0xda>
 8013e32:	7bbb      	ldrb	r3, [r7, #14]
 8013e34:	2b80      	cmp	r3, #128	; 0x80
 8013e36:	d008      	beq.n	8013e4a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8013e38:	683b      	ldr	r3, [r7, #0]
 8013e3a:	88db      	ldrh	r3, [r3, #6]
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d104      	bne.n	8013e4a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8013e40:	7bbb      	ldrb	r3, [r7, #14]
 8013e42:	4619      	mov	r1, r3
 8013e44:	6878      	ldr	r0, [r7, #4]
 8013e46:	f001 f808 	bl	8014e5a <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8013e4a:	6878      	ldr	r0, [r7, #4]
 8013e4c:	f000 fcb1 	bl	80147b2 <USBD_CtlSendStatus>

              break;
 8013e50:	e004      	b.n	8013e5c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8013e52:	6839      	ldr	r1, [r7, #0]
 8013e54:	6878      	ldr	r0, [r7, #4]
 8013e56:	f000 fc02 	bl	801465e <USBD_CtlError>
              break;
 8013e5a:	bf00      	nop
          }
          break;
 8013e5c:	e0e0      	b.n	8014020 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013e64:	2b02      	cmp	r3, #2
 8013e66:	d002      	beq.n	8013e6e <USBD_StdEPReq+0xfe>
 8013e68:	2b03      	cmp	r3, #3
 8013e6a:	d015      	beq.n	8013e98 <USBD_StdEPReq+0x128>
 8013e6c:	e026      	b.n	8013ebc <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013e6e:	7bbb      	ldrb	r3, [r7, #14]
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d00c      	beq.n	8013e8e <USBD_StdEPReq+0x11e>
 8013e74:	7bbb      	ldrb	r3, [r7, #14]
 8013e76:	2b80      	cmp	r3, #128	; 0x80
 8013e78:	d009      	beq.n	8013e8e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8013e7a:	7bbb      	ldrb	r3, [r7, #14]
 8013e7c:	4619      	mov	r1, r3
 8013e7e:	6878      	ldr	r0, [r7, #4]
 8013e80:	f000 ffeb 	bl	8014e5a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8013e84:	2180      	movs	r1, #128	; 0x80
 8013e86:	6878      	ldr	r0, [r7, #4]
 8013e88:	f000 ffe7 	bl	8014e5a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013e8c:	e01c      	b.n	8013ec8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8013e8e:	6839      	ldr	r1, [r7, #0]
 8013e90:	6878      	ldr	r0, [r7, #4]
 8013e92:	f000 fbe4 	bl	801465e <USBD_CtlError>
              break;
 8013e96:	e017      	b.n	8013ec8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013e98:	683b      	ldr	r3, [r7, #0]
 8013e9a:	885b      	ldrh	r3, [r3, #2]
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d112      	bne.n	8013ec6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8013ea0:	7bbb      	ldrb	r3, [r7, #14]
 8013ea2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d004      	beq.n	8013eb4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8013eaa:	7bbb      	ldrb	r3, [r7, #14]
 8013eac:	4619      	mov	r1, r3
 8013eae:	6878      	ldr	r0, [r7, #4]
 8013eb0:	f000 fff2 	bl	8014e98 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8013eb4:	6878      	ldr	r0, [r7, #4]
 8013eb6:	f000 fc7c 	bl	80147b2 <USBD_CtlSendStatus>
              }
              break;
 8013eba:	e004      	b.n	8013ec6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8013ebc:	6839      	ldr	r1, [r7, #0]
 8013ebe:	6878      	ldr	r0, [r7, #4]
 8013ec0:	f000 fbcd 	bl	801465e <USBD_CtlError>
              break;
 8013ec4:	e000      	b.n	8013ec8 <USBD_StdEPReq+0x158>
              break;
 8013ec6:	bf00      	nop
          }
          break;
 8013ec8:	e0aa      	b.n	8014020 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013ed0:	2b02      	cmp	r3, #2
 8013ed2:	d002      	beq.n	8013eda <USBD_StdEPReq+0x16a>
 8013ed4:	2b03      	cmp	r3, #3
 8013ed6:	d032      	beq.n	8013f3e <USBD_StdEPReq+0x1ce>
 8013ed8:	e097      	b.n	801400a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013eda:	7bbb      	ldrb	r3, [r7, #14]
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d007      	beq.n	8013ef0 <USBD_StdEPReq+0x180>
 8013ee0:	7bbb      	ldrb	r3, [r7, #14]
 8013ee2:	2b80      	cmp	r3, #128	; 0x80
 8013ee4:	d004      	beq.n	8013ef0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8013ee6:	6839      	ldr	r1, [r7, #0]
 8013ee8:	6878      	ldr	r0, [r7, #4]
 8013eea:	f000 fbb8 	bl	801465e <USBD_CtlError>
                break;
 8013eee:	e091      	b.n	8014014 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013ef0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	da0b      	bge.n	8013f10 <USBD_StdEPReq+0x1a0>
 8013ef8:	7bbb      	ldrb	r3, [r7, #14]
 8013efa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013efe:	4613      	mov	r3, r2
 8013f00:	009b      	lsls	r3, r3, #2
 8013f02:	4413      	add	r3, r2
 8013f04:	009b      	lsls	r3, r3, #2
 8013f06:	3310      	adds	r3, #16
 8013f08:	687a      	ldr	r2, [r7, #4]
 8013f0a:	4413      	add	r3, r2
 8013f0c:	3304      	adds	r3, #4
 8013f0e:	e00b      	b.n	8013f28 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013f10:	7bbb      	ldrb	r3, [r7, #14]
 8013f12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013f16:	4613      	mov	r3, r2
 8013f18:	009b      	lsls	r3, r3, #2
 8013f1a:	4413      	add	r3, r2
 8013f1c:	009b      	lsls	r3, r3, #2
 8013f1e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8013f22:	687a      	ldr	r2, [r7, #4]
 8013f24:	4413      	add	r3, r2
 8013f26:	3304      	adds	r3, #4
 8013f28:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8013f2a:	68bb      	ldr	r3, [r7, #8]
 8013f2c:	2200      	movs	r2, #0
 8013f2e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8013f30:	68bb      	ldr	r3, [r7, #8]
 8013f32:	2202      	movs	r2, #2
 8013f34:	4619      	mov	r1, r3
 8013f36:	6878      	ldr	r0, [r7, #4]
 8013f38:	f000 fbfb 	bl	8014732 <USBD_CtlSendData>
              break;
 8013f3c:	e06a      	b.n	8014014 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8013f3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	da11      	bge.n	8013f6a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8013f46:	7bbb      	ldrb	r3, [r7, #14]
 8013f48:	f003 020f 	and.w	r2, r3, #15
 8013f4c:	6879      	ldr	r1, [r7, #4]
 8013f4e:	4613      	mov	r3, r2
 8013f50:	009b      	lsls	r3, r3, #2
 8013f52:	4413      	add	r3, r2
 8013f54:	009b      	lsls	r3, r3, #2
 8013f56:	440b      	add	r3, r1
 8013f58:	3318      	adds	r3, #24
 8013f5a:	681b      	ldr	r3, [r3, #0]
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d117      	bne.n	8013f90 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8013f60:	6839      	ldr	r1, [r7, #0]
 8013f62:	6878      	ldr	r0, [r7, #4]
 8013f64:	f000 fb7b 	bl	801465e <USBD_CtlError>
                  break;
 8013f68:	e054      	b.n	8014014 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8013f6a:	7bbb      	ldrb	r3, [r7, #14]
 8013f6c:	f003 020f 	and.w	r2, r3, #15
 8013f70:	6879      	ldr	r1, [r7, #4]
 8013f72:	4613      	mov	r3, r2
 8013f74:	009b      	lsls	r3, r3, #2
 8013f76:	4413      	add	r3, r2
 8013f78:	009b      	lsls	r3, r3, #2
 8013f7a:	440b      	add	r3, r1
 8013f7c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8013f80:	681b      	ldr	r3, [r3, #0]
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d104      	bne.n	8013f90 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8013f86:	6839      	ldr	r1, [r7, #0]
 8013f88:	6878      	ldr	r0, [r7, #4]
 8013f8a:	f000 fb68 	bl	801465e <USBD_CtlError>
                  break;
 8013f8e:	e041      	b.n	8014014 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013f90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	da0b      	bge.n	8013fb0 <USBD_StdEPReq+0x240>
 8013f98:	7bbb      	ldrb	r3, [r7, #14]
 8013f9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013f9e:	4613      	mov	r3, r2
 8013fa0:	009b      	lsls	r3, r3, #2
 8013fa2:	4413      	add	r3, r2
 8013fa4:	009b      	lsls	r3, r3, #2
 8013fa6:	3310      	adds	r3, #16
 8013fa8:	687a      	ldr	r2, [r7, #4]
 8013faa:	4413      	add	r3, r2
 8013fac:	3304      	adds	r3, #4
 8013fae:	e00b      	b.n	8013fc8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013fb0:	7bbb      	ldrb	r3, [r7, #14]
 8013fb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013fb6:	4613      	mov	r3, r2
 8013fb8:	009b      	lsls	r3, r3, #2
 8013fba:	4413      	add	r3, r2
 8013fbc:	009b      	lsls	r3, r3, #2
 8013fbe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8013fc2:	687a      	ldr	r2, [r7, #4]
 8013fc4:	4413      	add	r3, r2
 8013fc6:	3304      	adds	r3, #4
 8013fc8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8013fca:	7bbb      	ldrb	r3, [r7, #14]
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d002      	beq.n	8013fd6 <USBD_StdEPReq+0x266>
 8013fd0:	7bbb      	ldrb	r3, [r7, #14]
 8013fd2:	2b80      	cmp	r3, #128	; 0x80
 8013fd4:	d103      	bne.n	8013fde <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8013fd6:	68bb      	ldr	r3, [r7, #8]
 8013fd8:	2200      	movs	r2, #0
 8013fda:	601a      	str	r2, [r3, #0]
 8013fdc:	e00e      	b.n	8013ffc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8013fde:	7bbb      	ldrb	r3, [r7, #14]
 8013fe0:	4619      	mov	r1, r3
 8013fe2:	6878      	ldr	r0, [r7, #4]
 8013fe4:	f000 ff77 	bl	8014ed6 <USBD_LL_IsStallEP>
 8013fe8:	4603      	mov	r3, r0
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d003      	beq.n	8013ff6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8013fee:	68bb      	ldr	r3, [r7, #8]
 8013ff0:	2201      	movs	r2, #1
 8013ff2:	601a      	str	r2, [r3, #0]
 8013ff4:	e002      	b.n	8013ffc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8013ff6:	68bb      	ldr	r3, [r7, #8]
 8013ff8:	2200      	movs	r2, #0
 8013ffa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8013ffc:	68bb      	ldr	r3, [r7, #8]
 8013ffe:	2202      	movs	r2, #2
 8014000:	4619      	mov	r1, r3
 8014002:	6878      	ldr	r0, [r7, #4]
 8014004:	f000 fb95 	bl	8014732 <USBD_CtlSendData>
              break;
 8014008:	e004      	b.n	8014014 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 801400a:	6839      	ldr	r1, [r7, #0]
 801400c:	6878      	ldr	r0, [r7, #4]
 801400e:	f000 fb26 	bl	801465e <USBD_CtlError>
              break;
 8014012:	bf00      	nop
          }
          break;
 8014014:	e004      	b.n	8014020 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8014016:	6839      	ldr	r1, [r7, #0]
 8014018:	6878      	ldr	r0, [r7, #4]
 801401a:	f000 fb20 	bl	801465e <USBD_CtlError>
          break;
 801401e:	bf00      	nop
      }
      break;
 8014020:	e004      	b.n	801402c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8014022:	6839      	ldr	r1, [r7, #0]
 8014024:	6878      	ldr	r0, [r7, #4]
 8014026:	f000 fb1a 	bl	801465e <USBD_CtlError>
      break;
 801402a:	bf00      	nop
  }

  return ret;
 801402c:	7bfb      	ldrb	r3, [r7, #15]
}
 801402e:	4618      	mov	r0, r3
 8014030:	3710      	adds	r7, #16
 8014032:	46bd      	mov	sp, r7
 8014034:	bd80      	pop	{r7, pc}
	...

08014038 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8014038:	b580      	push	{r7, lr}
 801403a:	b084      	sub	sp, #16
 801403c:	af00      	add	r7, sp, #0
 801403e:	6078      	str	r0, [r7, #4]
 8014040:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014042:	2300      	movs	r3, #0
 8014044:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8014046:	2300      	movs	r3, #0
 8014048:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801404a:	2300      	movs	r3, #0
 801404c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801404e:	683b      	ldr	r3, [r7, #0]
 8014050:	885b      	ldrh	r3, [r3, #2]
 8014052:	0a1b      	lsrs	r3, r3, #8
 8014054:	b29b      	uxth	r3, r3
 8014056:	3b01      	subs	r3, #1
 8014058:	2b06      	cmp	r3, #6
 801405a:	f200 8128 	bhi.w	80142ae <USBD_GetDescriptor+0x276>
 801405e:	a201      	add	r2, pc, #4	; (adr r2, 8014064 <USBD_GetDescriptor+0x2c>)
 8014060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014064:	08014081 	.word	0x08014081
 8014068:	08014099 	.word	0x08014099
 801406c:	080140d9 	.word	0x080140d9
 8014070:	080142af 	.word	0x080142af
 8014074:	080142af 	.word	0x080142af
 8014078:	0801424f 	.word	0x0801424f
 801407c:	0801427b 	.word	0x0801427b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014086:	681b      	ldr	r3, [r3, #0]
 8014088:	687a      	ldr	r2, [r7, #4]
 801408a:	7c12      	ldrb	r2, [r2, #16]
 801408c:	f107 0108 	add.w	r1, r7, #8
 8014090:	4610      	mov	r0, r2
 8014092:	4798      	blx	r3
 8014094:	60f8      	str	r0, [r7, #12]
      break;
 8014096:	e112      	b.n	80142be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	7c1b      	ldrb	r3, [r3, #16]
 801409c:	2b00      	cmp	r3, #0
 801409e:	d10d      	bne.n	80140bc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80140a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80140a8:	f107 0208 	add.w	r2, r7, #8
 80140ac:	4610      	mov	r0, r2
 80140ae:	4798      	blx	r3
 80140b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80140b2:	68fb      	ldr	r3, [r7, #12]
 80140b4:	3301      	adds	r3, #1
 80140b6:	2202      	movs	r2, #2
 80140b8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80140ba:	e100      	b.n	80142be <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80140c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140c4:	f107 0208 	add.w	r2, r7, #8
 80140c8:	4610      	mov	r0, r2
 80140ca:	4798      	blx	r3
 80140cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80140ce:	68fb      	ldr	r3, [r7, #12]
 80140d0:	3301      	adds	r3, #1
 80140d2:	2202      	movs	r2, #2
 80140d4:	701a      	strb	r2, [r3, #0]
      break;
 80140d6:	e0f2      	b.n	80142be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80140d8:	683b      	ldr	r3, [r7, #0]
 80140da:	885b      	ldrh	r3, [r3, #2]
 80140dc:	b2db      	uxtb	r3, r3
 80140de:	2b05      	cmp	r3, #5
 80140e0:	f200 80ac 	bhi.w	801423c <USBD_GetDescriptor+0x204>
 80140e4:	a201      	add	r2, pc, #4	; (adr r2, 80140ec <USBD_GetDescriptor+0xb4>)
 80140e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80140ea:	bf00      	nop
 80140ec:	08014105 	.word	0x08014105
 80140f0:	08014139 	.word	0x08014139
 80140f4:	0801416d 	.word	0x0801416d
 80140f8:	080141a1 	.word	0x080141a1
 80140fc:	080141d5 	.word	0x080141d5
 8014100:	08014209 	.word	0x08014209
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801410a:	685b      	ldr	r3, [r3, #4]
 801410c:	2b00      	cmp	r3, #0
 801410e:	d00b      	beq.n	8014128 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014116:	685b      	ldr	r3, [r3, #4]
 8014118:	687a      	ldr	r2, [r7, #4]
 801411a:	7c12      	ldrb	r2, [r2, #16]
 801411c:	f107 0108 	add.w	r1, r7, #8
 8014120:	4610      	mov	r0, r2
 8014122:	4798      	blx	r3
 8014124:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014126:	e091      	b.n	801424c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014128:	6839      	ldr	r1, [r7, #0]
 801412a:	6878      	ldr	r0, [r7, #4]
 801412c:	f000 fa97 	bl	801465e <USBD_CtlError>
            err++;
 8014130:	7afb      	ldrb	r3, [r7, #11]
 8014132:	3301      	adds	r3, #1
 8014134:	72fb      	strb	r3, [r7, #11]
          break;
 8014136:	e089      	b.n	801424c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801413e:	689b      	ldr	r3, [r3, #8]
 8014140:	2b00      	cmp	r3, #0
 8014142:	d00b      	beq.n	801415c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801414a:	689b      	ldr	r3, [r3, #8]
 801414c:	687a      	ldr	r2, [r7, #4]
 801414e:	7c12      	ldrb	r2, [r2, #16]
 8014150:	f107 0108 	add.w	r1, r7, #8
 8014154:	4610      	mov	r0, r2
 8014156:	4798      	blx	r3
 8014158:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801415a:	e077      	b.n	801424c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801415c:	6839      	ldr	r1, [r7, #0]
 801415e:	6878      	ldr	r0, [r7, #4]
 8014160:	f000 fa7d 	bl	801465e <USBD_CtlError>
            err++;
 8014164:	7afb      	ldrb	r3, [r7, #11]
 8014166:	3301      	adds	r3, #1
 8014168:	72fb      	strb	r3, [r7, #11]
          break;
 801416a:	e06f      	b.n	801424c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8014172:	68db      	ldr	r3, [r3, #12]
 8014174:	2b00      	cmp	r3, #0
 8014176:	d00b      	beq.n	8014190 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801417e:	68db      	ldr	r3, [r3, #12]
 8014180:	687a      	ldr	r2, [r7, #4]
 8014182:	7c12      	ldrb	r2, [r2, #16]
 8014184:	f107 0108 	add.w	r1, r7, #8
 8014188:	4610      	mov	r0, r2
 801418a:	4798      	blx	r3
 801418c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801418e:	e05d      	b.n	801424c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014190:	6839      	ldr	r1, [r7, #0]
 8014192:	6878      	ldr	r0, [r7, #4]
 8014194:	f000 fa63 	bl	801465e <USBD_CtlError>
            err++;
 8014198:	7afb      	ldrb	r3, [r7, #11]
 801419a:	3301      	adds	r3, #1
 801419c:	72fb      	strb	r3, [r7, #11]
          break;
 801419e:	e055      	b.n	801424c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80141a6:	691b      	ldr	r3, [r3, #16]
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d00b      	beq.n	80141c4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80141b2:	691b      	ldr	r3, [r3, #16]
 80141b4:	687a      	ldr	r2, [r7, #4]
 80141b6:	7c12      	ldrb	r2, [r2, #16]
 80141b8:	f107 0108 	add.w	r1, r7, #8
 80141bc:	4610      	mov	r0, r2
 80141be:	4798      	blx	r3
 80141c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80141c2:	e043      	b.n	801424c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80141c4:	6839      	ldr	r1, [r7, #0]
 80141c6:	6878      	ldr	r0, [r7, #4]
 80141c8:	f000 fa49 	bl	801465e <USBD_CtlError>
            err++;
 80141cc:	7afb      	ldrb	r3, [r7, #11]
 80141ce:	3301      	adds	r3, #1
 80141d0:	72fb      	strb	r3, [r7, #11]
          break;
 80141d2:	e03b      	b.n	801424c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80141da:	695b      	ldr	r3, [r3, #20]
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d00b      	beq.n	80141f8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80141e6:	695b      	ldr	r3, [r3, #20]
 80141e8:	687a      	ldr	r2, [r7, #4]
 80141ea:	7c12      	ldrb	r2, [r2, #16]
 80141ec:	f107 0108 	add.w	r1, r7, #8
 80141f0:	4610      	mov	r0, r2
 80141f2:	4798      	blx	r3
 80141f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80141f6:	e029      	b.n	801424c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80141f8:	6839      	ldr	r1, [r7, #0]
 80141fa:	6878      	ldr	r0, [r7, #4]
 80141fc:	f000 fa2f 	bl	801465e <USBD_CtlError>
            err++;
 8014200:	7afb      	ldrb	r3, [r7, #11]
 8014202:	3301      	adds	r3, #1
 8014204:	72fb      	strb	r3, [r7, #11]
          break;
 8014206:	e021      	b.n	801424c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801420e:	699b      	ldr	r3, [r3, #24]
 8014210:	2b00      	cmp	r3, #0
 8014212:	d00b      	beq.n	801422c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801421a:	699b      	ldr	r3, [r3, #24]
 801421c:	687a      	ldr	r2, [r7, #4]
 801421e:	7c12      	ldrb	r2, [r2, #16]
 8014220:	f107 0108 	add.w	r1, r7, #8
 8014224:	4610      	mov	r0, r2
 8014226:	4798      	blx	r3
 8014228:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801422a:	e00f      	b.n	801424c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801422c:	6839      	ldr	r1, [r7, #0]
 801422e:	6878      	ldr	r0, [r7, #4]
 8014230:	f000 fa15 	bl	801465e <USBD_CtlError>
            err++;
 8014234:	7afb      	ldrb	r3, [r7, #11]
 8014236:	3301      	adds	r3, #1
 8014238:	72fb      	strb	r3, [r7, #11]
          break;
 801423a:	e007      	b.n	801424c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 801423c:	6839      	ldr	r1, [r7, #0]
 801423e:	6878      	ldr	r0, [r7, #4]
 8014240:	f000 fa0d 	bl	801465e <USBD_CtlError>
          err++;
 8014244:	7afb      	ldrb	r3, [r7, #11]
 8014246:	3301      	adds	r3, #1
 8014248:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 801424a:	e038      	b.n	80142be <USBD_GetDescriptor+0x286>
 801424c:	e037      	b.n	80142be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	7c1b      	ldrb	r3, [r3, #16]
 8014252:	2b00      	cmp	r3, #0
 8014254:	d109      	bne.n	801426a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801425c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801425e:	f107 0208 	add.w	r2, r7, #8
 8014262:	4610      	mov	r0, r2
 8014264:	4798      	blx	r3
 8014266:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014268:	e029      	b.n	80142be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801426a:	6839      	ldr	r1, [r7, #0]
 801426c:	6878      	ldr	r0, [r7, #4]
 801426e:	f000 f9f6 	bl	801465e <USBD_CtlError>
        err++;
 8014272:	7afb      	ldrb	r3, [r7, #11]
 8014274:	3301      	adds	r3, #1
 8014276:	72fb      	strb	r3, [r7, #11]
      break;
 8014278:	e021      	b.n	80142be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	7c1b      	ldrb	r3, [r3, #16]
 801427e:	2b00      	cmp	r3, #0
 8014280:	d10d      	bne.n	801429e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801428a:	f107 0208 	add.w	r2, r7, #8
 801428e:	4610      	mov	r0, r2
 8014290:	4798      	blx	r3
 8014292:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014294:	68fb      	ldr	r3, [r7, #12]
 8014296:	3301      	adds	r3, #1
 8014298:	2207      	movs	r2, #7
 801429a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801429c:	e00f      	b.n	80142be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801429e:	6839      	ldr	r1, [r7, #0]
 80142a0:	6878      	ldr	r0, [r7, #4]
 80142a2:	f000 f9dc 	bl	801465e <USBD_CtlError>
        err++;
 80142a6:	7afb      	ldrb	r3, [r7, #11]
 80142a8:	3301      	adds	r3, #1
 80142aa:	72fb      	strb	r3, [r7, #11]
      break;
 80142ac:	e007      	b.n	80142be <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80142ae:	6839      	ldr	r1, [r7, #0]
 80142b0:	6878      	ldr	r0, [r7, #4]
 80142b2:	f000 f9d4 	bl	801465e <USBD_CtlError>
      err++;
 80142b6:	7afb      	ldrb	r3, [r7, #11]
 80142b8:	3301      	adds	r3, #1
 80142ba:	72fb      	strb	r3, [r7, #11]
      break;
 80142bc:	bf00      	nop
  }

  if (err != 0U)
 80142be:	7afb      	ldrb	r3, [r7, #11]
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d11c      	bne.n	80142fe <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80142c4:	893b      	ldrh	r3, [r7, #8]
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d011      	beq.n	80142ee <USBD_GetDescriptor+0x2b6>
 80142ca:	683b      	ldr	r3, [r7, #0]
 80142cc:	88db      	ldrh	r3, [r3, #6]
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d00d      	beq.n	80142ee <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80142d2:	683b      	ldr	r3, [r7, #0]
 80142d4:	88da      	ldrh	r2, [r3, #6]
 80142d6:	893b      	ldrh	r3, [r7, #8]
 80142d8:	4293      	cmp	r3, r2
 80142da:	bf28      	it	cs
 80142dc:	4613      	movcs	r3, r2
 80142de:	b29b      	uxth	r3, r3
 80142e0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80142e2:	893b      	ldrh	r3, [r7, #8]
 80142e4:	461a      	mov	r2, r3
 80142e6:	68f9      	ldr	r1, [r7, #12]
 80142e8:	6878      	ldr	r0, [r7, #4]
 80142ea:	f000 fa22 	bl	8014732 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80142ee:	683b      	ldr	r3, [r7, #0]
 80142f0:	88db      	ldrh	r3, [r3, #6]
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d104      	bne.n	8014300 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80142f6:	6878      	ldr	r0, [r7, #4]
 80142f8:	f000 fa5b 	bl	80147b2 <USBD_CtlSendStatus>
 80142fc:	e000      	b.n	8014300 <USBD_GetDescriptor+0x2c8>
    return;
 80142fe:	bf00      	nop
    }
  }
}
 8014300:	3710      	adds	r7, #16
 8014302:	46bd      	mov	sp, r7
 8014304:	bd80      	pop	{r7, pc}
 8014306:	bf00      	nop

08014308 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8014308:	b580      	push	{r7, lr}
 801430a:	b084      	sub	sp, #16
 801430c:	af00      	add	r7, sp, #0
 801430e:	6078      	str	r0, [r7, #4]
 8014310:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8014312:	683b      	ldr	r3, [r7, #0]
 8014314:	889b      	ldrh	r3, [r3, #4]
 8014316:	2b00      	cmp	r3, #0
 8014318:	d130      	bne.n	801437c <USBD_SetAddress+0x74>
 801431a:	683b      	ldr	r3, [r7, #0]
 801431c:	88db      	ldrh	r3, [r3, #6]
 801431e:	2b00      	cmp	r3, #0
 8014320:	d12c      	bne.n	801437c <USBD_SetAddress+0x74>
 8014322:	683b      	ldr	r3, [r7, #0]
 8014324:	885b      	ldrh	r3, [r3, #2]
 8014326:	2b7f      	cmp	r3, #127	; 0x7f
 8014328:	d828      	bhi.n	801437c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801432a:	683b      	ldr	r3, [r7, #0]
 801432c:	885b      	ldrh	r3, [r3, #2]
 801432e:	b2db      	uxtb	r3, r3
 8014330:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014334:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801433c:	2b03      	cmp	r3, #3
 801433e:	d104      	bne.n	801434a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8014340:	6839      	ldr	r1, [r7, #0]
 8014342:	6878      	ldr	r0, [r7, #4]
 8014344:	f000 f98b 	bl	801465e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014348:	e01d      	b.n	8014386 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	7bfa      	ldrb	r2, [r7, #15]
 801434e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014352:	7bfb      	ldrb	r3, [r7, #15]
 8014354:	4619      	mov	r1, r3
 8014356:	6878      	ldr	r0, [r7, #4]
 8014358:	f000 fde9 	bl	8014f2e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801435c:	6878      	ldr	r0, [r7, #4]
 801435e:	f000 fa28 	bl	80147b2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014362:	7bfb      	ldrb	r3, [r7, #15]
 8014364:	2b00      	cmp	r3, #0
 8014366:	d004      	beq.n	8014372 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	2202      	movs	r2, #2
 801436c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014370:	e009      	b.n	8014386 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	2201      	movs	r2, #1
 8014376:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801437a:	e004      	b.n	8014386 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801437c:	6839      	ldr	r1, [r7, #0]
 801437e:	6878      	ldr	r0, [r7, #4]
 8014380:	f000 f96d 	bl	801465e <USBD_CtlError>
  }
}
 8014384:	bf00      	nop
 8014386:	bf00      	nop
 8014388:	3710      	adds	r7, #16
 801438a:	46bd      	mov	sp, r7
 801438c:	bd80      	pop	{r7, pc}
	...

08014390 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014390:	b580      	push	{r7, lr}
 8014392:	b082      	sub	sp, #8
 8014394:	af00      	add	r7, sp, #0
 8014396:	6078      	str	r0, [r7, #4]
 8014398:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801439a:	683b      	ldr	r3, [r7, #0]
 801439c:	885b      	ldrh	r3, [r3, #2]
 801439e:	b2da      	uxtb	r2, r3
 80143a0:	4b41      	ldr	r3, [pc, #260]	; (80144a8 <USBD_SetConfig+0x118>)
 80143a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80143a4:	4b40      	ldr	r3, [pc, #256]	; (80144a8 <USBD_SetConfig+0x118>)
 80143a6:	781b      	ldrb	r3, [r3, #0]
 80143a8:	2b01      	cmp	r3, #1
 80143aa:	d904      	bls.n	80143b6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80143ac:	6839      	ldr	r1, [r7, #0]
 80143ae:	6878      	ldr	r0, [r7, #4]
 80143b0:	f000 f955 	bl	801465e <USBD_CtlError>
 80143b4:	e075      	b.n	80144a2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80143bc:	2b02      	cmp	r3, #2
 80143be:	d002      	beq.n	80143c6 <USBD_SetConfig+0x36>
 80143c0:	2b03      	cmp	r3, #3
 80143c2:	d023      	beq.n	801440c <USBD_SetConfig+0x7c>
 80143c4:	e062      	b.n	801448c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80143c6:	4b38      	ldr	r3, [pc, #224]	; (80144a8 <USBD_SetConfig+0x118>)
 80143c8:	781b      	ldrb	r3, [r3, #0]
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d01a      	beq.n	8014404 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80143ce:	4b36      	ldr	r3, [pc, #216]	; (80144a8 <USBD_SetConfig+0x118>)
 80143d0:	781b      	ldrb	r3, [r3, #0]
 80143d2:	461a      	mov	r2, r3
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	2203      	movs	r2, #3
 80143dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80143e0:	4b31      	ldr	r3, [pc, #196]	; (80144a8 <USBD_SetConfig+0x118>)
 80143e2:	781b      	ldrb	r3, [r3, #0]
 80143e4:	4619      	mov	r1, r3
 80143e6:	6878      	ldr	r0, [r7, #4]
 80143e8:	f7ff f9e8 	bl	80137bc <USBD_SetClassConfig>
 80143ec:	4603      	mov	r3, r0
 80143ee:	2b02      	cmp	r3, #2
 80143f0:	d104      	bne.n	80143fc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80143f2:	6839      	ldr	r1, [r7, #0]
 80143f4:	6878      	ldr	r0, [r7, #4]
 80143f6:	f000 f932 	bl	801465e <USBD_CtlError>
            return;
 80143fa:	e052      	b.n	80144a2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80143fc:	6878      	ldr	r0, [r7, #4]
 80143fe:	f000 f9d8 	bl	80147b2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8014402:	e04e      	b.n	80144a2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8014404:	6878      	ldr	r0, [r7, #4]
 8014406:	f000 f9d4 	bl	80147b2 <USBD_CtlSendStatus>
        break;
 801440a:	e04a      	b.n	80144a2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 801440c:	4b26      	ldr	r3, [pc, #152]	; (80144a8 <USBD_SetConfig+0x118>)
 801440e:	781b      	ldrb	r3, [r3, #0]
 8014410:	2b00      	cmp	r3, #0
 8014412:	d112      	bne.n	801443a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	2202      	movs	r2, #2
 8014418:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 801441c:	4b22      	ldr	r3, [pc, #136]	; (80144a8 <USBD_SetConfig+0x118>)
 801441e:	781b      	ldrb	r3, [r3, #0]
 8014420:	461a      	mov	r2, r3
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8014426:	4b20      	ldr	r3, [pc, #128]	; (80144a8 <USBD_SetConfig+0x118>)
 8014428:	781b      	ldrb	r3, [r3, #0]
 801442a:	4619      	mov	r1, r3
 801442c:	6878      	ldr	r0, [r7, #4]
 801442e:	f7ff f9e4 	bl	80137fa <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8014432:	6878      	ldr	r0, [r7, #4]
 8014434:	f000 f9bd 	bl	80147b2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8014438:	e033      	b.n	80144a2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 801443a:	4b1b      	ldr	r3, [pc, #108]	; (80144a8 <USBD_SetConfig+0x118>)
 801443c:	781b      	ldrb	r3, [r3, #0]
 801443e:	461a      	mov	r2, r3
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	685b      	ldr	r3, [r3, #4]
 8014444:	429a      	cmp	r2, r3
 8014446:	d01d      	beq.n	8014484 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	685b      	ldr	r3, [r3, #4]
 801444c:	b2db      	uxtb	r3, r3
 801444e:	4619      	mov	r1, r3
 8014450:	6878      	ldr	r0, [r7, #4]
 8014452:	f7ff f9d2 	bl	80137fa <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8014456:	4b14      	ldr	r3, [pc, #80]	; (80144a8 <USBD_SetConfig+0x118>)
 8014458:	781b      	ldrb	r3, [r3, #0]
 801445a:	461a      	mov	r2, r3
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8014460:	4b11      	ldr	r3, [pc, #68]	; (80144a8 <USBD_SetConfig+0x118>)
 8014462:	781b      	ldrb	r3, [r3, #0]
 8014464:	4619      	mov	r1, r3
 8014466:	6878      	ldr	r0, [r7, #4]
 8014468:	f7ff f9a8 	bl	80137bc <USBD_SetClassConfig>
 801446c:	4603      	mov	r3, r0
 801446e:	2b02      	cmp	r3, #2
 8014470:	d104      	bne.n	801447c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8014472:	6839      	ldr	r1, [r7, #0]
 8014474:	6878      	ldr	r0, [r7, #4]
 8014476:	f000 f8f2 	bl	801465e <USBD_CtlError>
            return;
 801447a:	e012      	b.n	80144a2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 801447c:	6878      	ldr	r0, [r7, #4]
 801447e:	f000 f998 	bl	80147b2 <USBD_CtlSendStatus>
        break;
 8014482:	e00e      	b.n	80144a2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8014484:	6878      	ldr	r0, [r7, #4]
 8014486:	f000 f994 	bl	80147b2 <USBD_CtlSendStatus>
        break;
 801448a:	e00a      	b.n	80144a2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 801448c:	6839      	ldr	r1, [r7, #0]
 801448e:	6878      	ldr	r0, [r7, #4]
 8014490:	f000 f8e5 	bl	801465e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8014494:	4b04      	ldr	r3, [pc, #16]	; (80144a8 <USBD_SetConfig+0x118>)
 8014496:	781b      	ldrb	r3, [r3, #0]
 8014498:	4619      	mov	r1, r3
 801449a:	6878      	ldr	r0, [r7, #4]
 801449c:	f7ff f9ad 	bl	80137fa <USBD_ClrClassConfig>
        break;
 80144a0:	bf00      	nop
    }
  }
}
 80144a2:	3708      	adds	r7, #8
 80144a4:	46bd      	mov	sp, r7
 80144a6:	bd80      	pop	{r7, pc}
 80144a8:	200001c4 	.word	0x200001c4

080144ac <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80144ac:	b580      	push	{r7, lr}
 80144ae:	b082      	sub	sp, #8
 80144b0:	af00      	add	r7, sp, #0
 80144b2:	6078      	str	r0, [r7, #4]
 80144b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80144b6:	683b      	ldr	r3, [r7, #0]
 80144b8:	88db      	ldrh	r3, [r3, #6]
 80144ba:	2b01      	cmp	r3, #1
 80144bc:	d004      	beq.n	80144c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80144be:	6839      	ldr	r1, [r7, #0]
 80144c0:	6878      	ldr	r0, [r7, #4]
 80144c2:	f000 f8cc 	bl	801465e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80144c6:	e022      	b.n	801450e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80144ce:	2b02      	cmp	r3, #2
 80144d0:	dc02      	bgt.n	80144d8 <USBD_GetConfig+0x2c>
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	dc03      	bgt.n	80144de <USBD_GetConfig+0x32>
 80144d6:	e015      	b.n	8014504 <USBD_GetConfig+0x58>
 80144d8:	2b03      	cmp	r3, #3
 80144da:	d00b      	beq.n	80144f4 <USBD_GetConfig+0x48>
 80144dc:	e012      	b.n	8014504 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	2200      	movs	r2, #0
 80144e2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	3308      	adds	r3, #8
 80144e8:	2201      	movs	r2, #1
 80144ea:	4619      	mov	r1, r3
 80144ec:	6878      	ldr	r0, [r7, #4]
 80144ee:	f000 f920 	bl	8014732 <USBD_CtlSendData>
        break;
 80144f2:	e00c      	b.n	801450e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	3304      	adds	r3, #4
 80144f8:	2201      	movs	r2, #1
 80144fa:	4619      	mov	r1, r3
 80144fc:	6878      	ldr	r0, [r7, #4]
 80144fe:	f000 f918 	bl	8014732 <USBD_CtlSendData>
        break;
 8014502:	e004      	b.n	801450e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8014504:	6839      	ldr	r1, [r7, #0]
 8014506:	6878      	ldr	r0, [r7, #4]
 8014508:	f000 f8a9 	bl	801465e <USBD_CtlError>
        break;
 801450c:	bf00      	nop
}
 801450e:	bf00      	nop
 8014510:	3708      	adds	r7, #8
 8014512:	46bd      	mov	sp, r7
 8014514:	bd80      	pop	{r7, pc}

08014516 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014516:	b580      	push	{r7, lr}
 8014518:	b082      	sub	sp, #8
 801451a:	af00      	add	r7, sp, #0
 801451c:	6078      	str	r0, [r7, #4]
 801451e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014526:	3b01      	subs	r3, #1
 8014528:	2b02      	cmp	r3, #2
 801452a:	d81e      	bhi.n	801456a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801452c:	683b      	ldr	r3, [r7, #0]
 801452e:	88db      	ldrh	r3, [r3, #6]
 8014530:	2b02      	cmp	r3, #2
 8014532:	d004      	beq.n	801453e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8014534:	6839      	ldr	r1, [r7, #0]
 8014536:	6878      	ldr	r0, [r7, #4]
 8014538:	f000 f891 	bl	801465e <USBD_CtlError>
        break;
 801453c:	e01a      	b.n	8014574 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	2201      	movs	r2, #1
 8014542:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801454a:	2b00      	cmp	r3, #0
 801454c:	d005      	beq.n	801455a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	68db      	ldr	r3, [r3, #12]
 8014552:	f043 0202 	orr.w	r2, r3, #2
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	330c      	adds	r3, #12
 801455e:	2202      	movs	r2, #2
 8014560:	4619      	mov	r1, r3
 8014562:	6878      	ldr	r0, [r7, #4]
 8014564:	f000 f8e5 	bl	8014732 <USBD_CtlSendData>
      break;
 8014568:	e004      	b.n	8014574 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 801456a:	6839      	ldr	r1, [r7, #0]
 801456c:	6878      	ldr	r0, [r7, #4]
 801456e:	f000 f876 	bl	801465e <USBD_CtlError>
      break;
 8014572:	bf00      	nop
  }
}
 8014574:	bf00      	nop
 8014576:	3708      	adds	r7, #8
 8014578:	46bd      	mov	sp, r7
 801457a:	bd80      	pop	{r7, pc}

0801457c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801457c:	b580      	push	{r7, lr}
 801457e:	b082      	sub	sp, #8
 8014580:	af00      	add	r7, sp, #0
 8014582:	6078      	str	r0, [r7, #4]
 8014584:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014586:	683b      	ldr	r3, [r7, #0]
 8014588:	885b      	ldrh	r3, [r3, #2]
 801458a:	2b01      	cmp	r3, #1
 801458c:	d106      	bne.n	801459c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	2201      	movs	r2, #1
 8014592:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8014596:	6878      	ldr	r0, [r7, #4]
 8014598:	f000 f90b 	bl	80147b2 <USBD_CtlSendStatus>
  }
}
 801459c:	bf00      	nop
 801459e:	3708      	adds	r7, #8
 80145a0:	46bd      	mov	sp, r7
 80145a2:	bd80      	pop	{r7, pc}

080145a4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80145a4:	b580      	push	{r7, lr}
 80145a6:	b082      	sub	sp, #8
 80145a8:	af00      	add	r7, sp, #0
 80145aa:	6078      	str	r0, [r7, #4]
 80145ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80145b4:	3b01      	subs	r3, #1
 80145b6:	2b02      	cmp	r3, #2
 80145b8:	d80b      	bhi.n	80145d2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80145ba:	683b      	ldr	r3, [r7, #0]
 80145bc:	885b      	ldrh	r3, [r3, #2]
 80145be:	2b01      	cmp	r3, #1
 80145c0:	d10c      	bne.n	80145dc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	2200      	movs	r2, #0
 80145c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80145ca:	6878      	ldr	r0, [r7, #4]
 80145cc:	f000 f8f1 	bl	80147b2 <USBD_CtlSendStatus>
      }
      break;
 80145d0:	e004      	b.n	80145dc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80145d2:	6839      	ldr	r1, [r7, #0]
 80145d4:	6878      	ldr	r0, [r7, #4]
 80145d6:	f000 f842 	bl	801465e <USBD_CtlError>
      break;
 80145da:	e000      	b.n	80145de <USBD_ClrFeature+0x3a>
      break;
 80145dc:	bf00      	nop
  }
}
 80145de:	bf00      	nop
 80145e0:	3708      	adds	r7, #8
 80145e2:	46bd      	mov	sp, r7
 80145e4:	bd80      	pop	{r7, pc}

080145e6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80145e6:	b480      	push	{r7}
 80145e8:	b083      	sub	sp, #12
 80145ea:	af00      	add	r7, sp, #0
 80145ec:	6078      	str	r0, [r7, #4]
 80145ee:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80145f0:	683b      	ldr	r3, [r7, #0]
 80145f2:	781a      	ldrb	r2, [r3, #0]
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80145f8:	683b      	ldr	r3, [r7, #0]
 80145fa:	785a      	ldrb	r2, [r3, #1]
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8014600:	683b      	ldr	r3, [r7, #0]
 8014602:	3302      	adds	r3, #2
 8014604:	781b      	ldrb	r3, [r3, #0]
 8014606:	b29a      	uxth	r2, r3
 8014608:	683b      	ldr	r3, [r7, #0]
 801460a:	3303      	adds	r3, #3
 801460c:	781b      	ldrb	r3, [r3, #0]
 801460e:	b29b      	uxth	r3, r3
 8014610:	021b      	lsls	r3, r3, #8
 8014612:	b29b      	uxth	r3, r3
 8014614:	4413      	add	r3, r2
 8014616:	b29a      	uxth	r2, r3
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 801461c:	683b      	ldr	r3, [r7, #0]
 801461e:	3304      	adds	r3, #4
 8014620:	781b      	ldrb	r3, [r3, #0]
 8014622:	b29a      	uxth	r2, r3
 8014624:	683b      	ldr	r3, [r7, #0]
 8014626:	3305      	adds	r3, #5
 8014628:	781b      	ldrb	r3, [r3, #0]
 801462a:	b29b      	uxth	r3, r3
 801462c:	021b      	lsls	r3, r3, #8
 801462e:	b29b      	uxth	r3, r3
 8014630:	4413      	add	r3, r2
 8014632:	b29a      	uxth	r2, r3
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8014638:	683b      	ldr	r3, [r7, #0]
 801463a:	3306      	adds	r3, #6
 801463c:	781b      	ldrb	r3, [r3, #0]
 801463e:	b29a      	uxth	r2, r3
 8014640:	683b      	ldr	r3, [r7, #0]
 8014642:	3307      	adds	r3, #7
 8014644:	781b      	ldrb	r3, [r3, #0]
 8014646:	b29b      	uxth	r3, r3
 8014648:	021b      	lsls	r3, r3, #8
 801464a:	b29b      	uxth	r3, r3
 801464c:	4413      	add	r3, r2
 801464e:	b29a      	uxth	r2, r3
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	80da      	strh	r2, [r3, #6]

}
 8014654:	bf00      	nop
 8014656:	370c      	adds	r7, #12
 8014658:	46bd      	mov	sp, r7
 801465a:	bc80      	pop	{r7}
 801465c:	4770      	bx	lr

0801465e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 801465e:	b580      	push	{r7, lr}
 8014660:	b082      	sub	sp, #8
 8014662:	af00      	add	r7, sp, #0
 8014664:	6078      	str	r0, [r7, #4]
 8014666:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8014668:	2180      	movs	r1, #128	; 0x80
 801466a:	6878      	ldr	r0, [r7, #4]
 801466c:	f000 fbf5 	bl	8014e5a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8014670:	2100      	movs	r1, #0
 8014672:	6878      	ldr	r0, [r7, #4]
 8014674:	f000 fbf1 	bl	8014e5a <USBD_LL_StallEP>
}
 8014678:	bf00      	nop
 801467a:	3708      	adds	r7, #8
 801467c:	46bd      	mov	sp, r7
 801467e:	bd80      	pop	{r7, pc}

08014680 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8014680:	b580      	push	{r7, lr}
 8014682:	b086      	sub	sp, #24
 8014684:	af00      	add	r7, sp, #0
 8014686:	60f8      	str	r0, [r7, #12]
 8014688:	60b9      	str	r1, [r7, #8]
 801468a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801468c:	2300      	movs	r3, #0
 801468e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8014690:	68fb      	ldr	r3, [r7, #12]
 8014692:	2b00      	cmp	r3, #0
 8014694:	d032      	beq.n	80146fc <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8014696:	68f8      	ldr	r0, [r7, #12]
 8014698:	f000 f834 	bl	8014704 <USBD_GetLen>
 801469c:	4603      	mov	r3, r0
 801469e:	3301      	adds	r3, #1
 80146a0:	b29b      	uxth	r3, r3
 80146a2:	005b      	lsls	r3, r3, #1
 80146a4:	b29a      	uxth	r2, r3
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80146aa:	7dfb      	ldrb	r3, [r7, #23]
 80146ac:	1c5a      	adds	r2, r3, #1
 80146ae:	75fa      	strb	r2, [r7, #23]
 80146b0:	461a      	mov	r2, r3
 80146b2:	68bb      	ldr	r3, [r7, #8]
 80146b4:	4413      	add	r3, r2
 80146b6:	687a      	ldr	r2, [r7, #4]
 80146b8:	7812      	ldrb	r2, [r2, #0]
 80146ba:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80146bc:	7dfb      	ldrb	r3, [r7, #23]
 80146be:	1c5a      	adds	r2, r3, #1
 80146c0:	75fa      	strb	r2, [r7, #23]
 80146c2:	461a      	mov	r2, r3
 80146c4:	68bb      	ldr	r3, [r7, #8]
 80146c6:	4413      	add	r3, r2
 80146c8:	2203      	movs	r2, #3
 80146ca:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80146cc:	e012      	b.n	80146f4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80146ce:	68fb      	ldr	r3, [r7, #12]
 80146d0:	1c5a      	adds	r2, r3, #1
 80146d2:	60fa      	str	r2, [r7, #12]
 80146d4:	7dfa      	ldrb	r2, [r7, #23]
 80146d6:	1c51      	adds	r1, r2, #1
 80146d8:	75f9      	strb	r1, [r7, #23]
 80146da:	4611      	mov	r1, r2
 80146dc:	68ba      	ldr	r2, [r7, #8]
 80146de:	440a      	add	r2, r1
 80146e0:	781b      	ldrb	r3, [r3, #0]
 80146e2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80146e4:	7dfb      	ldrb	r3, [r7, #23]
 80146e6:	1c5a      	adds	r2, r3, #1
 80146e8:	75fa      	strb	r2, [r7, #23]
 80146ea:	461a      	mov	r2, r3
 80146ec:	68bb      	ldr	r3, [r7, #8]
 80146ee:	4413      	add	r3, r2
 80146f0:	2200      	movs	r2, #0
 80146f2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80146f4:	68fb      	ldr	r3, [r7, #12]
 80146f6:	781b      	ldrb	r3, [r3, #0]
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d1e8      	bne.n	80146ce <USBD_GetString+0x4e>
    }
  }
}
 80146fc:	bf00      	nop
 80146fe:	3718      	adds	r7, #24
 8014700:	46bd      	mov	sp, r7
 8014702:	bd80      	pop	{r7, pc}

08014704 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8014704:	b480      	push	{r7}
 8014706:	b085      	sub	sp, #20
 8014708:	af00      	add	r7, sp, #0
 801470a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801470c:	2300      	movs	r3, #0
 801470e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8014710:	e005      	b.n	801471e <USBD_GetLen+0x1a>
  {
    len++;
 8014712:	7bfb      	ldrb	r3, [r7, #15]
 8014714:	3301      	adds	r3, #1
 8014716:	73fb      	strb	r3, [r7, #15]
    buf++;
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	3301      	adds	r3, #1
 801471c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	781b      	ldrb	r3, [r3, #0]
 8014722:	2b00      	cmp	r3, #0
 8014724:	d1f5      	bne.n	8014712 <USBD_GetLen+0xe>
  }

  return len;
 8014726:	7bfb      	ldrb	r3, [r7, #15]
}
 8014728:	4618      	mov	r0, r3
 801472a:	3714      	adds	r7, #20
 801472c:	46bd      	mov	sp, r7
 801472e:	bc80      	pop	{r7}
 8014730:	4770      	bx	lr

08014732 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8014732:	b580      	push	{r7, lr}
 8014734:	b084      	sub	sp, #16
 8014736:	af00      	add	r7, sp, #0
 8014738:	60f8      	str	r0, [r7, #12]
 801473a:	60b9      	str	r1, [r7, #8]
 801473c:	4613      	mov	r3, r2
 801473e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014740:	68fb      	ldr	r3, [r7, #12]
 8014742:	2202      	movs	r2, #2
 8014744:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8014748:	88fa      	ldrh	r2, [r7, #6]
 801474a:	68fb      	ldr	r3, [r7, #12]
 801474c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 801474e:	88fa      	ldrh	r2, [r7, #6]
 8014750:	68fb      	ldr	r3, [r7, #12]
 8014752:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014754:	88fb      	ldrh	r3, [r7, #6]
 8014756:	68ba      	ldr	r2, [r7, #8]
 8014758:	2100      	movs	r1, #0
 801475a:	68f8      	ldr	r0, [r7, #12]
 801475c:	f000 fc06 	bl	8014f6c <USBD_LL_Transmit>

  return USBD_OK;
 8014760:	2300      	movs	r3, #0
}
 8014762:	4618      	mov	r0, r3
 8014764:	3710      	adds	r7, #16
 8014766:	46bd      	mov	sp, r7
 8014768:	bd80      	pop	{r7, pc}

0801476a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 801476a:	b580      	push	{r7, lr}
 801476c:	b084      	sub	sp, #16
 801476e:	af00      	add	r7, sp, #0
 8014770:	60f8      	str	r0, [r7, #12]
 8014772:	60b9      	str	r1, [r7, #8]
 8014774:	4613      	mov	r3, r2
 8014776:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014778:	88fb      	ldrh	r3, [r7, #6]
 801477a:	68ba      	ldr	r2, [r7, #8]
 801477c:	2100      	movs	r1, #0
 801477e:	68f8      	ldr	r0, [r7, #12]
 8014780:	f000 fbf4 	bl	8014f6c <USBD_LL_Transmit>

  return USBD_OK;
 8014784:	2300      	movs	r3, #0
}
 8014786:	4618      	mov	r0, r3
 8014788:	3710      	adds	r7, #16
 801478a:	46bd      	mov	sp, r7
 801478c:	bd80      	pop	{r7, pc}

0801478e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801478e:	b580      	push	{r7, lr}
 8014790:	b084      	sub	sp, #16
 8014792:	af00      	add	r7, sp, #0
 8014794:	60f8      	str	r0, [r7, #12]
 8014796:	60b9      	str	r1, [r7, #8]
 8014798:	4613      	mov	r3, r2
 801479a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801479c:	88fb      	ldrh	r3, [r7, #6]
 801479e:	68ba      	ldr	r2, [r7, #8]
 80147a0:	2100      	movs	r1, #0
 80147a2:	68f8      	ldr	r0, [r7, #12]
 80147a4:	f000 fc05 	bl	8014fb2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80147a8:	2300      	movs	r3, #0
}
 80147aa:	4618      	mov	r0, r3
 80147ac:	3710      	adds	r7, #16
 80147ae:	46bd      	mov	sp, r7
 80147b0:	bd80      	pop	{r7, pc}

080147b2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80147b2:	b580      	push	{r7, lr}
 80147b4:	b082      	sub	sp, #8
 80147b6:	af00      	add	r7, sp, #0
 80147b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	2204      	movs	r2, #4
 80147be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80147c2:	2300      	movs	r3, #0
 80147c4:	2200      	movs	r2, #0
 80147c6:	2100      	movs	r1, #0
 80147c8:	6878      	ldr	r0, [r7, #4]
 80147ca:	f000 fbcf 	bl	8014f6c <USBD_LL_Transmit>

  return USBD_OK;
 80147ce:	2300      	movs	r3, #0
}
 80147d0:	4618      	mov	r0, r3
 80147d2:	3708      	adds	r7, #8
 80147d4:	46bd      	mov	sp, r7
 80147d6:	bd80      	pop	{r7, pc}

080147d8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80147d8:	b580      	push	{r7, lr}
 80147da:	b082      	sub	sp, #8
 80147dc:	af00      	add	r7, sp, #0
 80147de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	2205      	movs	r2, #5
 80147e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80147e8:	2300      	movs	r3, #0
 80147ea:	2200      	movs	r2, #0
 80147ec:	2100      	movs	r1, #0
 80147ee:	6878      	ldr	r0, [r7, #4]
 80147f0:	f000 fbdf 	bl	8014fb2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80147f4:	2300      	movs	r3, #0
}
 80147f6:	4618      	mov	r0, r3
 80147f8:	3708      	adds	r7, #8
 80147fa:	46bd      	mov	sp, r7
 80147fc:	bd80      	pop	{r7, pc}
	...

08014800 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8014800:	b580      	push	{r7, lr}
 8014802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8014804:	2200      	movs	r2, #0
 8014806:	4912      	ldr	r1, [pc, #72]	; (8014850 <MX_USB_DEVICE_Init+0x50>)
 8014808:	4812      	ldr	r0, [pc, #72]	; (8014854 <MX_USB_DEVICE_Init+0x54>)
 801480a:	f7fe ff7d 	bl	8013708 <USBD_Init>
 801480e:	4603      	mov	r3, r0
 8014810:	2b00      	cmp	r3, #0
 8014812:	d001      	beq.n	8014818 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8014814:	f7f8 fbda 	bl	800cfcc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8014818:	490f      	ldr	r1, [pc, #60]	; (8014858 <MX_USB_DEVICE_Init+0x58>)
 801481a:	480e      	ldr	r0, [pc, #56]	; (8014854 <MX_USB_DEVICE_Init+0x54>)
 801481c:	f7fe ff9f 	bl	801375e <USBD_RegisterClass>
 8014820:	4603      	mov	r3, r0
 8014822:	2b00      	cmp	r3, #0
 8014824:	d001      	beq.n	801482a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8014826:	f7f8 fbd1 	bl	800cfcc <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 801482a:	490c      	ldr	r1, [pc, #48]	; (801485c <MX_USB_DEVICE_Init+0x5c>)
 801482c:	4809      	ldr	r0, [pc, #36]	; (8014854 <MX_USB_DEVICE_Init+0x54>)
 801482e:	f7fd ff4b 	bl	80126c8 <USBD_MSC_RegisterStorage>
 8014832:	4603      	mov	r3, r0
 8014834:	2b00      	cmp	r3, #0
 8014836:	d001      	beq.n	801483c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8014838:	f7f8 fbc8 	bl	800cfcc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801483c:	4805      	ldr	r0, [pc, #20]	; (8014854 <MX_USB_DEVICE_Init+0x54>)
 801483e:	f7fe ffa7 	bl	8013790 <USBD_Start>
 8014842:	4603      	mov	r3, r0
 8014844:	2b00      	cmp	r3, #0
 8014846:	d001      	beq.n	801484c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8014848:	f7f8 fbc0 	bl	800cfcc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801484c:	bf00      	nop
 801484e:	bd80      	pop	{r7, pc}
 8014850:	200000f0 	.word	0x200000f0
 8014854:	200001c8 	.word	0x200001c8
 8014858:	2000004c 	.word	0x2000004c
 801485c:	20000140 	.word	0x20000140

08014860 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014860:	b480      	push	{r7}
 8014862:	b083      	sub	sp, #12
 8014864:	af00      	add	r7, sp, #0
 8014866:	4603      	mov	r3, r0
 8014868:	6039      	str	r1, [r7, #0]
 801486a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801486c:	683b      	ldr	r3, [r7, #0]
 801486e:	2212      	movs	r2, #18
 8014870:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8014872:	4b03      	ldr	r3, [pc, #12]	; (8014880 <USBD_FS_DeviceDescriptor+0x20>)
}
 8014874:	4618      	mov	r0, r3
 8014876:	370c      	adds	r7, #12
 8014878:	46bd      	mov	sp, r7
 801487a:	bc80      	pop	{r7}
 801487c:	4770      	bx	lr
 801487e:	bf00      	nop
 8014880:	2000010c 	.word	0x2000010c

08014884 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014884:	b480      	push	{r7}
 8014886:	b083      	sub	sp, #12
 8014888:	af00      	add	r7, sp, #0
 801488a:	4603      	mov	r3, r0
 801488c:	6039      	str	r1, [r7, #0]
 801488e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8014890:	683b      	ldr	r3, [r7, #0]
 8014892:	2204      	movs	r2, #4
 8014894:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8014896:	4b03      	ldr	r3, [pc, #12]	; (80148a4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8014898:	4618      	mov	r0, r3
 801489a:	370c      	adds	r7, #12
 801489c:	46bd      	mov	sp, r7
 801489e:	bc80      	pop	{r7}
 80148a0:	4770      	bx	lr
 80148a2:	bf00      	nop
 80148a4:	20000120 	.word	0x20000120

080148a8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80148a8:	b580      	push	{r7, lr}
 80148aa:	b082      	sub	sp, #8
 80148ac:	af00      	add	r7, sp, #0
 80148ae:	4603      	mov	r3, r0
 80148b0:	6039      	str	r1, [r7, #0]
 80148b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80148b4:	79fb      	ldrb	r3, [r7, #7]
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d105      	bne.n	80148c6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80148ba:	683a      	ldr	r2, [r7, #0]
 80148bc:	4907      	ldr	r1, [pc, #28]	; (80148dc <USBD_FS_ProductStrDescriptor+0x34>)
 80148be:	4808      	ldr	r0, [pc, #32]	; (80148e0 <USBD_FS_ProductStrDescriptor+0x38>)
 80148c0:	f7ff fede 	bl	8014680 <USBD_GetString>
 80148c4:	e004      	b.n	80148d0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80148c6:	683a      	ldr	r2, [r7, #0]
 80148c8:	4904      	ldr	r1, [pc, #16]	; (80148dc <USBD_FS_ProductStrDescriptor+0x34>)
 80148ca:	4805      	ldr	r0, [pc, #20]	; (80148e0 <USBD_FS_ProductStrDescriptor+0x38>)
 80148cc:	f7ff fed8 	bl	8014680 <USBD_GetString>
  }
  return USBD_StrDesc;
 80148d0:	4b02      	ldr	r3, [pc, #8]	; (80148dc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80148d2:	4618      	mov	r0, r3
 80148d4:	3708      	adds	r7, #8
 80148d6:	46bd      	mov	sp, r7
 80148d8:	bd80      	pop	{r7, pc}
 80148da:	bf00      	nop
 80148dc:	2000048c 	.word	0x2000048c
 80148e0:	08015128 	.word	0x08015128

080148e4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80148e4:	b580      	push	{r7, lr}
 80148e6:	b082      	sub	sp, #8
 80148e8:	af00      	add	r7, sp, #0
 80148ea:	4603      	mov	r3, r0
 80148ec:	6039      	str	r1, [r7, #0]
 80148ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80148f0:	683a      	ldr	r2, [r7, #0]
 80148f2:	4904      	ldr	r1, [pc, #16]	; (8014904 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80148f4:	4804      	ldr	r0, [pc, #16]	; (8014908 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80148f6:	f7ff fec3 	bl	8014680 <USBD_GetString>
  return USBD_StrDesc;
 80148fa:	4b02      	ldr	r3, [pc, #8]	; (8014904 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80148fc:	4618      	mov	r0, r3
 80148fe:	3708      	adds	r7, #8
 8014900:	46bd      	mov	sp, r7
 8014902:	bd80      	pop	{r7, pc}
 8014904:	2000048c 	.word	0x2000048c
 8014908:	0801513c 	.word	0x0801513c

0801490c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801490c:	b580      	push	{r7, lr}
 801490e:	b082      	sub	sp, #8
 8014910:	af00      	add	r7, sp, #0
 8014912:	4603      	mov	r3, r0
 8014914:	6039      	str	r1, [r7, #0]
 8014916:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8014918:	683b      	ldr	r3, [r7, #0]
 801491a:	221a      	movs	r2, #26
 801491c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801491e:	f000 f843 	bl	80149a8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8014922:	4b02      	ldr	r3, [pc, #8]	; (801492c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8014924:	4618      	mov	r0, r3
 8014926:	3708      	adds	r7, #8
 8014928:	46bd      	mov	sp, r7
 801492a:	bd80      	pop	{r7, pc}
 801492c:	20000124 	.word	0x20000124

08014930 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014930:	b580      	push	{r7, lr}
 8014932:	b082      	sub	sp, #8
 8014934:	af00      	add	r7, sp, #0
 8014936:	4603      	mov	r3, r0
 8014938:	6039      	str	r1, [r7, #0]
 801493a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801493c:	79fb      	ldrb	r3, [r7, #7]
 801493e:	2b00      	cmp	r3, #0
 8014940:	d105      	bne.n	801494e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8014942:	683a      	ldr	r2, [r7, #0]
 8014944:	4907      	ldr	r1, [pc, #28]	; (8014964 <USBD_FS_ConfigStrDescriptor+0x34>)
 8014946:	4808      	ldr	r0, [pc, #32]	; (8014968 <USBD_FS_ConfigStrDescriptor+0x38>)
 8014948:	f7ff fe9a 	bl	8014680 <USBD_GetString>
 801494c:	e004      	b.n	8014958 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801494e:	683a      	ldr	r2, [r7, #0]
 8014950:	4904      	ldr	r1, [pc, #16]	; (8014964 <USBD_FS_ConfigStrDescriptor+0x34>)
 8014952:	4805      	ldr	r0, [pc, #20]	; (8014968 <USBD_FS_ConfigStrDescriptor+0x38>)
 8014954:	f7ff fe94 	bl	8014680 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014958:	4b02      	ldr	r3, [pc, #8]	; (8014964 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801495a:	4618      	mov	r0, r3
 801495c:	3708      	adds	r7, #8
 801495e:	46bd      	mov	sp, r7
 8014960:	bd80      	pop	{r7, pc}
 8014962:	bf00      	nop
 8014964:	2000048c 	.word	0x2000048c
 8014968:	08015150 	.word	0x08015150

0801496c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801496c:	b580      	push	{r7, lr}
 801496e:	b082      	sub	sp, #8
 8014970:	af00      	add	r7, sp, #0
 8014972:	4603      	mov	r3, r0
 8014974:	6039      	str	r1, [r7, #0]
 8014976:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014978:	79fb      	ldrb	r3, [r7, #7]
 801497a:	2b00      	cmp	r3, #0
 801497c:	d105      	bne.n	801498a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801497e:	683a      	ldr	r2, [r7, #0]
 8014980:	4907      	ldr	r1, [pc, #28]	; (80149a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014982:	4808      	ldr	r0, [pc, #32]	; (80149a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014984:	f7ff fe7c 	bl	8014680 <USBD_GetString>
 8014988:	e004      	b.n	8014994 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801498a:	683a      	ldr	r2, [r7, #0]
 801498c:	4904      	ldr	r1, [pc, #16]	; (80149a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801498e:	4805      	ldr	r0, [pc, #20]	; (80149a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014990:	f7ff fe76 	bl	8014680 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014994:	4b02      	ldr	r3, [pc, #8]	; (80149a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8014996:	4618      	mov	r0, r3
 8014998:	3708      	adds	r7, #8
 801499a:	46bd      	mov	sp, r7
 801499c:	bd80      	pop	{r7, pc}
 801499e:	bf00      	nop
 80149a0:	2000048c 	.word	0x2000048c
 80149a4:	0801515c 	.word	0x0801515c

080149a8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80149a8:	b580      	push	{r7, lr}
 80149aa:	b084      	sub	sp, #16
 80149ac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80149ae:	4b0f      	ldr	r3, [pc, #60]	; (80149ec <Get_SerialNum+0x44>)
 80149b0:	681b      	ldr	r3, [r3, #0]
 80149b2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80149b4:	4b0e      	ldr	r3, [pc, #56]	; (80149f0 <Get_SerialNum+0x48>)
 80149b6:	681b      	ldr	r3, [r3, #0]
 80149b8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80149ba:	4b0e      	ldr	r3, [pc, #56]	; (80149f4 <Get_SerialNum+0x4c>)
 80149bc:	681b      	ldr	r3, [r3, #0]
 80149be:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80149c0:	68fa      	ldr	r2, [r7, #12]
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	4413      	add	r3, r2
 80149c6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d009      	beq.n	80149e2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80149ce:	2208      	movs	r2, #8
 80149d0:	4909      	ldr	r1, [pc, #36]	; (80149f8 <Get_SerialNum+0x50>)
 80149d2:	68f8      	ldr	r0, [r7, #12]
 80149d4:	f000 f814 	bl	8014a00 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80149d8:	2204      	movs	r2, #4
 80149da:	4908      	ldr	r1, [pc, #32]	; (80149fc <Get_SerialNum+0x54>)
 80149dc:	68b8      	ldr	r0, [r7, #8]
 80149de:	f000 f80f 	bl	8014a00 <IntToUnicode>
  }
}
 80149e2:	bf00      	nop
 80149e4:	3710      	adds	r7, #16
 80149e6:	46bd      	mov	sp, r7
 80149e8:	bd80      	pop	{r7, pc}
 80149ea:	bf00      	nop
 80149ec:	1ffff7e8 	.word	0x1ffff7e8
 80149f0:	1ffff7ec 	.word	0x1ffff7ec
 80149f4:	1ffff7f0 	.word	0x1ffff7f0
 80149f8:	20000126 	.word	0x20000126
 80149fc:	20000136 	.word	0x20000136

08014a00 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8014a00:	b480      	push	{r7}
 8014a02:	b087      	sub	sp, #28
 8014a04:	af00      	add	r7, sp, #0
 8014a06:	60f8      	str	r0, [r7, #12]
 8014a08:	60b9      	str	r1, [r7, #8]
 8014a0a:	4613      	mov	r3, r2
 8014a0c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8014a0e:	2300      	movs	r3, #0
 8014a10:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8014a12:	2300      	movs	r3, #0
 8014a14:	75fb      	strb	r3, [r7, #23]
 8014a16:	e027      	b.n	8014a68 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8014a18:	68fb      	ldr	r3, [r7, #12]
 8014a1a:	0f1b      	lsrs	r3, r3, #28
 8014a1c:	2b09      	cmp	r3, #9
 8014a1e:	d80b      	bhi.n	8014a38 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8014a20:	68fb      	ldr	r3, [r7, #12]
 8014a22:	0f1b      	lsrs	r3, r3, #28
 8014a24:	b2da      	uxtb	r2, r3
 8014a26:	7dfb      	ldrb	r3, [r7, #23]
 8014a28:	005b      	lsls	r3, r3, #1
 8014a2a:	4619      	mov	r1, r3
 8014a2c:	68bb      	ldr	r3, [r7, #8]
 8014a2e:	440b      	add	r3, r1
 8014a30:	3230      	adds	r2, #48	; 0x30
 8014a32:	b2d2      	uxtb	r2, r2
 8014a34:	701a      	strb	r2, [r3, #0]
 8014a36:	e00a      	b.n	8014a4e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8014a38:	68fb      	ldr	r3, [r7, #12]
 8014a3a:	0f1b      	lsrs	r3, r3, #28
 8014a3c:	b2da      	uxtb	r2, r3
 8014a3e:	7dfb      	ldrb	r3, [r7, #23]
 8014a40:	005b      	lsls	r3, r3, #1
 8014a42:	4619      	mov	r1, r3
 8014a44:	68bb      	ldr	r3, [r7, #8]
 8014a46:	440b      	add	r3, r1
 8014a48:	3237      	adds	r2, #55	; 0x37
 8014a4a:	b2d2      	uxtb	r2, r2
 8014a4c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8014a4e:	68fb      	ldr	r3, [r7, #12]
 8014a50:	011b      	lsls	r3, r3, #4
 8014a52:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8014a54:	7dfb      	ldrb	r3, [r7, #23]
 8014a56:	005b      	lsls	r3, r3, #1
 8014a58:	3301      	adds	r3, #1
 8014a5a:	68ba      	ldr	r2, [r7, #8]
 8014a5c:	4413      	add	r3, r2
 8014a5e:	2200      	movs	r2, #0
 8014a60:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8014a62:	7dfb      	ldrb	r3, [r7, #23]
 8014a64:	3301      	adds	r3, #1
 8014a66:	75fb      	strb	r3, [r7, #23]
 8014a68:	7dfa      	ldrb	r2, [r7, #23]
 8014a6a:	79fb      	ldrb	r3, [r7, #7]
 8014a6c:	429a      	cmp	r2, r3
 8014a6e:	d3d3      	bcc.n	8014a18 <IntToUnicode+0x18>
  }
}
 8014a70:	bf00      	nop
 8014a72:	bf00      	nop
 8014a74:	371c      	adds	r7, #28
 8014a76:	46bd      	mov	sp, r7
 8014a78:	bc80      	pop	{r7}
 8014a7a:	4770      	bx	lr

08014a7c <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8014a7c:	b480      	push	{r7}
 8014a7e:	b083      	sub	sp, #12
 8014a80:	af00      	add	r7, sp, #0
 8014a82:	4603      	mov	r3, r0
 8014a84:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8014a86:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8014a88:	4618      	mov	r0, r3
 8014a8a:	370c      	adds	r7, #12
 8014a8c:	46bd      	mov	sp, r7
 8014a8e:	bc80      	pop	{r7}
 8014a90:	4770      	bx	lr

08014a92 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8014a92:	b480      	push	{r7}
 8014a94:	b085      	sub	sp, #20
 8014a96:	af00      	add	r7, sp, #0
 8014a98:	4603      	mov	r3, r0
 8014a9a:	60b9      	str	r1, [r7, #8]
 8014a9c:	607a      	str	r2, [r7, #4]
 8014a9e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 8014aa0:	68bb      	ldr	r3, [r7, #8]
 8014aa2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8014aa6:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014aae:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8014ab0:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8014ab2:	4618      	mov	r0, r3
 8014ab4:	3714      	adds	r7, #20
 8014ab6:	46bd      	mov	sp, r7
 8014ab8:	bc80      	pop	{r7}
 8014aba:	4770      	bx	lr

08014abc <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8014abc:	b480      	push	{r7}
 8014abe:	b083      	sub	sp, #12
 8014ac0:	af00      	add	r7, sp, #0
 8014ac2:	4603      	mov	r3, r0
 8014ac4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8014ac6:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8014ac8:	4618      	mov	r0, r3
 8014aca:	370c      	adds	r7, #12
 8014acc:	46bd      	mov	sp, r7
 8014ace:	bc80      	pop	{r7}
 8014ad0:	4770      	bx	lr

08014ad2 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8014ad2:	b480      	push	{r7}
 8014ad4:	b083      	sub	sp, #12
 8014ad6:	af00      	add	r7, sp, #0
 8014ad8:	4603      	mov	r3, r0
 8014ada:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8014adc:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8014ade:	4618      	mov	r0, r3
 8014ae0:	370c      	adds	r7, #12
 8014ae2:	46bd      	mov	sp, r7
 8014ae4:	bc80      	pop	{r7}
 8014ae6:	4770      	bx	lr

08014ae8 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8014ae8:	b480      	push	{r7}
 8014aea:	b085      	sub	sp, #20
 8014aec:	af00      	add	r7, sp, #0
 8014aee:	60b9      	str	r1, [r7, #8]
 8014af0:	607a      	str	r2, [r7, #4]
 8014af2:	461a      	mov	r2, r3
 8014af4:	4603      	mov	r3, r0
 8014af6:	73fb      	strb	r3, [r7, #15]
 8014af8:	4613      	mov	r3, r2
 8014afa:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8014afc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8014afe:	4618      	mov	r0, r3
 8014b00:	3714      	adds	r7, #20
 8014b02:	46bd      	mov	sp, r7
 8014b04:	bc80      	pop	{r7}
 8014b06:	4770      	bx	lr

08014b08 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8014b08:	b480      	push	{r7}
 8014b0a:	b085      	sub	sp, #20
 8014b0c:	af00      	add	r7, sp, #0
 8014b0e:	60b9      	str	r1, [r7, #8]
 8014b10:	607a      	str	r2, [r7, #4]
 8014b12:	461a      	mov	r2, r3
 8014b14:	4603      	mov	r3, r0
 8014b16:	73fb      	strb	r3, [r7, #15]
 8014b18:	4613      	mov	r3, r2
 8014b1a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
 8014b1c:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 8014b1e:	4618      	mov	r0, r3
 8014b20:	3714      	adds	r7, #20
 8014b22:	46bd      	mov	sp, r7
 8014b24:	bc80      	pop	{r7}
 8014b26:	4770      	bx	lr

08014b28 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8014b28:	b480      	push	{r7}
 8014b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8014b2c:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8014b2e:	4618      	mov	r0, r3
 8014b30:	46bd      	mov	sp, r7
 8014b32:	bc80      	pop	{r7}
 8014b34:	4770      	bx	lr
	...

08014b38 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8014b38:	b580      	push	{r7, lr}
 8014b3a:	b084      	sub	sp, #16
 8014b3c:	af00      	add	r7, sp, #0
 8014b3e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	681b      	ldr	r3, [r3, #0]
 8014b44:	4a0d      	ldr	r2, [pc, #52]	; (8014b7c <HAL_PCD_MspInit+0x44>)
 8014b46:	4293      	cmp	r3, r2
 8014b48:	d113      	bne.n	8014b72 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8014b4a:	4b0d      	ldr	r3, [pc, #52]	; (8014b80 <HAL_PCD_MspInit+0x48>)
 8014b4c:	69db      	ldr	r3, [r3, #28]
 8014b4e:	4a0c      	ldr	r2, [pc, #48]	; (8014b80 <HAL_PCD_MspInit+0x48>)
 8014b50:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8014b54:	61d3      	str	r3, [r2, #28]
 8014b56:	4b0a      	ldr	r3, [pc, #40]	; (8014b80 <HAL_PCD_MspInit+0x48>)
 8014b58:	69db      	ldr	r3, [r3, #28]
 8014b5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014b5e:	60fb      	str	r3, [r7, #12]
 8014b60:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 1, 0);
 8014b62:	2200      	movs	r2, #0
 8014b64:	2101      	movs	r1, #1
 8014b66:	2014      	movs	r0, #20
 8014b68:	f7f8 fdb9 	bl	800d6de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8014b6c:	2014      	movs	r0, #20
 8014b6e:	f7f8 fdd2 	bl	800d716 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8014b72:	bf00      	nop
 8014b74:	3710      	adds	r7, #16
 8014b76:	46bd      	mov	sp, r7
 8014b78:	bd80      	pop	{r7, pc}
 8014b7a:	bf00      	nop
 8014b7c:	40005c00 	.word	0x40005c00
 8014b80:	40021000 	.word	0x40021000

08014b84 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014b84:	b580      	push	{r7, lr}
 8014b86:	b082      	sub	sp, #8
 8014b88:	af00      	add	r7, sp, #0
 8014b8a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8014b98:	4619      	mov	r1, r3
 8014b9a:	4610      	mov	r0, r2
 8014b9c:	f7fe fe40 	bl	8013820 <USBD_LL_SetupStage>
}
 8014ba0:	bf00      	nop
 8014ba2:	3708      	adds	r7, #8
 8014ba4:	46bd      	mov	sp, r7
 8014ba6:	bd80      	pop	{r7, pc}

08014ba8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014ba8:	b580      	push	{r7, lr}
 8014baa:	b082      	sub	sp, #8
 8014bac:	af00      	add	r7, sp, #0
 8014bae:	6078      	str	r0, [r7, #4]
 8014bb0:	460b      	mov	r3, r1
 8014bb2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8014bba:	78fa      	ldrb	r2, [r7, #3]
 8014bbc:	6879      	ldr	r1, [r7, #4]
 8014bbe:	4613      	mov	r3, r2
 8014bc0:	009b      	lsls	r3, r3, #2
 8014bc2:	4413      	add	r3, r2
 8014bc4:	00db      	lsls	r3, r3, #3
 8014bc6:	440b      	add	r3, r1
 8014bc8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8014bcc:	681a      	ldr	r2, [r3, #0]
 8014bce:	78fb      	ldrb	r3, [r7, #3]
 8014bd0:	4619      	mov	r1, r3
 8014bd2:	f7fe fe72 	bl	80138ba <USBD_LL_DataOutStage>
}
 8014bd6:	bf00      	nop
 8014bd8:	3708      	adds	r7, #8
 8014bda:	46bd      	mov	sp, r7
 8014bdc:	bd80      	pop	{r7, pc}

08014bde <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014bde:	b580      	push	{r7, lr}
 8014be0:	b082      	sub	sp, #8
 8014be2:	af00      	add	r7, sp, #0
 8014be4:	6078      	str	r0, [r7, #4]
 8014be6:	460b      	mov	r3, r1
 8014be8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8014bf0:	78fa      	ldrb	r2, [r7, #3]
 8014bf2:	6879      	ldr	r1, [r7, #4]
 8014bf4:	4613      	mov	r3, r2
 8014bf6:	009b      	lsls	r3, r3, #2
 8014bf8:	4413      	add	r3, r2
 8014bfa:	00db      	lsls	r3, r3, #3
 8014bfc:	440b      	add	r3, r1
 8014bfe:	333c      	adds	r3, #60	; 0x3c
 8014c00:	681a      	ldr	r2, [r3, #0]
 8014c02:	78fb      	ldrb	r3, [r7, #3]
 8014c04:	4619      	mov	r1, r3
 8014c06:	f7fe fec9 	bl	801399c <USBD_LL_DataInStage>
}
 8014c0a:	bf00      	nop
 8014c0c:	3708      	adds	r7, #8
 8014c0e:	46bd      	mov	sp, r7
 8014c10:	bd80      	pop	{r7, pc}

08014c12 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014c12:	b580      	push	{r7, lr}
 8014c14:	b082      	sub	sp, #8
 8014c16:	af00      	add	r7, sp, #0
 8014c18:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8014c20:	4618      	mov	r0, r3
 8014c22:	f7fe ffd9 	bl	8013bd8 <USBD_LL_SOF>
}
 8014c26:	bf00      	nop
 8014c28:	3708      	adds	r7, #8
 8014c2a:	46bd      	mov	sp, r7
 8014c2c:	bd80      	pop	{r7, pc}

08014c2e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014c2e:	b580      	push	{r7, lr}
 8014c30:	b084      	sub	sp, #16
 8014c32:	af00      	add	r7, sp, #0
 8014c34:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8014c36:	2301      	movs	r3, #1
 8014c38:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	689b      	ldr	r3, [r3, #8]
 8014c3e:	2b02      	cmp	r3, #2
 8014c40:	d001      	beq.n	8014c46 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8014c42:	f7f8 f9c3 	bl	800cfcc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8014c4c:	7bfa      	ldrb	r2, [r7, #15]
 8014c4e:	4611      	mov	r1, r2
 8014c50:	4618      	mov	r0, r3
 8014c52:	f7fe ff89 	bl	8013b68 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8014c5c:	4618      	mov	r0, r3
 8014c5e:	f7fe ff42 	bl	8013ae6 <USBD_LL_Reset>
}
 8014c62:	bf00      	nop
 8014c64:	3710      	adds	r7, #16
 8014c66:	46bd      	mov	sp, r7
 8014c68:	bd80      	pop	{r7, pc}
	...

08014c6c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014c6c:	b580      	push	{r7, lr}
 8014c6e:	b082      	sub	sp, #8
 8014c70:	af00      	add	r7, sp, #0
 8014c72:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8014c7a:	4618      	mov	r0, r3
 8014c7c:	f7fe ff83 	bl	8013b86 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	699b      	ldr	r3, [r3, #24]
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d005      	beq.n	8014c94 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014c88:	4b04      	ldr	r3, [pc, #16]	; (8014c9c <HAL_PCD_SuspendCallback+0x30>)
 8014c8a:	691b      	ldr	r3, [r3, #16]
 8014c8c:	4a03      	ldr	r2, [pc, #12]	; (8014c9c <HAL_PCD_SuspendCallback+0x30>)
 8014c8e:	f043 0306 	orr.w	r3, r3, #6
 8014c92:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8014c94:	bf00      	nop
 8014c96:	3708      	adds	r7, #8
 8014c98:	46bd      	mov	sp, r7
 8014c9a:	bd80      	pop	{r7, pc}
 8014c9c:	e000ed00 	.word	0xe000ed00

08014ca0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014ca0:	b580      	push	{r7, lr}
 8014ca2:	b082      	sub	sp, #8
 8014ca4:	af00      	add	r7, sp, #0
 8014ca6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8014cae:	4618      	mov	r0, r3
 8014cb0:	f7fe ff7d 	bl	8013bae <USBD_LL_Resume>
}
 8014cb4:	bf00      	nop
 8014cb6:	3708      	adds	r7, #8
 8014cb8:	46bd      	mov	sp, r7
 8014cba:	bd80      	pop	{r7, pc}

08014cbc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8014cbc:	b580      	push	{r7, lr}
 8014cbe:	b082      	sub	sp, #8
 8014cc0:	af00      	add	r7, sp, #0
 8014cc2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8014cc4:	4a23      	ldr	r2, [pc, #140]	; (8014d54 <USBD_LL_Init+0x98>)
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	4a21      	ldr	r2, [pc, #132]	; (8014d54 <USBD_LL_Init+0x98>)
 8014cd0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8014cd4:	4b1f      	ldr	r3, [pc, #124]	; (8014d54 <USBD_LL_Init+0x98>)
 8014cd6:	4a20      	ldr	r2, [pc, #128]	; (8014d58 <USBD_LL_Init+0x9c>)
 8014cd8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8014cda:	4b1e      	ldr	r3, [pc, #120]	; (8014d54 <USBD_LL_Init+0x98>)
 8014cdc:	2208      	movs	r2, #8
 8014cde:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8014ce0:	4b1c      	ldr	r3, [pc, #112]	; (8014d54 <USBD_LL_Init+0x98>)
 8014ce2:	2202      	movs	r2, #2
 8014ce4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8014ce6:	4b1b      	ldr	r3, [pc, #108]	; (8014d54 <USBD_LL_Init+0x98>)
 8014ce8:	2200      	movs	r2, #0
 8014cea:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8014cec:	4b19      	ldr	r3, [pc, #100]	; (8014d54 <USBD_LL_Init+0x98>)
 8014cee:	2200      	movs	r2, #0
 8014cf0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8014cf2:	4b18      	ldr	r3, [pc, #96]	; (8014d54 <USBD_LL_Init+0x98>)
 8014cf4:	2200      	movs	r2, #0
 8014cf6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8014cf8:	4816      	ldr	r0, [pc, #88]	; (8014d54 <USBD_LL_Init+0x98>)
 8014cfa:	f7f8 fd26 	bl	800d74a <HAL_PCD_Init>
 8014cfe:	4603      	mov	r3, r0
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	d001      	beq.n	8014d08 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8014d04:	f7f8 f962 	bl	800cfcc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8014d0e:	2318      	movs	r3, #24
 8014d10:	2200      	movs	r2, #0
 8014d12:	2100      	movs	r1, #0
 8014d14:	f7fa fa72 	bl	800f1fc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8014d1e:	2358      	movs	r3, #88	; 0x58
 8014d20:	2200      	movs	r2, #0
 8014d22:	2180      	movs	r1, #128	; 0x80
 8014d24:	f7fa fa6a 	bl	800f1fc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_MSC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x98);
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8014d2e:	2398      	movs	r3, #152	; 0x98
 8014d30:	2200      	movs	r2, #0
 8014d32:	2181      	movs	r1, #129	; 0x81
 8014d34:	f7fa fa62 	bl	800f1fc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0xD8);
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8014d3e:	23d8      	movs	r3, #216	; 0xd8
 8014d40:	2200      	movs	r2, #0
 8014d42:	2101      	movs	r1, #1
 8014d44:	f7fa fa5a 	bl	800f1fc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_MSC */
  return USBD_OK;
 8014d48:	2300      	movs	r3, #0
}
 8014d4a:	4618      	mov	r0, r3
 8014d4c:	3708      	adds	r7, #8
 8014d4e:	46bd      	mov	sp, r7
 8014d50:	bd80      	pop	{r7, pc}
 8014d52:	bf00      	nop
 8014d54:	2000068c 	.word	0x2000068c
 8014d58:	40005c00 	.word	0x40005c00

08014d5c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8014d5c:	b580      	push	{r7, lr}
 8014d5e:	b084      	sub	sp, #16
 8014d60:	af00      	add	r7, sp, #0
 8014d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014d64:	2300      	movs	r3, #0
 8014d66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014d68:	2300      	movs	r3, #0
 8014d6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014d72:	4618      	mov	r0, r3
 8014d74:	f7f8 fde8 	bl	800d948 <HAL_PCD_Start>
 8014d78:	4603      	mov	r3, r0
 8014d7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014d7c:	7bfb      	ldrb	r3, [r7, #15]
 8014d7e:	4618      	mov	r0, r3
 8014d80:	f000 f96e 	bl	8015060 <USBD_Get_USB_Status>
 8014d84:	4603      	mov	r3, r0
 8014d86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014d88:	7bbb      	ldrb	r3, [r7, #14]
}
 8014d8a:	4618      	mov	r0, r3
 8014d8c:	3710      	adds	r7, #16
 8014d8e:	46bd      	mov	sp, r7
 8014d90:	bd80      	pop	{r7, pc}

08014d92 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8014d92:	b580      	push	{r7, lr}
 8014d94:	b084      	sub	sp, #16
 8014d96:	af00      	add	r7, sp, #0
 8014d98:	6078      	str	r0, [r7, #4]
 8014d9a:	4608      	mov	r0, r1
 8014d9c:	4611      	mov	r1, r2
 8014d9e:	461a      	mov	r2, r3
 8014da0:	4603      	mov	r3, r0
 8014da2:	70fb      	strb	r3, [r7, #3]
 8014da4:	460b      	mov	r3, r1
 8014da6:	70bb      	strb	r3, [r7, #2]
 8014da8:	4613      	mov	r3, r2
 8014daa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014dac:	2300      	movs	r3, #0
 8014dae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014db0:	2300      	movs	r3, #0
 8014db2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8014dba:	78bb      	ldrb	r3, [r7, #2]
 8014dbc:	883a      	ldrh	r2, [r7, #0]
 8014dbe:	78f9      	ldrb	r1, [r7, #3]
 8014dc0:	f7f8 ff3d 	bl	800dc3e <HAL_PCD_EP_Open>
 8014dc4:	4603      	mov	r3, r0
 8014dc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014dc8:	7bfb      	ldrb	r3, [r7, #15]
 8014dca:	4618      	mov	r0, r3
 8014dcc:	f000 f948 	bl	8015060 <USBD_Get_USB_Status>
 8014dd0:	4603      	mov	r3, r0
 8014dd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014dd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8014dd6:	4618      	mov	r0, r3
 8014dd8:	3710      	adds	r7, #16
 8014dda:	46bd      	mov	sp, r7
 8014ddc:	bd80      	pop	{r7, pc}

08014dde <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014dde:	b580      	push	{r7, lr}
 8014de0:	b084      	sub	sp, #16
 8014de2:	af00      	add	r7, sp, #0
 8014de4:	6078      	str	r0, [r7, #4]
 8014de6:	460b      	mov	r3, r1
 8014de8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014dea:	2300      	movs	r3, #0
 8014dec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014dee:	2300      	movs	r3, #0
 8014df0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014df8:	78fa      	ldrb	r2, [r7, #3]
 8014dfa:	4611      	mov	r1, r2
 8014dfc:	4618      	mov	r0, r3
 8014dfe:	f7f8 ff7b 	bl	800dcf8 <HAL_PCD_EP_Close>
 8014e02:	4603      	mov	r3, r0
 8014e04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014e06:	7bfb      	ldrb	r3, [r7, #15]
 8014e08:	4618      	mov	r0, r3
 8014e0a:	f000 f929 	bl	8015060 <USBD_Get_USB_Status>
 8014e0e:	4603      	mov	r3, r0
 8014e10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014e12:	7bbb      	ldrb	r3, [r7, #14]
}
 8014e14:	4618      	mov	r0, r3
 8014e16:	3710      	adds	r7, #16
 8014e18:	46bd      	mov	sp, r7
 8014e1a:	bd80      	pop	{r7, pc}

08014e1c <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014e1c:	b580      	push	{r7, lr}
 8014e1e:	b084      	sub	sp, #16
 8014e20:	af00      	add	r7, sp, #0
 8014e22:	6078      	str	r0, [r7, #4]
 8014e24:	460b      	mov	r3, r1
 8014e26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014e28:	2300      	movs	r3, #0
 8014e2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014e2c:	2300      	movs	r3, #0
 8014e2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014e36:	78fa      	ldrb	r2, [r7, #3]
 8014e38:	4611      	mov	r1, r2
 8014e3a:	4618      	mov	r0, r3
 8014e3c:	f7f9 f8d7 	bl	800dfee <HAL_PCD_EP_Flush>
 8014e40:	4603      	mov	r3, r0
 8014e42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014e44:	7bfb      	ldrb	r3, [r7, #15]
 8014e46:	4618      	mov	r0, r3
 8014e48:	f000 f90a 	bl	8015060 <USBD_Get_USB_Status>
 8014e4c:	4603      	mov	r3, r0
 8014e4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014e50:	7bbb      	ldrb	r3, [r7, #14]
}
 8014e52:	4618      	mov	r0, r3
 8014e54:	3710      	adds	r7, #16
 8014e56:	46bd      	mov	sp, r7
 8014e58:	bd80      	pop	{r7, pc}

08014e5a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014e5a:	b580      	push	{r7, lr}
 8014e5c:	b084      	sub	sp, #16
 8014e5e:	af00      	add	r7, sp, #0
 8014e60:	6078      	str	r0, [r7, #4]
 8014e62:	460b      	mov	r3, r1
 8014e64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014e66:	2300      	movs	r3, #0
 8014e68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014e6a:	2300      	movs	r3, #0
 8014e6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014e74:	78fa      	ldrb	r2, [r7, #3]
 8014e76:	4611      	mov	r1, r2
 8014e78:	4618      	mov	r0, r3
 8014e7a:	f7f9 f804 	bl	800de86 <HAL_PCD_EP_SetStall>
 8014e7e:	4603      	mov	r3, r0
 8014e80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014e82:	7bfb      	ldrb	r3, [r7, #15]
 8014e84:	4618      	mov	r0, r3
 8014e86:	f000 f8eb 	bl	8015060 <USBD_Get_USB_Status>
 8014e8a:	4603      	mov	r3, r0
 8014e8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014e8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8014e90:	4618      	mov	r0, r3
 8014e92:	3710      	adds	r7, #16
 8014e94:	46bd      	mov	sp, r7
 8014e96:	bd80      	pop	{r7, pc}

08014e98 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014e98:	b580      	push	{r7, lr}
 8014e9a:	b084      	sub	sp, #16
 8014e9c:	af00      	add	r7, sp, #0
 8014e9e:	6078      	str	r0, [r7, #4]
 8014ea0:	460b      	mov	r3, r1
 8014ea2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014ea4:	2300      	movs	r3, #0
 8014ea6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014ea8:	2300      	movs	r3, #0
 8014eaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014eb2:	78fa      	ldrb	r2, [r7, #3]
 8014eb4:	4611      	mov	r1, r2
 8014eb6:	4618      	mov	r0, r3
 8014eb8:	f7f9 f845 	bl	800df46 <HAL_PCD_EP_ClrStall>
 8014ebc:	4603      	mov	r3, r0
 8014ebe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014ec0:	7bfb      	ldrb	r3, [r7, #15]
 8014ec2:	4618      	mov	r0, r3
 8014ec4:	f000 f8cc 	bl	8015060 <USBD_Get_USB_Status>
 8014ec8:	4603      	mov	r3, r0
 8014eca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014ecc:	7bbb      	ldrb	r3, [r7, #14]
}
 8014ece:	4618      	mov	r0, r3
 8014ed0:	3710      	adds	r7, #16
 8014ed2:	46bd      	mov	sp, r7
 8014ed4:	bd80      	pop	{r7, pc}

08014ed6 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014ed6:	b480      	push	{r7}
 8014ed8:	b085      	sub	sp, #20
 8014eda:	af00      	add	r7, sp, #0
 8014edc:	6078      	str	r0, [r7, #4]
 8014ede:	460b      	mov	r3, r1
 8014ee0:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014ee8:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8014eea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	da0c      	bge.n	8014f0c <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8014ef2:	78fb      	ldrb	r3, [r7, #3]
 8014ef4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014ef8:	68f9      	ldr	r1, [r7, #12]
 8014efa:	1c5a      	adds	r2, r3, #1
 8014efc:	4613      	mov	r3, r2
 8014efe:	009b      	lsls	r3, r3, #2
 8014f00:	4413      	add	r3, r2
 8014f02:	00db      	lsls	r3, r3, #3
 8014f04:	440b      	add	r3, r1
 8014f06:	3302      	adds	r3, #2
 8014f08:	781b      	ldrb	r3, [r3, #0]
 8014f0a:	e00b      	b.n	8014f24 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8014f0c:	78fb      	ldrb	r3, [r7, #3]
 8014f0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014f12:	68f9      	ldr	r1, [r7, #12]
 8014f14:	4613      	mov	r3, r2
 8014f16:	009b      	lsls	r3, r3, #2
 8014f18:	4413      	add	r3, r2
 8014f1a:	00db      	lsls	r3, r3, #3
 8014f1c:	440b      	add	r3, r1
 8014f1e:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8014f22:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014f24:	4618      	mov	r0, r3
 8014f26:	3714      	adds	r7, #20
 8014f28:	46bd      	mov	sp, r7
 8014f2a:	bc80      	pop	{r7}
 8014f2c:	4770      	bx	lr

08014f2e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8014f2e:	b580      	push	{r7, lr}
 8014f30:	b084      	sub	sp, #16
 8014f32:	af00      	add	r7, sp, #0
 8014f34:	6078      	str	r0, [r7, #4]
 8014f36:	460b      	mov	r3, r1
 8014f38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014f3a:	2300      	movs	r3, #0
 8014f3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014f3e:	2300      	movs	r3, #0
 8014f40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014f48:	78fa      	ldrb	r2, [r7, #3]
 8014f4a:	4611      	mov	r1, r2
 8014f4c:	4618      	mov	r0, r3
 8014f4e:	f7f8 fe51 	bl	800dbf4 <HAL_PCD_SetAddress>
 8014f52:	4603      	mov	r3, r0
 8014f54:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014f56:	7bfb      	ldrb	r3, [r7, #15]
 8014f58:	4618      	mov	r0, r3
 8014f5a:	f000 f881 	bl	8015060 <USBD_Get_USB_Status>
 8014f5e:	4603      	mov	r3, r0
 8014f60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014f62:	7bbb      	ldrb	r3, [r7, #14]
}
 8014f64:	4618      	mov	r0, r3
 8014f66:	3710      	adds	r7, #16
 8014f68:	46bd      	mov	sp, r7
 8014f6a:	bd80      	pop	{r7, pc}

08014f6c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8014f6c:	b580      	push	{r7, lr}
 8014f6e:	b086      	sub	sp, #24
 8014f70:	af00      	add	r7, sp, #0
 8014f72:	60f8      	str	r0, [r7, #12]
 8014f74:	607a      	str	r2, [r7, #4]
 8014f76:	461a      	mov	r2, r3
 8014f78:	460b      	mov	r3, r1
 8014f7a:	72fb      	strb	r3, [r7, #11]
 8014f7c:	4613      	mov	r3, r2
 8014f7e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014f80:	2300      	movs	r3, #0
 8014f82:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014f84:	2300      	movs	r3, #0
 8014f86:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8014f88:	68fb      	ldr	r3, [r7, #12]
 8014f8a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8014f8e:	893b      	ldrh	r3, [r7, #8]
 8014f90:	7af9      	ldrb	r1, [r7, #11]
 8014f92:	687a      	ldr	r2, [r7, #4]
 8014f94:	f7f8 ff40 	bl	800de18 <HAL_PCD_EP_Transmit>
 8014f98:	4603      	mov	r3, r0
 8014f9a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014f9c:	7dfb      	ldrb	r3, [r7, #23]
 8014f9e:	4618      	mov	r0, r3
 8014fa0:	f000 f85e 	bl	8015060 <USBD_Get_USB_Status>
 8014fa4:	4603      	mov	r3, r0
 8014fa6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8014fa8:	7dbb      	ldrb	r3, [r7, #22]
}
 8014faa:	4618      	mov	r0, r3
 8014fac:	3718      	adds	r7, #24
 8014fae:	46bd      	mov	sp, r7
 8014fb0:	bd80      	pop	{r7, pc}

08014fb2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8014fb2:	b580      	push	{r7, lr}
 8014fb4:	b086      	sub	sp, #24
 8014fb6:	af00      	add	r7, sp, #0
 8014fb8:	60f8      	str	r0, [r7, #12]
 8014fba:	607a      	str	r2, [r7, #4]
 8014fbc:	461a      	mov	r2, r3
 8014fbe:	460b      	mov	r3, r1
 8014fc0:	72fb      	strb	r3, [r7, #11]
 8014fc2:	4613      	mov	r3, r2
 8014fc4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014fc6:	2300      	movs	r3, #0
 8014fc8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014fca:	2300      	movs	r3, #0
 8014fcc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8014fce:	68fb      	ldr	r3, [r7, #12]
 8014fd0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8014fd4:	893b      	ldrh	r3, [r7, #8]
 8014fd6:	7af9      	ldrb	r1, [r7, #11]
 8014fd8:	687a      	ldr	r2, [r7, #4]
 8014fda:	f7f8 fed5 	bl	800dd88 <HAL_PCD_EP_Receive>
 8014fde:	4603      	mov	r3, r0
 8014fe0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014fe2:	7dfb      	ldrb	r3, [r7, #23]
 8014fe4:	4618      	mov	r0, r3
 8014fe6:	f000 f83b 	bl	8015060 <USBD_Get_USB_Status>
 8014fea:	4603      	mov	r3, r0
 8014fec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8014fee:	7dbb      	ldrb	r3, [r7, #22]
}
 8014ff0:	4618      	mov	r0, r3
 8014ff2:	3718      	adds	r7, #24
 8014ff4:	46bd      	mov	sp, r7
 8014ff6:	bd80      	pop	{r7, pc}

08014ff8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014ff8:	b580      	push	{r7, lr}
 8014ffa:	b082      	sub	sp, #8
 8014ffc:	af00      	add	r7, sp, #0
 8014ffe:	6078      	str	r0, [r7, #4]
 8015000:	460b      	mov	r3, r1
 8015002:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801500a:	78fa      	ldrb	r2, [r7, #3]
 801500c:	4611      	mov	r1, r2
 801500e:	4618      	mov	r0, r3
 8015010:	f7f8 feeb 	bl	800ddea <HAL_PCD_EP_GetRxCount>
 8015014:	4603      	mov	r3, r0
}
 8015016:	4618      	mov	r0, r3
 8015018:	3708      	adds	r7, #8
 801501a:	46bd      	mov	sp, r7
 801501c:	bd80      	pop	{r7, pc}
	...

08015020 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8015020:	b480      	push	{r7}
 8015022:	b083      	sub	sp, #12
 8015024:	af00      	add	r7, sp, #0
 8015026:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8015028:	4b02      	ldr	r3, [pc, #8]	; (8015034 <USBD_static_malloc+0x14>)
}
 801502a:	4618      	mov	r0, r3
 801502c:	370c      	adds	r7, #12
 801502e:	46bd      	mov	sp, r7
 8015030:	bc80      	pop	{r7}
 8015032:	4770      	bx	lr
 8015034:	2000097c 	.word	0x2000097c

08015038 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8015038:	b480      	push	{r7}
 801503a:	b083      	sub	sp, #12
 801503c:	af00      	add	r7, sp, #0
 801503e:	6078      	str	r0, [r7, #4]

}
 8015040:	bf00      	nop
 8015042:	370c      	adds	r7, #12
 8015044:	46bd      	mov	sp, r7
 8015046:	bc80      	pop	{r7}
 8015048:	4770      	bx	lr

0801504a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801504a:	b480      	push	{r7}
 801504c:	b083      	sub	sp, #12
 801504e:	af00      	add	r7, sp, #0
 8015050:	6078      	str	r0, [r7, #4]
 8015052:	460b      	mov	r3, r1
 8015054:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8015056:	bf00      	nop
 8015058:	370c      	adds	r7, #12
 801505a:	46bd      	mov	sp, r7
 801505c:	bc80      	pop	{r7}
 801505e:	4770      	bx	lr

08015060 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015060:	b480      	push	{r7}
 8015062:	b085      	sub	sp, #20
 8015064:	af00      	add	r7, sp, #0
 8015066:	4603      	mov	r3, r0
 8015068:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801506a:	2300      	movs	r3, #0
 801506c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801506e:	79fb      	ldrb	r3, [r7, #7]
 8015070:	2b03      	cmp	r3, #3
 8015072:	d817      	bhi.n	80150a4 <USBD_Get_USB_Status+0x44>
 8015074:	a201      	add	r2, pc, #4	; (adr r2, 801507c <USBD_Get_USB_Status+0x1c>)
 8015076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801507a:	bf00      	nop
 801507c:	0801508d 	.word	0x0801508d
 8015080:	08015093 	.word	0x08015093
 8015084:	08015099 	.word	0x08015099
 8015088:	0801509f 	.word	0x0801509f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801508c:	2300      	movs	r3, #0
 801508e:	73fb      	strb	r3, [r7, #15]
    break;
 8015090:	e00b      	b.n	80150aa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015092:	2302      	movs	r3, #2
 8015094:	73fb      	strb	r3, [r7, #15]
    break;
 8015096:	e008      	b.n	80150aa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015098:	2301      	movs	r3, #1
 801509a:	73fb      	strb	r3, [r7, #15]
    break;
 801509c:	e005      	b.n	80150aa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801509e:	2302      	movs	r3, #2
 80150a0:	73fb      	strb	r3, [r7, #15]
    break;
 80150a2:	e002      	b.n	80150aa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80150a4:	2302      	movs	r3, #2
 80150a6:	73fb      	strb	r3, [r7, #15]
    break;
 80150a8:	bf00      	nop
  }
  return usb_status;
 80150aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80150ac:	4618      	mov	r0, r3
 80150ae:	3714      	adds	r7, #20
 80150b0:	46bd      	mov	sp, r7
 80150b2:	bc80      	pop	{r7}
 80150b4:	4770      	bx	lr
 80150b6:	bf00      	nop

080150b8 <memset>:
 80150b8:	4603      	mov	r3, r0
 80150ba:	4402      	add	r2, r0
 80150bc:	4293      	cmp	r3, r2
 80150be:	d100      	bne.n	80150c2 <memset+0xa>
 80150c0:	4770      	bx	lr
 80150c2:	f803 1b01 	strb.w	r1, [r3], #1
 80150c6:	e7f9      	b.n	80150bc <memset+0x4>

080150c8 <__libc_init_array>:
 80150c8:	b570      	push	{r4, r5, r6, lr}
 80150ca:	2600      	movs	r6, #0
 80150cc:	4d0c      	ldr	r5, [pc, #48]	; (8015100 <__libc_init_array+0x38>)
 80150ce:	4c0d      	ldr	r4, [pc, #52]	; (8015104 <__libc_init_array+0x3c>)
 80150d0:	1b64      	subs	r4, r4, r5
 80150d2:	10a4      	asrs	r4, r4, #2
 80150d4:	42a6      	cmp	r6, r4
 80150d6:	d109      	bne.n	80150ec <__libc_init_array+0x24>
 80150d8:	f000 f81a 	bl	8015110 <_init>
 80150dc:	2600      	movs	r6, #0
 80150de:	4d0a      	ldr	r5, [pc, #40]	; (8015108 <__libc_init_array+0x40>)
 80150e0:	4c0a      	ldr	r4, [pc, #40]	; (801510c <__libc_init_array+0x44>)
 80150e2:	1b64      	subs	r4, r4, r5
 80150e4:	10a4      	asrs	r4, r4, #2
 80150e6:	42a6      	cmp	r6, r4
 80150e8:	d105      	bne.n	80150f6 <__libc_init_array+0x2e>
 80150ea:	bd70      	pop	{r4, r5, r6, pc}
 80150ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80150f0:	4798      	blx	r3
 80150f2:	3601      	adds	r6, #1
 80150f4:	e7ee      	b.n	80150d4 <__libc_init_array+0xc>
 80150f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80150fa:	4798      	blx	r3
 80150fc:	3601      	adds	r6, #1
 80150fe:	e7f2      	b.n	80150e6 <__libc_init_array+0x1e>
 8015100:	080151c8 	.word	0x080151c8
 8015104:	080151c8 	.word	0x080151c8
 8015108:	080151c8 	.word	0x080151c8
 801510c:	080151cc 	.word	0x080151cc

08015110 <_init>:
 8015110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015112:	bf00      	nop
 8015114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015116:	bc08      	pop	{r3}
 8015118:	469e      	mov	lr, r3
 801511a:	4770      	bx	lr

0801511c <_fini>:
 801511c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801511e:	bf00      	nop
 8015120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015122:	bc08      	pop	{r3}
 8015124:	469e      	mov	lr, r3
 8015126:	4770      	bx	lr
